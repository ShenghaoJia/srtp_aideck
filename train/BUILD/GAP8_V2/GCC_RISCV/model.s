
/module/data/BUILD/GAP8_V2/GCC_RISCV/model:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc 00000390  00000004  1b000004  00001004  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .stack        00001038  1b000398  1b000398  00001398  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .vectors      000000a0  1c000000  1c000000  00003000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000d314  1c0000a0  1c0000a0  000030a0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .init_array   00000040  1c00d3b4  1c00d3b4  000103b4  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  1c00d3f4  1c00d3f4  000103f4  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .init         00000000  1c00d400  1c00d400  00011044  2**0  CONTENTS, ALLOC, LOAD, CODE
  7 .fini         00000000  1c00d400  1c00d400  00011044  2**0  CONTENTS, ALLOC, LOAD, CODE
  8 .preinit_array 00000000  1c00d400  1c00d400  00011044  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .boot         00000000  1c00d400  1c00d400  00011044  2**0  CONTENTS
 10 .got          00000000  1c00d400  1c00d400  00011044  2**0  CONTENTS, ALLOC, LOAD, DATA
 11 .shbss        00000000  1c00d400  1c00d400  00011044  2**0  CONTENTS
 12 .gnu.offload_funcs 00000000  1c00d400  1c00d400  00011044  2**0  CONTENTS
 13 .gnu.offload_vars 00000000  1c00d400  1c00d400  00011044  2**0  CONTENTS
 14 .rodata       000008a0  1c00d400  1c00d400  00010400  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .data         000002d4  1c00dca0  1c00dca0  00010ca0  2**2  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          00000320  1c00df74  1c00df74  00010f74  2**2  ALLOC
 17 .data_tiny_l1 00000018  00000004  1c00e294  00011004  2**2  CONTENTS, ALLOC, LOAD, DATA
 18 .l1cluster_g  00000028  1000001c  1c00e2ac  0001101c  2**2  CONTENTS, ALLOC, LOAD, DATA
 19 .bss_l1       00000000  10000044  10000044  00011044  2**0  CONTENTS
 20 .debug_frame  0000bde8  00000000  00000000  00011044  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   000c9700  00000000  00000000  0001ce2c  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 0000ea6d  00000000  00000000  000e652c  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00064a4d  00000000  00000000  000f4f99  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 00001e60  00000000  00000000  001599e8  2**3  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 00009930  00000000  00000000  0015b848  2**3  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   00034076  00000000  00000000  00165178  2**0  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    0000f40d  00000000  00000000  001991ee  2**0  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000001a  00000000  00000000  001a85fb  2**0  CONTENTS, READONLY
 29 .Pulp_Chip.Info 0000004e  00000000  00000000  001a8615  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1b000398 l    d  .stack	00000000 .stack
1c000000 l    d  .vectors	00000000 .vectors
1c0000a0 l    d  .text	00000000 .text
1c00d3b4 l    d  .init_array	00000000 .init_array
1c00d3f4 l    d  .fini_array	00000000 .fini_array
1c00d400 l    d  .init	00000000 .init
1c00d400 l    d  .fini	00000000 .fini
1c00d400 l    d  .preinit_array	00000000 .preinit_array
1c00d400 l    d  .boot	00000000 .boot
1c00d400 l    d  .got	00000000 .got
1c00d400 l    d  .shbss	00000000 .shbss
1c00d400 l    d  .gnu.offload_funcs	00000000 .gnu.offload_funcs
1c00d400 l    d  .gnu.offload_vars	00000000 .gnu.offload_vars
1c00d400 l    d  .rodata	00000000 .rodata
1c00dca0 l    d  .data	00000000 .data
1c00df74 l    d  .bss	00000000 .bss
00000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
1000001c l    d  .l1cluster_g	00000000 .l1cluster_g
10000044 l    d  .bss_l1	00000000 .bss_l1
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .Pulp_Chip.Info	00000000 .Pulp_Chip.Info
00000000 l    df *ABS*	00000000 bridge.c
1c009b46 l     F .text	0000001c __rt_event_enqueue
1c009b62 l     F .text	00000020 __rt_bridge_check_bridge_req.part.5
1c009b82 l     F .text	00000046 __rt_bridge_wait
00000004 l     O .data_tiny_fc	00000004 __rt_bridge_flash_handle
00000008 l     O .data_tiny_fc	00000004 __rt_bridge_flash_type
0000000c l     O .data_tiny_fc	00000004 __rt_bridge_flash_itf
00000010 l     O .data_tiny_fc	00000004 __rt_bridge_flash_cs
00000014 l     O .data_tiny_fc	00000004 __rt_bridge_eeprom_handle
00000000 l    df *ABS*	00000000 events.c
00000000 l    df *ABS*	00000000 periph-v2.c
00000000 l    df *ABS*	00000000 hyperram-v1.c
1c00b12e l     F .text	00000014 l2_memcpy
1c00b142 l     F .text	00000024 rt_event_enqueue
1c00b166 l     F .text	00000032 pi_task_wait_on.isra.4
1c00b456 l     F .text	0000004a __pi_hyper_copy_exec
1c00b5ba l     F .text	00000296 __pi_hyper_copy_misaligned
1c00b4a0 l     F .text	00000056 __pi_hyper_copy
1c00b568 l     F .text	00000052 exec_pending_task
1c00b850 l     F .text	0000009e __pi_hyper_copy_2d
1c00b92c l     F .text	0000002e __rt_hyper_init
1c00e054 l     O .bss	00000080 __pi_hyper_temp_buffer
1c00db64 l     O .rodata	00000034 __hyper_pad
1c00e210 l     O .bss	00000004 __pi_hyper_cluster_reqs_first
1c00e214 l     O .bss	00000004 __rt_hyper_open_count
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 conf.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 utils.c
1c009966 l     F .text	0000007c __rt_fc_cluster_lock_req
1b000ba0 l     O .stack	00000018 cbsys_first
00000000 l    df *ABS*	00000000 himax.c
00000000 l    df *ABS*	00000000 io.c
1c00bb94 l     F .text	0000000e __rt_io_end_of_flush
1c00bba2 l     F .text	00000050 __rt_io_uart_wait_req
1c00bbf2 l     F .text	00000042 __rt_do_putc_host
1c00bc34 l     F .text	0000005a __rt_io_start
1c00bc8e l     F .text	00000020 rt_event_execute.isra.4.constprop.12
1c00bcae l     F .text	00000070 __rt_io_lock
1c00bd1e l     F .text	00000034 __rt_putc_host_cluster_req
1c00bd52 l     F .text	00000070 __rt_io_unlock
1c00bdc2 l     F .text	000000da __rt_io_uart_flush.constprop.11
1c00be9c l     F .text	00000092 __rt_io_uart_wait_pending
1c00bf2e l     F .text	00000028 __rt_io_stop
1c00c09a l     F .text	000000ac tfp_putc.isra.9
1c00e16c l     O .bss	00000080 __rt_io_event
1b000bbc l     O .stack	00000010 __rt_io_fc_lock
1c00def4 l     O .data	00000080 __rt_putc_host_buffer
1c00e224 l     O .bss	00000004 __rt_io_event_current
1c00e228 l     O .bss	00000004 __rt_io_pending_flush
1c00e22c l     O .bss	00000004 __rt_putc_host_buffer_index
1c00e230 l     O .bss	00000004 _rt_io_uart
00000000 l    df *ABS*	00000000 crt0.o
1c000094 l       .vectors	00000000 __rt_no_irq_handler
00000000 l    df *ABS*	00000000 sched.o
1c000132 l       .text	00000000 __rt_handle_special_event
1c00012c l       .text	00000000 __rt_no_first
1c00012e l       .text	00000000 __rt_common
1c000130 l       .text	00000000 enqueue_end
1c000192 l       .text	00000000 __rt_remote_enqueue_event_loop_cluster
1c0001ce l       .text	00000000 __rt_remote_enqueue_event_loop_cluster_continue
1c0001b8 l       .text	00000000 __rt_cluster_pool_update_end
1c0001a0 l       .text	00000000 __rt_cluster_pool_update_loop
1c0001a8 l       .text	00000000 __rt_cluster_pool_update_loop_end
1c0001b0 l       .text	00000000 __rt_cluster_pool_update_no_current
1c0001ec l       .text	00000000 __rt_remote_enqueue_event_loop_next_cluster
00000000 l    df *ABS*	00000000 vectors.o
1c000266 l       .text	00000000 __rt_call_c_function
00000000 l    df *ABS*	00000000 udma-v2.o
1c000356 l       .text	00000000 __rt_udma_no_copy
1c00031e l       .text	00000000 repeat_transfer
1c00036e l       .text	00000000 handle_special_end
1c0002ca l       .text	00000000 resume_after_special_end
1c000308 l       .text	00000000 checkTask
1c0002de l       .text	00000000 __rt_udma_call_enqueue_callback_resume
1c000304 l       .text	00000000 transfer_resume
1c0002fc l       .text	00000000 hyper
1c0002fc l       .text	00000000 fc_tcdm
1c0002fc l       .text	00000000 dual
1c00031e l       .text	00000000 dmaCmd
1c000346 l       .text	00000000 not_last
1c0003b6 l       .text	00000000 i2c_step1
1c0003d2 l       .text	00000000 i2c_step2
1c000378 l       .text	00000000 spim_step3
1c000394 l       .text	00000000 spim_step2
00000000 l    df *ABS*	00000000 soc_event_eu.o
1c000426 l       .text	00000000 __rt_fc_socevents_not_hyper_rx
1c00042c l       .text	00000000 __rt_fc_socevents_not_hyper_tx
1c000446 l       .text	00000000 __rt_soc_evt_no_udma_channel
1c0004b4 l       .text	00000000 rtc_event_handler
1c000472 l       .text	00000000 __rt_soc_evt_pwm
1c000486 l       .text	00000000 __rt_soc_evt_store
1c00049a l       .text	00000000 socevents_set
00000000 l    df *ABS*	00000000 hyperram-v1_asm.o
1c000514 l       .text	00000000 __rt_hyper_handle_copy_end
1c0004ce l       .text	00000000 __rt_hyper_repeat_copy
1c000500 l       .text	00000000 __rt_hyper_repeat_copy_not_last
1c000526 l       .text	00000000 __rt_hyper_handle_emu_task
1c000540 l       .text	00000000 __rt_hyper_handle_pending_tasks
1c0005a2 l       .text	00000000 __rt_hyper_repeat_copy_not_last2
00000000 l    df *ABS*	00000000 gpio.o
1c0005f0 l       .text	00000000 __rt_gpio_handler_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 model.c
1c000f74 l     F .text	000000c0 cluster
00000000 l    df *ABS*	00000000 modelKernels.c
1c00df78 l     O .bss	0000001c HyperFlash
1c00df94 l     O .bss	0000000c HyperRam
00000000 l    df *ABS*	00000000 ImgIO.c
00000000 l    df *ABS*	00000000 CNN_Activation_SQ8.c
1c0050de l     F .text	0000012e KerReductIO_Compact_SQ8_1
00000000 l    df *ABS*	00000000 CNN_Bias_Linear_SQ8.c
00000000 l    df *ABS*	00000000 CNN_Conv_SQ8.c
1c005548 l     F .text	0000001a LastDefinedOutput
1c005562 l     F .text	00000120 KerConv3x3Stride1_Body_2Out_SQ8
1c005682 l     F .text	00000138 KerConv2x3from3x3Stride1_V_2Out_SQ8
1c0057ba l     F .text	0000009a KerConv3x2from3x3Stride1_H_2Out_SQ8
1c005854 l     F .text	000000fe KerConv3x3BorderStride1_2Out_SQ8
1c005952 l     F .text	000000cc KerConv3x3Stride1_Body_SQ8
1c005a1e l     F .text	000000c8 KerConv2x3from3x3Stride1_V_SQ8
1c005ae6 l     F .text	00000056 KerConv3x2from3x3Stride1_H_SQ8
1c005b3c l     F .text	000000f0 KerConv3x3BorderStride1_SQ8
1c005c2c l     F .text	000000d4 KerConv3x3Stride2_Body_SQ8
1c005d00 l     F .text	000000d2 KerConv2x3from3x3Stride2_V_SQ8
1c005dd2 l     F .text	0000005c KerConv3x2from3x3Stride2_H_SQ8
1c005e2e l     F .text	000000f8 KerConv3x3BorderStride2_SQ8
00000000 l    df *ABS*	00000000 CNN_Pooling_SQ8.c
1c006308 l     F .text	0000001a LastDefinedOutput
1c006322 l     F .text	000003c8 KerMaxPool2x2Stride2_SQ8
1c0066ea l     F .text	0000028e KerAvgPool2x2Stride2_SQ8
1c006978 l     F .text	0000007c Ker_ActivationScale1_SQ8
1c0069f4 l     F .text	00000220 Ker_Activation_SQ8
1c006c14 l     F .text	000000d8 KerParPoolActivation
00000000 l    df *ABS*	00000000 CNN_SoftMax_SQ8.c
10000020 l     O .l1cluster_g	00000020 Reduct.15734
1c00d9d0 l     O .rodata	00000012 ExpCoeffLUT
1c00d9e4 l     O .rodata	00000018 FractionExpLUT
1c00d9fc l     O .rodata	00000018 IntegerExpLUT
00000000 l    df *ABS*	00000000 norm_transpose.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 fs.c
1c0071bc l     F .text	00000032 pi_task_wait_on.isra.3
00000000 l    df *ABS*	00000000 read_fs.c
1c0072b2 l     F .text	00000008 pi_flash_read_async
1c0072ba l     F .text	0000003e __pi_read_fs_write
1c0072f8 l     F .text	00000010 __pi_read_fs_seek
1c007308 l     F .text	00000040 __pi_read_fs_direct_read_async
1c007348 l     F .text	00000018 __pi_read_fs_copy_async
1c007360 l     F .text	00000018 __pi_read_fs_copy_2d_async
1c007378 l     F .text	00000024 rt_event_enqueue
1c00739c l     F .text	00000038 __pi_fs_free
1c0073d4 l     F .text	00000004 __pi_read_fs_unmount
1c0073d8 l     F .text	00000126 __pi_read_fs_open
1c0074fe l     F .text	00000126 __pi_fs_mount_step
1c007624 l     F .text	0000004e __pi_read_fs_close
1c007672 l     F .text	00000098 __pi_read_fs_mount
1c00770a l     F .text	00000072 __pi_fs_read_cached
1c00785c l     F .text	00000092 __pi_read_fs_try_read
1c0078ee l     F .text	00000040 __pi_read_fs_read_async
00000000 l    df *ABS*	00000000 host_fs.c
1c00792e l     F .text	0000000c __pi_host_fs_mount
1c00793a l     F .text	00000002 __pi_host_fs_unmount
1c00793c l     F .text	00000024 rt_event_enqueue
1c007960 l     F .text	00000006 __pi_host_fs_seek
1c007966 l     F .text	0000007e __pi_host_fs_copy_2d_async
1c0079e4 l     F .text	00000028 __pi_host_fs_write_async
1c007a0c l     F .text	00000024 __pi_host_fs_read_async
1c007a30 l     F .text	00000042 __pi_host_fs_copy_async
1c007a72 l     F .text	00000002 __pi_host_fs_direct_read_async
1c007a74 l     F .text	0000001c __pi_host_fs_close
1c007a90 l     F .text	0000005c __pi_host_fs_open
1c00dfa0 l     O .bss	00000088 bsp_fs_data
00000000 l    df *ABS*	00000000 hyperflash.c
1c007aec l     F .text	0000001c __rt_event_enqueue
1c007b08 l     F .text	0000000e hyperflash_ioctl
1c007b16 l     F .text	00000040 hyperflash_stall_task
1c007b56 l     F .text	00000088 hyperflash_read_2d_async
1c007dce l     F .text	00000100 hyperflash_handle_pending_task
1c007bde l     F .text	00000018 hyperflash_copy_2d_async
1c007bf6 l     F .text	0000000e hyperflash_set_reg_exec
1c007c04 l     F .text	000000b0 hyperflash_erase_sector_async
1c0083e6 l     F .text	00000052 hyperflash_check_erase
1c007cb4 l     F .text	000000a6 hyperflash_erase_chip_async
1c007d5a l     F .text	00000074 hyperflash_read_async
1c008030 l     F .text	0000005c hyperflash_program_async
1c007f2c l     F .text	00000054 hyperflash_reg_set_async
1c007ece l     F .text	0000005e hyperflash_reg_get_async
1c007f80 l     F .text	000000b0 hyperflash_program_resume
1c008438 l     F .text	00000050 hyperflash_check_program
1c00808c l     F .text	0000001a hyperflash_copy_async
1c0080a6 l     F .text	0000001e hyperflash_close
1c0080c4 l     F .text	00000090 hyperflash_open
1c008154 l     F .text	00000032 pi_task_wait_on.isra.3
1c008186 l     F .text	0000002a hyperflash_copy_2d
1c0081b0 l     F .text	00000022 hyperflash_erase_sector
1c0081d2 l     F .text	00000022 hyperflash_erase_chip
1c0081f4 l     F .text	00000022 hyperflash_read
1c008216 l     F .text	00000022 hyperflash_reg_get
1c008238 l     F .text	00000022 hyperflash_reg_set
1c00825a l     F .text	00000022 hyperflash_program
1c00827c l     F .text	0000002c hyperflash_copy
1c0082a8 l     F .text	000000aa hyperflash_erase_resume
1c008352 l     F .text	00000042 hyperflash_erase_async
1c008394 l     F .text	00000022 hyperflash_erase
1c0083b6 l     F .text	00000030 hyperflash_get_status_reg
1c00dd18 l     O .data	00000054 hyperflash_api
00000000 l    df *ABS*	00000000 hyperram.c
1c0084da l     F .text	00000012 hyperram_copy_2d_async
1c0084ec l     F .text	00000010 hyperram_copy_async
1c0084fc l     F .text	00000022 hyperram_close
1c00851e l     F .text	0000009a hyperram_open
1c00dd6c l     O .data	00000018 hyperram_api
00000000 l    df *ABS*	00000000 ram.c
1c0085d2 l     F .text	00000070 __pi_ram_cluster_req
1c008642 l     F .text	0000001e __pi_ram_cluster_req_done
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 flash_partition.c
00000000 l    df *ABS*	00000000 md5.c
1c008ac2 l     F .text	000008d6 body
00000000 l    df *ABS*	00000000 semihost.c
1c00959e l     F .text	0000000e __internal_semihost
00000000 l    df *ABS*	00000000 ai_deck.c
1c00963e l     F .text	0000003c __bsp_init_pads
1c00e204 l     O .bss	00000004 __bsp_init_pads_done
00000000 l    df *ABS*	00000000 init.c
1c0096bc l     F .text	00000026 cluster_start
1c00d3b8 l     O .init_array	00000004 ctor_list
1c00d3f8 l     O .fini_array	00000004 dtor_list
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 alloc.c
00000000 l    df *ABS*	00000000 time.c
1c00a1bc l     F .text	00000018 __rt_time_poweroff
1c00a1d4 l     F .text	00000018 __rt_time_poweron
1c00e208 l     O .bss	00000004 timer_count
00000000 l    df *ABS*	00000000 time_irq.c
00000000 l    df *ABS*	00000000 freq.c
00000000 l    df *ABS*	00000000 pmu_driver.c
1c00a678 l     F .text	0000002c SetFllMultDivFactors
1c00a6a4 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00dea8 l     O .data	00000007 SystemStateToSCUFastSeq
1c00dec0 l     O .data	00000003 ToHWDCDC_Pos
1c00ded0 l     O .data	00000004 RetPMUStateToPMUState
00000000 l    df *ABS*	00000000 cluster.c
1c00aac4 l     F .text	00000062 __rt_init_cluster_data
1c00ab26 l     F .text	00000064 __rt_cluster_init
1c00ab8a l     F .text	0000012a __rt_cluster_mount_step
00000000 l    df *ABS*	00000000 pulpos_emu.c
1c00ae70 l     F .text	0000003c __rt_cluster_pulpos_emu_init
1c00e028 l     O .bss	0000002c __rt_pulpos_emu_global_cluster_task
1c00e20c l     O .bss	00000004 __rt_fc_cluster_device
00000000 l    df *ABS*	00000000 cluster_call.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 gpio-v2.c
1c00e0d4 l     O .bss	00000098 __rt_gpio
00000000 l    df *ABS*	00000000 i2s-v1.c
1c00ba76 l     F .text	00000034 __rt_i2s_resume
1c00baaa l     F .text	0000002a __rt_i2s_setfreq_after
1c00bad4 l     F .text	0000002c __rt_i2s_setfreq_before
1c00e218 l     O .bss	00000004 __rt_i2s_first
00000000 l    df *ABS*	00000000 i2c-v2.c
1c00ded4 l     O .data	00000020 __rt_i2c
00000000 l    df *ABS*	00000000 spim-v2.c
1c00e21c l     O .bss	00000008 __rt_spim_open_count
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 prf.c
1c00c308 l     F .text	00000092 _to_x
1c00c39a l     F .text	00000020 _rlrshift
1c00c3ba l     F .text	00000044 _ldiv5
1c00c3fe l     F .text	00000034 _get_digit
00000000 l    df *ABS*	00000000 uart.c
1c00cf0e l     F .text	00000024 __rt_uart_setup.isra.5
1c00cf32 l     F .text	00000022 __rt_uart_setfreq_after
1c00cf54 l     F .text	00000042 __rt_uart_wait_tx_done.isra.6
1c00cf96 l     F .text	0000002c __rt_uart_setfreq_before
1c00cfc2 l     F .text	00000042 __rt_uart_cluster_req
1c00d004 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00e1ec l     O .bss	00000010 __rt_uart
00000000 l    df *ABS*	00000000 pe-eu-v3.o
1c00d2c2 l       .text	00000000 __rt_slave_start
1c00d218 l       .text	00000000 __rt_master_event
1c00d22c l       .text	00000000 __rt_master_loop
1c00d21c l       .text	00000000 __rt_push_event_to_fc_retry
1c00d2b4 l       .text	00000000 __rt_push_event_to_fc_wait
1c00d2a6 l       .text	00000000 __rt_master_sleep
1c00d234 l       .text	00000000 __rt_master_loop_update_next
1c00d288 l       .text	00000000 __rt_no_stack_check
1c00d294 l       .text	00000000 __rt_master_no_slave_barrier
1c00d2a4 l       .text	00000000 __rt_master_loop_no_slave
1c00d2e0 l       .text	00000000 __rt_fork_return
1c00d2e4 l       .text	00000000 __rt_wait_for_dispatch
1c00d2fa l       .text	00000000 __rt_other_entry
1c00d2f4 l       .text	00000000 __rt_fork_entry
1c00d322 l       .text	00000000 __rt_no_stack_check_end
1c00d394 l       .text	00000000 __rt_dma_2d_done
1c00d352 l       .text	00000000 __rt_dma_2d_redo
1c00d35a l       .text	00000000 __rt_dma_2d_not_last
1c00d37c l       .text	00000000 __rt_dma_2d_exit
00000000 l    df *ABS*	00000000 libgcc2.c
1c00b4f6 g     F .text	00000016 pi_hyper_read_async
1c00c1bc g     F .text	00000006 putchar
1c0071ae g     F .text	0000000c pi_flash_open
00000000 g       *ABS*	00000000 __rt_debug_init_config_trace
00000350 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_stride
1c00a19e g     F .text	0000000e pi_l2_malloc
1c009ad8 g     F .text	00000038 __rt_fc_cluster_lock
1c00a83a g     F .text	000000a4 InitOneFll
1c00a1ac g     F .text	00000010 pi_l2_free
00000000 g       *ABS*	00000000 __RT_DEBUG_CONFIG
1c00e268 g     O .bss	00000004 __rt_cluster_tasks
1c009caa g     F .text	00000022 __rt_bridge_send_notif
1c005408 g     F .text	00000140 KerParLinearLayer_SQ8
1c009e1c g     F .text	00000076 rt_event_alloc
00000338 g     O .data_tiny_fc	00000001 __rt_hyper_pending_emu_do_memcpy
1c00b8ee g     F .text	00000018 pi_hyper_read_2d_async
1c009602 g     F .text	0000001e semihost_write
1c009ef2 g     F .text	00000064 __rt_event_execute
1c009914 g     F .text	00000052 __rt_irq_init
1c009fda g     F .text	00000048 rt_user_alloc
00000310 g     O .data_tiny_fc	00000004 __rt_hyper_pending_hyper_addr
1c00acba g     F .text	000000d8 pi_cluster_open
1c00c2dc g     F .text	0000002c printf
ffffffff g       *ABS*	00000000 pulp__L2
1c00a11a g     F .text	00000072 __rt_allocs_init
1c00e24c g     O .bss	00000004 __rt_alloc_l1
1c00acb4 g     F .text	00000006 pi_cluster_conf_init
ffffffff g       *ABS*	00000000 pulp__PE
1c00b360 g     F .text	0000009e pi_hyper_close
1c009876 g     F .text	0000004c rt_irq_set_handler
00000314 g     O .data_tiny_fc	00000004 __rt_hyper_pending_addr
1c007200 g     F .text	0000002c pi_fs_mount
00000308 g     O .data_tiny_fc	00000004 __rt_hyper_udma_handle
1c00a9a8 g     F .text	00000044 InitFlls
00000018 g     O .data_tiny_fc	00000004 __rt_first_free
1c00884c g     F .text	0000000a pi_partition_get_flash_offset
1c00967a g     F .text	00000018 bsp_hyperram_conf_init
00000001 g       *ABS*	00000000 __ACTIVE_FC
1c000c5e g     F .text	000001fe .hidden __divsf3
1c00a09e g     F .text	0000002e rt_free
1c008858 g     F .text	00000004 pi_partition_table_load
00000400 g       *ABS*	00000000 __rt_cl_slave_stack_size
1c00a63a g     F .text	0000003e __rt_freq_init
1c0096e2 g     F .text	00000168 __rt_init
00000001 g       *ABS*	00000000 __FC
1c00aaa8 g     F .text	00000012 __rt_fll_init
1c00dea4 g     O .data	00000004 model_L2_Memory
1b0013d0 g       .stack	00000000 __fc_tcdm_end
1c00b98e g     F .text	00000058 rt_extern_alloc_init
1c009da8 g     F .text	00000034 __rt_bridge_init
00000018 g     O .data_tiny_l1	00000004 __rt_cluster_nb_active_pe
1c002346 g     F .text	00000bd2 S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu
0000032c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_hyper_addr
1c0017aa g     F .text	00000b9c S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu
1c00bb5e g     F .text	00000012 __rt_i2c_init
1c001034 g     F .text	00000222 test_model
1c00d3b4 g       .text	00000000 _etext
0000030c g     O .data_tiny_fc	00000004 __rt_hyper_pending_base
1c00dca0 g       .data	00000000 sdata
1c0095e4 g     F .text	0000001e semihost_read
00000001 g       *ABS*	00000000 __rt_nb_cluster
1c0096ac g     F .text	00000010 bsp_hyperflash_open
1c008488 g     F .text	00000028 pi_hyperflash_conf_init
1c008708 g     F .text	00000052 extern_alloc_init
00000390 g     O .data_tiny_fc	00000004 __rtc_handler
1c00a06e g     F .text	00000030 rt_alloc
1c00dca0 g     O .data	00000014 AT_GraphNodeNames
1c00cee8 g     F .text	00000026 __rt_uart_cluster_req_done
1c00984a g     F .text	00000028 __rt_deinit
1b000bb8 g     O .stack	00000001 camera_isAwaked
1c00010e g       .text	00000000 __rt_event_enqueue
1c00a266 g     F .text	00000024 rt_time_wait_us
1c00bfb0 g     F .text	00000036 memcpy
1c0005da g       .text	00000000 __rt_gpio_handler
1c000246 g       .text	00000000 __rt_illegal_instr
1c00a0f0 g     F .text	0000002a __rt_alloc_init_l1_for_fc
1c00b906 g     F .text	0000001a pi_hyper_write_2d_async
1c006cec g     F .text	0000018e KerParPool2x2Stride2_ReLU_SQ8
1c00727a g     F .text	00000026 pi_fs_write
1c00b982 g     F .text	0000000c __rt_padframe_init
1c00d400 g       .fini_array	00000000 __DTOR_END__
0000020c g       *ABS*	00000000 __cluster_text_size
1c0004c8 g       .text	00000000 __rt_hyper_handle_copy
1c00c146 g     F .text	0000002c puts
1c00ddb4  w    O .data	00000018 __rt_padframe_profiles
00000330 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_addr
00000344 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks_last
1c009eac g     F .text	00000022 rt_event_get_blocking
1c00df78 g       .bss	00000000 _bss_start
1c00df74 g       .data	00000000 edata
1c00a0cc g     F .text	00000024 __rt_alloc_init_l1
1c00de94  w    O .data	00000004 __rt_iodev_uart_baudrate
1c000174 g       .text	00000000 __rt_remote_enqueue_event
1c00deb0 g     O .data	00000010 PMUState
1c0086ae g     F .text	0000005a pi_cl_ram_copy_2d
1c00dca0 g       .data	00000000 _sdata
1c009fb2 g     F .text	00000008 pi_cl_send_task_to_fc
1c0084b0 g     F .text	0000001e hyperram_alloc
10000044 g       .l1cluster_g	00000000 __l1_end
1c000560 g       .text	00000000 __rt_hyper_handle_burst
1c00a408 g     F .text	00000134 rt_periph_copy
1c00c05e g     F .text	0000003c __rt_putc_uart
1b000398 g     O .stack	00000800 __rt_fc_stack
1c00875a g     F .text	00000008 extern_alloc_deinit
00000010 g     O .data_tiny_l1	00000004 __rt_dma_last_pending
1c00013c g       .text	00000000 __rt_bridge_enqueue_event
1c000eec g     F .text	00000088 .hidden __extendsfdf2
1c00c432 g     F .text	00000ab6 _prf
1c00520c g     F .text	0000009a KerParReduct_CC_SQ8
10000044 g       .l1cluster_g	00000000 _libgomp_start
1c000930 g     F .text	0000032e .hidden __umoddi3
1c004796 g     F .text	000000a2 SkipCommentAndWhiteSpace
1c00a316 g     F .text	000000f2 __rt_timer_handler
1c00e250 g     O .bss	00000004 __rt_alloc_l2
1c004642 g     F .text	00000154 modelCNN
1b0013d0 g       .stack	00000000 stack
1c0005f4 g     F .text	0000033c .hidden __udivdi3
1c00866c g     F .text	00000042 pi_cl_ram_copy
1c00c260 g     F .text	0000000a abort
1c007234 g     F .text	00000008 pi_fs_open
1c009e92 g     F .text	0000001a rt_event_get
1c00e25c g     O .bss	00000008 __rt_freq_domains
00000040 g       *ABS*	00000000 _l1_preload_size
1c00010c g       .text	00000000 _init
1c0087c0 g     F .text	0000008c extern_free
1c00e294 g       .bss	00000000 _bss_end
1c008a56 g     F .text	0000006c flash_partition_find_first
1c00dd94  w    O .data	00000010 __rt_padframe_hyper
1c009c8c g     F .text	0000001e __rt_bridge_set_available
1c004838 g     F .text	000000b2 ReadValue
1c00d324 g       .text	00000000 __rt_dma_2d
1c00d1a8 g       .text	00000000 __rt_pe_start
1c00e258 g     O .bss	00000004 first_delayed
1c00dcb4 g     O .data	00000014 AT_GraphOperInfosNames
0000038c g     O .data_tiny_fc	00000004 __rt_rtc_init_done
1c003b20 g     F .text	00000290 S5_SoftMax
00000008 g       *ABS*	00000000 __NB_ACTIVE_PE
1c0052a6 g     F .text	000000ae KerParReductIO_CC_SQ8
1c00b092 g     F .text	0000004a pi_cluster_send_task_to_cl
1c00a8de g     F .text	000000ca __rt_pmu_cluster_power_up
1b000bd0 g       .stack	00000000 stack_start
00000004 g     O .data_tiny_l1	0000000c __rt_cluster_pool
00010000 g       *ABS*	00000000 __L1Cl
1c00616a g     F .text	0000019e KerParConv3x3Stride2_SQ8
1c00d03a g     F .text	0000008e __rt_uart_open
1c00b546 g     F .text	00000022 pi_hyper_write
1c009a50 g     F .text	00000022 __rt_utils_init
1c00af98 g     F .text	000000fa pi_cluster_send_task_to_cl_async
1c00777c g     F .text	000000e0 __pi_fs_read
1c00dd84  w    O .data	00000010 __rt_padframe_default
1c00c172 g     F .text	0000001a fputc_locked
1c00a192 g     F .text	0000000c pi_cl_l1_free
1c0072aa g     F .text	00000008 pi_fs_seek
1c007158 g     F .text	00000056 CNN_NormBW_offset_fps
1c00d0c8 g     F .text	0000004e rt_uart_close
1c00b200 g     F .text	00000160 pi_hyper_open
1c00a022 g     F .text	0000004c rt_user_free
1c00724c g     F .text	00000026 pi_fs_read
1c00d3b4 g       .init_array	00000000 __CTOR_LIST__
1c00a53c g     F .text	00000056 __rt_periph_wait_event
1c00a5f0 g     F .text	0000004a rt_freq_set_and_get
1c0085b8 g     F .text	0000001a pi_hyperram_conf_init
1c0095ac g     F .text	00000006 semihost_write0
1c0098c2  w    F .text	00000002 illegal_insn_handler_c
0000033c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_task
1c00adc4 g     F .text	00000070 __rt_cluster_push_fc_event
1c00e1fc g     O .bss	00000004 model_L3_Flash
00000320 g     O .data_tiny_fc	00000004 __rt_hyper_end_task
1c00d1a8 g       .text	00000000 __cluster_text_start
1c00b52e g     F .text	00000018 pi_hyper_write_async
1c000080 g       .vectors	00000000 _start
1c00b50c g     F .text	00000022 pi_hyper_read
1c009fba g     F .text	00000020 rt_user_alloc_init
1c00e234 g     O .bss	00000014 AT_GraphPerf
1c00e248 g     O .bss	00000004 model_L3_Memory
00000000 g       *ABS*	00000000 __rt_config
1c009398 g     F .text	00000032 MD5_Init
00000334 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size
1c00bf6a g     F .text	00000020 strncmp
1c00e294 g       .bss	00000000 _l1_preload_start_inL2
1c009a72 g     F .text	00000032 __rt_fc_lock
10000044 g       .l1cluster_g	00000000 __l1_heap_start
1c009e04 g     F .text	00000018 __rt_wait_event_prepare_blocking
1c009bc8 g     F .text	00000078 __rt_bridge_handle_notif
1c00045e g       .text	00000000 __rt_soc_evt_no_udma
1c00723c g     F .text	00000008 pi_fs_close
10000040 g     O .l1cluster_g	00000004 __rt_cluster_fc_task_lock
00000340 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks
1c009ece g     F .text	00000024 rt_event_push
1c0045ba g     F .text	00000088 modelCNN_Destruct
1c009ccc g     F .text	00000022 __rt_bridge_clear_notif
1c00892e g     F .text	00000104 flash_partition_table_load
00000014 g     O .data_tiny_l1	00000004 __rt_dma_first_pending
1c00ddcc g     O .data	000000c0 __hal_debug_struct
1c0071ee g     F .text	00000012 pi_fs_conf_init
1c009466 g     F .text	00000138 MD5_Final
1c00a28a g     F .text	0000008c __rt_time_init
1c00b1c4 g     F .text	0000002c __pi_hyper_pin_reset_settings
00080000 g       *ABS*	00000000 __L2
00000008 g       *ABS*	00000000 __rt_nb_pe
1c0000a0 g       .text	00000000 _entry
1c00885c g     F .text	0000005e pi_partition_find_first
1c009f56 g     F .text	0000002c __rt_wait_event
1c00a9ec g     F .text	000000bc __rt_pmu_init
1c0096a2 g     F .text	0000000a bsp_hyperflash_conf_init
1c007244 g     F .text	00000008 pi_fs_read_async
1c0098c4 g     F .text	00000050 __rt_handle_illegal_instr
1c00bfa0 g     F .text	00000010 memset
1c00b3fe g     F .text	00000058 __pi_hyper_copy_aligned
1c001256 g     F .text	00000012 main
1c00aaba g     F .text	00000002 __rt_fll_deinit
1c0004a4 g       .text	00000000 udma_event_handler_end
1c00e254 g     O .bss	00000004 __rt_alloc_fc_tcdm
1c00bb54 g     F .text	0000000a __rt_himax_init
1c00de9c g     O .data	00000004 ResOut
1c009b10 g     F .text	00000036 __rt_fc_cluster_unlock
00000318 g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat
1c00c26a g     F .text	00000072 __rt_io_init
1c00dda4  w    O .data	00000010 __rt_padframe_hyper_gpio
00000000 g       *ABS*	00000000 __FETCH_ALL
1c009692 g     F .text	00000010 bsp_hyperram_open
1c003db0 g     F .text	0000080a modelCNN_Construct
1c0071ba g     F .text	00000002 __flash_conf_init
1c00de98  w    O .data	00000004 __rt_platform
1c00d3f4 g       .init_array	00000000 __CTOR_END__
1c00dcc8 g     O .data	00000028 __pi_read_fs_api
1c00b198 g     F .text	0000002c __pi_hyper_pin_settings
1c00bf56 g     F .text	00000014 strcmp
1000001c g     O .l1cluster_g	00000004 model_L1_Memory
1c009636 g     F .text	00000008 semihost_exit
1c00d3f4 g       .fini_array	00000000 __DTOR_LIST__
1c009ddc g     F .text	00000028 __rt_event_init
000002e0 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback_arg
1c0005b6 g       .text	00000000 pwm_event_handler
00000348 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size_2d
1c00c1c2 g     F .text	00000028 _prf_locked
00000000 g       *ABS*	00000000 __USE_UART
1c00b920 g     F .text	00000008 __rt_hyper_resume_emu_task
1c00a75a g     F .text	000000e0 SetFllFrequency
1c005f26 g     F .text	00000244 KerParConv3x3Stride1_SQ8
1c00aabc g     F .text	00000002 __rt_flls_constructor
1c00a1ec g     F .text	0000007a rt_event_push_delayed
1c00010c g       .text	00000000 _fini
1c008762 g     F .text	0000005e extern_alloc
1c009f82 g     F .text	0000001a rt_event_wait
1c000090 g       .vectors	00000000 __rt_debug_struct_ptr
1c00d43c g     O .rodata	00000100 .hidden __clz_tab
00000328 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_channel
1c00d300 g       .text	00000000 __rt_set_slave_stack
1c009fb0 g     F .text	00000002 pi_task_push_delayed_us
1c00a18c g     F .text	00000006 pi_cl_l1_malloc
1c00de8c  w    O .data	00000004 __rt_fc_stack_size
1c0088ba g     F .text	00000074 flash_partition_table_verify
1c002f18 g     F .text	00000c08 S4_Linear_2x29x39x64
1c0003f4 g       .text	00000000 __rt_fc_socevents_handler
000002b8 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback
00000358 g     O .data_tiny_fc	00000034 dev_rtc
1c007272 g     F .text	00000008 pi_fs_write_async
1c00dcf0 g     O .data	00000028 __pi_host_fs_api
1c00c18c g     F .text	00000030 fputc
1c00b9e6 g     F .text	0000000a rt_extern_alloc_deinit
1c00b110 g     F .text	0000001e pi_pad_init
1c0072a0 g     F .text	0000000a pi_fs_copy_async
1c001268 g     F .text	00000542 S1_Op_input_1_formatter
1c000200 g       .text	00000000 __rt_call_external_c_function
1c009aa4 g     F .text	00000034 __rt_fc_unlock
1c008660 g     F .text	0000000c pi_ram_open
00000004 g       .data_tiny_l1	00000000 _l1_preload_start
1c00b9f0 g     F .text	00000086 __pi_gpio_handler
000002b0 g     O .data_tiny_fc	00000008 __rt_socevents_status
1c009cee g     F .text	00000042 __rt_bridge_printf_flush
1c00b1f0 g     F .text	00000010 pi_hyper_conf_init
1c00de90  w    O .data	00000004 __rt_iodev
0000001c g     O .data_tiny_fc	00000014 __rt_sched
1c000000 g       .vectors	00000000 __irq_vector_base
1c0048ea g     F .text	000007f4 ReadImageFromFile
1c00df74 g       .data	00000000 _edata
00000000 g       *ABS*	00000000 __ZERO
1c00a592 g     F .text	0000005e __rt_periph_init
1c008856 g     F .text	00000002 pi_partition_table_free
1c00bb82 g     F .text	00000012 __rt_spim_init
1c009c40 g     F .text	0000004c __rt_bridge_check_connection
1c00aeac g     F .text	00000090 rt_cluster_call
00000800 g       *ABS*	00000000 __rt_stack_size
1c009872 g     F .text	00000004 pi_open_from_conf
ffffffff g       *ABS*	00000000 pulp__FC
1c00bb00 g     F .text	00000054 __rt_i2s_init
00000003 g       *ABS*	00000000 __rt_debug_init_config
1c008a32 g     F .text	00000024 flash_partition_table_free
1c00e26c g     O .bss	00000028 __rt_fc_cluster_data
1c00c1ea g     F .text	00000076 exit
1c009f9c g     F .text	00000014 __rt_event_sched_init
1c000e5c g     F .text	00000090 .hidden __floatunsisf
0000034c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_length
1c0002b4 g       .text	00000000 udma_event_handler
1c00ad92 g     F .text	00000032 pi_cluster_close
1c00b928 g     F .text	00000004 __rt_hyper_resume_copy
00000354 g     O .data_tiny_fc	00000004 pwmEventsStatus
1c00722c g     F .text	00000008 pi_fs_unmount
1c009620 g     F .text	00000016 semihost_seek
1c009a20 g     F .text	00000030 __rt_cbsys_exec
0000ffbc g       .l1cluster_g	00000000 __l1_heap_size
1c00dea0 g     O .data	00000004 Img_In
1c00a6ca g     F .text	00000090 __rt_pmu_cluster_power_down
0000031c g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat_size
1b000b98 g     O .stack	00000004 __rt_debug_config_trace
1c005354 g     F .text	000000b4 KerParSetBiasB32_SQ8
1c00e200  w    O .bss	00000004 __rt_iodev_uart_channel
1c0000a0 g       .text	00000000 _stext
1c00dec4 g     O .data	00000004 PMURetentionState
ffffffff g       *ABS*	00000000 pulp__L1CL
1c00bf8a g     F .text	00000016 strlen
1c00b95a g     F .text	00000028 rt_padframe_set
1c0095dc g     F .text	00000008 semihost_close
1c00b0dc g     F .text	00000034 pi_pad_set_function
1c00e264 g     O .bss	00000004 __rt_wakeup_use_fast
00000400 g       *ABS*	00000000 __rt_cl_master_stack_size
1c00bfe6 g     F .text	0000001a strchr
1c009d30 g     F .text	00000078 __rt_bridge_req_shutdown
1c00d02a g     F .text	00000010 rt_uart_conf_init
1c00d3b4 g       .text	00000000 __cluster_text_end
1c00d14a g     F .text	0000005c __rt_uart_init
1c00e2d4 g       *ABS*	00000000 __l2_end
1c00af3c g     F .text	0000005c rt_cluster_mount
1c00bb70 g     F .text	00000012 __rt_rtc_init
1c00d116 g     F .text	00000034 rt_uart_cluster_write
1c0084ce g     F .text	0000000c hyperram_free
1c000098 g       .vectors	00000000 __rt_semihosting_call
1c0093ca g     F .text	0000009c MD5_Update
1b000b9c g     O .stack	00000004 __rt_debug_config
1c00aabe g     F .text	00000006 __rt_fll_set_freq
1c0099e2 g     F .text	0000003e __rt_cbsys_add
1c00ae34 g     F .text	0000003c __rt_cluster_new
1c00c000 g     F .text	0000005e __rt_putc_debug_bridge
1c006e7a g     F .text	000002de KerParSoftMax_SQ8
1c00d3b4 g       .text	00000000 _endtext
00000324 g     O .data_tiny_fc	00000004 __rt_hyper_current_task
1c0095b2 g     F .text	0000002a semihost_open
ffffffff g       *ABS*	00000000 pulp__L1FC
1c00dec8 g     O .data	00000008 FllsFrequency
00000030 g     O .data_tiny_fc	00000280 periph_channels



Disassembly of section .vectors:

1c000000 <__irq_vector_base>:


#ifdef ARCHI_CORE_HAS_1_10
  j __rt_illegal_instr
#else
  j __rt_no_irq_handler
1c000000:	0940006f          	j	1c000094 <__rt_no_irq_handler>
#endif

  j __rt_no_irq_handler
1c000004:	0900006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000008:	08c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00000c:	0880006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000010:	0840006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000014:	0800006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000018:	07c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00001c:	0780006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000020:	0740006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000024:	0700006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000028:	06c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00002c:	0680006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000030:	0640006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000034:	0600006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000038:	05c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00003c:	0580006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000040:	0540006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000044:	0500006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000048:	04c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00004c:	0480006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000050:	0440006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000054:	0400006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000058:	03c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00005c:	0380006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000060:	0340006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000064:	0300006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000068:	02c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00006c:	0280006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000070:	0240006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000074:	0200006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000078:	01c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00007c:	0180006f          	j	1c000094 <__rt_no_irq_handler>

1c000080 <_start>:


  .org 0x80
  .global _start
_start:
  jal x0, _entry
1c000080:	0200006f          	j	1c0000a0 <_entry>


#ifndef __RT_MODE_BARE

  jal x0, __rt_illegal_instr
1c000084:	1c20006f          	j	1c000246 <__rt_illegal_instr>
	...

1c000090 <__rt_debug_struct_ptr>:
1c000090:	ddcc                	sw	a1,60(a1)
1c000092:	1c00                	addi	s0,sp,560

1c000094 <__rt_no_irq_handler>:
  .word __hal_debug_struct

#endif

__rt_no_irq_handler:
  j __rt_no_irq_handler
1c000094:	0000006f          	j	1c000094 <__rt_no_irq_handler>

1c000098 <__rt_semihosting_call>:

#endif

  .global __rt_semihosting_call
__rt_semihosting_call:
  ebreak
1c000098:	00100073          	ebreak
  jr          ra
1c00009c:	00008067          	ret

Disassembly of section .text:

1c0000a0 <_entry>:
  csrw    0x7A1, x0
1c0000a0:	7a101073          	csrw	pcmr,zero
  csrr    a0, 0xF14
1c0000a4:	f1402573          	csrr	a0,mhartid
  andi    a1, a0, 0x1f
1c0000a8:	01f57593          	andi	a1,a0,31
  srli    a0, a0, 5
1c0000ac:	8115                	srli	a0,a0,0x5
  li      a2, ARCHI_FC_CID
1c0000ae:	02000613          	li	a2,32
  bne     a0, a2, __rt_pe_start
1c0000b2:	00c50463          	beq	a0,a2,1c0000ba <_entry+0x1a>
1c0000b6:	0f20d06f          	j	1c00d1a8 <__cluster_text_start>
  la      t0, _bss_start
1c0000ba:	0000e297          	auipc	t0,0xe
1c0000be:	ebe28293          	addi	t0,t0,-322 # 1c00df78 <_bss_start>
  la      t1, _bss_end
1c0000c2:	0000e317          	auipc	t1,0xe
1c0000c6:	1d230313          	addi	t1,t1,466 # 1c00e294 <_bss_end>
  sw      zero,0(t0)
1c0000ca:	0002a023          	sw	zero,0(t0)
  addi    t0, t0, 4
1c0000ce:	0291                	addi	t0,t0,4
  bltu    t0, t1, 1b
1c0000d0:	fe62ede3          	bltu	t0,t1,1c0000ca <_entry+0x2a>
  la   a0, __rt_fc_stack_size
1c0000d4:	0000e517          	auipc	a0,0xe
1c0000d8:	db850513          	addi	a0,a0,-584 # 1c00de8c <__rt_fc_stack_size>
  lw   a0, 0(a0)
1c0000dc:	4108                	lw	a0,0(a0)
  la   x2, __rt_fc_stack
1c0000de:	ff000117          	auipc	sp,0xff000
1c0000e2:	2ba10113          	addi	sp,sp,698 # 1b000398 <__rt_fc_stack>
  add  x2, x2, a0
1c0000e6:	912a                	add	sp,sp,a0
  jal  x1, __rt_init
1c0000e8:	5fa090ef          	jal	ra,1c0096e2 <__rt_init>
  addi  a0, x0, 0
1c0000ec:	00000513          	li	a0,0
  addi  a1, x0, 0
1c0000f0:	00000593          	li	a1,0
  la    t2, main
1c0000f4:	00001397          	auipc	t2,0x1
1c0000f8:	16238393          	addi	t2,t2,354 # 1c001256 <main>
  jalr  x1, t2
1c0000fc:	000380e7          	jalr	t2
  mv    s0, a0
1c000100:	842a                	mv	s0,a0
  jal  x1, __rt_deinit
1c000102:	748090ef          	jal	ra,1c00984a <__rt_deinit>
  mv   a0, s0
1c000106:	8522                	mv	a0,s0
  jal  x1, exit
1c000108:	0e20c0ef          	jal	ra,1c00c1ea <exit>

1c00010c <_fini>:
  ret
1c00010c:	8082                	ret

1c00010e <__rt_event_enqueue>:
  //   x10/a0: temporary register
  //   x11/a1: the event
  //   x12/a2: temporary register

  // First check if it is a normal event
  andi    x10, x11, 0x3
1c00010e:	0035f513          	andi	a0,a1,3
  bne     x10, x0, __rt_handle_special_event
1c000112:	02051063          	bnez	a0,1c000132 <__rt_handle_special_event>

  // Enqueue normal event
  la      x10, __rt_sched
1c000116:	e4000517          	auipc	a0,0xe4000
1c00011a:	f0650513          	addi	a0,a0,-250 # 1c <__rt_sched>
  sw      x0, RT_EVENT_T_NEXT(x11)
1c00011e:	0005a023          	sw	zero,0(a1)
  lw      x12, RT_SCHED_T_FIRST(x10)
1c000122:	4110                	lw	a2,0(a0)
  beqz    x12, __rt_no_first
1c000124:	c601                	beqz	a2,1c00012c <__rt_no_first>
  lw      x12, RT_SCHED_T_LAST(x10)
1c000126:	4150                	lw	a2,4(a0)
  sw      x11, RT_EVENT_T_NEXT(x12)
1c000128:	c20c                	sw	a1,0(a2)
  j       __rt_common
1c00012a:	a011                	j	1c00012e <__rt_common>

1c00012c <__rt_no_first>:

__rt_no_first:
  sw      x11, RT_SCHED_T_FIRST(x10)
1c00012c:	c10c                	sw	a1,0(a0)

1c00012e <__rt_common>:

__rt_common:
  sw      x11, RT_SCHED_T_LAST(x10)
1c00012e:	c14c                	sw	a1,4(a0)

1c000130 <enqueue_end>:

enqueue_end:
  jr          x9
1c000130:	8482                	jr	s1

1c000132 <__rt_handle_special_event>:

__rt_handle_special_event:
  li      x10, ~0x3
1c000132:	5571                	li	a0,-4
  and     x11, x11, x10
1c000134:	8de9                	and	a1,a1,a0
  lw      x12, PI_CALLBACK_T_ENTRY(x11)
1c000136:	41d0                	lw	a2,4(a1)
  lw      x10, PI_CALLBACK_T_ARG(x11)
1c000138:	4588                	lw	a0,8(a1)
  j       __rt_call_external_c_function
1c00013a:	a0d9                	j	1c000200 <__rt_call_external_c_function>

1c00013c <__rt_bridge_enqueue_event>:
    // to enqueue an event to the FC scheduler.

    .global __rt_bridge_enqueue_event
__rt_bridge_enqueue_event:

    sw  x8, -4(sp)
1c00013c:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000140:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c000144:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000148:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00014c:	fec12623          	sw	a2,-20(sp)

    // Everything is done from C code
    la      x12, __rt_bridge_handle_notif
1c000150:	0000a617          	auipc	a2,0xa
1c000154:	a7860613          	addi	a2,a2,-1416 # 1c009bc8 <__rt_bridge_handle_notif>
    jal     x9, __rt_call_external_c_function
1c000158:	0a8004ef          	jal	s1,1c000200 <__rt_call_external_c_function>

    lw  x8, -4(sp)
1c00015c:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c000160:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c000164:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c000168:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00016c:	fec12603          	lw	a2,-20(sp)

    mret
1c000170:	30200073          	mret

1c000174 <__rt_remote_enqueue_event>:
    // The FC must get it and push it to the scheduler

    .global __rt_remote_enqueue_event
__rt_remote_enqueue_event:

    sw  x8, -4(sp)
1c000174:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000178:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00017c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000180:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c000184:	fec12623          	sw	a2,-20(sp)

#ifndef ARCHI_NB_CLUSTER
    li   x8, 1
1c000188:	4405                	li	s0,1
#else
    li   x8, ARCHI_NB_CLUSTER
#endif
    la   x9, __rt_fc_cluster_data
1c00018a:	0000e497          	auipc	s1,0xe
1c00018e:	0e248493          	addi	s1,s1,226 # 1c00e26c <__rt_fc_cluster_data>

1c000192 <__rt_remote_enqueue_event_loop_cluster>:

    // Loop over the clusters to see if there is an event to push
__rt_remote_enqueue_event_loop_cluster:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000192:	40cc                	lw	a1,4(s1)
    beq  a1, x0, __rt_remote_enqueue_event_loop_cluster_continue
1c000194:	02058d63          	beqz	a1,1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>

    // Everytime a task is finished, first check if we can update the queue head
    // as it is not updated by cluster side to avoid race conditions.
    // At least this task won t be there anymore after we update, and maybe even
    // more tasks, which is not an issue, as we compare against the head.
    lw   a1, RT_FC_CLUSTER_DATA_T_CLUSTER_POOL(x9)
1c000198:	48cc                	lw	a1,20(s1)
    lw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c00019a:	41c8                	lw	a0,4(a1)

    beq  a0, x0, __rt_cluster_pool_update_end
1c00019c:	00050e63          	beqz	a0,1c0001b8 <__rt_cluster_pool_update_end>

1c0001a0 <__rt_cluster_pool_update_loop>:

__rt_cluster_pool_update_loop:
    lw    a2, RT_CLUSTER_TASK_PENDING(a0)
1c0001a0:	5150                	lw	a2,36(a0)
    bnez  a2, __rt_cluster_pool_update_loop_end
1c0001a2:	e219                	bnez	a2,1c0001a8 <__rt_cluster_pool_update_loop_end>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001a4:	5108                	lw	a0,32(a0)
    bnez a0, __rt_cluster_pool_update_loop
1c0001a6:	fd6d                	bnez	a0,1c0001a0 <__rt_cluster_pool_update_loop>

1c0001a8 <__rt_cluster_pool_update_loop_end>:


__rt_cluster_pool_update_loop_end:
    
    beqz a0, __rt_cluster_pool_update_no_current
1c0001a8:	c501                	beqz	a0,1c0001b0 <__rt_cluster_pool_update_no_current>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001aa:	5108                	lw	a0,32(a0)
    sw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001ac:	c1c8                	sw	a0,4(a1)

    j    __rt_cluster_pool_update_end
1c0001ae:	a029                	j	1c0001b8 <__rt_cluster_pool_update_end>

1c0001b0 <__rt_cluster_pool_update_no_current>:

__rt_cluster_pool_update_no_current:

    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001b0:	0005a223          	sw	zero,4(a1)
    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_LAST_FC(a1)
1c0001b4:	0005a423          	sw	zero,8(a1)

1c0001b8 <__rt_cluster_pool_update_end>:




__rt_cluster_pool_update_end:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001b8:	40cc                	lw	a1,4(s1)

    lw   a2, RT_FC_CLUSTER_DATA_T_TRIG_ADDR(x9)
1c0001ba:	4890                	lw	a2,16(s1)
    sw   x0, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001bc:	0004a223          	sw	zero,4(s1)

    sw   x0, 0(a2)
1c0001c0:	00062023          	sw	zero,0(a2)

    la   x9, __rt_remote_enqueue_event_loop_cluster_continue
1c0001c4:	00000497          	auipc	s1,0x0
1c0001c8:	00a48493          	addi	s1,s1,10 # 1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>
    j    __rt_event_enqueue
1c0001cc:	b789                	j	1c00010e <__rt_event_enqueue>

1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>:

__rt_remote_enqueue_event_loop_cluster_continue:
    addi x8, x8, -1
1c0001ce:	147d                	addi	s0,s0,-1
    bgt  x8, x0, __rt_remote_enqueue_event_loop_next_cluster
1c0001d0:	00804e63          	bgtz	s0,1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>



    lw  x8, -4(sp)
1c0001d4:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c0001d8:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c0001dc:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c0001e0:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c0001e4:	fec12603          	lw	a2,-20(sp)

    mret
1c0001e8:	30200073          	mret

1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>:

__rt_remote_enqueue_event_loop_next_cluster:
    la   x9, __rt_fc_cluster_data
1c0001ec:	0000e497          	auipc	s1,0xe
1c0001f0:	08048493          	addi	s1,s1,128 # 1c00e26c <__rt_fc_cluster_data>
    li   a1, RT_FC_CLUSTER_DATA_T_SIZEOF
1c0001f4:	02800593          	li	a1,40
    mul  a1, x8, a1
1c0001f8:	02b405b3          	mul	a1,s0,a1
    add  x9, x9, a1
1c0001fc:	94ae                	add	s1,s1,a1
    j __rt_remote_enqueue_event_loop_cluster
1c0001fe:	bf51                	j	1c000192 <__rt_remote_enqueue_event_loop_cluster>

1c000200 <__rt_call_external_c_function>:
#endif

  .global __rt_call_external_c_function
__rt_call_external_c_function:

    add  sp, sp, -128
1c000200:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000202:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c000204:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c000206:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c000208:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c00020a:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c00020c:	ca1e                	sw	t2,20(sp)
    sw   a3, 0x24(sp)
1c00020e:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c000210:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c000212:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c000214:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000216:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000218:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c00021a:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c00021c:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c00021e:	c6fe                	sw	t6,76(sp)

    jalr ra, a2
1c000220:	000600e7          	jalr	a2

    lw   ra, 0x00(sp)
1c000224:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000226:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000228:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c00022a:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c00022c:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c00022e:	43d2                	lw	t2,20(sp)
    lw   a3, 0x24(sp)
1c000230:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c000232:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c000234:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c000236:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c000238:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c00023a:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c00023c:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c00023e:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000240:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c000242:	6109                	addi	sp,sp,128

    jr   x9
1c000244:	8482                	jr	s1

1c000246 <__rt_illegal_instr>:

  .section .text
  
    .global __rt_illegal_instr
__rt_illegal_instr:
    sw   ra, -4(sp)
1c000246:	fe112e23          	sw	ra,-4(sp)
    sw   a0, -8(sp)
1c00024a:	fea12c23          	sw	a0,-8(sp)
    la   a0, __rt_handle_illegal_instr
1c00024e:	00009517          	auipc	a0,0x9
1c000252:	67650513          	addi	a0,a0,1654 # 1c0098c4 <__rt_handle_illegal_instr>
    jal  ra, __rt_call_c_function
1c000256:	010000ef          	jal	ra,1c000266 <__rt_call_c_function>
    lw   ra, -4(sp)
1c00025a:	ffc12083          	lw	ra,-4(sp)
    lw   a0, -8(sp)
1c00025e:	ff812503          	lw	a0,-8(sp)
#if PULP_CORE == CORE_RISCV_V4
    mret
1c000262:	30200073          	mret

1c000266 <__rt_call_c_function>:
#endif


__rt_call_c_function:

    add  sp, sp, -128
1c000266:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000268:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c00026a:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c00026c:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c00026e:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c000270:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c000272:	ca1e                	sw	t2,20(sp)
    sw   a1, 0x1C(sp)
1c000274:	ce2e                	sw	a1,28(sp)
    sw   a2, 0x20(sp)
1c000276:	d032                	sw	a2,32(sp)
    sw   a3, 0x24(sp)
1c000278:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c00027a:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c00027c:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c00027e:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000280:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000282:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c000284:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c000286:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c000288:	c6fe                	sw	t6,76(sp)

    jalr ra, a0
1c00028a:	000500e7          	jalr	a0

    lw   ra, 0x00(sp)
1c00028e:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000290:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000292:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c000294:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c000296:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c000298:	43d2                	lw	t2,20(sp)
    lw   a1, 0x1C(sp)
1c00029a:	45f2                	lw	a1,28(sp)
    lw   a2, 0x20(sp)
1c00029c:	5602                	lw	a2,32(sp)
    lw   a3, 0x24(sp)
1c00029e:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c0002a0:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c0002a2:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c0002a4:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c0002a6:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c0002a8:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c0002aa:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c0002ac:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c0002ae:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c0002b0:	6109                	addi	sp,sp,128

    jr   ra
1c0002b2:	8082                	ret

1c0002b4 <udma_event_handler>:

  .global udma_event_handler
udma_event_handler:

  // Dequeue the transfer which have just finished and mark it as done
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002b4:	4080                	lw	s0,0(s1)
  lw   x11, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)   // This is used later on, just put here to fill the slot
1c0002b6:	448c                	lw	a1,8(s1)
  beq  x8, x0, __rt_udma_no_copy                       // Special case where there is no copy, just register the event in the bitfield
1c0002b8:	08040f63          	beqz	s0,1c000356 <__rt_udma_no_copy>
  lw   x12, RT_PERIPH_COPY_T_REPEAT(x8)
1c0002bc:	4c50                	lw	a2,28(s0)
  lw   x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0002be:	4848                	lw	a0,20(s0)
  bne  x12, x0, repeat_transfer
1c0002c0:	04061f63          	bnez	a2,1c00031e <dmaCmd>
  sw   x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002c4:	c088                	sw	a0,0(s1)
  
  // Handle any special end-of-transfer control
  lw       x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0002c6:	4448                	lw	a0,12(s0)
  bnez     x10, handle_special_end
1c0002c8:	e15d                	bnez	a0,1c00036e <handle_special_end>

1c0002ca <resume_after_special_end>:
resume_after_special_end:


  // Now check if there are some transfers enqueued in the SW FIFO to be enqueued to the UDMA
  beq x11, x0, checkTask
1c0002ca:	02058f63          	beqz	a1,1c000308 <checkTask>

  // x9 contains the pointer to the channel and x11 the first copy

  // Update the FIFO pointers and just copy from node to UDMA
  lw  x12, RT_PERIPH_COPY_T_ENQUEUE_CALLBACK(x11)
1c0002ce:	4990                	lw	a2,16(a1)
  lw  x10, RT_PERIPH_COPY_T_NEXT(x11)
1c0002d0:	49c8                	lw	a0,20(a1)
  beqz x12, __rt_udma_call_enqueue_callback_resume
1c0002d2:	c611                	beqz	a2,1c0002de <__rt_udma_call_enqueue_callback_resume>

  la  x9, __rt_udma_call_enqueue_callback_resume
1c0002d4:	00000497          	auipc	s1,0x0
1c0002d8:	00a48493          	addi	s1,s1,10 # 1c0002de <__rt_udma_call_enqueue_callback_resume>
  jr  x12
1c0002dc:	8602                	jr	a2

1c0002de <__rt_udma_call_enqueue_callback_resume>:

__rt_udma_call_enqueue_callback_resume:
  lw  x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0002de:	44d0                	lw	a2,12(s1)
  sw  x10, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)
1c0002e0:	c488                	sw	a0,8(s1)
  lw  x10, RT_PERIPH_COPY_T_ADDR(x11)
1c0002e2:	4188                	lw	a0,0(a1)
  lw  x9, RT_PERIPH_COPY_T_SIZE(x11)
1c0002e4:	41c4                	lw	s1,4(a1)
  sw  x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0002e6:	c208                	sw	a0,0(a2)
  sw  x9, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0002e8:	c244                	sw	s1,4(a2)

  lw  x9, RT_PERIPH_COPY_T_CTRL(x11)
1c0002ea:	45c4                	lw	s1,12(a1)
  andi x9, x9, (1<<RT_PERIPH_COPY_CTRL_TYPE_WIDTH)-1
1c0002ec:	88bd                	andi	s1,s1,15
  li  x10, RT_PERIPH_COPY_SPECIAL_ENQUEUE_THRESHOLD
1c0002ee:	4515                	li	a0,5
  blt x9, x10, transfer_resume
1c0002f0:	00a4ca63          	blt	s1,a0,1c000304 <transfer_resume>
  li          x10, RT_PERIPH_COPY_HYPER
  beq         x9, x10, hyper
  li          x10, RT_PERIPH_COPY_FC_TCDM
  beq         x9, x10, fc_tcdm
#else
  p.beqimm      x9, RT_PERIPH_COPY_HYPER, hyper
1c0002f4:	0064a463          	p.beqimm	s1,6,1c0002fc <dual>
  p.beqimm      x9, RT_PERIPH_COPY_FC_TCDM, fc_tcdm
1c0002f8:	0074a263          	p.beqimm	s1,7,1c0002fc <dual>

1c0002fc <dual>:
#ifdef RV_ISA_RV32
  li    x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and   x9, x12, x10
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
#else
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
1c0002fc:	51c8                	lw	a0,36(a1)
  p.bclr  x9, x12, 0, UDMA_CHANNEL_SIZE_LOG2
1c0002fe:	c04634b3          	p.bclr	s1,a2,0,4
#endif
  sw    x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000302:	d088                	sw	a0,32(s1)

1c000304 <transfer_resume>:
#endif

transfer_resume:
  lw  x10, RT_PERIPH_COPY_T_CFG(x11)
1c000304:	4588                	lw	a0,8(a1)
  sw  x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000306:	c608                	sw	a0,8(a2)

1c000308 <checkTask>:

checkTask:

  // Check if we have a DMA transfer from L2 to L1   
  //lw          x10, RT_PERIPH_COPY_T_DMACMD(x8)           // Not null if we must transfer
  lw          x11, RT_PERIPH_COPY_T_EVENT(x8)             // Read this in advance to fill the slot, it is used later on in case there is no DMA command
1c000308:	4c0c                	lw	a1,24(s0)

  //bne         x10, zero, dmaCmd
  la          x9, udma_event_handler_end
1c00030a:	00000497          	auipc	s1,0x0
1c00030e:	19a48493          	addi	s1,s1,410 # 1c0004a4 <udma_event_handler_end>
  bne         x11, zero, __rt_event_enqueue
1c000312:	00058463          	beqz	a1,1c00031a <checkTask+0x12>
1c000316:	df9ff06f          	j	1c00010e <__rt_event_enqueue>

  // Loop again in case there are still events in the FIFO
  j udma_event_handler_end
1c00031a:	18a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00031e <dmaCmd>:
//   x12 : number of bytes to repeat
repeat_transfer:

#ifdef ARCHI_UDMA_HAS_HYPER

  lw      x11, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00031e:	44cc                	lw	a1,12(s1)
#ifdef RV_ISA_RV32
  li      x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and     x9, x11, x10
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
#else
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000320:	5048                	lw	a0,36(s0)
  p.bclr  x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c000322:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add     x10, x10, x12
1c000326:	9532                	add	a0,a0,a2
  sw      x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000328:	d088                	sw	a0,32(s1)
  sw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c00032a:	d048                	sw	a0,36(s0)

  lw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00032c:	4008                	lw	a0,0(s0)
  lw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c00032e:	5004                	lw	s1,32(s0)
  add     x10, x10, x12
1c000330:	9532                	add	a0,a0,a2
  sub     x9, x9, x12
1c000332:	8c91                	sub	s1,s1,a2
  blt     x12, x9, not_last
1c000334:	00964963          	blt	a2,s1,1c000346 <not_last>
  mv      x12, x9
1c000338:	8626                	mv	a2,s1
  sw      x0, RT_PERIPH_COPY_T_REPEAT(x8)
1c00033a:	00042e23          	sw	zero,28(s0)
  beq     x12, x0, udma_event_handler_end
1c00033e:	00061463          	bnez	a2,1c000346 <not_last>
1c000342:	1620006f          	j	1c0004a4 <udma_event_handler_end>

1c000346 <not_last>:

not_last:
  sw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c000346:	c008                	sw	a0,0(s0)
  sw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c000348:	d004                	sw	s1,32(s0)
  sw      x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c00034a:	c188                	sw	a0,0(a1)
  sw      x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00034c:	c1d0                	sw	a2,4(a1)

  li      x10, UDMA_CHANNEL_CFG_EN
1c00034e:	4541                	li	a0,16
  sw      x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c000350:	c588                	sw	a0,8(a1)

#endif

  j           udma_event_handler_end
1c000352:	1520006f          	j	1c0004a4 <udma_event_handler_end>

1c000356 <__rt_udma_no_copy>:




__rt_udma_no_copy:
  la      x9, __rt_socevents_status
1c000356:	e4000497          	auipc	s1,0xe4000
1c00035a:	f5a48493          	addi	s1,s1,-166 # 2b0 <__rt_socevents_status>
  lw      x8, 0(x9)
1c00035e:	4080                	lw	s0,0(s1)
  li      x11, 1
1c000360:	4585                	li	a1,1
  sll     x10, x11, x10
1c000362:	00a59533          	sll	a0,a1,a0
  or      x8, x8, x10
1c000366:	8c49                	or	s0,s0,a0
  sw      x8, 0(x9)
1c000368:	c080                	sw	s0,0(s1)
  j udma_event_handler_end
1c00036a:	13a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00036e <handle_special_end>:
  li          x12, RT_PERIPH_COPY_I2C_STEP1
  beq         x10, x12, i2c_step1
  li          x12, RT_PERIPH_COPY_I2C_STEP2
  beq         x10, x12, i2c_step2
#else
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP1, i2c_step1  
1c00036e:	04352463          	p.beqimm	a0,3,1c0003b6 <i2c_step1>
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP2, i2c_step2
1c000372:	06452063          	p.beqimm	a0,4,1c0003d2 <i2c_step2>
#endif

  j           resume_after_special_end
1c000376:	bf91                	j	1c0002ca <resume_after_special_end>

1c000378 <spim_step3>:


spim_step3:
  // The current copy was enqueued to configure spi, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c000378:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c00037a:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00037c:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00037e:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000380:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000382:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL2(x8)
1c000384:	5448                	lw	a0,44(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c000386:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c000388:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c00038a:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c00038c:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00038e:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000390:	1140006f          	j	1c0004a4 <udma_event_handler_end>

1c000394 <spim_step2>:

spim_step2:
  // Now that the user data has been pushed, we must push an EOT command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c000394:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000398:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00039a:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00039c:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c00039e:	4060                	lw	s0,68(s0)
  li          x12, SPI_CMD_EOT(0)
1c0003a0:	90000637          	lui	a2,0x90000
  sw          x12, 0(x8)
1c0003a4:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003a6:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003a8:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 4
1c0003aa:	4511                	li	a0,4
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ac:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ae:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003b0:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003b2:	0f20006f          	j	1c0004a4 <udma_event_handler_end>

1c0003b6 <i2c_step1>:
 */

i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c0003b6:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0003b8:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003ba:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003bc:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003be:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003c0:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_ADDR(x8)
1c0003c2:	4008                	lw	a0,0(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003c4:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c0003c6:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003c8:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c0003ca:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003cc:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003ce:	0d60006f          	j	1c0004a4 <udma_event_handler_end>

1c0003d2 <i2c_step2>:

i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c0003d2:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d6:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003d8:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003da:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c0003dc:	4060                	lw	s0,68(s0)
  li          x12, I2C_CMD_STOP
1c0003de:	02000613          	li	a2,32
  sw          x12, 0(x8)
1c0003e2:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003e4:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003e6:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 1
1c0003e8:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ea:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ec:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003ee:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003f0:	0b40006f          	j	1c0004a4 <udma_event_handler_end>

1c0003f4 <__rt_fc_socevents_handler>:

  .global __rt_fc_socevents_handler
  .extern pwm_event_handler
__rt_fc_socevents_handler:
// The stack is first adjusted to have stack-based load/store compressed
  add sp, sp, -128
1c0003f4:	7119                	addi	sp,sp,-128
  sw  x8, 0(sp)
1c0003f6:	c022                	sw	s0,0(sp)
  sw  x9, 4(sp)
1c0003f8:	c226                	sw	s1,4(sp)
  sw  x10, 8(sp)
1c0003fa:	c42a                	sw	a0,8(sp)
  sw  x11, 12(sp)
1c0003fc:	c62e                	sw	a1,12(sp)
  sw  x12, 16(sp)
1c0003fe:	c832                	sw	a2,16(sp)


  // Pop one element from the FIFO
  li  x8, ARCHI_EU_ADDR + EU_SOC_EVENTS_AREA_OFFSET + EU_SOC_EVENTS_CURRENT_EVENT
1c000400:	00201437          	lui	s0,0x201
1c000404:	f0040413          	addi	s0,s0,-256 # 200f00 <__L2+0x180f00>
  lw  x8, 0(x8)
1c000408:	4000                	lw	s0,0(s0)

  // Now that we popped the element, we can clear the soc event FIFO event as the FIFO is generating
  // an event as soon as the FIFO is not empty
  li  x9, 1<<PULP_SOC_EVENTS_EVENT
1c00040a:	080004b7          	lui	s1,0x8000
  li  x10, ARCHI_EU_DEMUX_ADDR + EU_CORE_BUFFER_CLEAR
1c00040e:	00204537          	lui	a0,0x204
1c000412:	02850513          	addi	a0,a0,40 # 204028 <__L2+0x184028>
  sw  x9, 0(x10)
1c000416:	c104                	sw	s1,0(a0)
  // Due to a HW bug in the core on Gap, we have to load this value early
#ifdef CONFIG_NO_FC_TINY
  la    x12, __rt_hyper_udma_handle
  lw    x12, 0(x12)
#else
  lw    x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000418:	30802603          	lw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif
#endif

  // Extract ID part
  p.extractu x10, x8, EU_SOC_EVENTS_EVENT_MASK_BITS-1, EU_SOC_EVENTS_EVENT_MASK_OFFSET
1c00041c:	ce041533          	p.extractu	a0,s0,7,0

#ifdef ARCHI_UDMA_HAS_HYPER
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0)), __rt_fc_socevents_not_hyper_rx
1c000420:	00653363          	p.bneimm	a0,6,1c000426 <__rt_fc_socevents_not_hyper_rx>
  jr x12
1c000424:	8602                	jr	a2

1c000426 <__rt_fc_socevents_not_hyper_rx>:

__rt_fc_socevents_not_hyper_rx:
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0))+1, __rt_fc_socevents_not_hyper_tx
1c000426:	00753363          	p.bneimm	a0,7,1c00042c <__rt_fc_socevents_not_hyper_tx>
  jr x12
1c00042a:	8602                	jr	a2

1c00042c <__rt_fc_socevents_not_hyper_tx>:
#endif

__rt_fc_socevents_not_hyper_tx:

  // UDMA CHANNEL EVENTS
  li x9, ARCHI_SOC_EVENT_UDMA_NB_EVT
1c00042c:	44cd                	li	s1,19
  bge x10, x9, __rt_soc_evt_no_udma_channel
1c00042e:	00955c63          	ble	s1,a0,1c000446 <__rt_soc_evt_no_udma_channel>
  andi   x8, x10, 1
  srli   x10, x10, 1
  or     x10, x10, x8
#endif

  la     x8, periph_channels
1c000432:	e4000417          	auipc	s0,0xe4000
1c000436:	bfe40413          	addi	s0,s0,-1026 # 30 <periph_channels>
  slli   x9, x10, RT_PERIPH_CHANNEL_T_SIZEOF_LOG2
1c00043a:	00551493          	slli	s1,a0,0x5
  add    x9, x9, x8
1c00043e:	94a2                	add	s1,s1,s0

  lw   x11, RT_PERIPH_CHANNEL_T_CALLBACK(x9)
1c000440:	4ccc                	lw	a1,28(s1)
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000442:	4080                	lw	s0,0(s1)

  jr   x11
1c000444:	8582                	jr	a1

1c000446 <__rt_soc_evt_no_udma_channel>:


__rt_soc_evt_no_udma_channel:

  li x9, ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT + ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT
1c000446:	44f9                	li	s1,30
  bge x10, x9, __rt_soc_evt_no_udma
1c000448:	00955b63          	ble	s1,a0,1c00045e <__rt_soc_evt_no_udma>

  addi x8, x10, -ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT
1c00044c:	fec50413          	addi	s0,a0,-20
  slli x11, x8, 2
1c000450:	00241593          	slli	a1,s0,0x2
  la   x12, __rt_udma_extra_callback
  p.lw x12, x12(x11)
  la   x9, __rt_udma_extra_callback_arg
  p.lw x11, x9(x11)
#else
  lw   x12, %tiny(__rt_udma_extra_callback)(x11)
1c000454:	2b85a603          	lw	a2,696(a1)
  lw   x11, %tiny(__rt_udma_extra_callback_arg)(x11)
1c000458:	2e05a583          	lw	a1,736(a1)
#endif

  jr   x12
1c00045c:	8602                	jr	a2

1c00045e <__rt_soc_evt_no_udma>:

  .global __rt_soc_evt_no_udma
__rt_soc_evt_no_udma:
#ifdef RT_CONFIG_GPIO_ENABLED
  // GPIO EVENT
  li      x9, ARCHI_SOC_EVENT_GPIO
1c00045e:	02a00493          	li	s1,42
  beq     x10, x9, __rt_gpio_handler
1c000462:	00951463          	bne	a0,s1,1c00046a <__rt_soc_evt_no_udma+0xc>
1c000466:	1740006f          	j	1c0005da <__rt_gpio_handler>
#endif

  li      x9, ARCHI_SOC_EVENT_RTC_IRQ
1c00046a:	02c00493          	li	s1,44
  beq     x9, x10, rtc_event_handler
1c00046e:	04a48363          	beq	s1,a0,1c0004b4 <rtc_event_handler>

1c000472 <__rt_soc_evt_pwm>:


// pwm event handler
//x9 : nb of event that will be used by handler
__rt_soc_evt_pwm:
  li x11, ARCHI_SOC_EVENT_ADV_TIMER_NB_EVT-1 // 3
1c000472:	458d                	li	a1,3
  addi x9, x11, ARCHI_SOC_EVENT_ADV_TIMER_FIRST_EVT //3+38=41
1c000474:	02658493          	addi	s1,a1,38
  sub x9, x9, x10 // 41 - 56
1c000478:	8c89                	sub	s1,s1,a0
  bgt x9, x11, __rt_soc_evt_store // if > 3 not for pwm
1c00047a:	0095c663          	blt	a1,s1,1c000486 <__rt_soc_evt_store>
  blt x9, x0,  __rt_soc_evt_store // if > 3 not for pwm
1c00047e:	0004c463          	bltz	s1,1c000486 <__rt_soc_evt_store>
  j pwm_event_handler
1c000482:	1340006f          	j	1c0005b6 <pwm_event_handler>

1c000486 <__rt_soc_evt_store>:


__rt_soc_evt_store:
  // If the event is not handled, store it in the soc event status mask
  la      x9, __rt_socevents_status
1c000486:	e4000497          	auipc	s1,0xe4000
1c00048a:	e2a48493          	addi	s1,s1,-470 # 2b0 <__rt_socevents_status>
  li      x11, 32
1c00048e:	02000593          	li	a1,32
  blt     x10, x11, socevents_set
1c000492:	00b54463          	blt	a0,a1,1c00049a <socevents_set>
  addi    x9, x9, 4
1c000496:	0491                	addi	s1,s1,4
  addi    x10, x10, -32
1c000498:	1501                	addi	a0,a0,-32

1c00049a <socevents_set>:

socevents_set:
  lw      x11, 0(x9)
1c00049a:	408c                	lw	a1,0(s1)
  p.bsetr x12, x11, x10
1c00049c:	80a5c633          	p.bsetr	a2,a1,a0
  sw      x12, 0(x9)
1c0004a0:	c090                	sw	a2,0(s1)
  j       udma_event_handler_end
1c0004a2:	a009                	j	1c0004a4 <udma_event_handler_end>

1c0004a4 <udma_event_handler_end>:

  .global udma_event_handler_end
udma_event_handler_end:
  lw  x8, 0(sp)
1c0004a4:	4402                	lw	s0,0(sp)
  lw  x9, 4(sp)
1c0004a6:	4492                	lw	s1,4(sp)
  lw  x10, 8(sp)
1c0004a8:	4522                	lw	a0,8(sp)
  lw  x11, 12(sp)
1c0004aa:	45b2                	lw	a1,12(sp)
  lw  x12, 16(sp)
1c0004ac:	4642                	lw	a2,16(sp)
  add sp, sp, 128
1c0004ae:	6109                	addi	sp,sp,128
  mret
1c0004b0:	30200073          	mret

1c0004b4 <rtc_event_handler>:


rtc_event_handler:
  lw    x11, __rtc_handler
1c0004b4:	e4000597          	auipc	a1,0xe4000
1c0004b8:	edc5a583          	lw	a1,-292(a1) # 390 <__rtc_handler>
  la    x9, udma_event_handler_end
1c0004bc:	00000497          	auipc	s1,0x0
1c0004c0:	fe848493          	addi	s1,s1,-24 # 1c0004a4 <udma_event_handler_end>
  j   __rt_event_enqueue
1c0004c4:	c4bff06f          	j	1c00010e <__rt_event_enqueue>

1c0004c8 <__rt_hyper_handle_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  lw    x12, 0(x8)
#else
  lw    x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004c8:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beqz      x12, __rt_hyper_handle_copy_end
1c0004cc:	c621                	beqz	a2,1c000514 <__rt_hyper_handle_copy_end>

1c0004ce <__rt_hyper_repeat_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c0004ce:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004d2:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c0004d6:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c0004da:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c0004dc:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004de:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0004e2:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0004e6:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c0004ea:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c0004ec:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last
1c0004ee:	00964963          	blt	a2,s1,1c000500 <__rt_hyper_repeat_copy_not_last>
  mv        x12, x9
1c0004f2:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004f4:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c0004f8:	00061463          	bnez	a2,1c000500 <__rt_hyper_repeat_copy_not_last>
1c0004fc:	fa9ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000500 <__rt_hyper_repeat_copy_not_last>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000500:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000504:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c000508:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00050a:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00050c:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c00050e:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000510:	f95ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000514 <__rt_hyper_handle_copy_end>:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_end_task
  lw        x11, 0(x8)
  sw        x0, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_end_task)(x0)
1c000514:	32002583          	lw	a1,800(zero) # 320 <__rt_hyper_end_task>
  sw        x0, %tiny(__rt_hyper_end_task)(x0)
1c000518:	32002023          	sw	zero,800(zero) # 320 <__rt_hyper_end_task>
#endif
  beqz      x11, __rt_hyper_handle_emu_task
1c00051c:	c589                	beqz	a1,1c000526 <__rt_hyper_handle_emu_task>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_current_task
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_current_task)(x0)
1c00051e:	32002223          	sw	zero,804(zero) # 324 <__rt_hyper_current_task>
#endif
  jal       x9, __rt_event_enqueue
1c000522:	bedff4ef          	jal	s1,1c00010e <__rt_event_enqueue>

1c000526 <__rt_hyper_handle_emu_task>:
__rt_hyper_handle_emu_task:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_emu_task
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_emu_task)(x0)
1c000526:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
#endif
  beqz      x10, __rt_hyper_handle_pending_tasks
1c00052a:	c919                	beqz	a0,1c000540 <__rt_hyper_handle_pending_tasks>

  la      x12, __rt_hyper_resume_emu_task
1c00052c:	0000b617          	auipc	a2,0xb
1c000530:	3f460613          	addi	a2,a2,1012 # 1c00b920 <__rt_hyper_resume_emu_task>
  la        x9, udma_event_handler_end
1c000534:	00000497          	auipc	s1,0x0
1c000538:	f7048493          	addi	s1,s1,-144 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00053c:	cc5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000540 <__rt_hyper_handle_pending_tasks>:
__rt_hyper_handle_pending_tasks:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_tasks
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_tasks)(x0)
1c000540:	34002503          	lw	a0,832(zero) # 340 <__rt_hyper_pending_tasks>
#endif
  beqz      x10, udma_event_handler_end
1c000544:	00051463          	bnez	a0,1c00054c <__rt_hyper_handle_pending_tasks+0xc>
1c000548:	f5dff06f          	j	1c0004a4 <udma_event_handler_end>

  la      x12, __rt_hyper_resume_copy
1c00054c:	0000b617          	auipc	a2,0xb
1c000550:	3dc60613          	addi	a2,a2,988 # 1c00b928 <__rt_hyper_resume_copy>
  la        x9, udma_event_handler_end
1c000554:	00000497          	auipc	s1,0x0
1c000558:	f5048493          	addi	s1,s1,-176 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00055c:	ca5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000560 <__rt_hyper_handle_burst>:
  la        x8, __rt_hyper_pending_repeat
  lw        x12, 0(x8)
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c000560:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>

  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c000564:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000568:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c00056c:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c000570:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000572:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000574:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000578:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c00057c:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c000580:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c000582:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last2
1c000584:	00964f63          	blt	a2,s1,1c0005a2 <__rt_hyper_repeat_copy_not_last2>

  la        x12, __rt_hyper_handle_copy
1c000588:	00000617          	auipc	a2,0x0
1c00058c:	f4060613          	addi	a2,a2,-192 # 1c0004c8 <__rt_hyper_handle_copy>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_udma_handle
  sw        x12, 0(x8)
#else
  sw        x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000590:	30c02423          	sw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif

  mv        x12, x9
1c000594:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000596:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c00059a:	00061463          	bnez	a2,1c0005a2 <__rt_hyper_repeat_copy_not_last2>
1c00059e:	f07ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005a2 <__rt_hyper_repeat_copy_not_last2>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0005a2:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0005a6:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c0005aa:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c0005ac:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c0005ae:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c0005b0:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c0005b2:	ef3ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005b6 <pwm_event_handler>:
#include "archi/eu/eu_v3.h"

  .global pwm_event_handler
  .extern pwmEventsStatus
pwm_event_handler:
  la   x10, pwmEventsStatus
1c0005b6:	e4000517          	auipc	a0,0xe4000
1c0005ba:	d9e50513          	addi	a0,a0,-610 # 354 <pwmEventsStatus>
  addi  x11, x0, 1
1c0005be:	00100593          	li	a1,1
  lw   x8, 0(x10)
1c0005c2:	4100                	lw	s0,0(a0)
  p.insertr x8, x11, x9
1c0005c4:	8095a433          	p.insertr	s0,a1,s1
  sw   x8, 0(x10)
1c0005c8:	c100                	sw	s0,0(a0)

  // continue with sw event raising
  li   x9, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (PLP_RT_NOTIF_EVENT << 2)
1c0005ca:	002044b7          	lui	s1,0x204
1c0005ce:	10c48493          	addi	s1,s1,268 # 20410c <__L2+0x18410c>
  li   x10, -1
1c0005d2:	557d                	li	a0,-1
  sw   x10, 0(x9)
1c0005d4:	c088                	sw	a0,0(s1)

  j udma_event_handler_end
1c0005d6:	ecfff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005da <__rt_gpio_handler>:
  bnez     x8, __rt_gpio_ff1_loop
#endif

#else
  .extern __pi_gpio_handler
  mv        x11, x8
1c0005da:	85a2                	mv	a1,s0
  la        x12, __pi_gpio_handler
1c0005dc:	0000b617          	auipc	a2,0xb
1c0005e0:	41460613          	addi	a2,a2,1044 # 1c00b9f0 <__pi_gpio_handler>
  la        x9, __rt_gpio_handler_end
1c0005e4:	00000497          	auipc	s1,0x0
1c0005e8:	00c48493          	addi	s1,s1,12 # 1c0005f0 <__rt_gpio_handler_end>
  j         __rt_call_external_c_function
1c0005ec:	c15ff06f          	j	1c000200 <__rt_call_external_c_function>

1c0005f0 <__rt_gpio_handler_end>:

  mret

#else

  j udma_event_handler_end
1c0005f0:	eb5ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005f4 <__udivdi3>:
1c0005f4:	87b2                	mv	a5,a2
1c0005f6:	8736                	mv	a4,a3
1c0005f8:	88aa                	mv	a7,a0
1c0005fa:	882e                	mv	a6,a1
1c0005fc:	1e069d63          	bnez	a3,1c0007f6 <__udivdi3+0x202>
1c000600:	1c00d337          	lui	t1,0x1c00d
1c000604:	43c30313          	addi	t1,t1,1084 # 1c00d43c <__clz_tab>
1c000608:	0ac5fd63          	bleu	a2,a1,1c0006c2 <__udivdi3+0xce>
1c00060c:	6741                	lui	a4,0x10
1c00060e:	0ae67363          	bleu	a4,a2,1c0006b4 <__udivdi3+0xc0>
1c000612:	0ff00693          	li	a3,255
1c000616:	00c6b6b3          	sltu	a3,a3,a2
1c00061a:	068e                	slli	a3,a3,0x3
1c00061c:	00d65733          	srl	a4,a2,a3
1c000620:	933a                	add	t1,t1,a4
1c000622:	00034703          	lbu	a4,0(t1)
1c000626:	02000313          	li	t1,32
1c00062a:	96ba                	add	a3,a3,a4
1c00062c:	40d30333          	sub	t1,t1,a3
1c000630:	00030c63          	beqz	t1,1c000648 <__udivdi3+0x54>
1c000634:	00659733          	sll	a4,a1,t1
1c000638:	00d556b3          	srl	a3,a0,a3
1c00063c:	006617b3          	sll	a5,a2,t1
1c000640:	00e6e833          	or	a6,a3,a4
1c000644:	006518b3          	sll	a7,a0,t1
1c000648:	0107d513          	srli	a0,a5,0x10
1c00064c:	02a85733          	divu	a4,a6,a0
1c000650:	1007d5b3          	p.exthz	a1,a5
1c000654:	0108d693          	srli	a3,a7,0x10
1c000658:	02a87633          	remu	a2,a6,a0
1c00065c:	02e58833          	mul	a6,a1,a4
1c000660:	0642                	slli	a2,a2,0x10
1c000662:	8ed1                	or	a3,a3,a2
1c000664:	863a                	mv	a2,a4
1c000666:	0106fc63          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c00066a:	96be                	add	a3,a3,a5
1c00066c:	fff70613          	addi	a2,a4,-1 # ffff <__l1_heap_size+0x43>
1c000670:	00f6e763          	bltu	a3,a5,1c00067e <__udivdi3+0x8a>
1c000674:	0106f563          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c000678:	ffe70613          	addi	a2,a4,-2
1c00067c:	96be                	add	a3,a3,a5
1c00067e:	410686b3          	sub	a3,a3,a6
1c000682:	02a6f833          	remu	a6,a3,a0
1c000686:	02a6d6b3          	divu	a3,a3,a0
1c00068a:	df0828b3          	p.insert	a7,a6,15,16
1c00068e:	02d58733          	mul	a4,a1,a3
1c000692:	8536                	mv	a0,a3
1c000694:	00e8fb63          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c000698:	98be                	add	a7,a7,a5
1c00069a:	fff68513          	addi	a0,a3,-1
1c00069e:	00f8e663          	bltu	a7,a5,1c0006aa <__udivdi3+0xb6>
1c0006a2:	00e8f463          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c0006a6:	ffe68513          	addi	a0,a3,-2
1c0006aa:	01061793          	slli	a5,a2,0x10
1c0006ae:	8fc9                	or	a5,a5,a0
1c0006b0:	4801                	li	a6,0
1c0006b2:	a06d                	j	1c00075c <__udivdi3+0x168>
1c0006b4:	01000737          	lui	a4,0x1000
1c0006b8:	46c1                	li	a3,16
1c0006ba:	f6e661e3          	bltu	a2,a4,1c00061c <__udivdi3+0x28>
1c0006be:	46e1                	li	a3,24
1c0006c0:	bfb1                	j	1c00061c <__udivdi3+0x28>
1c0006c2:	e601                	bnez	a2,1c0006ca <__udivdi3+0xd6>
1c0006c4:	4685                	li	a3,1
1c0006c6:	02c6d7b3          	divu	a5,a3,a2
1c0006ca:	66c1                	lui	a3,0x10
1c0006cc:	08d7fb63          	bleu	a3,a5,1c000762 <__udivdi3+0x16e>
1c0006d0:	0ff00693          	li	a3,255
1c0006d4:	00f6f363          	bleu	a5,a3,1c0006da <__udivdi3+0xe6>
1c0006d8:	4721                	li	a4,8
1c0006da:	00e7d6b3          	srl	a3,a5,a4
1c0006de:	9336                	add	t1,t1,a3
1c0006e0:	00034683          	lbu	a3,0(t1)
1c0006e4:	02000613          	li	a2,32
1c0006e8:	96ba                	add	a3,a3,a4
1c0006ea:	8e15                	sub	a2,a2,a3
1c0006ec:	e251                	bnez	a2,1c000770 <__udivdi3+0x17c>
1c0006ee:	40f58733          	sub	a4,a1,a5
1c0006f2:	4805                	li	a6,1
1c0006f4:	0107d513          	srli	a0,a5,0x10
1c0006f8:	1007d5b3          	p.exthz	a1,a5
1c0006fc:	0108d693          	srli	a3,a7,0x10
1c000700:	02a77633          	remu	a2,a4,a0
1c000704:	02a75733          	divu	a4,a4,a0
1c000708:	0642                	slli	a2,a2,0x10
1c00070a:	8ed1                	or	a3,a3,a2
1c00070c:	02e58333          	mul	t1,a1,a4
1c000710:	863a                	mv	a2,a4
1c000712:	0066fc63          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000716:	96be                	add	a3,a3,a5
1c000718:	fff70613          	addi	a2,a4,-1 # ffffff <__L2+0xf7ffff>
1c00071c:	00f6e763          	bltu	a3,a5,1c00072a <__udivdi3+0x136>
1c000720:	0066f563          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000724:	ffe70613          	addi	a2,a4,-2
1c000728:	96be                	add	a3,a3,a5
1c00072a:	406686b3          	sub	a3,a3,t1
1c00072e:	02a6f333          	remu	t1,a3,a0
1c000732:	02a6d6b3          	divu	a3,a3,a0
1c000736:	df0328b3          	p.insert	a7,t1,15,16
1c00073a:	02d58733          	mul	a4,a1,a3
1c00073e:	8536                	mv	a0,a3
1c000740:	00e8fb63          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000744:	98be                	add	a7,a7,a5
1c000746:	fff68513          	addi	a0,a3,-1 # ffff <__l1_heap_size+0x43>
1c00074a:	00f8e663          	bltu	a7,a5,1c000756 <__udivdi3+0x162>
1c00074e:	00e8f463          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000752:	ffe68513          	addi	a0,a3,-2
1c000756:	01061793          	slli	a5,a2,0x10
1c00075a:	8fc9                	or	a5,a5,a0
1c00075c:	853e                	mv	a0,a5
1c00075e:	85c2                	mv	a1,a6
1c000760:	8082                	ret
1c000762:	010006b7          	lui	a3,0x1000
1c000766:	4741                	li	a4,16
1c000768:	f6d7e9e3          	bltu	a5,a3,1c0006da <__udivdi3+0xe6>
1c00076c:	4761                	li	a4,24
1c00076e:	b7b5                	j	1c0006da <__udivdi3+0xe6>
1c000770:	00c797b3          	sll	a5,a5,a2
1c000774:	00d5d333          	srl	t1,a1,a3
1c000778:	0107de13          	srli	t3,a5,0x10
1c00077c:	00c59733          	sll	a4,a1,a2
1c000780:	00c518b3          	sll	a7,a0,a2
1c000784:	00d555b3          	srl	a1,a0,a3
1c000788:	03c35533          	divu	a0,t1,t3
1c00078c:	8dd9                	or	a1,a1,a4
1c00078e:	1007d733          	p.exthz	a4,a5
1c000792:	0105d693          	srli	a3,a1,0x10
1c000796:	03c37633          	remu	a2,t1,t3
1c00079a:	882a                	mv	a6,a0
1c00079c:	02a70333          	mul	t1,a4,a0
1c0007a0:	0642                	slli	a2,a2,0x10
1c0007a2:	8ed1                	or	a3,a3,a2
1c0007a4:	0066fc63          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007a8:	96be                	add	a3,a3,a5
1c0007aa:	fff50813          	addi	a6,a0,-1
1c0007ae:	00f6e763          	bltu	a3,a5,1c0007bc <__udivdi3+0x1c8>
1c0007b2:	0066f563          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007b6:	ffe50813          	addi	a6,a0,-2
1c0007ba:	96be                	add	a3,a3,a5
1c0007bc:	406686b3          	sub	a3,a3,t1
1c0007c0:	03c6f633          	remu	a2,a3,t3
1c0007c4:	03c6d6b3          	divu	a3,a3,t3
1c0007c8:	df0625b3          	p.insert	a1,a2,15,16
1c0007cc:	02d70733          	mul	a4,a4,a3
1c0007d0:	8636                	mv	a2,a3
1c0007d2:	00e5fc63          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007d6:	95be                	add	a1,a1,a5
1c0007d8:	fff68613          	addi	a2,a3,-1 # ffffff <__L2+0xf7ffff>
1c0007dc:	00f5e763          	bltu	a1,a5,1c0007ea <__udivdi3+0x1f6>
1c0007e0:	00e5f563          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007e4:	ffe68613          	addi	a2,a3,-2
1c0007e8:	95be                	add	a1,a1,a5
1c0007ea:	0842                	slli	a6,a6,0x10
1c0007ec:	40e58733          	sub	a4,a1,a4
1c0007f0:	00c86833          	or	a6,a6,a2
1c0007f4:	b701                	j	1c0006f4 <__udivdi3+0x100>
1c0007f6:	12d5ea63          	bltu	a1,a3,1c00092a <__udivdi3+0x336>
1c0007fa:	67c1                	lui	a5,0x10
1c0007fc:	02f6fd63          	bleu	a5,a3,1c000836 <__udivdi3+0x242>
1c000800:	0ff00793          	li	a5,255
1c000804:	00d7b8b3          	sltu	a7,a5,a3
1c000808:	088e                	slli	a7,a7,0x3
1c00080a:	1c00d737          	lui	a4,0x1c00d
1c00080e:	0116d7b3          	srl	a5,a3,a7
1c000812:	43c70713          	addi	a4,a4,1084 # 1c00d43c <__clz_tab>
1c000816:	97ba                	add	a5,a5,a4
1c000818:	0007c783          	lbu	a5,0(a5) # 10000 <__L1Cl>
1c00081c:	02000813          	li	a6,32
1c000820:	97c6                	add	a5,a5,a7
1c000822:	40f80833          	sub	a6,a6,a5
1c000826:	00081f63          	bnez	a6,1c000844 <__udivdi3+0x250>
1c00082a:	4785                	li	a5,1
1c00082c:	f2b6e8e3          	bltu	a3,a1,1c00075c <__udivdi3+0x168>
1c000830:	04a637b3          	p.sletu	a5,a2,a0
1c000834:	b725                	j	1c00075c <__udivdi3+0x168>
1c000836:	010007b7          	lui	a5,0x1000
1c00083a:	48c1                	li	a7,16
1c00083c:	fcf6e7e3          	bltu	a3,a5,1c00080a <__udivdi3+0x216>
1c000840:	48e1                	li	a7,24
1c000842:	b7e1                	j	1c00080a <__udivdi3+0x216>
1c000844:	00f658b3          	srl	a7,a2,a5
1c000848:	010696b3          	sll	a3,a3,a6
1c00084c:	00d8e6b3          	or	a3,a7,a3
1c000850:	00f5d333          	srl	t1,a1,a5
1c000854:	0106de13          	srli	t3,a3,0x10
1c000858:	00f55733          	srl	a4,a0,a5
1c00085c:	03c377b3          	remu	a5,t1,t3
1c000860:	1006d8b3          	p.exthz	a7,a3
1c000864:	010595b3          	sll	a1,a1,a6
1c000868:	8f4d                	or	a4,a4,a1
1c00086a:	01075593          	srli	a1,a4,0x10
1c00086e:	01061633          	sll	a2,a2,a6
1c000872:	03c35333          	divu	t1,t1,t3
1c000876:	07c2                	slli	a5,a5,0x10
1c000878:	8ddd                	or	a1,a1,a5
1c00087a:	02688eb3          	mul	t4,a7,t1
1c00087e:	879a                	mv	a5,t1
1c000880:	01d5fc63          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000884:	95b6                	add	a1,a1,a3
1c000886:	fff30793          	addi	a5,t1,-1
1c00088a:	00d5e763          	bltu	a1,a3,1c000898 <__udivdi3+0x2a4>
1c00088e:	01d5f563          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000892:	ffe30793          	addi	a5,t1,-2
1c000896:	95b6                	add	a1,a1,a3
1c000898:	41d585b3          	sub	a1,a1,t4
1c00089c:	03c5f333          	remu	t1,a1,t3
1c0008a0:	03c5d5b3          	divu	a1,a1,t3
1c0008a4:	df032733          	p.insert	a4,t1,15,16
1c0008a8:	02b888b3          	mul	a7,a7,a1
1c0008ac:	832e                	mv	t1,a1
1c0008ae:	01177c63          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008b2:	9736                	add	a4,a4,a3
1c0008b4:	fff58313          	addi	t1,a1,-1
1c0008b8:	00d76763          	bltu	a4,a3,1c0008c6 <__udivdi3+0x2d2>
1c0008bc:	01177563          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008c0:	ffe58313          	addi	t1,a1,-2
1c0008c4:	9736                	add	a4,a4,a3
1c0008c6:	07c2                	slli	a5,a5,0x10
1c0008c8:	6e41                	lui	t3,0x10
1c0008ca:	0067e7b3          	or	a5,a5,t1
1c0008ce:	fffe0593          	addi	a1,t3,-1 # ffff <__l1_heap_size+0x43>
1c0008d2:	00b7f6b3          	and	a3,a5,a1
1c0008d6:	41170733          	sub	a4,a4,a7
1c0008da:	8df1                	and	a1,a1,a2
1c0008dc:	0107d893          	srli	a7,a5,0x10
1c0008e0:	02b68333          	mul	t1,a3,a1
1c0008e4:	8241                	srli	a2,a2,0x10
1c0008e6:	02b885b3          	mul	a1,a7,a1
1c0008ea:	8eae                	mv	t4,a1
1c0008ec:	42c68eb3          	p.mac	t4,a3,a2
1c0008f0:	01035693          	srli	a3,t1,0x10
1c0008f4:	96f6                	add	a3,a3,t4
1c0008f6:	02c888b3          	mul	a7,a7,a2
1c0008fa:	00b6f363          	bleu	a1,a3,1c000900 <__udivdi3+0x30c>
1c0008fe:	98f2                	add	a7,a7,t3
1c000900:	0106d613          	srli	a2,a3,0x10
1c000904:	98b2                	add	a7,a7,a2
1c000906:	03176063          	bltu	a4,a7,1c000926 <__udivdi3+0x332>
1c00090a:	db1713e3          	bne	a4,a7,1c0006b0 <__udivdi3+0xbc>
1c00090e:	6741                	lui	a4,0x10
1c000910:	177d                	addi	a4,a4,-1
1c000912:	8ef9                	and	a3,a3,a4
1c000914:	06c2                	slli	a3,a3,0x10
1c000916:	00e37333          	and	t1,t1,a4
1c00091a:	01051533          	sll	a0,a0,a6
1c00091e:	969a                	add	a3,a3,t1
1c000920:	4801                	li	a6,0
1c000922:	e2d57de3          	bleu	a3,a0,1c00075c <__udivdi3+0x168>
1c000926:	17fd                	addi	a5,a5,-1
1c000928:	b361                	j	1c0006b0 <__udivdi3+0xbc>
1c00092a:	4801                	li	a6,0
1c00092c:	4781                	li	a5,0
1c00092e:	b53d                	j	1c00075c <__udivdi3+0x168>

1c000930 <__umoddi3>:
1c000930:	88b2                	mv	a7,a2
1c000932:	8736                	mv	a4,a3
1c000934:	87aa                	mv	a5,a0
1c000936:	882e                	mv	a6,a1
1c000938:	1a069963          	bnez	a3,1c000aea <__umoddi3+0x1ba>
1c00093c:	1c00d6b7          	lui	a3,0x1c00d
1c000940:	43c68693          	addi	a3,a3,1084 # 1c00d43c <__clz_tab>
1c000944:	0ac5f463          	bleu	a2,a1,1c0009ec <__umoddi3+0xbc>
1c000948:	6341                	lui	t1,0x10
1c00094a:	08667a63          	bleu	t1,a2,1c0009de <__umoddi3+0xae>
1c00094e:	0ff00313          	li	t1,255
1c000952:	00c37363          	bleu	a2,t1,1c000958 <__umoddi3+0x28>
1c000956:	4721                	li	a4,8
1c000958:	00e65333          	srl	t1,a2,a4
1c00095c:	969a                	add	a3,a3,t1
1c00095e:	0006c683          	lbu	a3,0(a3)
1c000962:	02000313          	li	t1,32
1c000966:	9736                	add	a4,a4,a3
1c000968:	40e30333          	sub	t1,t1,a4
1c00096c:	00030c63          	beqz	t1,1c000984 <__umoddi3+0x54>
1c000970:	006595b3          	sll	a1,a1,t1
1c000974:	00e55733          	srl	a4,a0,a4
1c000978:	006618b3          	sll	a7,a2,t1
1c00097c:	00b76833          	or	a6,a4,a1
1c000980:	006517b3          	sll	a5,a0,t1
1c000984:	0108d613          	srli	a2,a7,0x10
1c000988:	02c87733          	remu	a4,a6,a2
1c00098c:	1008d533          	p.exthz	a0,a7
1c000990:	0107d693          	srli	a3,a5,0x10
1c000994:	02c85833          	divu	a6,a6,a2
1c000998:	0742                	slli	a4,a4,0x10
1c00099a:	8ed9                	or	a3,a3,a4
1c00099c:	03050833          	mul	a6,a0,a6
1c0009a0:	0106f863          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009a4:	96c6                	add	a3,a3,a7
1c0009a6:	0116e563          	bltu	a3,a7,1c0009b0 <__umoddi3+0x80>
1c0009aa:	0106f363          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009ae:	96c6                	add	a3,a3,a7
1c0009b0:	410686b3          	sub	a3,a3,a6
1c0009b4:	02c6f733          	remu	a4,a3,a2
1c0009b8:	02c6d6b3          	divu	a3,a3,a2
1c0009bc:	df0727b3          	p.insert	a5,a4,15,16
1c0009c0:	02d506b3          	mul	a3,a0,a3
1c0009c4:	00d7f863          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009c8:	97c6                	add	a5,a5,a7
1c0009ca:	0117e563          	bltu	a5,a7,1c0009d4 <__umoddi3+0xa4>
1c0009ce:	00d7f363          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009d2:	97c6                	add	a5,a5,a7
1c0009d4:	8f95                	sub	a5,a5,a3
1c0009d6:	0067d533          	srl	a0,a5,t1
1c0009da:	4581                	li	a1,0
1c0009dc:	8082                	ret
1c0009de:	01000337          	lui	t1,0x1000
1c0009e2:	4741                	li	a4,16
1c0009e4:	f6666ae3          	bltu	a2,t1,1c000958 <__umoddi3+0x28>
1c0009e8:	4761                	li	a4,24
1c0009ea:	b7bd                	j	1c000958 <__umoddi3+0x28>
1c0009ec:	e601                	bnez	a2,1c0009f4 <__umoddi3+0xc4>
1c0009ee:	4605                	li	a2,1
1c0009f0:	031658b3          	divu	a7,a2,a7
1c0009f4:	6641                	lui	a2,0x10
1c0009f6:	06c8ff63          	bleu	a2,a7,1c000a74 <__umoddi3+0x144>
1c0009fa:	0ff00613          	li	a2,255
1c0009fe:	01167363          	bleu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a02:	4721                	li	a4,8
1c000a04:	00e8d633          	srl	a2,a7,a4
1c000a08:	96b2                	add	a3,a3,a2
1c000a0a:	0006c603          	lbu	a2,0(a3)
1c000a0e:	02000313          	li	t1,32
1c000a12:	963a                	add	a2,a2,a4
1c000a14:	40c30333          	sub	t1,t1,a2
1c000a18:	06031563          	bnez	t1,1c000a82 <__umoddi3+0x152>
1c000a1c:	411585b3          	sub	a1,a1,a7
1c000a20:	0108d713          	srli	a4,a7,0x10
1c000a24:	1008d533          	p.exthz	a0,a7
1c000a28:	0107d613          	srli	a2,a5,0x10
1c000a2c:	02e5f6b3          	remu	a3,a1,a4
1c000a30:	02e5d5b3          	divu	a1,a1,a4
1c000a34:	06c2                	slli	a3,a3,0x10
1c000a36:	8ed1                	or	a3,a3,a2
1c000a38:	02b505b3          	mul	a1,a0,a1
1c000a3c:	00b6f863          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a40:	96c6                	add	a3,a3,a7
1c000a42:	0116e563          	bltu	a3,a7,1c000a4c <__umoddi3+0x11c>
1c000a46:	00b6f363          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a4a:	96c6                	add	a3,a3,a7
1c000a4c:	40b685b3          	sub	a1,a3,a1
1c000a50:	02e5f6b3          	remu	a3,a1,a4
1c000a54:	02e5d5b3          	divu	a1,a1,a4
1c000a58:	df06a7b3          	p.insert	a5,a3,15,16
1c000a5c:	02b505b3          	mul	a1,a0,a1
1c000a60:	00b7f863          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a64:	97c6                	add	a5,a5,a7
1c000a66:	0117e563          	bltu	a5,a7,1c000a70 <__umoddi3+0x140>
1c000a6a:	00b7f363          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a6e:	97c6                	add	a5,a5,a7
1c000a70:	8f8d                	sub	a5,a5,a1
1c000a72:	b795                	j	1c0009d6 <__umoddi3+0xa6>
1c000a74:	01000637          	lui	a2,0x1000
1c000a78:	4741                	li	a4,16
1c000a7a:	f8c8e5e3          	bltu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a7e:	4761                	li	a4,24
1c000a80:	b751                	j	1c000a04 <__umoddi3+0xd4>
1c000a82:	006898b3          	sll	a7,a7,t1
1c000a86:	00c5d733          	srl	a4,a1,a2
1c000a8a:	006517b3          	sll	a5,a0,t1
1c000a8e:	00c55633          	srl	a2,a0,a2
1c000a92:	006595b3          	sll	a1,a1,t1
1c000a96:	0108d513          	srli	a0,a7,0x10
1c000a9a:	8dd1                	or	a1,a1,a2
1c000a9c:	02a77633          	remu	a2,a4,a0
1c000aa0:	1008d833          	p.exthz	a6,a7
1c000aa4:	0105d693          	srli	a3,a1,0x10
1c000aa8:	02a75733          	divu	a4,a4,a0
1c000aac:	0642                	slli	a2,a2,0x10
1c000aae:	8ed1                	or	a3,a3,a2
1c000ab0:	02e80733          	mul	a4,a6,a4
1c000ab4:	00e6f863          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ab8:	96c6                	add	a3,a3,a7
1c000aba:	0116e563          	bltu	a3,a7,1c000ac4 <__umoddi3+0x194>
1c000abe:	00e6f363          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ac2:	96c6                	add	a3,a3,a7
1c000ac4:	8e99                	sub	a3,a3,a4
1c000ac6:	02a6f733          	remu	a4,a3,a0
1c000aca:	02a6d6b3          	divu	a3,a3,a0
1c000ace:	df0725b3          	p.insert	a1,a4,15,16
1c000ad2:	02d806b3          	mul	a3,a6,a3
1c000ad6:	00d5f863          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ada:	95c6                	add	a1,a1,a7
1c000adc:	0115e563          	bltu	a1,a7,1c000ae6 <__umoddi3+0x1b6>
1c000ae0:	00d5f363          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ae4:	95c6                	add	a1,a1,a7
1c000ae6:	8d95                	sub	a1,a1,a3
1c000ae8:	bf25                	j	1c000a20 <__umoddi3+0xf0>
1c000aea:	eed5e9e3          	bltu	a1,a3,1c0009dc <__umoddi3+0xac>
1c000aee:	6741                	lui	a4,0x10
1c000af0:	04e6f563          	bleu	a4,a3,1c000b3a <__umoddi3+0x20a>
1c000af4:	0ff00e93          	li	t4,255
1c000af8:	00deb733          	sltu	a4,t4,a3
1c000afc:	070e                	slli	a4,a4,0x3
1c000afe:	1c00d337          	lui	t1,0x1c00d
1c000b02:	00e6d8b3          	srl	a7,a3,a4
1c000b06:	43c30313          	addi	t1,t1,1084 # 1c00d43c <__clz_tab>
1c000b0a:	989a                	add	a7,a7,t1
1c000b0c:	0008ce83          	lbu	t4,0(a7)
1c000b10:	02000e13          	li	t3,32
1c000b14:	9eba                	add	t4,t4,a4
1c000b16:	41de0e33          	sub	t3,t3,t4
1c000b1a:	020e1763          	bnez	t3,1c000b48 <__umoddi3+0x218>
1c000b1e:	00b6e463          	bltu	a3,a1,1c000b26 <__umoddi3+0x1f6>
1c000b22:	00c56963          	bltu	a0,a2,1c000b34 <__umoddi3+0x204>
1c000b26:	40c507b3          	sub	a5,a0,a2
1c000b2a:	8d95                	sub	a1,a1,a3
1c000b2c:	00f53533          	sltu	a0,a0,a5
1c000b30:	40a58833          	sub	a6,a1,a0
1c000b34:	853e                	mv	a0,a5
1c000b36:	85c2                	mv	a1,a6
1c000b38:	b555                	j	1c0009dc <__umoddi3+0xac>
1c000b3a:	010008b7          	lui	a7,0x1000
1c000b3e:	4741                	li	a4,16
1c000b40:	fb16efe3          	bltu	a3,a7,1c000afe <__umoddi3+0x1ce>
1c000b44:	4761                	li	a4,24
1c000b46:	bf65                	j	1c000afe <__umoddi3+0x1ce>
1c000b48:	01d65733          	srl	a4,a2,t4
1c000b4c:	01c696b3          	sll	a3,a3,t3
1c000b50:	8ed9                	or	a3,a3,a4
1c000b52:	01d5d7b3          	srl	a5,a1,t4
1c000b56:	0106d813          	srli	a6,a3,0x10
1c000b5a:	0307f333          	remu	t1,a5,a6
1c000b5e:	1006d733          	p.exthz	a4,a3
1c000b62:	01d558b3          	srl	a7,a0,t4
1c000b66:	01c595b3          	sll	a1,a1,t3
1c000b6a:	00b8e5b3          	or	a1,a7,a1
1c000b6e:	0105d893          	srli	a7,a1,0x10
1c000b72:	01c61633          	sll	a2,a2,t3
1c000b76:	01c51533          	sll	a0,a0,t3
1c000b7a:	0307d7b3          	divu	a5,a5,a6
1c000b7e:	0342                	slli	t1,t1,0x10
1c000b80:	011368b3          	or	a7,t1,a7
1c000b84:	02f70f33          	mul	t5,a4,a5
1c000b88:	833e                	mv	t1,a5
1c000b8a:	01e8fc63          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b8e:	98b6                	add	a7,a7,a3
1c000b90:	fff78313          	addi	t1,a5,-1 # ffffff <__L2+0xf7ffff>
1c000b94:	00d8e763          	bltu	a7,a3,1c000ba2 <__umoddi3+0x272>
1c000b98:	01e8f563          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b9c:	ffe78313          	addi	t1,a5,-2
1c000ba0:	98b6                	add	a7,a7,a3
1c000ba2:	41e888b3          	sub	a7,a7,t5
1c000ba6:	0308f7b3          	remu	a5,a7,a6
1c000baa:	0308d8b3          	divu	a7,a7,a6
1c000bae:	df07a5b3          	p.insert	a1,a5,15,16
1c000bb2:	03170733          	mul	a4,a4,a7
1c000bb6:	87c6                	mv	a5,a7
1c000bb8:	00e5fc63          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bbc:	95b6                	add	a1,a1,a3
1c000bbe:	fff88793          	addi	a5,a7,-1 # ffffff <__L2+0xf7ffff>
1c000bc2:	00d5e763          	bltu	a1,a3,1c000bd0 <__umoddi3+0x2a0>
1c000bc6:	00e5f563          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bca:	ffe88793          	addi	a5,a7,-2
1c000bce:	95b6                	add	a1,a1,a3
1c000bd0:	0342                	slli	t1,t1,0x10
1c000bd2:	6f41                	lui	t5,0x10
1c000bd4:	00f36333          	or	t1,t1,a5
1c000bd8:	ffff0793          	addi	a5,t5,-1 # ffff <__l1_heap_size+0x43>
1c000bdc:	00f37833          	and	a6,t1,a5
1c000be0:	01035313          	srli	t1,t1,0x10
1c000be4:	8ff1                	and	a5,a5,a2
1c000be6:	02f808b3          	mul	a7,a6,a5
1c000bea:	8d99                	sub	a1,a1,a4
1c000bec:	01065713          	srli	a4,a2,0x10
1c000bf0:	02f307b3          	mul	a5,t1,a5
1c000bf4:	8fbe                	mv	t6,a5
1c000bf6:	42e80fb3          	p.mac	t6,a6,a4
1c000bfa:	0108d813          	srli	a6,a7,0x10
1c000bfe:	987e                	add	a6,a6,t6
1c000c00:	02e30333          	mul	t1,t1,a4
1c000c04:	00f87363          	bleu	a5,a6,1c000c0a <__umoddi3+0x2da>
1c000c08:	937a                	add	t1,t1,t5
1c000c0a:	01085713          	srli	a4,a6,0x10
1c000c0e:	933a                	add	t1,t1,a4
1c000c10:	6741                	lui	a4,0x10
1c000c12:	177d                	addi	a4,a4,-1
1c000c14:	00e87833          	and	a6,a6,a4
1c000c18:	0842                	slli	a6,a6,0x10
1c000c1a:	00e8f733          	and	a4,a7,a4
1c000c1e:	9742                	add	a4,a4,a6
1c000c20:	0065e663          	bltu	a1,t1,1c000c2c <__umoddi3+0x2fc>
1c000c24:	00659d63          	bne	a1,t1,1c000c3e <__umoddi3+0x30e>
1c000c28:	00e57b63          	bleu	a4,a0,1c000c3e <__umoddi3+0x30e>
1c000c2c:	40c70633          	sub	a2,a4,a2
1c000c30:	00c73733          	sltu	a4,a4,a2
1c000c34:	40d30333          	sub	t1,t1,a3
1c000c38:	40e30333          	sub	t1,t1,a4
1c000c3c:	8732                	mv	a4,a2
1c000c3e:	40e50733          	sub	a4,a0,a4
1c000c42:	00e53533          	sltu	a0,a0,a4
1c000c46:	406585b3          	sub	a1,a1,t1
1c000c4a:	8d89                	sub	a1,a1,a0
1c000c4c:	01d597b3          	sll	a5,a1,t4
1c000c50:	01c75733          	srl	a4,a4,t3
1c000c54:	00e7e533          	or	a0,a5,a4
1c000c58:	01c5d5b3          	srl	a1,a1,t3
1c000c5c:	b341                	j	1c0009dc <__umoddi3+0xac>

1c000c5e <__divsf3>:
1c000c5e:	cf751633          	p.extractu	a2,a0,7,23
1c000c62:	ec051333          	p.extractu	t1,a0,22,0
1c000c66:	817d                	srli	a0,a0,0x1f
1c000c68:	ce39                	beqz	a2,1c000cc6 <__divsf3+0x68>
1c000c6a:	0ff00793          	li	a5,255
1c000c6e:	06f60b63          	beq	a2,a5,1c000ce4 <__divsf3+0x86>
1c000c72:	030e                	slli	t1,t1,0x3
1c000c74:	c1a34333          	p.bset	t1,t1,0,26
1c000c78:	f8160613          	addi	a2,a2,-127 # ffff81 <__L2+0xf7ff81>
1c000c7c:	4681                	li	a3,0
1c000c7e:	cf759733          	p.extractu	a4,a1,7,23
1c000c82:	ec0597b3          	p.extractu	a5,a1,22,0
1c000c86:	81fd                	srli	a1,a1,0x1f
1c000c88:	cb25                	beqz	a4,1c000cf8 <__divsf3+0x9a>
1c000c8a:	0ff00813          	li	a6,255
1c000c8e:	09070463          	beq	a4,a6,1c000d16 <__divsf3+0xb8>
1c000c92:	078e                	slli	a5,a5,0x3
1c000c94:	c1a7c7b3          	p.bset	a5,a5,0,26
1c000c98:	f8170713          	addi	a4,a4,-127 # ff81 <__rt_stack_size+0xf781>
1c000c9c:	4801                	li	a6,0
1c000c9e:	40e60e33          	sub	t3,a2,a4
1c000ca2:	00269713          	slli	a4,a3,0x2
1c000ca6:	01076733          	or	a4,a4,a6
1c000caa:	177d                	addi	a4,a4,-1
1c000cac:	4639                	li	a2,14
1c000cae:	00b548b3          	xor	a7,a0,a1
1c000cb2:	06e66b63          	bltu	a2,a4,1c000d28 <__divsf3+0xca>
1c000cb6:	1c00d637          	lui	a2,0x1c00d
1c000cba:	070a                	slli	a4,a4,0x2
1c000cbc:	40060613          	addi	a2,a2,1024 # 1c00d400 <__DTOR_END__>
1c000cc0:	20e67703          	p.lw	a4,a4(a2)
1c000cc4:	8702                	jr	a4
1c000cc6:	02030663          	beqz	t1,1c000cf2 <__divsf3+0x94>
1c000cca:	10031733          	p.fl1	a4,t1
1c000cce:	47fd                	li	a5,31
1c000cd0:	40e78733          	sub	a4,a5,a4
1c000cd4:	ffb70793          	addi	a5,a4,-5
1c000cd8:	f8a00613          	li	a2,-118
1c000cdc:	00f31333          	sll	t1,t1,a5
1c000ce0:	8e19                	sub	a2,a2,a4
1c000ce2:	bf69                	j	1c000c7c <__divsf3+0x1e>
1c000ce4:	0ff00613          	li	a2,255
1c000ce8:	4689                	li	a3,2
1c000cea:	f8030ae3          	beqz	t1,1c000c7e <__divsf3+0x20>
1c000cee:	468d                	li	a3,3
1c000cf0:	b779                	j	1c000c7e <__divsf3+0x20>
1c000cf2:	4601                	li	a2,0
1c000cf4:	4685                	li	a3,1
1c000cf6:	b761                	j	1c000c7e <__divsf3+0x20>
1c000cf8:	c78d                	beqz	a5,1c000d22 <__divsf3+0xc4>
1c000cfa:	10079833          	p.fl1	a6,a5
1c000cfe:	477d                	li	a4,31
1c000d00:	41070833          	sub	a6,a4,a6
1c000d04:	ffb80713          	addi	a4,a6,-5
1c000d08:	00e797b3          	sll	a5,a5,a4
1c000d0c:	f8a00713          	li	a4,-118
1c000d10:	41070733          	sub	a4,a4,a6
1c000d14:	b761                	j	1c000c9c <__divsf3+0x3e>
1c000d16:	0ff00713          	li	a4,255
1c000d1a:	4809                	li	a6,2
1c000d1c:	d3c9                	beqz	a5,1c000c9e <__divsf3+0x40>
1c000d1e:	480d                	li	a6,3
1c000d20:	bfbd                	j	1c000c9e <__divsf3+0x40>
1c000d22:	4701                	li	a4,0
1c000d24:	4805                	li	a6,1
1c000d26:	bfa5                	j	1c000c9e <__divsf3+0x40>
1c000d28:	00579813          	slli	a6,a5,0x5
1c000d2c:	0af37a63          	bleu	a5,t1,1c000de0 <__divsf3+0x182>
1c000d30:	1e7d                	addi	t3,t3,-1
1c000d32:	4601                	li	a2,0
1c000d34:	01085793          	srli	a5,a6,0x10
1c000d38:	02f35eb3          	divu	t4,t1,a5
1c000d3c:	65c1                	lui	a1,0x10
1c000d3e:	15fd                	addi	a1,a1,-1
1c000d40:	00b87733          	and	a4,a6,a1
1c000d44:	8241                	srli	a2,a2,0x10
1c000d46:	02f376b3          	remu	a3,t1,a5
1c000d4a:	8576                	mv	a0,t4
1c000d4c:	03d705b3          	mul	a1,a4,t4
1c000d50:	06c2                	slli	a3,a3,0x10
1c000d52:	8ed1                	or	a3,a3,a2
1c000d54:	00b6fc63          	bleu	a1,a3,1c000d6c <__divsf3+0x10e>
1c000d58:	96c2                	add	a3,a3,a6
1c000d5a:	fffe8513          	addi	a0,t4,-1
1c000d5e:	0106e763          	bltu	a3,a6,1c000d6c <__divsf3+0x10e>
1c000d62:	00b6f563          	bleu	a1,a3,1c000d6c <__divsf3+0x10e>
1c000d66:	ffee8513          	addi	a0,t4,-2
1c000d6a:	96c2                	add	a3,a3,a6
1c000d6c:	8e8d                	sub	a3,a3,a1
1c000d6e:	02f6d633          	divu	a2,a3,a5
1c000d72:	02f6f6b3          	remu	a3,a3,a5
1c000d76:	87b2                	mv	a5,a2
1c000d78:	02c705b3          	mul	a1,a4,a2
1c000d7c:	01069713          	slli	a4,a3,0x10
1c000d80:	00b77c63          	bleu	a1,a4,1c000d98 <__divsf3+0x13a>
1c000d84:	9742                	add	a4,a4,a6
1c000d86:	fff60793          	addi	a5,a2,-1
1c000d8a:	01076763          	bltu	a4,a6,1c000d98 <__divsf3+0x13a>
1c000d8e:	00b77563          	bleu	a1,a4,1c000d98 <__divsf3+0x13a>
1c000d92:	ffe60793          	addi	a5,a2,-2
1c000d96:	9742                	add	a4,a4,a6
1c000d98:	0542                	slli	a0,a0,0x10
1c000d9a:	8f0d                	sub	a4,a4,a1
1c000d9c:	8d5d                	or	a0,a0,a5
1c000d9e:	00e03733          	snez	a4,a4
1c000da2:	00e567b3          	or	a5,a0,a4
1c000da6:	07fe0693          	addi	a3,t3,127
1c000daa:	04d05e63          	blez	a3,1c000e06 <__divsf3+0x1a8>
1c000dae:	f837b733          	p.bclr	a4,a5,28,3
1c000db2:	c711                	beqz	a4,1c000dbe <__divsf3+0x160>
1c000db4:	f647b733          	p.bclr	a4,a5,27,4
1c000db8:	00472363          	p.beqimm	a4,4,1c000dbe <__divsf3+0x160>
1c000dbc:	0791                	addi	a5,a5,4
1c000dbe:	00479713          	slli	a4,a5,0x4
1c000dc2:	00075663          	bgez	a4,1c000dce <__divsf3+0x170>
1c000dc6:	c1b7b7b3          	p.bclr	a5,a5,0,27
1c000dca:	080e0693          	addi	a3,t3,128
1c000dce:	0fe00713          	li	a4,254
1c000dd2:	838d                	srli	a5,a5,0x3
1c000dd4:	06d75c63          	ble	a3,a4,1c000e4c <__divsf3+0x1ee>
1c000dd8:	4781                	li	a5,0
1c000dda:	0ff00693          	li	a3,255
1c000dde:	a0bd                	j	1c000e4c <__divsf3+0x1ee>
1c000de0:	01f31613          	slli	a2,t1,0x1f
1c000de4:	00135313          	srli	t1,t1,0x1
1c000de8:	b7b1                	j	1c000d34 <__divsf3+0xd6>
1c000dea:	88aa                	mv	a7,a0
1c000dec:	879a                	mv	a5,t1
1c000dee:	8836                	mv	a6,a3
1c000df0:	fe2824e3          	p.beqimm	a6,2,1c000dd8 <__divsf3+0x17a>
1c000df4:	04382763          	p.beqimm	a6,3,1c000e42 <__divsf3+0x1e4>
1c000df8:	fa1837e3          	p.bneimm	a6,1,1c000da6 <__divsf3+0x148>
1c000dfc:	4781                	li	a5,0
1c000dfe:	4681                	li	a3,0
1c000e00:	a0b1                	j	1c000e4c <__divsf3+0x1ee>
1c000e02:	88ae                	mv	a7,a1
1c000e04:	b7f5                	j	1c000df0 <__divsf3+0x192>
1c000e06:	4705                	li	a4,1
1c000e08:	8f15                	sub	a4,a4,a3
1c000e0a:	46ed                	li	a3,27
1c000e0c:	fee6c8e3          	blt	a3,a4,1c000dfc <__divsf3+0x19e>
1c000e10:	09ee0613          	addi	a2,t3,158
1c000e14:	00e7d733          	srl	a4,a5,a4
1c000e18:	00c797b3          	sll	a5,a5,a2
1c000e1c:	00f037b3          	snez	a5,a5
1c000e20:	8fd9                	or	a5,a5,a4
1c000e22:	f837b733          	p.bclr	a4,a5,28,3
1c000e26:	c711                	beqz	a4,1c000e32 <__divsf3+0x1d4>
1c000e28:	f647b733          	p.bclr	a4,a5,27,4
1c000e2c:	00472363          	p.beqimm	a4,4,1c000e32 <__divsf3+0x1d4>
1c000e30:	0791                	addi	a5,a5,4
1c000e32:	00579713          	slli	a4,a5,0x5
1c000e36:	838d                	srli	a5,a5,0x3
1c000e38:	fc0753e3          	bgez	a4,1c000dfe <__divsf3+0x1a0>
1c000e3c:	4781                	li	a5,0
1c000e3e:	4685                	li	a3,1
1c000e40:	a031                	j	1c000e4c <__divsf3+0x1ee>
1c000e42:	004007b7          	lui	a5,0x400
1c000e46:	0ff00693          	li	a3,255
1c000e4a:	4881                	li	a7,0
1c000e4c:	4501                	li	a0,0
1c000e4e:	ec07a533          	p.insert	a0,a5,22,0
1c000e52:	cf76a533          	p.insert	a0,a3,7,23
1c000e56:	c1f8a533          	p.insert	a0,a7,0,31
1c000e5a:	8082                	ret

1c000e5c <__floatunsisf>:
1c000e5c:	4701                	li	a4,0
1c000e5e:	c11d                	beqz	a0,1c000e84 <__floatunsisf+0x28>
1c000e60:	477d                	li	a4,31
1c000e62:	100517b3          	p.fl1	a5,a0
1c000e66:	40f707b3          	sub	a5,a4,a5
1c000e6a:	09e00713          	li	a4,158
1c000e6e:	8f1d                	sub	a4,a4,a5
1c000e70:	09600693          	li	a3,150
1c000e74:	02e6c063          	blt	a3,a4,1c000e94 <__floatunsisf+0x38>
1c000e78:	46a1                	li	a3,8
1c000e7a:	00f6d563          	ble	a5,a3,1c000e84 <__floatunsisf+0x28>
1c000e7e:	17e1                	addi	a5,a5,-8
1c000e80:	00f51533          	sll	a0,a0,a5
1c000e84:	4781                	li	a5,0
1c000e86:	ec0527b3          	p.insert	a5,a0,22,0
1c000e8a:	cf7727b3          	p.insert	a5,a4,7,23
1c000e8e:	c1f7b533          	p.bclr	a0,a5,0,31
1c000e92:	8082                	ret
1c000e94:	09900693          	li	a3,153
1c000e98:	00e6dd63          	ble	a4,a3,1c000eb2 <__floatunsisf+0x56>
1c000e9c:	01b78693          	addi	a3,a5,27 # 40001b <__L2+0x38001b>
1c000ea0:	4615                	li	a2,5
1c000ea2:	00d516b3          	sll	a3,a0,a3
1c000ea6:	8e1d                	sub	a2,a2,a5
1c000ea8:	00d036b3          	snez	a3,a3
1c000eac:	00c55533          	srl	a0,a0,a2
1c000eb0:	8d55                	or	a0,a0,a3
1c000eb2:	4695                	li	a3,5
1c000eb4:	00f6d663          	ble	a5,a3,1c000ec0 <__floatunsisf+0x64>
1c000eb8:	ffb78693          	addi	a3,a5,-5
1c000ebc:	00d51533          	sll	a0,a0,a3
1c000ec0:	f8353633          	p.bclr	a2,a0,28,3
1c000ec4:	c1a536b3          	p.bclr	a3,a0,0,26
1c000ec8:	c611                	beqz	a2,1c000ed4 <__floatunsisf+0x78>
1c000eca:	f6453533          	p.bclr	a0,a0,27,4
1c000ece:	00452363          	p.beqimm	a0,4,1c000ed4 <__floatunsisf+0x78>
1c000ed2:	0691                	addi	a3,a3,4
1c000ed4:	00569613          	slli	a2,a3,0x5
1c000ed8:	00065763          	bgez	a2,1c000ee6 <__floatunsisf+0x8a>
1c000edc:	09f00713          	li	a4,159
1c000ee0:	c1a6b6b3          	p.bclr	a3,a3,0,26
1c000ee4:	8f1d                	sub	a4,a4,a5
1c000ee6:	0036d513          	srli	a0,a3,0x3
1c000eea:	bf69                	j	1c000e84 <__floatunsisf+0x28>

1c000eec <__extendsfdf2>:
1c000eec:	cf7516b3          	p.extractu	a3,a0,7,23
1c000ef0:	00168793          	addi	a5,a3,1
1c000ef4:	ee87b7b3          	p.bclr	a5,a5,23,8
1c000ef8:	4605                	li	a2,1
1c000efa:	ec051733          	p.extractu	a4,a0,22,0
1c000efe:	817d                	srli	a0,a0,0x1f
1c000f00:	02f65163          	ble	a5,a2,1c000f22 <__extendsfdf2+0x36>
1c000f04:	00375793          	srli	a5,a4,0x3
1c000f08:	38068693          	addi	a3,a3,896
1c000f0c:	0776                	slli	a4,a4,0x1d
1c000f0e:	4601                	li	a2,0
1c000f10:	e607a633          	p.insert	a2,a5,19,0
1c000f14:	d546a633          	p.insert	a2,a3,10,20
1c000f18:	c1f52633          	p.insert	a2,a0,0,31
1c000f1c:	85b2                	mv	a1,a2
1c000f1e:	853a                	mv	a0,a4
1c000f20:	8082                	ret
1c000f22:	ee85                	bnez	a3,1c000f5a <__extendsfdf2+0x6e>
1c000f24:	c729                	beqz	a4,1c000f6e <__extendsfdf2+0x82>
1c000f26:	47fd                	li	a5,31
1c000f28:	10071633          	p.fl1	a2,a4
1c000f2c:	40c78633          	sub	a2,a5,a2
1c000f30:	47a9                	li	a5,10
1c000f32:	00c7ce63          	blt	a5,a2,1c000f4e <__extendsfdf2+0x62>
1c000f36:	47ad                	li	a5,11
1c000f38:	8f91                	sub	a5,a5,a2
1c000f3a:	01560693          	addi	a3,a2,21
1c000f3e:	00f757b3          	srl	a5,a4,a5
1c000f42:	00d71733          	sll	a4,a4,a3
1c000f46:	38900693          	li	a3,905
1c000f4a:	8e91                	sub	a3,a3,a2
1c000f4c:	b7c9                	j	1c000f0e <__extendsfdf2+0x22>
1c000f4e:	ff560793          	addi	a5,a2,-11
1c000f52:	00f717b3          	sll	a5,a4,a5
1c000f56:	4701                	li	a4,0
1c000f58:	b7fd                	j	1c000f46 <__extendsfdf2+0x5a>
1c000f5a:	4781                	li	a5,0
1c000f5c:	c711                	beqz	a4,1c000f68 <__extendsfdf2+0x7c>
1c000f5e:	00375793          	srli	a5,a4,0x3
1c000f62:	c137c7b3          	p.bset	a5,a5,0,19
1c000f66:	0776                	slli	a4,a4,0x1d
1c000f68:	7ff00693          	li	a3,2047
1c000f6c:	b74d                	j	1c000f0e <__extendsfdf2+0x22>
1c000f6e:	4781                	li	a5,0
1c000f70:	4681                	li	a3,0
1c000f72:	bf71                	j	1c000f0e <__extendsfdf2+0x22>

1c000f74 <cluster>:
#define CLASS_NUM 2

//short int *class_num = NULL;

static void cluster()
{
1c000f74:	1101                	addi	sp,sp,-32
1c000f76:	ce06                	sw	ra,28(sp)
1c000f78:	cc22                	sw	s0,24(sp)
1c000f7a:	ca26                	sw	s1,20(sp)
1c000f7c:	c84a                	sw	s2,16(sp)
1c000f7e:	c64e                	sw	s3,12(sp)
  printf("Running on cluster\n");
1c000f80:	1c00d537          	lui	a0,0x1c00d
1c000f84:	53c50513          	addi	a0,a0,1340 # 1c00d53c <__clz_tab+0x100>
1c000f88:	1be0b0ef          	jal	ra,1c00c146 <puts>
#ifdef PERF
  printf("Start timer\n");
1c000f8c:	1c00d537          	lui	a0,0x1c00d
1c000f90:	55050513          	addi	a0,a0,1360 # 1c00d550 <__clz_tab+0x114>
1c000f94:	1b20b0ef          	jal	ra,1c00c146 <puts>

/* Configure the active events. eventMask is an OR of events got through SPR_PCER_EVENT_MASK */
static inline void cpu_perf_conf_events(unsigned int eventMask)
{
#ifndef PLP_NO_PERF_COUNTERS
  asm volatile ("csrw 0x7A0, %0" : "+r" (eventMask));
1c000f98:	67c1                	lui	a5,0x10
1c000f9a:	7a079073          	csrw	pcer,a5

static inline uint32_t timer_cmp_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CMP_HI_OFFSET); }
static inline void timer_cmp_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_HI_OFFSET, value); }

static inline uint32_t timer_start_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_START_LO_OFFSET); }
static inline void timer_start_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_START_LO_OFFSET, value); }
1c000f9e:	102007b7          	lui	a5,0x10200
1c000fa2:	40078793          	addi	a5,a5,1024 # 10200400 <__l1_end+0x2003bc>
1c000fa6:	4705                	li	a4,1
1c000fa8:	00e7ac23          	sw	a4,24(a5)

/* Configure the mode. confMask is an OR of all SPR_PCMR_* macros */
static inline void cpu_perf_conf(unsigned int confMask)
{
#ifndef PLP_NO_PERF_COUNTERS
  asm volatile ("csrw 0x7A1, %0" :: "r" (confMask));
1c000fac:	470d                	li	a4,3
1c000fae:	7a171073          	csrw	pcmr,a4

static inline uint32_t timer_start_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_START_HI_OFFSET); }
static inline void timer_start_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_START_HI_OFFSET, value); }

static inline uint32_t timer_reset_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_RESET_LO_OFFSET); }
static inline void timer_reset_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_RESET_LO_OFFSET, value); }
1c000fb2:	4705                	li	a4,1
1c000fb4:	02e7a023          	sw	a4,32(a5)
}

/* Set all counters to the specified value */
static inline void cpu_perf_setall(unsigned int value) {
#ifndef PLP_NO_PERF_COUNTERS
  asm volatile ("csrw 0x79F, %0" :: "r" (value));
1c000fb8:	4781                	li	a5,0
1c000fba:	79f79073          	csrw	pccr31,a5
  gap_cl_starttimer();
  gap_cl_resethwtimer();
#endif
  modelCNN(Img_In, ResOut);
1c000fbe:	1c00e437          	lui	s0,0x1c00e
1c000fc2:	e9c40413          	addi	s0,s0,-356 # 1c00de9c <ResOut>
1c000fc6:	400c                	lw	a1,0(s0)
1c000fc8:	4048                	lw	a0,4(s0)
1c000fca:	678030ef          	jal	ra,1c004642 <modelCNN>
  printf("Runner completed\n");
1c000fce:	1c00d537          	lui	a0,0x1c00d
1c000fd2:	55c50513          	addi	a0,a0,1372 # 1c00d55c <__clz_tab+0x120>
1c000fd6:	1700b0ef          	jal	ra,1c00c146 <puts>

  //Checki Results
  int rec_digit = 0;
  short int highest = ResOut[0];
1c000fda:	401c                	lw	a5,0(s0)
1c000fdc:	00079983          	lh	s3,0(a5)
  for(int i = 0; i < CLASS_NUM; i++) {
    printf("class %d: %d \n", i, ResOut[i]);
1c000fe0:	864e                	mv	a2,s3
1c000fe2:	4581                	li	a1,0
1c000fe4:	1c00d937          	lui	s2,0x1c00d
1c000fe8:	57090513          	addi	a0,s2,1392 # 1c00d570 <__clz_tab+0x134>
1c000fec:	2f00b0ef          	jal	ra,1c00c2dc <printf>
    if(ResOut[i] > highest) {
1c000ff0:	401c                	lw	a5,0(s0)
1c000ff2:	00079483          	lh	s1,0(a5)
1c000ff6:	0534e4b3          	p.max	s1,s1,s3
    printf("class %d: %d \n", i, ResOut[i]);
1c000ffa:	00279603          	lh	a2,2(a5)
1c000ffe:	4585                	li	a1,1
1c001000:	57090513          	addi	a0,s2,1392
1c001004:	2d80b0ef          	jal	ra,1c00c2dc <printf>
    if(ResOut[i] > highest) {
1c001008:	401c                	lw	a5,0(s0)
1c00100a:	00279403          	lh	s0,2(a5)
1c00100e:	0084a433          	slt	s0,s1,s0
      highest = ResOut[i];
      rec_digit = i;
    }
  }
  printf("\n");
1c001012:	4529                	li	a0,10
1c001014:	1a80b0ef          	jal	ra,1c00c1bc <putchar>

  printf("Recognized: %d\n", rec_digit);
1c001018:	85a2                	mv	a1,s0
1c00101a:	1c00d537          	lui	a0,0x1c00d
1c00101e:	58050513          	addi	a0,a0,1408 # 1c00d580 <__clz_tab+0x144>
1c001022:	2ba0b0ef          	jal	ra,1c00c2dc <printf>
}
1c001026:	40f2                	lw	ra,28(sp)
1c001028:	4462                	lw	s0,24(sp)
1c00102a:	44d2                	lw	s1,20(sp)
1c00102c:	4942                	lw	s2,16(sp)
1c00102e:	49b2                	lw	s3,12(sp)
1c001030:	6105                	addi	sp,sp,32
1c001032:	8082                	ret

1c001034 <test_model>:

int test_model(void)
{
1c001034:	7119                	addi	sp,sp,-128
1c001036:	de86                	sw	ra,124(sp)
1c001038:	dca2                	sw	s0,120(sp)
1c00103a:	daa6                	sw	s1,116(sp)
1c00103c:	d8ca                	sw	s2,112(sp)
1c00103e:	d6ce                	sw	s3,108(sp)
1c001040:	d4d2                	sw	s4,104(sp)
1c001042:	d2d6                	sw	s5,100(sp)
1c001044:	d0da                	sw	s6,96(sp)
1c001046:	cede                	sw	s7,92(sp)
1c001048:	cce2                	sw	s8,88(sp)
1c00104a:	cae6                	sw	s9,84(sp)
1c00104c:	c8ea                	sw	s10,80(sp)
    printf("Entering main controller\n");
1c00104e:	1c00d537          	lui	a0,0x1c00d
1c001052:	5b450513          	addi	a0,a0,1460 # 1c00d5b4 <__clz_tab+0x178>
1c001056:	0f00b0ef          	jal	ra,1c00c146 <puts>
    printf("Reading image\n");
1c00105a:	1c00d537          	lui	a0,0x1c00d
1c00105e:	5d050513          	addi	a0,a0,1488 # 1c00d5d0 <__clz_tab+0x194>
1c001062:	0e40b0ef          	jal	ra,1c00c146 <puts>
    //Reading Image from Bridge
    /*------------------- Allocate Image Buffer ------------------------*/
    printf("Going to alloc the image buffer!\n");
1c001066:	1c00d537          	lui	a0,0x1c00d
1c00106a:	5e050513          	addi	a0,a0,1504 # 1c00d5e0 <__clz_tab+0x1a4>
1c00106e:	0d80b0ef          	jal	ra,1c00c146 <puts>
    // Img_In 保存图像数据，为其分配图片字节数的资源
    Img_In = (unsigned char *) AT_L2_ALLOC(0, AT_INPUT_SIZE_BYTES);
1c001072:	654d                	lui	a0,0x13
1c001074:	4d050513          	addi	a0,a0,1232 # 134d0 <__L1Cl+0x34d0>
1c001078:	126090ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c00107c:	1c00e7b7          	lui	a5,0x1c00e
1c001080:	eaa7a023          	sw	a0,-352(a5) # 1c00dea0 <Img_In>
    //class_num (short int *) AT_L2_ALLOC(0,sizeof(short int));
    if(Img_In==NULL) {
1c001084:	c121                	beqz	a0,1c0010c4 <test_model+0x90>
      pmsis_exit(-1);
    } 

    char *ImageName = __XSTR(AT_IMAGE);

    if (ReadImageFromFile(ImageName, AT_INPUT_WIDTH, AT_INPUT_HEIGHT, AT_INPUT_COLORS, Img_In, AT_INPUT_SIZE_BYTES, IMGIO_OUTPUT_CHAR, 0))
1c001086:	4881                	li	a7,0
1c001088:	4801                	li	a6,0
1c00108a:	67cd                	lui	a5,0x13
1c00108c:	4d078793          	addi	a5,a5,1232 # 134d0 <__L1Cl+0x34d0>
1c001090:	872a                	mv	a4,a0
1c001092:	4685                	li	a3,1
1c001094:	0f400613          	li	a2,244
1c001098:	14400593          	li	a1,324
1c00109c:	1c00d537          	lui	a0,0x1c00d
1c0010a0:	62050513          	addi	a0,a0,1568 # 1c00d620 <__clz_tab+0x1e4>
1c0010a4:	047030ef          	jal	ra,1c0048ea <ReadImageFromFile>
1c0010a8:	c51d                	beqz	a0,1c0010d6 <test_model+0xa2>
    {
        printf("Failed to load image %s\n", ImageName);
1c0010aa:	1c00d5b7          	lui	a1,0x1c00d
1c0010ae:	62058593          	addi	a1,a1,1568 # 1c00d620 <__clz_tab+0x1e4>
1c0010b2:	1c00d537          	lui	a0,0x1c00d
1c0010b6:	64850513          	addi	a0,a0,1608 # 1c00d648 <__clz_tab+0x20c>
1c0010ba:	2220b0ef          	jal	ra,1c00c2dc <printf>
        pmsis_exit(-2);
1c0010be:	5579                	li	a0,-2
1c0010c0:	12a0b0ef          	jal	ra,1c00c1ea <exit>
      printf("Image buffer alloc Error!\n");
1c0010c4:	1c00d537          	lui	a0,0x1c00d
1c0010c8:	60450513          	addi	a0,a0,1540 # 1c00d604 <__clz_tab+0x1c8>
1c0010cc:	07a0b0ef          	jal	ra,1c00c146 <puts>
      pmsis_exit(-1);
1c0010d0:	557d                	li	a0,-1
1c0010d2:	1180b0ef          	jal	ra,1c00c1ea <exit>
        }
        printf("\n");
    }
#endif  /* PRINT_IMAGE */

    ResOut = (short int *) AT_L2_ALLOC(0, CLASS_NUM * sizeof(short int));
1c0010d6:	4511                	li	a0,4
1c0010d8:	0c6090ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c0010dc:	1c00e7b7          	lui	a5,0x1c00e
1c0010e0:	e8a7ae23          	sw	a0,-356(a5) # 1c00de9c <ResOut>
    if (ResOut == NULL)
1c0010e4:	c11d                	beqz	a0,1c00110a <test_model+0xd6>
    }

    /* Configure And open cluster. */
    struct pi_device cluster_dev;
    struct pi_cluster_conf cl_conf;
    cl_conf.id = 0;
1c0010e6:	d802                	sw	zero,48(sp)
    pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c0010e8:	106c                	addi	a1,sp,44
1c0010ea:	00c8                	addi	a0,sp,68
1c0010ec:	786080ef          	jal	ra,1c009872 <pi_open_from_conf>
    if (pi_cluster_open(&cluster_dev))
1c0010f0:	00c8                	addi	a0,sp,68
1c0010f2:	3c9090ef          	jal	ra,1c00acba <pi_cluster_open>
1c0010f6:	c505                	beqz	a0,1c00111e <test_model+0xea>
    {
        printf("Cluster open failed !\n");
1c0010f8:	1c00d537          	lui	a0,0x1c00d
1c0010fc:	69850513          	addi	a0,a0,1688 # 1c00d698 <__clz_tab+0x25c>
1c001100:	0460b0ef          	jal	ra,1c00c146 <puts>
        pmsis_exit(-4);
1c001104:	5571                	li	a0,-4
1c001106:	0e40b0ef          	jal	ra,1c00c1ea <exit>
        printf("Failed to allocate Memory for Result (%d bytes)\n", CLASS_NUM *sizeof(short int));
1c00110a:	4591                	li	a1,4
1c00110c:	1c00d537          	lui	a0,0x1c00d
1c001110:	66450513          	addi	a0,a0,1636 # 1c00d664 <__clz_tab+0x228>
1c001114:	1c80b0ef          	jal	ra,1c00c2dc <printf>
        pmsis_exit(-3);
1c001118:	5575                	li	a0,-3
1c00111a:	0d00b0ef          	jal	ra,1c00c1ea <exit>
    }

    printf("Constructor\n");
1c00111e:	1c00d537          	lui	a0,0x1c00d
1c001122:	6b050513          	addi	a0,a0,1712 # 1c00d6b0 <__clz_tab+0x274>
1c001126:	0200b0ef          	jal	ra,1c00c146 <puts>
    // IMPORTANT - MUST BE CALLED AFTER THE CLUSTER IS SWITCHED ON!!!!
    if (modelCNN_Construct())
1c00112a:	487020ef          	jal	ra,1c003db0 <modelCNN_Construct>
1c00112e:	c911                	beqz	a0,1c001142 <test_model+0x10e>
    {
        printf("Graph constructor exited with an error\n");
1c001130:	1c00d537          	lui	a0,0x1c00d
1c001134:	6bc50513          	addi	a0,a0,1724 # 1c00d6bc <__clz_tab+0x280>
1c001138:	00e0b0ef          	jal	ra,1c00c146 <puts>
        pmsis_exit(-5);
1c00113c:	556d                	li	a0,-5
1c00113e:	0ac0b0ef          	jal	ra,1c00c1ea <exit>
    }

    printf("Call cluster\n");
1c001142:	1c00d537          	lui	a0,0x1c00d
1c001146:	6e450513          	addi	a0,a0,1764 # 1c00d6e4 <__clz_tab+0x2a8>
1c00114a:	7fd0a0ef          	jal	ra,1c00c146 <puts>
    struct pi_cluster_task task = {0};
1c00114e:	02800613          	li	a2,40
1c001152:	4581                	li	a1,0
1c001154:	0048                	addi	a0,sp,4
1c001156:	64b0a0ef          	jal	ra,1c00bfa0 <memset>
    task.entry = cluster;
1c00115a:	1c0017b7          	lui	a5,0x1c001
1c00115e:	f7478793          	addi	a5,a5,-140 # 1c000f74 <cluster>
1c001162:	c03e                	sw	a5,0(sp)
    task.arg = NULL;
    task.stack_size = (unsigned int) STACK_SIZE;
1c001164:	6785                	lui	a5,0x1
1c001166:	fbc78793          	addi	a5,a5,-68 # fbc <__rt_stack_size+0x7bc>
1c00116a:	c63e                	sw	a5,12(sp)
    task.slave_stack_size = (unsigned int) SLAVE_STACK_SIZE;
1c00116c:	40000793          	li	a5,1024
1c001170:	c83e                	sw	a5,16(sp)

    pi_cluster_send_task_to_cl(&cluster_dev, &task);
1c001172:	858a                	mv	a1,sp
1c001174:	00c8                	addi	a0,sp,68
1c001176:	71d090ef          	jal	ra,1c00b092 <pi_cluster_send_task_to_cl>

    modelCNN_Destruct();
1c00117a:	440030ef          	jal	ra,1c0045ba <modelCNN_Destruct>

#ifdef PERF
    {
      unsigned int TotalCycles = 0, TotalOper = 0;
      printf("\n");
1c00117e:	4529                	li	a0,10
1c001180:	03c0b0ef          	jal	ra,1c00c1bc <putchar>
1c001184:	1c00e437          	lui	s0,0x1c00e
1c001188:	ca040413          	addi	s0,s0,-864 # 1c00dca0 <AT_GraphNodeNames>
1c00118c:	1c00e937          	lui	s2,0x1c00e
1c001190:	23490913          	addi	s2,s2,564 # 1c00e234 <AT_GraphPerf>
1c001194:	1c00e4b7          	lui	s1,0x1c00e
1c001198:	cb448493          	addi	s1,s1,-844 # 1c00dcb4 <AT_GraphOperInfosNames>
1c00119c:	01440c93          	addi	s9,s0,20
      unsigned int TotalCycles = 0, TotalOper = 0;
1c0011a0:	4b01                	li	s6,0
1c0011a2:	4a81                	li	s5,0
      for (int i=0; i<(sizeof(AT_GraphPerf)/sizeof(unsigned int)); i++) {
        printf("%45s: Cycles: %10d, Operations: %10d, Operations/Cycle: %f\n", AT_GraphNodeNames[i], AT_GraphPerf[i], AT_GraphOperInfosNames[i], ((float) AT_GraphOperInfosNames[i])/ AT_GraphPerf[i]);
1c0011a4:	1c00dc37          	lui	s8,0x1c00d
1c0011a8:	00442b8b          	p.lw	s7,4(s0!)
1c0011ac:	00092983          	lw	s3,0(s2)
1c0011b0:	0004aa03          	lw	s4,0(s1)
1c0011b4:	8552                	mv	a0,s4
1c0011b6:	315d                	jal	1c000e5c <__floatunsisf>
1c0011b8:	8d2a                	mv	s10,a0
1c0011ba:	854e                	mv	a0,s3
1c0011bc:	3145                	jal	1c000e5c <__floatunsisf>
1c0011be:	85aa                	mv	a1,a0
1c0011c0:	856a                	mv	a0,s10
1c0011c2:	3c71                	jal	1c000c5e <__divsf3>
1c0011c4:	3325                	jal	1c000eec <__extendsfdf2>
1c0011c6:	872a                	mv	a4,a0
1c0011c8:	87ae                	mv	a5,a1
1c0011ca:	86d2                	mv	a3,s4
1c0011cc:	864e                	mv	a2,s3
1c0011ce:	85de                	mv	a1,s7
1c0011d0:	6f4c0513          	addi	a0,s8,1780 # 1c00d6f4 <__clz_tab+0x2b8>
1c0011d4:	1080b0ef          	jal	ra,1c00c2dc <printf>
        TotalCycles += AT_GraphPerf[i]; TotalOper += AT_GraphOperInfosNames[i];
1c0011d8:	0049278b          	p.lw	a5,4(s2!)
1c0011dc:	9abe                	add	s5,s5,a5
1c0011de:	0044a78b          	p.lw	a5,4(s1!)
1c0011e2:	9b3e                	add	s6,s6,a5
      for (int i=0; i<(sizeof(AT_GraphPerf)/sizeof(unsigned int)); i++) {
1c0011e4:	fd9412e3          	bne	s0,s9,1c0011a8 <test_model+0x174>
      }
      printf("\n");
1c0011e8:	4529                	li	a0,10
1c0011ea:	7d30a0ef          	jal	ra,1c00c1bc <putchar>
      printf("%45s: Cycles: %10d, Operations: %10d, Operations/Cycle: %f\n", "Total", TotalCycles, TotalOper, ((float) TotalOper)/ TotalCycles);
1c0011ee:	855a                	mv	a0,s6
1c0011f0:	31b5                	jal	1c000e5c <__floatunsisf>
1c0011f2:	842a                	mv	s0,a0
1c0011f4:	8556                	mv	a0,s5
1c0011f6:	319d                	jal	1c000e5c <__floatunsisf>
1c0011f8:	85aa                	mv	a1,a0
1c0011fa:	8522                	mv	a0,s0
1c0011fc:	348d                	jal	1c000c5e <__divsf3>
1c0011fe:	31fd                	jal	1c000eec <__extendsfdf2>
1c001200:	872a                	mv	a4,a0
1c001202:	87ae                	mv	a5,a1
1c001204:	86da                	mv	a3,s6
1c001206:	8656                	mv	a2,s5
1c001208:	1c00d5b7          	lui	a1,0x1c00d
1c00120c:	73058593          	addi	a1,a1,1840 # 1c00d730 <__clz_tab+0x2f4>
1c001210:	1c00d537          	lui	a0,0x1c00d
1c001214:	6f450513          	addi	a0,a0,1780 # 1c00d6f4 <__clz_tab+0x2b8>
1c001218:	0c40b0ef          	jal	ra,1c00c2dc <printf>
      printf("\n");
1c00121c:	4529                	li	a0,10
1c00121e:	79f0a0ef          	jal	ra,1c00c1bc <putchar>
    }
#endif

    // Close the cluster
    pi_cluster_close(&cluster_dev);
1c001222:	00c8                	addi	a0,sp,68
1c001224:	36f090ef          	jal	ra,1c00ad92 <pi_cluster_close>

    AT_L2_FREE(0, Img_In, AT_INPUT_SIZE_BYTES);
1c001228:	1c00e437          	lui	s0,0x1c00e
1c00122c:	e9c40413          	addi	s0,s0,-356 # 1c00de9c <ResOut>
1c001230:	65cd                	lui	a1,0x13
1c001232:	4d058593          	addi	a1,a1,1232 # 134d0 <__L1Cl+0x34d0>
1c001236:	4048                	lw	a0,4(s0)
1c001238:	775080ef          	jal	ra,1c00a1ac <pi_l2_free>
    AT_L2_FREE(0, ResOut, CLASS_NUM * sizeof(short int));
1c00123c:	4591                	li	a1,4
1c00123e:	4008                	lw	a0,0(s0)
1c001240:	76d080ef          	jal	ra,1c00a1ac <pi_l2_free>
    printf("Ended\n");
1c001244:	1c00d537          	lui	a0,0x1c00d
1c001248:	73850513          	addi	a0,a0,1848 # 1c00d738 <__clz_tab+0x2fc>
1c00124c:	6fb0a0ef          	jal	ra,1c00c146 <puts>

    pmsis_exit(0);
1c001250:	4501                	li	a0,0
1c001252:	7990a0ef          	jal	ra,1c00c1ea <exit>

1c001256 <main>:
    return 0;
}

int main()
{
1c001256:	1141                	addi	sp,sp,-16
1c001258:	c606                	sw	ra,12(sp)
    printf("\n\n\t *** NNTOOL model Example ***\n\n");
1c00125a:	1c00d537          	lui	a0,0x1c00d
1c00125e:	59050513          	addi	a0,a0,1424 # 1c00d590 <__clz_tab+0x154>
1c001262:	6e50a0ef          	jal	ra,1c00c146 <puts>
{
}

static inline int pmsis_kickoff(void *arg)
{
  ((void (*)())arg)();
1c001266:	33f9                	jal	1c001034 <test_model>

1c001268 <S1_Op_input_1_formatter>:
static AT_HYPERFLASH_FS_T HyperFlash;
void S1_Op_input_1_formatter(
		unsigned char * __restrict__ In,
		signed char * __restrict__ Out)

{
1c001268:	714d                	addi	sp,sp,-336
1c00126a:	14112623          	sw	ra,332(sp)
1c00126e:	14812423          	sw	s0,328(sp)
1c001272:	14912223          	sw	s1,324(sp)
1c001276:	15212023          	sw	s2,320(sp)
1c00127a:	13312e23          	sw	s3,316(sp)
1c00127e:	13412c23          	sw	s4,312(sp)
1c001282:	13512a23          	sw	s5,308(sp)
1c001286:	13612823          	sw	s6,304(sp)
1c00128a:	13712623          	sw	s7,300(sp)
1c00128e:	13812423          	sw	s8,296(sp)
1c001292:	13912223          	sw	s9,292(sp)
1c001296:	13a12023          	sw	s10,288(sp)
1c00129a:	11b12e23          	sw	s11,284(sp)
1c00129e:	cc2e                	sw	a1,24(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 7:[324x37, 5:324x37, 324x22], 1]
		Tile0: [0, 11988, 11988], Tile1: [11988, 11988, 11988], Tile2; [23976, 11988, 11988]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->W = (unsigned short int) (324);
1c0012a0:	14400793          	li	a5,324
1c0012a4:	d43e                	sw	a5,40(sp)
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+0), 11988, 0, &DmaR_Evt1);
1c0012a6:	ce2a                	sw	a0,28(sp)
1c0012a8:	100007b7          	lui	a5,0x10000
1c0012ac:	01c7a603          	lw	a2,28(a5) # 1000001c <model_L1_Memory>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0012b0:	300476f3          	csrrci	a3,mstatus,8
#define DMA_WRITE(value, offset) pulp_write32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset), (value))
#define DMA_READ(offset) pulp_read32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset))
#endif

static inline int plp_dma_counter_alloc() {
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0012b4:	00204737          	lui	a4,0x204
1c0012b8:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
#if defined(__riscv__)
  unsigned int res;
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0012bc:	698d                	lui	s3,0x3
1c0012be:	ed498993          	addi	s3,s3,-300 # 2ed4 <__rt_stack_size+0x26d4>
1c0012c2:	000307b7          	lui	a5,0x30
1c0012c6:	de09a7b3          	p.insert	a5,s3,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0012ca:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0012ce:	c157c7b3          	p.bset	a5,a5,0,21
static inline unsigned int plp_dma_getStrides(unsigned short stride, unsigned short len) {
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
}

static inline void plp_dma_cmd_push(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr) {
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0012d2:	002045b7          	lui	a1,0x204
1c0012d6:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0012da:	002047b7          	lui	a5,0x204
1c0012de:	40c7a023          	sw	a2,1024(a5) # 204400 <__L2+0x184400>
#if defined(ARCHI_HAS_MCHAN_64) && ARCHI_HAS_MCHAN_64 == 1
  DMA_WRITE((int)extAddr, PLP_DMA_QUEUE_OFFSET);
  DMA_WRITE((int)(extAddr>>32), PLP_DMA_QUEUE_OFFSET);
#else
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0012e2:	40a7a023          	sw	a0,1024(a5)
        unsigned int cmd = plp_dma_getCmd(dir, size, PLP_DMA_1D, PLP_DMA_TRIG_EVT, PLP_DMA_NO_TRIG_IRQ, PLP_DMA_SHARED);
        // Prevent the compiler from pushing the transfer before all previous
        // stores are done
        __asm__ __volatile__ ("" : : : "memory");
        plp_dma_cmd_push(cmd, loc, ext);
        if (!merge) copy->id = id;
1c0012e6:	d9ba                	sw	a4,240(sp)

        copy->length = 0;
1c0012e8:	10012023          	sw	zero,256(sp)
  __builtin_pulp_spr_write(reg, val);
1c0012ec:	30069073          	csrw	mstatus,a3
	_N_In=0;
	_C_Out=0; _SC_Out=11988;
	_SPP_Out=0; _SP_Out=0;
1c0012f0:	4a81                	li	s5,0
1c0012f2:	c602                	sw	zero,12(sp)
	_N_In=0;
1c0012f4:	4b81                	li	s7,0
	/*============================= End Read Tiles Prolog ===============================*/
	for (T0Ind=0; T0Ind<7; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0012f6:	4901                	li	s2,0
		int T0Ind_Last = (T0Ind==6), T0Ind_NextLast = ((T0Ind+1)==6);
		/*================================= Prepare Tiles ===================================*/
		_SN_In = 0;
		if (!(T0Ind_Last)) {
			_N_In = _N_In + (11988); _SN_In = ((T0Ind_NextLast)?7128:11988); 
1c0012f8:	8a4e                	mv	s4,s3
#endif
  if (copy->length == 0)
  {
    int irq = rt_irq_disable();

    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0012fa:	00204437          	lui	s0,0x204
		}
		/*============================= End Prepare Tiles ===================================*/
		/*================================= Read Tiles ======================================*/
		AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
		if (_SN_In) {
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+11988*((T0Ind_Total+1)%2)),
1c0012fe:	10000cb7          	lui	s9,0x10000
  return evt_read32(barAddr, EU_HW_BARR_TRIGGER_WAIT_CLEAR);
}

static inline void eu_bar_setup_mask(unsigned int barAddr, unsigned int coreMask, unsigned int targetMask)
{
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001302:	20040d13          	addi	s10,s0,512 # 204200 <__L2+0x184200>
		AT_FORK(gap_ncore(), (void *) CNN_NormBW_offset_fps, (void *) KerArg0);
		__CALL(CNN_NormBW_offset_fps, KerArg0);
		/*================================= Write Tiles =====================================*/
		if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+19360+11988*((T0Ind_Total+-1)%2)),
1c001306:	1c00edb7          	lui	s11,0x1c00e
1c00130a:	6795                	lui	a5,0x5
1c00130c:	ba078793          	addi	a5,a5,-1120 # 4ba0 <__rt_stack_size+0x43a0>
1c001310:	c83e                	sw	a5,16(sp)
1c001312:	ac7d                	j	1c0015d0 <S1_Op_input_1_formatter+0x368>
1c001314:	c45e                	sw	s7,8(sp)
		_SN_In = 0;
1c001316:	4b01                	li	s6,0
1c001318:	a4e1                	j	1c0015e0 <S1_Op_input_1_formatter+0x378>
			_N_In = _N_In + (11988); _SN_In = ((T0Ind_NextLast)?7128:11988); 
1c00131a:	6b09                	lui	s6,0x2
1c00131c:	bd8b0b13          	addi	s6,s6,-1064 # 1bd8 <__rt_stack_size+0x13d8>
1c001320:	a4c1                	j	1c0015e0 <S1_Op_input_1_formatter+0x378>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001322:	300476f3          	csrrci	a3,mstatus,8
1c001326:	40442783          	lw	a5,1028(s0)
1c00132a:	574e                	lw	a4,240(sp)
1c00132c:	40e7d7b3          	sra	a5,a5,a4
1c001330:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001334:	c78d                	beqz	a5,1c00135e <S1_Op_input_1_formatter+0xf6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001336:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c00133a:	30069073          	csrw	mstatus,a3
1c00133e:	00c42423          	sw	a2,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001342:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001346:	00c42223          	sw	a2,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00134a:	300476f3          	csrrci	a3,mstatus,8
1c00134e:	40442783          	lw	a5,1028(s0)
1c001352:	574e                	lw	a4,240(sp)
1c001354:	40e7d7b3          	sra	a5,a5,a4
1c001358:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00135c:	fff9                	bnez	a5,1c00133a <S1_Op_input_1_formatter+0xd2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00135e:	4785                	li	a5,1
1c001360:	00e79733          	sll	a4,a5,a4
1c001364:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c001368:	30069073          	csrw	mstatus,a3
		if (_SN_In) {
1c00136c:	080b1f63          	bnez	s6,1c00140a <S1_Op_input_1_formatter+0x1a2>
		KerArg0->In = (unsigned char *__restrict__) (model_L1_Memory+0+11988*((T0Ind_Total)%2));
1c001370:	01cca783          	lw	a5,28(s9) # 1000001c <model_L1_Memory>
1c001374:	01f95713          	srli	a4,s2,0x1f
1c001378:	00e904b3          	add	s1,s2,a4
1c00137c:	fc14b4b3          	p.bclr	s1,s1,30,1
1c001380:	8c99                	sub	s1,s1,a4
1c001382:	034484b3          	mul	s1,s1,s4
1c001386:	00978733          	add	a4,a5,s1
1c00138a:	d03a                	sw	a4,32(sp)
		KerArg0->Out = (signed char *__restrict__) (model_L1_Memory+23976+11988*((T0Ind_Total)%2));
1c00138c:	6819                	lui	a6,0x6
1c00138e:	da880813          	addi	a6,a6,-600 # 5da8 <__rt_stack_size+0x55a8>
1c001392:	01048c33          	add	s8,s1,a6
1c001396:	97e2                	add	a5,a5,s8
1c001398:	d23e                	sw	a5,36(sp)
		KerArg0->H = (unsigned short int) (T0Ind_Last?22:37);
1c00139a:	12692c63          	p.beqimm	s2,6,1c0014d2 <S1_Op_input_1_formatter+0x26a>
1c00139e:	02500793          	li	a5,37
1c0013a2:	d63e                	sw	a5,44(sp)
  IP_WRITE_PTR(base, EU_DISPATCH_FIFO_ACCESS, value);
}

static inline void eu_dispatch_team_config(unsigned value)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0013a4:	0ff00793          	li	a5,255
1c0013a8:	08f42223          	sw	a5,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0013ac:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0013b0:	00204537          	lui	a0,0x204
1c0013b4:	20050513          	addi	a0,a0,512 # 204200 <__L2+0x184200>
1c0013b8:	00f52623          	sw	a5,12(a0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0013bc:	1c007737          	lui	a4,0x1c007
1c0013c0:	15870713          	addi	a4,a4,344 # 1c007158 <CNN_NormBW_offset_fps>
1c0013c4:	08e42023          	sw	a4,128(s0)
1c0013c8:	1008                	addi	a0,sp,32
1c0013ca:	08a42023          	sw	a0,128(s0)
#endif

  if (nb_cores) __rt_team_config(nb_cores);
  eu_dispatch_push((int)entry);
  eu_dispatch_push((int)arg);
  entry(arg);
1c0013ce:	58b050ef          	jal	ra,1c007158 <CNN_NormBW_offset_fps>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0013d2:	01cd6783          	p.elw	a5,28(s10)
		if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c0013d6:	100a9063          	bnez	s5,1c0014d6 <S1_Op_input_1_formatter+0x26e>
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c0013da:	4732                	lw	a4,12(sp)
1c0013dc:	18070f63          	beqz	a4,1c00157a <S1_Op_input_1_formatter+0x312>

#ifdef ARCHI_HAS_CLUSTER

static inline void cl_wait_task(unsigned char *done)
{
    while ((*(volatile char *)done) == 0)
1c0013e0:	0cc14783          	lbu	a5,204(sp)
1c0013e4:	0ff7f793          	andi	a5,a5,255
1c0013e8:	18079963          	bnez	a5,1c00157a <S1_Op_input_1_formatter+0x312>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0013ec:	4709                	li	a4,2
1c0013ee:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0013f2:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0013f6:	00e42223          	sw	a4,4(s0)
1c0013fa:	0cc14783          	lbu	a5,204(sp)
1c0013fe:	0ff7f793          	andi	a5,a5,255
1c001402:	d7f5                	beqz	a5,1c0013ee <S1_Op_input_1_formatter+0x186>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+19360+11988*((T0Ind_Total+-1)%2)),
1c001404:	160a8b63          	beqz	s5,1c00157a <S1_Op_input_1_formatter+0x312>
1c001408:	aa35                	j	1c001544 <S1_Op_input_1_formatter+0x2dc>
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+11988*((T0Ind_Total+1)%2)),
1c00140a:	4772                	lw	a4,28(sp)
1c00140c:	47a2                	lw	a5,8(sp)
1c00140e:	00f706b3          	add	a3,a4,a5
1c001412:	00190793          	addi	a5,s2,1
1c001416:	01f7d713          	srli	a4,a5,0x1f
1c00141a:	97ba                	add	a5,a5,a4
1c00141c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001420:	8f99                	sub	a5,a5,a4
1c001422:	01cca703          	lw	a4,28(s9)
1c001426:	43478733          	p.mac	a4,a5,s4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00142a:	30047673          	csrrci	a2,mstatus,8
    if (size < max_len)
1c00142e:	020b4863          	bltz	s6,1c00145e <S1_Op_input_1_formatter+0x1f6>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001432:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c001436:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00143a:	de0b27b3          	p.insert	a5,s6,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00143e:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001442:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001446:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00144a:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00144e:	40d42023          	sw	a3,1024(s0)
        if (!merge) copy->id = id;
1c001452:	d9ae                	sw	a1,240(sp)
        copy->length = 0;
1c001454:	10012023          	sw	zero,256(sp)
  __builtin_pulp_spr_write(reg, val);
1c001458:	30061073          	csrw	mstatus,a2
1c00145c:	bf11                	j	1c001370 <S1_Op_input_1_formatter+0x108>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00145e:	67a1                	lui	a5,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001460:	003305b7          	lui	a1,0x330
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c001464:	dbae                	sw	a1,244(sp)
    cmd->loc_addr = loc;
1c001466:	10e12223          	sw	a4,260(sp)
    cmd->ext_addr = ext;
1c00146a:	10d12423          	sw	a3,264(sp)
    cmd->size = len;
1c00146e:	ddda                	sw	s6,248(sp)
    cmd->stride = stride;
1c001470:	dfbe                	sw	a5,252(sp)
    cmd->length = length;
1c001472:	10f12023          	sw	a5,256(sp)
    cmd->id = tid;
1c001476:	57fd                	li	a5,-1
1c001478:	d9be                	sw	a5,240(sp)
    cmd->next = NULL;
1c00147a:	10012623          	sw	zero,268(sp)
    if (__rt_dma_first_pending)
1c00147e:	01402783          	lw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c001482:	cb89                	beqz	a5,1c001494 <S1_Op_input_1_formatter+0x22c>
        __rt_dma_last_pending->next = cmd;
1c001484:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c001488:	1998                	addi	a4,sp,240
1c00148a:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c00148c:	199c                	addi	a5,sp,240
1c00148e:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c001492:	b7d9                	j	1c001458 <S1_Op_input_1_formatter+0x1f0>
    uint32_t iter_length = (len < length) ? len : length;
1c001494:	65a1                	lui	a1,0x8
1c001496:	04bb57b3          	p.minu	a5,s6,a1
        cmd->loc_addr += iter_length;
1c00149a:	00f70533          	add	a0,a4,a5
1c00149e:	10a12223          	sw	a0,260(sp)
        cmd->ext_addr += stride;
1c0014a2:	95b6                	add	a1,a1,a3
1c0014a4:	10b12423          	sw	a1,264(sp)
        cmd->size -= iter_length;
1c0014a8:	40fb07b3          	sub	a5,s6,a5
1c0014ac:	ddbe                	sw	a5,248(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0014ae:	40042783          	lw	a5,1024(s0)
        cmd->id = plp_dma_counter_alloc();
1c0014b2:	d9be                	sw	a5,240(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0014b4:	003387b7          	lui	a5,0x338
1c0014b8:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0014bc:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0014c0:	40d42023          	sw	a3,1024(s0)
        if (cmd->length != 0)
1c0014c4:	10012783          	lw	a5,256(sp)
1c0014c8:	d3f1                	beqz	a5,1c00148c <S1_Op_input_1_formatter+0x224>
            __rt_dma_first_pending = cmd;
1c0014ca:	199c                	addi	a5,sp,240
1c0014cc:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0014d0:	bf75                	j	1c00148c <S1_Op_input_1_formatter+0x224>
		KerArg0->H = (unsigned short int) (T0Ind_Last?22:37);
1c0014d2:	47d9                	li	a5,22
1c0014d4:	b5f9                	j	1c0013a2 <S1_Op_input_1_formatter+0x13a>
  if (copy->length == 0)
1c0014d6:	578e                	lw	a5,224(sp)
1c0014d8:	cf91                	beqz	a5,1c0014f4 <S1_Op_input_1_formatter+0x28c>

    rt_irq_restore(irq);
  }
  else
  {
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0014da:	572e                	lw	a4,232(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0014dc:	02000793          	li	a5,32
1c0014e0:	cf39                	beqz	a4,1c00153e <S1_Op_input_1_formatter+0x2d6>
1c0014e2:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0014e6:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0014ea:	00f42223          	sw	a5,4(s0)
1c0014ee:	572e                	lw	a4,232(sp)
1c0014f0:	fb6d                	bnez	a4,1c0014e2 <S1_Op_input_1_formatter+0x27a>
1c0014f2:	a0b1                	j	1c00153e <S1_Op_input_1_formatter+0x2d6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0014f4:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0014f8:	40442783          	lw	a5,1028(s0)
1c0014fc:	474e                	lw	a4,208(sp)
1c0014fe:	40e7d7b3          	sra	a5,a5,a4
1c001502:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001506:	c78d                	beqz	a5,1c001530 <S1_Op_input_1_formatter+0x2c8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001508:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c00150c:	30069073          	csrw	mstatus,a3
1c001510:	00c42423          	sw	a2,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001514:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001518:	00c42223          	sw	a2,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00151c:	300476f3          	csrrci	a3,mstatus,8
1c001520:	40442783          	lw	a5,1028(s0)
1c001524:	474e                	lw	a4,208(sp)
1c001526:	40e7d7b3          	sra	a5,a5,a4
1c00152a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00152e:	fff9                	bnez	a5,1c00150c <S1_Op_input_1_formatter+0x2a4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001530:	4785                	li	a5,1
1c001532:	00e79733          	sll	a4,a5,a4
1c001536:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c00153a:	30069073          	csrw	mstatus,a3
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c00153e:	47b2                	lw	a5,12(sp)
1c001540:	24079e63          	bnez	a5,1c00179c <S1_Op_input_1_formatter+0x534>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+19360+11988*((T0Ind_Total+-1)%2)),
1c001544:	fff90793          	addi	a5,s2,-1
1c001548:	01f7d713          	srli	a4,a5,0x1f
1c00154c:	97ba                	add	a5,a5,a4
1c00154e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001552:	8f99                	sub	a5,a5,a4
1c001554:	4642                	lw	a2,16(sp)
1c001556:	43478633          	p.mac	a2,a5,s4
1c00155a:	ea4da583          	lw	a1,-348(s11) # 1c00dea4 <model_L2_Memory>
1c00155e:	181c                	addi	a5,sp,48
1c001560:	4701                	li	a4,0
1c001562:	86d6                	mv	a3,s5
1c001564:	962e                	add	a2,a2,a1
1c001566:	4862                	lw	a6,24(sp)
1c001568:	4552                	lw	a0,20(sp)
1c00156a:	00a805b3          	add	a1,a6,a0
1c00156e:	1c00e537          	lui	a0,0x1c00e
1c001572:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c001576:	0f6070ef          	jal	ra,1c00866c <pi_cl_ram_copy>
					_SP_Out, 1, &UchanHR1);
		AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+19360+11988*((T0Ind_Total)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+23976+11988*((T0Ind_Total)%2)),
1c00157a:	ea4da783          	lw	a5,-348(s11)
1c00157e:	94be                	add	s1,s1,a5
1c001580:	47c2                	lw	a5,16(sp)
1c001582:	00f48733          	add	a4,s1,a5
1c001586:	01cca783          	lw	a5,28(s9)
1c00158a:	9c3e                	add	s8,s8,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00158c:	300476f3          	csrrci	a3,mstatus,8
    if (size < max_len)
1c001590:	01099813          	slli	a6,s3,0x10
1c001594:	06084a63          	bltz	a6,1c001608 <S1_Op_input_1_formatter+0x3a0>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001598:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00159c:	000207b7          	lui	a5,0x20
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0015a0:	de09a7b3          	p.insert	a5,s3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0015a4:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0015a8:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0015ac:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0015b0:	41842023          	sw	s8,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0015b4:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c0015b8:	c9b2                	sw	a2,208(sp)
        copy->length = 0;
1c0015ba:	d182                	sw	zero,224(sp)
  __builtin_pulp_spr_write(reg, val);
1c0015bc:	30069073          	csrw	mstatus,a3
	for (T0Ind=0; T0Ind<7; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0015c0:	0905                	addi	s2,s2,1
1c0015c2:	ca5e                	sw	s7,20(sp)
1c0015c4:	c656                	sw	s5,12(sp)
1c0015c6:	0a792763          	p.beqimm	s2,7,1c001674 <S1_Op_input_1_formatter+0x40c>
1c0015ca:	8ace                	mv	s5,s3
1c0015cc:	89da                	mv	s3,s6
1c0015ce:	4ba2                	lw	s7,8(sp)
		if (!(T0Ind_Last)) {
1c0015d0:	d46922e3          	p.beqimm	s2,6,1c001314 <S1_Op_input_1_formatter+0xac>
			_N_In = _N_In + (11988); _SN_In = ((T0Ind_NextLast)?7128:11988); 
1c0015d4:	014b8533          	add	a0,s7,s4
1c0015d8:	c42a                	sw	a0,8(sp)
1c0015da:	d45920e3          	p.beqimm	s2,5,1c00131a <S1_Op_input_1_formatter+0xb2>
1c0015de:	8b52                	mv	s6,s4
  if (copy->length == 0)
1c0015e0:	10012783          	lw	a5,256(sp)
1c0015e4:	d2078fe3          	beqz	a5,1c001322 <S1_Op_input_1_formatter+0xba>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0015e8:	10812703          	lw	a4,264(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0015ec:	02000793          	li	a5,32
1c0015f0:	d6070ee3          	beqz	a4,1c00136c <S1_Op_input_1_formatter+0x104>
1c0015f4:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0015f8:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0015fc:	00f42223          	sw	a5,4(s0)
1c001600:	10812703          	lw	a4,264(sp)
1c001604:	fb65                	bnez	a4,1c0015f4 <S1_Op_input_1_formatter+0x38c>
1c001606:	b39d                	j	1c00136c <S1_Op_input_1_formatter+0x104>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001608:	67a1                	lui	a5,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00160a:	00320637          	lui	a2,0x320
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c00160e:	cbb2                	sw	a2,212(sp)
    cmd->loc_addr = loc;
1c001610:	d3e2                	sw	s8,228(sp)
    cmd->ext_addr = ext;
1c001612:	d5ba                	sw	a4,232(sp)
    cmd->size = len;
1c001614:	cdce                	sw	s3,216(sp)
    cmd->stride = stride;
1c001616:	cfbe                	sw	a5,220(sp)
    cmd->length = length;
1c001618:	d1be                	sw	a5,224(sp)
    cmd->id = tid;
1c00161a:	57fd                	li	a5,-1
1c00161c:	c9be                	sw	a5,208(sp)
    cmd->next = NULL;
1c00161e:	d782                	sw	zero,236(sp)
    if (__rt_dma_first_pending)
1c001620:	01402783          	lw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c001624:	cb89                	beqz	a5,1c001636 <S1_Op_input_1_formatter+0x3ce>
        __rt_dma_last_pending->next = cmd;
1c001626:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00162a:	0998                	addi	a4,sp,208
1c00162c:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c00162e:	099c                	addi	a5,sp,208
1c001630:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c001634:	b761                	j	1c0015bc <S1_Op_input_1_formatter+0x354>
    uint32_t iter_length = (len < length) ? len : length;
1c001636:	67a1                	lui	a5,0x8
1c001638:	04f9d7b3          	p.minu	a5,s3,a5
        cmd->loc_addr += iter_length;
1c00163c:	00fc0633          	add	a2,s8,a5
1c001640:	d3b2                	sw	a2,228(sp)
        cmd->ext_addr += stride;
1c001642:	6635                	lui	a2,0xd
1c001644:	ba060613          	addi	a2,a2,-1120 # cba0 <__rt_stack_size+0xc3a0>
1c001648:	94b2                	add	s1,s1,a2
1c00164a:	d5a6                	sw	s1,232(sp)
        cmd->size -= iter_length;
1c00164c:	40f987b3          	sub	a5,s3,a5
1c001650:	cdbe                	sw	a5,216(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001652:	40042783          	lw	a5,1024(s0)
        cmd->id = plp_dma_counter_alloc();
1c001656:	c9be                	sw	a5,208(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001658:	003287b7          	lui	a5,0x328
1c00165c:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001660:	41842023          	sw	s8,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001664:	40e42023          	sw	a4,1024(s0)
        if (cmd->length != 0)
1c001668:	578e                	lw	a5,224(sp)
1c00166a:	d3f1                	beqz	a5,1c00162e <S1_Op_input_1_formatter+0x3c6>
            __rt_dma_first_pending = cmd;
1c00166c:	099c                	addi	a5,sp,208
1c00166e:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c001672:	bf75                	j	1c00162e <S1_Op_input_1_formatter+0x3c6>
  if (copy->length == 0)
1c001674:	578e                	lw	a5,224(sp)
1c001676:	c385                	beqz	a5,1c001696 <S1_Op_input_1_formatter+0x42e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001678:	56ae                	lw	a3,232(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00167a:	02000713          	li	a4,32
1c00167e:	002047b7          	lui	a5,0x204
1c001682:	c6ad                	beqz	a3,1c0016ec <S1_Op_input_1_formatter+0x484>
1c001684:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001688:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00168c:	00e7a223          	sw	a4,4(a5)
1c001690:	56ae                	lw	a3,232(sp)
1c001692:	faed                	bnez	a3,1c001684 <S1_Op_input_1_formatter+0x41c>
1c001694:	a8a1                	j	1c0016ec <S1_Op_input_1_formatter+0x484>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001696:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00169a:	002047b7          	lui	a5,0x204
1c00169e:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0016a2:	46ce                	lw	a3,208(sp)
1c0016a4:	40d7d7b3          	sra	a5,a5,a3
1c0016a8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0016ac:	c79d                	beqz	a5,1c0016da <S1_Op_input_1_formatter+0x472>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0016ae:	10000593          	li	a1,256
1c0016b2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0016b6:	30061073          	csrw	mstatus,a2
1c0016ba:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0016be:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0016c2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0016c6:	30047673          	csrrci	a2,mstatus,8
1c0016ca:	40472783          	lw	a5,1028(a4)
1c0016ce:	46ce                	lw	a3,208(sp)
1c0016d0:	40d7d7b3          	sra	a5,a5,a3
1c0016d4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0016d8:	fff9                	bnez	a5,1c0016b6 <S1_Op_input_1_formatter+0x44e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0016da:	4785                	li	a5,1
1c0016dc:	00d796b3          	sll	a3,a5,a3
1c0016e0:	002047b7          	lui	a5,0x204
1c0016e4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0016e8:	30061073          	csrw	mstatus,a2
		}
		/*============================= End Prepare Tiles ===================================*/
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c0016ec:	020a8563          	beqz	s5,1c001716 <S1_Op_input_1_formatter+0x4ae>
1c0016f0:	0cc14783          	lbu	a5,204(sp)
1c0016f4:	0ff7f793          	andi	a5,a5,255
1c0016f8:	ef99                	bnez	a5,1c001716 <S1_Op_input_1_formatter+0x4ae>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0016fa:	4689                	li	a3,2
1c0016fc:	00204737          	lui	a4,0x204
1c001700:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001704:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001708:	00d72223          	sw	a3,4(a4)
1c00170c:	0cc14783          	lbu	a5,204(sp)
1c001710:	0ff7f793          	andi	a5,a5,255
1c001714:	d7f5                	beqz	a5,1c001700 <S1_Op_input_1_formatter+0x498>
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+19360+11988*((T0Ind_Total+-1)%2)), _SP_Out, 1, &UchanHR1);
1c001716:	1c00e7b7          	lui	a5,0x1c00e
1c00171a:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
1c00171e:	181c                	addi	a5,sp,48
1c001720:	4701                	li	a4,0
1c001722:	86ce                	mv	a3,s3
1c001724:	6615                	lui	a2,0x5
1c001726:	ba060613          	addi	a2,a2,-1120 # 4ba0 <__rt_stack_size+0x43a0>
1c00172a:	962e                	add	a2,a2,a1
1c00172c:	4562                	lw	a0,24(sp)
1c00172e:	017505b3          	add	a1,a0,s7
1c001732:	1c00e537          	lui	a0,0x1c00e
1c001736:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c00173a:	733060ef          	jal	ra,1c00866c <pi_cl_ram_copy>
1c00173e:	0cc14783          	lbu	a5,204(sp)
1c001742:	0ff7f793          	andi	a5,a5,255
1c001746:	ef99                	bnez	a5,1c001764 <S1_Op_input_1_formatter+0x4fc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001748:	4689                	li	a3,2
1c00174a:	00204737          	lui	a4,0x204
1c00174e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001752:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001756:	00d72223          	sw	a3,4(a4)
1c00175a:	0cc14783          	lbu	a5,204(sp)
1c00175e:	0ff7f793          	andi	a5,a5,255
1c001762:	d7f5                	beqz	a5,1c00174e <S1_Op_input_1_formatter+0x4e6>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait current uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c001764:	14c12083          	lw	ra,332(sp)
1c001768:	14812403          	lw	s0,328(sp)
1c00176c:	14412483          	lw	s1,324(sp)
1c001770:	14012903          	lw	s2,320(sp)
1c001774:	13c12983          	lw	s3,316(sp)
1c001778:	13812a03          	lw	s4,312(sp)
1c00177c:	13412a83          	lw	s5,308(sp)
1c001780:	13012b03          	lw	s6,304(sp)
1c001784:	12c12b83          	lw	s7,300(sp)
1c001788:	12812c03          	lw	s8,296(sp)
1c00178c:	12412c83          	lw	s9,292(sp)
1c001790:	12012d03          	lw	s10,288(sp)
1c001794:	11c12d83          	lw	s11,284(sp)
1c001798:	6171                	addi	sp,sp,336
1c00179a:	8082                	ret
1c00179c:	0cc14783          	lbu	a5,204(sp)
1c0017a0:	0ff7f793          	andi	a5,a5,255
1c0017a4:	c40784e3          	beqz	a5,1c0013ec <S1_Op_input_1_formatter+0x184>
1c0017a8:	bb71                	j	1c001544 <S1_Op_input_1_formatter+0x2dc>

1c0017aa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c0017aa:	d7010113          	addi	sp,sp,-656
1c0017ae:	28112623          	sw	ra,652(sp)
1c0017b2:	28812423          	sw	s0,648(sp)
1c0017b6:	28912223          	sw	s1,644(sp)
1c0017ba:	29212023          	sw	s2,640(sp)
1c0017be:	27312e23          	sw	s3,636(sp)
1c0017c2:	27412c23          	sw	s4,632(sp)
1c0017c6:	27512a23          	sw	s5,628(sp)
1c0017ca:	27612823          	sw	s6,624(sp)
1c0017ce:	27712623          	sw	s7,620(sp)
1c0017d2:	27812423          	sw	s8,616(sp)
1c0017d6:	27912223          	sw	s9,612(sp)
1c0017da:	27a12023          	sw	s10,608(sp)
1c0017de:	25b12e23          	sw	s11,604(sp)
1c0017e2:	842a                	mv	s0,a0
1c0017e4:	d036                	sw	a3,32(sp)
1c0017e6:	84c2                	mv	s1,a6
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 60:[9x1, 58:9x1, 9x1], 1]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (model_L1_Memory+7704);
1c0017e8:	100006b7          	lui	a3,0x10000
1c0017ec:	01c6a803          	lw	a6,28(a3) # 1000001c <model_L1_Memory>
1c0017f0:	6689                	lui	a3,0x2
1c0017f2:	e1868693          	addi	a3,a3,-488 # 1e18 <__rt_stack_size+0x1618>
1c0017f6:	96c2                	add	a3,a3,a6
1c0017f8:	df36                	sw	a3,188(sp)
	KerArg0->W = (unsigned short int) (160);
1c0017fa:	0a000313          	li	t1,160
1c0017fe:	0c611023          	sh	t1,192(sp)
	KerArg0->H = (unsigned short int) (2);
1c001802:	4889                	li	a7,2
1c001804:	0d111123          	sh	a7,194(sp)
	KerArg1->W = (unsigned short int) (324);
1c001808:	14400513          	li	a0,324
1c00180c:	08a11823          	sh	a0,144(sp)
	KerArg1->UsedW = (unsigned short int) (321);
1c001810:	14100513          	li	a0,321
1c001814:	08a11923          	sh	a0,146(sp)
	KerArg1->H = (unsigned short int) (5);
1c001818:	4515                	li	a0,5
1c00181a:	08a11a23          	sh	a0,148(sp)
	KerArg1->UsedH = (unsigned short int) (5);
1c00181e:	08a11b23          	sh	a0,150(sp)
	KerArg1->InFeatures = (unsigned short int) (1);
1c001822:	4e05                	li	t3,1
1c001824:	09c11c23          	sh	t3,152(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (1);
1c001828:	09c11e23          	sh	t3,156(sp)
	KerArg1->Out = (int * __restrict__) (model_L1_Memory+7704);
1c00182c:	d536                	sw	a3,168(sp)
	KerArg1->Pad = (v4s) 0;
1c00182e:	00007557          	pv.add.sci.b	a0,zero,0
1c001832:	d72a                	sw	a0,172(sp)
	KerArg2->In = (int *__restrict__) (model_L1_Memory+7704);
1c001834:	d8b6                	sw	a3,112(sp)
	KerArg2->Out = (void *__restrict__) (model_L1_Memory+7704);
1c001836:	dab6                	sw	a3,116(sp)
	KerArg2->W = (unsigned short int) (160);
1c001838:	06611d23          	sh	t1,122(sp)
	KerArg2->H = (unsigned short int) (2);
1c00183c:	07111e23          	sh	a7,124(sp)
	KerArg2->Infos = (signed char *__restrict__) (model_L1_Memory+38424);
1c001840:	6525                	lui	a0,0x9
1c001842:	61850513          	addi	a0,a0,1560 # 9618 <__rt_stack_size+0x8e18>
1c001846:	9542                	add	a0,a0,a6
1c001848:	c52a                	sw	a0,136(sp)
	KerArg3->In = (signed char * __restrict__) (model_L1_Memory+7704);
1c00184a:	c4b6                	sw	a3,72(sp)
	KerArg3->W = (unsigned short int) (160);
1c00184c:	04611923          	sh	t1,82(sp)
	KerArg3->UsedW = (unsigned short int) (160);
1c001850:	04611a23          	sh	t1,84(sp)
	KerArg3->H = (unsigned short int) (2);
1c001854:	05111b23          	sh	a7,86(sp)
	KerArg3->UsedH = (unsigned short int) (2);
1c001858:	05111c23          	sh	a7,88(sp)
	KerArg3->Pad = (v4s) 0;
1c00185c:	000076d7          	pv.add.sci.b	a3,zero,0
1c001860:	d4b6                	sw	a3,104(sp)
	KerArg3->PoolMax = (unsigned char) (1);
1c001862:	05c10d23          	sb	t3,90(sp)
	KerArg3->DoScale = (unsigned char) (0);
1c001866:	060102a3          	sb	zero,101(sp)
	KerArg3->Infos = (signed char * __restrict__) (model_L1_Memory+38424);
1c00186a:	d6aa                	sw	a0,108(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00186c:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001870:	00204537          	lui	a0,0x204
1c001874:	40052503          	lw	a0,1024(a0) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001878:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00187c:	08068693          	addi	a3,a3,128 # b0080 <__L2+0x30080>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001880:	c156c6b3          	p.bset	a3,a3,0,21
1c001884:	00204337          	lui	t1,0x204
1c001888:	40d32023          	sw	a3,1024(t1) # 204400 <__L2+0x184400>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=1920; _LC_Out=80;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3240), 128, 0, &DmaR_Evt1);
1c00188c:	6685                	lui	a3,0x1
1c00188e:	ca868693          	addi	a3,a3,-856 # ca8 <__rt_stack_size+0x4a8>
1c001892:	9836                	add	a6,a6,a3
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001894:	002046b7          	lui	a3,0x204
1c001898:	4106a023          	sw	a6,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00189c:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c0018a0:	22a12823          	sw	a0,560(sp)
        copy->length = 0;
1c0018a4:	24012023          	sw	zero,576(sp)
  __builtin_pulp_spr_write(reg, val);
1c0018a8:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c0018ac:	24012683          	lw	a3,576(sp)
1c0018b0:	c295                	beqz	a3,1c0018d4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x12a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0018b2:	24812503          	lw	a0,584(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0018b6:	02000613          	li	a2,32
1c0018ba:	002046b7          	lui	a3,0x204
1c0018be:	c925                	beqz	a0,1c00192e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x184>
1c0018c0:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0018c4:	03c6e503          	p.elw	a0,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0018c8:	00c6a223          	sw	a2,4(a3)
1c0018cc:	24812503          	lw	a0,584(sp)
1c0018d0:	f965                	bnez	a0,1c0018c0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x116>
1c0018d2:	a8b1                	j	1c00192e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x184>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0018d4:	30047873          	csrrci	a6,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0018d8:	002046b7          	lui	a3,0x204
1c0018dc:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c0018e0:	23012503          	lw	a0,560(sp)
1c0018e4:	40a6d6b3          	sra	a3,a3,a0
1c0018e8:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0018ec:	ca85                	beqz	a3,1c00191c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x172>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0018ee:	10000893          	li	a7,256
1c0018f2:	00204637          	lui	a2,0x204
  __builtin_pulp_spr_write(reg, val);
1c0018f6:	30081073          	csrw	mstatus,a6
1c0018fa:	01162423          	sw	a7,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0018fe:	03c66683          	p.elw	a3,60(a2)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001902:	01162223          	sw	a7,4(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001906:	30047873          	csrrci	a6,mstatus,8
1c00190a:	40462683          	lw	a3,1028(a2)
1c00190e:	23012503          	lw	a0,560(sp)
1c001912:	40a6d6b3          	sra	a3,a3,a0
1c001916:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00191a:	fef1                	bnez	a3,1c0018f6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x14c>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00191c:	4685                	li	a3,1
1c00191e:	00a69533          	sll	a0,a3,a0
1c001922:	002046b7          	lui	a3,0x204
1c001926:	40a6a223          	sw	a0,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00192a:	30081073          	csrw	mstatus,a6
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3368), 32, 0, &DmaR_Evt2);
1c00192e:	100006b7          	lui	a3,0x10000
1c001932:	01c6a503          	lw	a0,28(a3) # 1000001c <model_L1_Memory>
1c001936:	6685                	lui	a3,0x1
1c001938:	d2868693          	addi	a3,a3,-728 # d28 <__rt_stack_size+0x528>
1c00193c:	9536                	add	a0,a0,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00193e:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001942:	00204637          	lui	a2,0x204
1c001946:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00194a:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00194e:	02068693          	addi	a3,a3,32 # b0020 <__L2+0x30020>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001952:	c156c6b3          	p.bset	a3,a3,0,21
1c001956:	002048b7          	lui	a7,0x204
1c00195a:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00195e:	002046b7          	lui	a3,0x204
1c001962:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001966:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c00196a:	20c12823          	sw	a2,528(sp)
        copy->length = 0;
1c00196e:	22012023          	sw	zero,544(sp)
  __builtin_pulp_spr_write(reg, val);
1c001972:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c001976:	22012703          	lw	a4,544(sp)
1c00197a:	c315                	beqz	a4,1c00199e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x1f4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00197c:	22812603          	lw	a2,552(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001980:	02000693          	li	a3,32
1c001984:	00204737          	lui	a4,0x204
1c001988:	ca25                	beqz	a2,1c0019f8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x24e>
1c00198a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00198e:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001992:	00d72223          	sw	a3,4(a4)
1c001996:	22812603          	lw	a2,552(sp)
1c00199a:	fa65                	bnez	a2,1c00198a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x1e0>
1c00199c:	a8b1                	j	1c0019f8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x24e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00199e:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0019a2:	00204737          	lui	a4,0x204
1c0019a6:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c0019aa:	21012603          	lw	a2,528(sp)
1c0019ae:	40c75733          	sra	a4,a4,a2
1c0019b2:	fc173733          	p.bclr	a4,a4,30,1
1c0019b6:	cb05                	beqz	a4,1c0019e6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x23c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0019b8:	10000813          	li	a6,256
1c0019bc:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0019c0:	30051073          	csrw	mstatus,a0
1c0019c4:	0106a423          	sw	a6,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0019c8:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0019cc:	0106a223          	sw	a6,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0019d0:	30047573          	csrrci	a0,mstatus,8
1c0019d4:	4046a703          	lw	a4,1028(a3)
1c0019d8:	21012603          	lw	a2,528(sp)
1c0019dc:	40c75733          	sra	a4,a4,a2
1c0019e0:	fc173733          	p.bclr	a4,a4,30,1
1c0019e4:	ff71                	bnez	a4,1c0019c0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x216>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0019e6:	4705                	li	a4,1
1c0019e8:	00c71633          	sll	a2,a4,a2
1c0019ec:	00204737          	lui	a4,0x204
1c0019f0:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0019f4:	30051073          	csrw	mstatus,a0
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3400), 32, 0, &DmaR_Evt3);
1c0019f8:	10000737          	lui	a4,0x10000
1c0019fc:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c001a00:	6705                	lui	a4,0x1
1c001a02:	d4870713          	addi	a4,a4,-696 # d48 <__rt_stack_size+0x548>
1c001a06:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a08:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001a0c:	002046b7          	lui	a3,0x204
1c001a10:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001a14:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001a18:	02070713          	addi	a4,a4,32 # b0020 <__L2+0x30020>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001a1c:	c1574733          	p.bset	a4,a4,0,21
1c001a20:	00204837          	lui	a6,0x204
1c001a24:	40e82023          	sw	a4,1024(a6) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001a28:	00204737          	lui	a4,0x204
1c001a2c:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001a30:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c001a34:	1ed12823          	sw	a3,496(sp)
        copy->length = 0;
1c001a38:	20012023          	sw	zero,512(sp)
  __builtin_pulp_spr_write(reg, val);
1c001a3c:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c001a40:	20012783          	lw	a5,512(sp)
1c001a44:	c395                	beqz	a5,1c001a68 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2be>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001a46:	20812683          	lw	a3,520(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a4a:	02000713          	li	a4,32
1c001a4e:	002047b7          	lui	a5,0x204
1c001a52:	caa5                	beqz	a3,1c001ac2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x318>
1c001a54:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a58:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001a5c:	00e7a223          	sw	a4,4(a5)
1c001a60:	20812683          	lw	a3,520(sp)
1c001a64:	fae5                	bnez	a3,1c001a54 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2aa>
1c001a66:	a8b1                	j	1c001ac2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x318>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a68:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001a6c:	002047b7          	lui	a5,0x204
1c001a70:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c001a74:	1f012683          	lw	a3,496(sp)
1c001a78:	40d7d7b3          	sra	a5,a5,a3
1c001a7c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001a80:	cb85                	beqz	a5,1c001ab0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x306>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a82:	10000513          	li	a0,256
1c001a86:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001a8a:	30061073          	csrw	mstatus,a2
1c001a8e:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a92:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001a96:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a9a:	30047673          	csrrci	a2,mstatus,8
1c001a9e:	40472783          	lw	a5,1028(a4)
1c001aa2:	1f012683          	lw	a3,496(sp)
1c001aa6:	40d7d7b3          	sra	a5,a5,a3
1c001aaa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001aae:	fff1                	bnez	a5,1c001a8a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2e0>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001ab0:	4785                	li	a5,1
1c001ab2:	00d796b3          	sll	a3,a5,a3
1c001ab6:	002047b7          	lui	a5,0x204
1c001aba:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001abe:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3432+0), 216, 0, &DmaR_Evt4);
1c001ac2:	de2e                	sw	a1,60(sp)
1c001ac4:	100007b7          	lui	a5,0x10000
1c001ac8:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c001acc:	6785                	lui	a5,0x1
1c001ace:	d6878793          	addi	a5,a5,-664 # d68 <__rt_stack_size+0x568>
1c001ad2:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ad4:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001ad8:	00204737          	lui	a4,0x204
1c001adc:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001ae0:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001ae4:	0d878793          	addi	a5,a5,216 # b00d8 <__L2+0x300d8>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001ae8:	c157c7b3          	p.bset	a5,a5,0,21
1c001aec:	00204537          	lui	a0,0x204
1c001af0:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001af4:	002047b7          	lui	a5,0x204
1c001af8:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001afc:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c001b00:	1ce12823          	sw	a4,464(sp)
        copy->length = 0;
1c001b04:	1e012023          	sw	zero,480(sp)
  __builtin_pulp_spr_write(reg, val);
1c001b08:	30061073          	csrw	mstatus,a2
	_N_Filter=0;
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+172960+0), 1620, 0, &UchanHR1);
1c001b0c:	d422                	sw	s0,40(sp)
1c001b0e:	1c00e7b7          	lui	a5,0x1c00e
1c001b12:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
1c001b16:	099c                	addi	a5,sp,208
1c001b18:	4705                	li	a4,1
1c001b1a:	65400693          	li	a3,1620
1c001b1e:	0002a637          	lui	a2,0x2a
1c001b22:	3a060613          	addi	a2,a2,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c001b26:	962e                	add	a2,a2,a1
1c001b28:	85a2                	mv	a1,s0
1c001b2a:	1c00e537          	lui	a0,0x1c00e
1c001b2e:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c001b32:	33b060ef          	jal	ra,1c00866c <pi_cl_ram_copy>
1c001b36:	16c14783          	lbu	a5,364(sp)
1c001b3a:	0ff7f793          	andi	a5,a5,255
1c001b3e:	ef99                	bnez	a5,1c001b5c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x3b2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001b40:	4689                	li	a3,2
1c001b42:	00204737          	lui	a4,0x204
1c001b46:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001b4a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001b4e:	00d72223          	sw	a3,4(a4)
1c001b52:	16c14783          	lbu	a5,364(sp)
1c001b56:	0ff7f793          	andi	a5,a5,255
1c001b5a:	d7f5                	beqz	a5,1c001b46 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x39c>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+1296), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+172960+1620), 1620, 0, &UchanHR1);
1c001b5c:	1c00e937          	lui	s2,0x1c00e
1c001b60:	ea490913          	addi	s2,s2,-348 # 1c00dea4 <model_L2_Memory>
1c001b64:	00092583          	lw	a1,0(s2)
1c001b68:	099c                	addi	a5,sp,208
1c001b6a:	4705                	li	a4,1
1c001b6c:	65400693          	li	a3,1620
1c001b70:	0002b637          	lui	a2,0x2b
1c001b74:	9f460613          	addi	a2,a2,-1548 # 2a9f4 <__L1Cl+0x1a9f4>
1c001b78:	962e                	add	a2,a2,a1
1c001b7a:	51040593          	addi	a1,s0,1296
1c001b7e:	1c00e537          	lui	a0,0x1c00e
1c001b82:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c001b86:	2e7060ef          	jal	ra,1c00866c <pi_cl_ram_copy>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+172960+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+0), 1620, 0, &DmaR_Evt5);
1c001b8a:	00092583          	lw	a1,0(s2)
1c001b8e:	0002a7b7          	lui	a5,0x2a
1c001b92:	3a078793          	addi	a5,a5,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c001b96:	95be                	add	a1,a1,a5
1c001b98:	10000637          	lui	a2,0x10000
1c001b9c:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c001ba0:	00062883          	lw	a7,0(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ba4:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001ba8:	002046b7          	lui	a3,0x204
1c001bac:	4006a803          	lw	a6,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c001bb0:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001bb4:	6547e713          	ori	a4,a5,1620
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001bb8:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001bbc:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001bc0:	00204337          	lui	t1,0x204
1c001bc4:	40e32023          	sw	a4,1024(t1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001bc8:	00204737          	lui	a4,0x204
1c001bcc:	41172023          	sw	a7,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001bd0:	40b72023          	sw	a1,1024(a4)
        if (!merge) copy->id = id;
1c001bd4:	1b012823          	sw	a6,432(sp)
        copy->length = 0;
1c001bd8:	1c012023          	sw	zero,448(sp)
  __builtin_pulp_spr_write(reg, val);
1c001bdc:	30051073          	csrw	mstatus,a0
	_NN_In=1296; _SN_In=1620;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+38424), 9, 0, &DmaR_Evt6);
1c001be0:	4218                	lw	a4,0(a2)
1c001be2:	6625                	lui	a2,0x9
1c001be4:	61860613          	addi	a2,a2,1560 # 9618 <__rt_stack_size+0x8e18>
1c001be8:	9732                	add	a4,a4,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001bea:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001bee:	4006a683          	lw	a3,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001bf2:	0097e793          	ori	a5,a5,9
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001bf6:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001bfa:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001bfe:	002045b7          	lui	a1,0x204
1c001c02:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001c06:	002047b7          	lui	a5,0x204
1c001c0a:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001c0e:	4097a023          	sw	s1,1024(a5)
        if (!merge) copy->id = id;
1c001c12:	18d12823          	sw	a3,400(sp)
        copy->length = 0;
1c001c16:	1a012023          	sw	zero,416(sp)
  __builtin_pulp_spr_write(reg, val);
1c001c1a:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c001c1e:	1a012783          	lw	a5,416(sp)
1c001c22:	c395                	beqz	a5,1c001c46 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x49c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001c24:	1a812683          	lw	a3,424(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001c28:	02000713          	li	a4,32
1c001c2c:	002047b7          	lui	a5,0x204
1c001c30:	caa5                	beqz	a3,1c001ca0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4f6>
1c001c32:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001c36:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001c3a:	00e7a223          	sw	a4,4(a5)
1c001c3e:	1a812683          	lw	a3,424(sp)
1c001c42:	fae5                	bnez	a3,1c001c32 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x488>
1c001c44:	a8b1                	j	1c001ca0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4f6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001c46:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001c4a:	002047b7          	lui	a5,0x204
1c001c4e:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c001c52:	19012683          	lw	a3,400(sp)
1c001c56:	40d7d7b3          	sra	a5,a5,a3
1c001c5a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001c5e:	cb85                	beqz	a5,1c001c8e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4e4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001c60:	10000593          	li	a1,256
1c001c64:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001c68:	30061073          	csrw	mstatus,a2
1c001c6c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001c70:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001c74:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001c78:	30047673          	csrrci	a2,mstatus,8
1c001c7c:	40472783          	lw	a5,1028(a4)
1c001c80:	19012683          	lw	a3,400(sp)
1c001c84:	40d7d7b3          	sra	a5,a5,a3
1c001c88:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001c8c:	fff1                	bnez	a5,1c001c68 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4be>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001c8e:	4785                	li	a5,1
1c001c90:	00d796b3          	sll	a3,a5,a3
1c001c94:	002047b7          	lui	a5,0x204
1c001c98:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001c9c:	30061073          	csrw	mstatus,a2
{
1c001ca0:	6785                	lui	a5,0x1
1c001ca2:	d2878793          	addi	a5,a5,-728 # d28 <__rt_stack_size+0x528>
1c001ca6:	c83e                	sw	a5,16(sp)
1c001ca8:	65400713          	li	a4,1620
1c001cac:	c03a                	sw	a4,0(sp)
1c001cae:	51000793          	li	a5,1296
1c001cb2:	c43e                	sw	a5,8(sp)
1c001cb4:	d802                	sw	zero,48(sp)
1c001cb6:	78000613          	li	a2,1920
1c001cba:	c202                	sw	zero,4(sp)
1c001cbc:	4a81                	li	s5,0
1c001cbe:	4b01                	li	s6,0
1c001cc0:	4c81                	li	s9,0
1c001cc2:	d602                	sw	zero,44(sp)
1c001cc4:	00204bb7          	lui	s7,0x204
		}
		/*============================= End Prepare Tiles ===================================*/
		/*================================= Read Tiles ======================================*/
		AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
		if (_SN_Filter) {
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3432+216*((D1Ind_Total+1)%2)),
1c001cc8:	10000c37          	lui	s8,0x10000
1c001ccc:	6805                	lui	a6,0x1
1c001cce:	d6880813          	addi	a6,a6,-664 # d68 <__rt_stack_size+0x568>
1c001cd2:	dc42                	sw	a6,56(sp)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001cd4:	200b8d93          	addi	s11,s7,512 # 204200 <__L2+0x184200>
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001cd8:	8d6e                	mv	s10,s11
1c001cda:	a38d                	j	1c00223c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa92>
		_SN_Filter = 0;
1c001cdc:	4501                	li	a0,0
1c001cde:	ab85                	j	1c00224e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xaa4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ce0:	300476f3          	csrrci	a3,mstatus,8
1c001ce4:	404ba783          	lw	a5,1028(s7)
1c001ce8:	1d012703          	lw	a4,464(sp)
1c001cec:	40e7d7b3          	sra	a5,a5,a4
1c001cf0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001cf4:	c795                	beqz	a5,1c001d20 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x576>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001cf6:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c001cfa:	30069073          	csrw	mstatus,a3
1c001cfe:	00bba423          	sw	a1,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001d02:	03cbe783          	p.elw	a5,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001d06:	00bba223          	sw	a1,4(s7)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001d0a:	300476f3          	csrrci	a3,mstatus,8
1c001d0e:	404ba783          	lw	a5,1028(s7)
1c001d12:	1d012703          	lw	a4,464(sp)
1c001d16:	40e7d7b3          	sra	a5,a5,a4
1c001d1a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001d1e:	fff1                	bnez	a5,1c001cfa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x550>
1c001d20:	4785                	li	a5,1
1c001d22:	00e79733          	sll	a4,a5,a4
1c001d26:	40eba223          	sw	a4,1028(s7)
  __builtin_pulp_spr_write(reg, val);
1c001d2a:	30069073          	csrw	mstatus,a3
		if (_SN_Filter) {
1c001d2e:	e135                	bnez	a0,1c001d92 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x5e8>
1c001d30:	49e1                	li	s3,24
1c001d32:	56b2                	lw	a3,44(sp)
1c001d34:	0a16a963          	p.beqimm	a3,1,1c001de6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x63c>
1c001d38:	1009d9b3          	p.exthz	s3,s3
1c001d3c:	3ffff7b7          	lui	a5,0x3ffff
1c001d40:	60278793          	addi	a5,a5,1538 # 3ffff602 <__l2_end+0x23ff132e>
1c001d44:	4742                	lw	a4,16(sp)
1c001d46:	97ba                	add	a5,a5,a4
1c001d48:	078a                	slli	a5,a5,0x2
1c001d4a:	ca3e                	sw	a5,20(sp)
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+1620*((D0Ind_Total)%2));
				KerArg1->OutFeatures = (unsigned short int) (D1Ind_Last?8:24);
				KerArg1->Filter = (signed char * __restrict__) (model_L1_Memory+3432+216*((D1Ind_Total)%2));
1c001d4c:	57b2                	lw	a5,44(sp)
1c001d4e:	01f7d713          	srli	a4,a5,0x1f
1c001d52:	97ba                	add	a5,a5,a4
1c001d54:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001d58:	8f99                	sub	a5,a5,a4
1c001d5a:	0d800713          	li	a4,216
1c001d5e:	5862                	lw	a6,56(sp)
1c001d60:	42e78833          	p.mac	a6,a5,a4
1c001d64:	cc42                	sw	a6,24(sp)
				D0Ind_Total++;
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Feat = (unsigned short int) (D1Ind_Last?8:24);
			KerArg2->Scale = (unsigned char *__restrict__) (model_L1_Memory+3368+((D1Ind)*24));
			KerArg2->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+3400+((D1Ind)*24));
1c001d66:	4542                	lw	a0,16(sp)
1c001d68:	02050513          	addi	a0,a0,32
1c001d6c:	ce2a                	sw	a0,28(sp)
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c001d6e:	4761                	li	a4,24
1c001d70:	55b2                	lw	a1,44(sp)
1c001d72:	0615ac63          	p.beqimm	a1,1,1c001dea <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x640>
1c001d76:	00271793          	slli	a5,a4,0x2
1c001d7a:	97ba                	add	a5,a5,a4
1c001d7c:	0792                	slli	a5,a5,0x4
1c001d7e:	da3e                	sw	a5,52(sp)
1c001d80:	d23e                	sw	a5,36(sp)
1c001d82:	4402                	lw	s0,0(sp)
1c001d84:	4692                	lw	a3,4(sp)
1c001d86:	c636                	sw	a3,12(sp)
1c001d88:	c232                	sw	a2,4(sp)
1c001d8a:	4901                	li	s2,0
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001d8c:	0ff00493          	li	s1,255
1c001d90:	a4a5                	j	1c001ff8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x84e>
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3432+216*((D1Ind_Total+1)%2)),
1c001d92:	56f2                	lw	a3,60(sp)
1c001d94:	57c2                	lw	a5,48(sp)
1c001d96:	00f68733          	add	a4,a3,a5
1c001d9a:	5832                	lw	a6,44(sp)
1c001d9c:	00180793          	addi	a5,a6,1
1c001da0:	01f7d693          	srli	a3,a5,0x1f
1c001da4:	97b6                	add	a5,a5,a3
1c001da6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001daa:	8f95                	sub	a5,a5,a3
1c001dac:	0d800693          	li	a3,216
1c001db0:	55e2                	lw	a1,56(sp)
1c001db2:	42d785b3          	p.mac	a1,a5,a3
1c001db6:	01cc2783          	lw	a5,28(s8) # 1000001c <model_L1_Memory>
1c001dba:	97ae                	add	a5,a5,a1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001dbc:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001dc0:	400ba583          	lw	a1,1024(s7)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c001dc4:	002b0837          	lui	a6,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001dc8:	01056533          	or	a0,a0,a6
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001dcc:	40aba023          	sw	a0,1024(s7)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001dd0:	40fba023          	sw	a5,1024(s7)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001dd4:	40eba023          	sw	a4,1024(s7)
        if (!merge) copy->id = id;
1c001dd8:	1cb12823          	sw	a1,464(sp)
        copy->length = 0;
1c001ddc:	1e012023          	sw	zero,480(sp)
  __builtin_pulp_spr_write(reg, val);
1c001de0:	30069073          	csrw	mstatus,a3
1c001de4:	b7b1                	j	1c001d30 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x586>
1c001de6:	49a1                	li	s3,8
1c001de8:	bf81                	j	1c001d38 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x58e>
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c001dea:	4721                	li	a4,8
1c001dec:	b769                	j	1c001d76 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x5cc>
					} else if (!(D1Ind_Last)) {
1c001dee:	5632                	lw	a2,44(sp)
1c001df0:	54162163          	p.beqimm	a2,1,1c002332 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb88>
						_NN_In = _NN_In + (-76464); _SNN_In = (1620); 
1c001df4:	77b5                	lui	a5,0xfffed
1c001df6:	55078793          	addi	a5,a5,1360 # fffed550 <pulp__FC+0xfffed551>
1c001dfa:	46a2                	lw	a3,8(sp)
1c001dfc:	96be                	add	a3,a3,a5
1c001dfe:	c436                	sw	a3,8(sp)
1c001e00:	ac89                	j	1c002052 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8a8>
				} else if (!((D1Ind_Last))) {
1c001e02:	5732                	lw	a4,44(sp)
1c001e04:	52172763          	p.beqimm	a4,1,1c002332 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb88>
					_NN_In = _NN_In + (1296); _SNN_In = (1620); 
1c001e08:	47a2                	lw	a5,8(sp)
1c001e0a:	51078793          	addi	a5,a5,1296
1c001e0e:	c43e                	sw	a5,8(sp)
1c001e10:	a489                	j	1c002052 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8a8>
1c001e12:	c002                	sw	zero,0(sp)
1c001e14:	ac81                	j	1c002064 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8ba>
					AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+_NN_In), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+172960+1620*((D0Ind_Total)%2)),
1c001e16:	01fb5713          	srli	a4,s6,0x1f
1c001e1a:	00eb07b3          	add	a5,s6,a4
1c001e1e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001e22:	8f99                	sub	a5,a5,a4
1c001e24:	65400713          	li	a4,1620
1c001e28:	0002a637          	lui	a2,0x2a
1c001e2c:	3a060613          	addi	a2,a2,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c001e30:	42e78633          	p.mac	a2,a5,a4
1c001e34:	1c00e7b7          	lui	a5,0x1c00e
1c001e38:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
1c001e3c:	099c                	addi	a5,sp,208
1c001e3e:	4705                	li	a4,1
1c001e40:	4682                	lw	a3,0(sp)
1c001e42:	962e                	add	a2,a2,a1
1c001e44:	5522                	lw	a0,40(sp)
1c001e46:	4822                	lw	a6,8(sp)
1c001e48:	010505b3          	add	a1,a0,a6
1c001e4c:	1c00e537          	lui	a0,0x1c00e
1c001e50:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c001e54:	019060ef          	jal	ra,1c00866c <pi_cl_ram_copy>
1c001e58:	a42d                	j	1c002082 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8d8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001e5a:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001e5e:	404ba783          	lw	a5,1028(s7)
1c001e62:	1b012703          	lw	a4,432(sp)
1c001e66:	40e7d7b3          	sra	a5,a5,a4
1c001e6a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001e6e:	c795                	beqz	a5,1c001e9a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6f0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001e70:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c001e74:	30069073          	csrw	mstatus,a3
1c001e78:	00cba423          	sw	a2,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001e7c:	03cbe783          	p.elw	a5,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001e80:	00cba223          	sw	a2,4(s7)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001e84:	300476f3          	csrrci	a3,mstatus,8
1c001e88:	404ba783          	lw	a5,1028(s7)
1c001e8c:	1b012703          	lw	a4,432(sp)
1c001e90:	40e7d7b3          	sra	a5,a5,a4
1c001e94:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001e98:	fff1                	bnez	a5,1c001e74 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6ca>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001e9a:	4785                	li	a5,1
1c001e9c:	00e79733          	sll	a4,a5,a4
1c001ea0:	40eba223          	sw	a4,1028(s7)
  __builtin_pulp_spr_write(reg, val);
1c001ea4:	30069073          	csrw	mstatus,a3
				if (_SN_In) {
1c001ea8:	20041163          	bnez	s0,1c0020aa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x900>
				KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+1620*((D0Ind_Total)%2));
1c001eac:	01cc0a13          	addi	s4,s8,28
1c001eb0:	000a2703          	lw	a4,0(s4)
1c001eb4:	01fb5693          	srli	a3,s6,0x1f
1c001eb8:	00db07b3          	add	a5,s6,a3
1c001ebc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001ec0:	8f95                	sub	a5,a5,a3
1c001ec2:	65400693          	li	a3,1620
1c001ec6:	85ba                	mv	a1,a4
1c001ec8:	42d785b3          	p.mac	a1,a5,a3
1c001ecc:	c72e                	sw	a1,140(sp)
				KerArg1->OutFeatures = (unsigned short int) (D1Ind_Last?8:24);
1c001ece:	09311d23          	sh	s3,154(sp)
				KerArg1->Filter = (signed char * __restrict__) (model_L1_Memory+3432+216*((D1Ind_Total)%2));
1c001ed2:	4662                	lw	a2,24(sp)
1c001ed4:	9732                	add	a4,a4,a2
1c001ed6:	d13a                	sw	a4,160(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001ed8:	089ba223          	sw	s1,132(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001edc:	009da023          	sw	s1,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001ee0:	009d2623          	sw	s1,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001ee4:	1c0066b7          	lui	a3,0x1c006
1c001ee8:	16a68693          	addi	a3,a3,362 # 1c00616a <KerParConv3x3Stride2_SQ8>
1c001eec:	08dba023          	sw	a3,128(s7)
1c001ef0:	0168                	addi	a0,sp,140
1c001ef2:	08aba023          	sw	a0,128(s7)
1c001ef6:	274040ef          	jal	ra,1c00616a <KerParConv3x3Stride2_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001efa:	01cde783          	p.elw	a5,28(s11)
				D0Ind_Total++;
1c001efe:	0b05                	addi	s6,s6,1
			KerArg2->Feat = (unsigned short int) (D1Ind_Last?8:24);
1c001f00:	07311c23          	sh	s3,120(sp)
			KerArg2->Scale = (unsigned char *__restrict__) (model_L1_Memory+3368+((D1Ind)*24));
1c001f04:	000a2783          	lw	a5,0(s4)
1c001f08:	4842                	lw	a6,16(sp)
1c001f0a:	01078733          	add	a4,a5,a6
1c001f0e:	c13a                	sw	a4,128(sp)
			KerArg2->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+3400+((D1Ind)*24));
1c001f10:	4572                	lw	a0,28(sp)
1c001f12:	97aa                	add	a5,a5,a0
1c001f14:	c33e                	sw	a5,132(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001f16:	089ba223          	sw	s1,132(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001f1a:	009d2023          	sw	s1,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001f1e:	009d2623          	sw	s1,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001f22:	1c0055b7          	lui	a1,0x1c005
1c001f26:	2a658593          	addi	a1,a1,678 # 1c0052a6 <KerParReductIO_CC_SQ8>
1c001f2a:	08bba023          	sw	a1,128(s7)
1c001f2e:	1888                	addi	a0,sp,112
1c001f30:	08aba023          	sw	a0,128(s7)
1c001f34:	372030ef          	jal	ra,1c0052a6 <KerParReductIO_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f38:	01cde783          	p.elw	a5,28(s11)
			KerArg3->Feat = (unsigned short int) (D1Ind_Last?8:24);
1c001f3c:	05311823          	sh	s3,80(sp)
			KerArg3->Out = (signed char * __restrict__) (model_L1_Memory+3864+1920*((T0Ind_Total)%2));
1c001f40:	01fcd413          	srli	s0,s9,0x1f
1c001f44:	008c87b3          	add	a5,s9,s0
1c001f48:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001f4c:	8f81                	sub	a5,a5,s0
1c001f4e:	00479413          	slli	s0,a5,0x4
1c001f52:	8c1d                	sub	s0,s0,a5
1c001f54:	041e                	slli	s0,s0,0x7
1c001f56:	6605                	lui	a2,0x1
1c001f58:	f1860793          	addi	a5,a2,-232 # f18 <__rt_stack_size+0x718>
1c001f5c:	943e                	add	s0,s0,a5
1c001f5e:	000a2783          	lw	a5,0(s4)
1c001f62:	97a2                	add	a5,a5,s0
1c001f64:	c6be                	sw	a5,76(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001f66:	089ba223          	sw	s1,132(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001f6a:	009d2023          	sw	s1,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001f6e:	009d2623          	sw	s1,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001f72:	1c0077b7          	lui	a5,0x1c007
1c001f76:	cec78793          	addi	a5,a5,-788 # 1c006cec <KerParPool2x2Stride2_ReLU_SQ8>
1c001f7a:	08fba023          	sw	a5,128(s7)
1c001f7e:	00a8                	addi	a0,sp,72
1c001f80:	08aba023          	sw	a0,128(s7)
1c001f84:	569040ef          	jal	ra,1c006cec <KerParPool2x2Stride2_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f88:	01cde783          	p.elw	a5,28(s11)
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c001f8c:	46b2                	lw	a3,12(sp)
1c001f8e:	20069863          	bnez	a3,1c00219e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9f4>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3864+1920*((T0Ind_Total)%2)),
1c001f92:	01cc2783          	lw	a5,28(s8)
1c001f96:	943e                	add	s0,s0,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001f98:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001f9c:	400ba683          	lw	a3,1024(s7)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001fa0:	4812                	lw	a6,4(sp)
1c001fa2:	100857b3          	p.exthz	a5,a6
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c001fa6:	c517c7b3          	p.bset	a5,a5,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001faa:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001fae:	40fba023          	sw	a5,1024(s7)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001fb2:	408ba023          	sw	s0,1024(s7)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001fb6:	5502                	lw	a0,32(sp)
1c001fb8:	015507b3          	add	a5,a0,s5
1c001fbc:	40fba023          	sw	a5,1024(s7)
#endif
}

static inline void plp_dma_cmd_push_2d(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr, unsigned int stride, unsigned int length) {
  plp_dma_cmd_push(cmd, locAddr, extAddr);
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c001fc0:	12c007b7          	lui	a5,0x12c00
1c001fc4:	05078793          	addi	a5,a5,80 # 12c00050 <__l1_end+0x2c0000c>
1c001fc8:	40fba023          	sw	a5,1024(s7)
        if (!merge) copy->id = id;
1c001fcc:	16d12823          	sw	a3,368(sp)
        copy->length = 0;
1c001fd0:	18012023          	sw	zero,384(sp)
  __builtin_pulp_spr_write(reg, val);
1c001fd4:	30071073          	csrw	mstatus,a4
			if (!(T0Ind_Last)) {
1c001fd8:	03b00793          	li	a5,59
1c001fdc:	22f90e63          	beq	s2,a5,1c002218 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa6e>
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c001fe0:	050a8a93          	addi	s5,s5,80
		for (T0Ind=0; T0Ind<60; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c001fe4:	0905                	addi	s2,s2,1
1c001fe6:	0c85                	addi	s9,s9,1
1c001fe8:	c642                	sw	a6,12(sp)
1c001fea:	4402                	lw	s0,0(sp)
1c001fec:	03c00793          	li	a5,60
1c001ff0:	22f90263          	beq	s2,a5,1c002214 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa6a>
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c001ff4:	5712                	lw	a4,36(sp)
1c001ff6:	c23a                	sw	a4,4(sp)
			KerArg0->Feat = (unsigned short int) (D1Ind_Last?8:24);
1c001ff8:	0d311223          	sh	s3,196(sp)
			KerArg0->Bias = (void * __restrict__) (model_L1_Memory+3240+((D1Ind)*96));
1c001ffc:	01cc2783          	lw	a5,28(s8)
1c002000:	4852                	lw	a6,20(sp)
1c002002:	01078733          	add	a4,a5,a6
1c002006:	c5ba                	sw	a4,200(sp)
			KerArg0->NormBias = (unsigned char) (((char *)(model_L1_Memory+38424))[5]);
1c002008:	6725                	lui	a4,0x9
1c00200a:	97ba                	add	a5,a5,a4
1c00200c:	61d7c783          	lbu	a5,1565(a5)
1c002010:	0cf10623          	sb	a5,204(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002014:	089ba223          	sw	s1,132(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002018:	009da023          	sw	s1,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00201c:	009d2623          	sw	s1,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002020:	1c005537          	lui	a0,0x1c005
1c002024:	35450513          	addi	a0,a0,852 # 1c005354 <KerParSetBiasB32_SQ8>
1c002028:	08aba023          	sw	a0,128(s7)
1c00202c:	1968                	addi	a0,sp,188
1c00202e:	08aba023          	sw	a0,128(s7)
1c002032:	322030ef          	jal	ra,1c005354 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002036:	01cde783          	p.elw	a5,28(s11)
				if (!(T0Ind_Last)) {
1c00203a:	03b00793          	li	a5,59
1c00203e:	dcf902e3          	beq	s2,a5,1c001e02 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x658>
					if (!(T0Ind_NextLast)) {
1c002042:	03a00793          	li	a5,58
1c002046:	daf904e3          	beq	s2,a5,1c001dee <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x644>
						_NN_In = _NN_In + (1296); _SNN_In = (1620); 
1c00204a:	45a2                	lw	a1,8(sp)
1c00204c:	51058593          	addi	a1,a1,1296
1c002050:	c42e                	sw	a1,8(sp)
1c002052:	16c14783          	lbu	a5,364(sp)
1c002056:	0ff7f793          	andi	a5,a5,255
1c00205a:	65400813          	li	a6,1620
1c00205e:	c042                	sw	a6,0(sp)
1c002060:	da079be3          	bnez	a5,1c001e16 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x66c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002064:	4709                	li	a4,2
1c002066:	00eba423          	sw	a4,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00206a:	03cbe783          	p.elw	a5,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00206e:	00eba223          	sw	a4,4(s7)
1c002072:	16c14783          	lbu	a5,364(sp)
1c002076:	0ff7f793          	andi	a5,a5,255
1c00207a:	d7f5                	beqz	a5,1c002066 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8bc>
				if (_SNN_In) {
1c00207c:	4802                	lw	a6,0(sp)
1c00207e:	d8081ce3          	bnez	a6,1c001e16 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x66c>
  if (copy->length == 0)
1c002082:	1c012783          	lw	a5,448(sp)
1c002086:	dc078ae3          	beqz	a5,1c001e5a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6b0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00208a:	1c812703          	lw	a4,456(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00208e:	02000793          	li	a5,32
1c002092:	e0070be3          	beqz	a4,1c001ea8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fe>
1c002096:	00fba423          	sw	a5,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00209a:	03cbe703          	p.elw	a4,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00209e:	00fba223          	sw	a5,4(s7)
1c0020a2:	1c812703          	lw	a4,456(sp)
1c0020a6:	fb65                	bnez	a4,1c002096 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8ec>
1c0020a8:	b501                	j	1c001ea8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fe>
					AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+172960+1620*((D0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+1620*((D0Ind_Total+1)%2)),
1c0020aa:	001b0793          	addi	a5,s6,1
1c0020ae:	01f7d713          	srli	a4,a5,0x1f
1c0020b2:	97ba                	add	a5,a5,a4
1c0020b4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0020b8:	8f99                	sub	a5,a5,a4
1c0020ba:	65400713          	li	a4,1620
1c0020be:	02e787b3          	mul	a5,a5,a4
1c0020c2:	1c00e737          	lui	a4,0x1c00e
1c0020c6:	ea472683          	lw	a3,-348(a4) # 1c00dea4 <model_L2_Memory>
1c0020ca:	96be                	add	a3,a3,a5
1c0020cc:	0002a737          	lui	a4,0x2a
1c0020d0:	3a070713          	addi	a4,a4,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c0020d4:	9736                	add	a4,a4,a3
1c0020d6:	01cc2603          	lw	a2,28(s8)
1c0020da:	97b2                	add	a5,a5,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0020dc:	30047673          	csrrci	a2,mstatus,8
    if (size < max_len)
1c0020e0:	01041513          	slli	a0,s0,0x10
1c0020e4:	02054963          	bltz	a0,1c002116 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x96c>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0020e8:	400ba583          	lw	a1,1024(s7)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0020ec:	000306b7          	lui	a3,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0020f0:	de0426b3          	p.insert	a3,s0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0020f4:	c136c6b3          	p.bset	a3,a3,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0020f8:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0020fc:	40dba023          	sw	a3,1024(s7)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002100:	40fba023          	sw	a5,1024(s7)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002104:	40eba023          	sw	a4,1024(s7)
        if (!merge) copy->id = id;
1c002108:	1ab12823          	sw	a1,432(sp)
        copy->length = 0;
1c00210c:	1c012023          	sw	zero,448(sp)
  __builtin_pulp_spr_write(reg, val);
1c002110:	30061073          	csrw	mstatus,a2
1c002114:	bb61                	j	1c001eac <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x702>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002116:	65a1                	lui	a1,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002118:	00330537          	lui	a0,0x330
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c00211c:	1aa12a23          	sw	a0,436(sp)
    cmd->loc_addr = loc;
1c002120:	1cf12223          	sw	a5,452(sp)
    cmd->ext_addr = ext;
1c002124:	1ce12423          	sw	a4,456(sp)
    cmd->size = len;
1c002128:	1a812c23          	sw	s0,440(sp)
    cmd->stride = stride;
1c00212c:	1ab12e23          	sw	a1,444(sp)
    cmd->length = length;
1c002130:	1cb12023          	sw	a1,448(sp)
    cmd->id = tid;
1c002134:	55fd                	li	a1,-1
1c002136:	1ab12823          	sw	a1,432(sp)
    cmd->next = NULL;
1c00213a:	1c012623          	sw	zero,460(sp)
    if (__rt_dma_first_pending)
1c00213e:	01402583          	lw	a1,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002142:	c989                	beqz	a1,1c002154 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9aa>
        __rt_dma_last_pending->next = cmd;
1c002144:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002148:	1b18                	addi	a4,sp,432
1c00214a:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c00214c:	1b1c                	addi	a5,sp,432
1c00214e:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002152:	bf7d                	j	1c002110 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x966>
    uint32_t iter_length = (len < length) ? len : length;
1c002154:	65a1                	lui	a1,0x8
1c002156:	04b455b3          	p.minu	a1,s0,a1
        cmd->loc_addr += iter_length;
1c00215a:	00b78533          	add	a0,a5,a1
1c00215e:	1ca12223          	sw	a0,452(sp)
        cmd->ext_addr += stride;
1c002162:	00032537          	lui	a0,0x32
1c002166:	3a050513          	addi	a0,a0,928 # 323a0 <__L1Cl+0x223a0>
1c00216a:	96aa                	add	a3,a3,a0
1c00216c:	1cd12423          	sw	a3,456(sp)
        cmd->size -= iter_length;
1c002170:	40b405b3          	sub	a1,s0,a1
1c002174:	1ab12c23          	sw	a1,440(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002178:	400ba683          	lw	a3,1024(s7)
        cmd->id = plp_dma_counter_alloc();
1c00217c:	1ad12823          	sw	a3,432(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002180:	003386b7          	lui	a3,0x338
1c002184:	40dba023          	sw	a3,1024(s7)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002188:	40fba023          	sw	a5,1024(s7)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00218c:	40eba023          	sw	a4,1024(s7)
        if (cmd->length != 0)
1c002190:	1c012783          	lw	a5,448(sp)
1c002194:	dfc5                	beqz	a5,1c00214c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9a2>
            __rt_dma_first_pending = cmd;
1c002196:	1b1c                	addi	a5,sp,432
1c002198:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00219c:	bf45                	j	1c00214c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9a2>
  if (copy->length == 0)
1c00219e:	18012783          	lw	a5,384(sp)
1c0021a2:	c38d                	beqz	a5,1c0021c4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa1a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0021a4:	18812703          	lw	a4,392(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0021a8:	02000793          	li	a5,32
1c0021ac:	de0703e3          	beqz	a4,1c001f92 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e8>
1c0021b0:	00fba423          	sw	a5,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0021b4:	03cbe703          	p.elw	a4,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0021b8:	00fba223          	sw	a5,4(s7)
1c0021bc:	18812703          	lw	a4,392(sp)
1c0021c0:	fb65                	bnez	a4,1c0021b0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa06>
1c0021c2:	bbc1                	j	1c001f92 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0021c4:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0021c8:	404ba783          	lw	a5,1028(s7)
1c0021cc:	17012703          	lw	a4,368(sp)
1c0021d0:	40e7d7b3          	sra	a5,a5,a4
1c0021d4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0021d8:	c795                	beqz	a5,1c002204 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa5a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0021da:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c0021de:	30069073          	csrw	mstatus,a3
1c0021e2:	00cba423          	sw	a2,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0021e6:	03cbe783          	p.elw	a5,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0021ea:	00cba223          	sw	a2,4(s7)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0021ee:	300476f3          	csrrci	a3,mstatus,8
1c0021f2:	404ba783          	lw	a5,1028(s7)
1c0021f6:	17012703          	lw	a4,368(sp)
1c0021fa:	40e7d7b3          	sra	a5,a5,a4
1c0021fe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002202:	fff1                	bnez	a5,1c0021de <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa34>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002204:	4785                	li	a5,1
1c002206:	00e79733          	sll	a4,a5,a4
1c00220a:	40eba223          	sw	a4,1028(s7)
  __builtin_pulp_spr_write(reg, val);
1c00220e:	30069073          	csrw	mstatus,a3
1c002212:	b341                	j	1c001f92 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e8>
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c002214:	5652                	lw	a2,52(sp)
1c002216:	a819                	j	1c00222c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa82>
			} else if (!(D1Ind_Last)) {
1c002218:	55b2                	lw	a1,44(sp)
1c00221a:	1215a463          	p.beqimm	a1,1,1c002342 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb98>
				_C_Out = _C_Out + (115200)+(-4720); _LC_Out = (80); _SC_Out = (((1)?8:24)*_LC_Out); 
1c00221e:	67ed                	lui	a5,0x1b
1c002220:	f9078793          	addi	a5,a5,-112 # 1af90 <__L1Cl+0xaf90>
1c002224:	9abe                	add	s5,s5,a5
1c002226:	28000613          	li	a2,640
		for (T0Ind=0; T0Ind<60; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c00222a:	0c85                	addi	s9,s9,1
	for (D1Ind=0; D1Ind<2; D1Ind++, D1Ind_Total++) { /* Iteration on D1 */
1c00222c:	56b2                	lw	a3,44(sp)
1c00222e:	0685                	addi	a3,a3,1
1c002230:	d636                	sw	a3,44(sp)
1c002232:	4742                	lw	a4,16(sp)
1c002234:	0761                	addi	a4,a4,24
1c002236:	c83a                	sw	a4,16(sp)
1c002238:	0226af63          	p.beqimm	a3,2,1c002276 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xacc>
		if (!(D1Ind_Last)) {
1c00223c:	5532                	lw	a0,44(sp)
1c00223e:	a8152fe3          	p.beqimm	a0,1,1c001cdc <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x532>
			_N_Filter = _N_Filter + (216); _SN_Filter = ((1)?72:216); 
1c002242:	55c2                	lw	a1,48(sp)
1c002244:	0d858593          	addi	a1,a1,216 # 80d8 <__rt_stack_size+0x78d8>
1c002248:	d82e                	sw	a1,48(sp)
1c00224a:	04800513          	li	a0,72
  if (copy->length == 0)
1c00224e:	1e012783          	lw	a5,480(sp)
1c002252:	a80787e3          	beqz	a5,1c001ce0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x536>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002256:	1e812703          	lw	a4,488(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00225a:	02000793          	li	a5,32
1c00225e:	ac0708e3          	beqz	a4,1c001d2e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x584>
1c002262:	00fba423          	sw	a5,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002266:	03cbe703          	p.elw	a4,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00226a:	00fba223          	sw	a5,4(s7)
1c00226e:	1e812703          	lw	a4,488(sp)
1c002272:	fb65                	bnez	a4,1c002262 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xab8>
1c002274:	bc6d                	j	1c001d2e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x584>
  if (copy->length == 0)
1c002276:	18012783          	lw	a5,384(sp)
1c00227a:	c395                	beqz	a5,1c00229e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xaf4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00227c:	18812683          	lw	a3,392(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002280:	02000713          	li	a4,32
1c002284:	002047b7          	lui	a5,0x204
1c002288:	caa5                	beqz	a3,1c0022f8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb4e>
1c00228a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00228e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002292:	00e7a223          	sw	a4,4(a5)
1c002296:	18812683          	lw	a3,392(sp)
1c00229a:	fae5                	bnez	a3,1c00228a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xae0>
1c00229c:	a8b1                	j	1c0022f8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb4e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00229e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0022a2:	002047b7          	lui	a5,0x204
1c0022a6:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0022aa:	17012683          	lw	a3,368(sp)
1c0022ae:	40d7d7b3          	sra	a5,a5,a3
1c0022b2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0022b6:	cb85                	beqz	a5,1c0022e6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb3c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0022b8:	10000593          	li	a1,256
1c0022bc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0022c0:	30061073          	csrw	mstatus,a2
1c0022c4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0022c8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0022cc:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0022d0:	30047673          	csrrci	a2,mstatus,8
1c0022d4:	40472783          	lw	a5,1028(a4)
1c0022d8:	17012683          	lw	a3,368(sp)
1c0022dc:	40d7d7b3          	sra	a5,a5,a3
1c0022e0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0022e4:	fff1                	bnez	a5,1c0022c0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb16>
1c0022e6:	4785                	li	a5,1
1c0022e8:	00d796b3          	sll	a3,a5,a3
1c0022ec:	002047b7          	lui	a5,0x204
1c0022f0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0022f4:	30061073          	csrw	mstatus,a2
		/*============================= End Update Arg Pipeline =============================*/
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0022f8:	28c12083          	lw	ra,652(sp)
1c0022fc:	28812403          	lw	s0,648(sp)
1c002300:	28412483          	lw	s1,644(sp)
1c002304:	28012903          	lw	s2,640(sp)
1c002308:	27c12983          	lw	s3,636(sp)
1c00230c:	27812a03          	lw	s4,632(sp)
1c002310:	27412a83          	lw	s5,628(sp)
1c002314:	27012b03          	lw	s6,624(sp)
1c002318:	26c12b83          	lw	s7,620(sp)
1c00231c:	26812c03          	lw	s8,616(sp)
1c002320:	26412c83          	lw	s9,612(sp)
1c002324:	26012d03          	lw	s10,608(sp)
1c002328:	25c12d83          	lw	s11,604(sp)
1c00232c:	29010113          	addi	sp,sp,656
1c002330:	8082                	ret
1c002332:	16c14783          	lbu	a5,364(sp)
1c002336:	0ff7f793          	andi	a5,a5,255
1c00233a:	ac078ce3          	beqz	a5,1c001e12 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x668>
1c00233e:	c002                	sw	zero,0(sp)
1c002340:	b389                	j	1c002082 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8d8>
			_SC_Out = 0;
1c002342:	4601                	li	a2,0
1c002344:	b5dd                	j	1c00222a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa80>

1c002346 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c002346:	d6010113          	addi	sp,sp,-672
1c00234a:	28112e23          	sw	ra,668(sp)
1c00234e:	28812c23          	sw	s0,664(sp)
1c002352:	28912a23          	sw	s1,660(sp)
1c002356:	29212823          	sw	s2,656(sp)
1c00235a:	29312623          	sw	s3,652(sp)
1c00235e:	29412423          	sw	s4,648(sp)
1c002362:	29512223          	sw	s5,644(sp)
1c002366:	29612023          	sw	s6,640(sp)
1c00236a:	27712e23          	sw	s7,636(sp)
1c00236e:	27812c23          	sw	s8,632(sp)
1c002372:	27912a23          	sw	s9,628(sp)
1c002376:	27a12823          	sw	s10,624(sp)
1c00237a:	27b12623          	sw	s11,620(sp)
1c00237e:	dc36                	sw	a3,56(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 29:[9x1, 27:9x1, 9x1], 1]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (model_L1_Memory+26432);
1c002380:	100006b7          	lui	a3,0x10000
1c002384:	01c6a303          	lw	t1,28(a3) # 1000001c <model_L1_Memory>
1c002388:	6699                	lui	a3,0x6
1c00238a:	74068693          	addi	a3,a3,1856 # 6740 <__rt_stack_size+0x5f40>
1c00238e:	969a                	add	a3,a3,t1
1c002390:	c7b6                	sw	a3,204(sp)
	KerArg0->W = (unsigned short int) (78);
1c002392:	04e00f13          	li	t5,78
1c002396:	0de11823          	sh	t5,208(sp)
	KerArg0->H = (unsigned short int) (2);
1c00239a:	4e89                	li	t4,2
1c00239c:	0dd11923          	sh	t4,210(sp)
	KerArg0->Feat = (unsigned short int) (32);
1c0023a0:	02000e13          	li	t3,32
1c0023a4:	0dc11a23          	sh	t3,212(sp)
	KerArg1->W = (unsigned short int) (80);
1c0023a8:	05000893          	li	a7,80
1c0023ac:	0b111023          	sh	a7,160(sp)
	KerArg1->UsedW = (unsigned short int) (80);
1c0023b0:	0b111123          	sh	a7,162(sp)
	KerArg1->H = (unsigned short int) (4);
1c0023b4:	4891                	li	a7,4
1c0023b6:	0b111223          	sh	a7,164(sp)
	KerArg1->UsedH = (unsigned short int) (4);
1c0023ba:	0b111323          	sh	a7,166(sp)
	KerArg1->InFeatures = (unsigned short int) (8);
1c0023be:	48a1                	li	a7,8
1c0023c0:	0b111423          	sh	a7,168(sp)
	KerArg1->OutFeatures = (unsigned short int) (32);
1c0023c4:	0bc11523          	sh	t3,170(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (32);
1c0023c8:	0bc11623          	sh	t3,172(sp)
	KerArg1->Out = (int * __restrict__) (model_L1_Memory+26432);
1c0023cc:	dd36                	sw	a3,184(sp)
	KerArg1->Pad = (v4s) 0;
1c0023ce:	000078d7          	pv.add.sci.b	a7,zero,0
1c0023d2:	df46                	sw	a7,188(sp)
	KerArg2->In = (int *__restrict__) (model_L1_Memory+26432);
1c0023d4:	c136                	sw	a3,128(sp)
	KerArg2->Out = (void *__restrict__) (model_L1_Memory+26432);
1c0023d6:	c336                	sw	a3,132(sp)
	KerArg2->Feat = (unsigned short int) (32);
1c0023d8:	09c11423          	sh	t3,136(sp)
	KerArg2->W = (unsigned short int) (78);
1c0023dc:	09e11523          	sh	t5,138(sp)
	KerArg2->H = (unsigned short int) (2);
1c0023e0:	09d11623          	sh	t4,140(sp)
	KerArg2->Infos = (signed char *__restrict__) (model_L1_Memory+46400);
1c0023e4:	68ad                	lui	a7,0xb
1c0023e6:	54088893          	addi	a7,a7,1344 # b540 <__rt_stack_size+0xad40>
1c0023ea:	989a                	add	a7,a7,t1
1c0023ec:	cd46                	sw	a7,152(sp)
	KerArg3->In = (signed char * __restrict__) (model_L1_Memory+26432);
1c0023ee:	ccb6                	sw	a3,88(sp)
	KerArg3->W = (unsigned short int) (78);
1c0023f0:	07e11123          	sh	t5,98(sp)
	KerArg3->UsedW = (unsigned short int) (78);
1c0023f4:	07e11223          	sh	t5,100(sp)
	KerArg3->H = (unsigned short int) (2);
1c0023f8:	07d11323          	sh	t4,102(sp)
	KerArg3->UsedH = (unsigned short int) (2);
1c0023fc:	07d11423          	sh	t4,104(sp)
	KerArg3->Feat = (unsigned short int) (32);
1c002400:	07c11023          	sh	t3,96(sp)
	KerArg3->Pad = (v4s) 0;
1c002404:	00007f57          	pv.add.sci.b	t5,zero,0
1c002408:	dcfa                	sw	t5,120(sp)
	KerArg3->PoolMax = (unsigned char) (1);
1c00240a:	4685                	li	a3,1
1c00240c:	06d10523          	sb	a3,106(sp)
	KerArg3->DoScale = (unsigned char) (0);
1c002410:	06010aa3          	sb	zero,117(sp)
	KerArg3->Infos = (signed char * __restrict__) (model_L1_Memory+46400);
1c002414:	dec6                	sw	a7,124(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002416:	30047e73          	csrrci	t3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00241a:	002048b7          	lui	a7,0x204
1c00241e:	4008a883          	lw	a7,1024(a7) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002422:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002426:	10068693          	addi	a3,a3,256 # b0100 <__L2+0x30100>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00242a:	c156c6b3          	p.bset	a3,a3,0,21
1c00242e:	00204eb7          	lui	t4,0x204
1c002432:	40dea023          	sw	a3,1024(t4) # 204400 <__L2+0x184400>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=1248; _LC_Out=39;
	_SPP_Out=0; _SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5120), 256, 0, &DmaR_Evt1);
1c002436:	6685                	lui	a3,0x1
1c002438:	40068693          	addi	a3,a3,1024 # 1400 <__rt_stack_size+0xc00>
1c00243c:	9336                	add	t1,t1,a3
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00243e:	002046b7          	lui	a3,0x204
1c002442:	4066a023          	sw	t1,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002446:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c00244a:	25112023          	sw	a7,576(sp)
        copy->length = 0;
1c00244e:	24012823          	sw	zero,592(sp)
  __builtin_pulp_spr_write(reg, val);
1c002452:	300e1073          	csrw	mstatus,t3
  if (copy->length == 0)
1c002456:	25012683          	lw	a3,592(sp)
1c00245a:	c685                	beqz	a3,1c002482 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x13c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00245c:	25812883          	lw	a7,600(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002460:	02000613          	li	a2,32
1c002464:	002046b7          	lui	a3,0x204
1c002468:	06088a63          	beqz	a7,1c0024dc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x196>
1c00246c:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002470:	03c6e883          	p.elw	a7,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002474:	00c6a223          	sw	a2,4(a3)
1c002478:	25812883          	lw	a7,600(sp)
1c00247c:	fe0898e3          	bnez	a7,1c00246c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x126>
1c002480:	a8b1                	j	1c0024dc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x196>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002482:	30047373          	csrrci	t1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002486:	002046b7          	lui	a3,0x204
1c00248a:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c00248e:	24012883          	lw	a7,576(sp)
1c002492:	4116d6b3          	sra	a3,a3,a7
1c002496:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00249a:	ca85                	beqz	a3,1c0024ca <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x184>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00249c:	10000e13          	li	t3,256
1c0024a0:	00204637          	lui	a2,0x204
  __builtin_pulp_spr_write(reg, val);
1c0024a4:	30031073          	csrw	mstatus,t1
1c0024a8:	01c62423          	sw	t3,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0024ac:	03c66683          	p.elw	a3,60(a2)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0024b0:	01c62223          	sw	t3,4(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0024b4:	30047373          	csrrci	t1,mstatus,8
1c0024b8:	40462683          	lw	a3,1028(a2)
1c0024bc:	24012883          	lw	a7,576(sp)
1c0024c0:	4116d6b3          	sra	a3,a3,a7
1c0024c4:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0024c8:	fef1                	bnez	a3,1c0024a4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x15e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0024ca:	4685                	li	a3,1
1c0024cc:	011698b3          	sll	a7,a3,a7
1c0024d0:	002046b7          	lui	a3,0x204
1c0024d4:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0024d8:	30031073          	csrw	mstatus,t1
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5376), 64, 0, &DmaR_Evt2);
1c0024dc:	100006b7          	lui	a3,0x10000
1c0024e0:	01c6a883          	lw	a7,28(a3) # 1000001c <model_L1_Memory>
1c0024e4:	6685                	lui	a3,0x1
1c0024e6:	50068693          	addi	a3,a3,1280 # 1500 <__rt_stack_size+0xd00>
1c0024ea:	98b6                	add	a7,a7,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0024ec:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0024f0:	00204637          	lui	a2,0x204
1c0024f4:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0024f8:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0024fc:	04068693          	addi	a3,a3,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002500:	c156c6b3          	p.bset	a3,a3,0,21
1c002504:	00204e37          	lui	t3,0x204
1c002508:	40de2023          	sw	a3,1024(t3) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00250c:	002046b7          	lui	a3,0x204
1c002510:	4116a023          	sw	a7,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002514:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c002518:	22c12023          	sw	a2,544(sp)
        copy->length = 0;
1c00251c:	22012823          	sw	zero,560(sp)
  __builtin_pulp_spr_write(reg, val);
1c002520:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c002524:	23012703          	lw	a4,560(sp)
1c002528:	c315                	beqz	a4,1c00254c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x206>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00252a:	23812603          	lw	a2,568(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00252e:	02000693          	li	a3,32
1c002532:	00204737          	lui	a4,0x204
1c002536:	ca25                	beqz	a2,1c0025a6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x260>
1c002538:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00253c:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002540:	00d72223          	sw	a3,4(a4)
1c002544:	23812603          	lw	a2,568(sp)
1c002548:	fa65                	bnez	a2,1c002538 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x1f2>
1c00254a:	a8b1                	j	1c0025a6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x260>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00254c:	300478f3          	csrrci	a7,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002550:	00204737          	lui	a4,0x204
1c002554:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c002558:	22012603          	lw	a2,544(sp)
1c00255c:	40c75733          	sra	a4,a4,a2
1c002560:	fc173733          	p.bclr	a4,a4,30,1
1c002564:	cb05                	beqz	a4,1c002594 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x24e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002566:	10000313          	li	t1,256
1c00256a:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c00256e:	30089073          	csrw	mstatus,a7
1c002572:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002576:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00257a:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00257e:	300478f3          	csrrci	a7,mstatus,8
1c002582:	4046a703          	lw	a4,1028(a3)
1c002586:	22012603          	lw	a2,544(sp)
1c00258a:	40c75733          	sra	a4,a4,a2
1c00258e:	fc173733          	p.bclr	a4,a4,30,1
1c002592:	ff71                	bnez	a4,1c00256e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x228>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002594:	4705                	li	a4,1
1c002596:	00c71633          	sll	a2,a4,a2
1c00259a:	00204737          	lui	a4,0x204
1c00259e:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0025a2:	30089073          	csrw	mstatus,a7
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5440), 64, 0, &DmaR_Evt3);
1c0025a6:	10000737          	lui	a4,0x10000
1c0025aa:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c0025ae:	6705                	lui	a4,0x1
1c0025b0:	54070713          	addi	a4,a4,1344 # 1540 <__rt_stack_size+0xd40>
1c0025b4:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0025b6:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0025ba:	002046b7          	lui	a3,0x204
1c0025be:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0025c2:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0025c6:	04070713          	addi	a4,a4,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0025ca:	c1574733          	p.bset	a4,a4,0,21
1c0025ce:	00204337          	lui	t1,0x204
1c0025d2:	40e32023          	sw	a4,1024(t1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0025d6:	00204737          	lui	a4,0x204
1c0025da:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0025de:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c0025e2:	20d12023          	sw	a3,512(sp)
        copy->length = 0;
1c0025e6:	20012823          	sw	zero,528(sp)
  __builtin_pulp_spr_write(reg, val);
1c0025ea:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c0025ee:	21012783          	lw	a5,528(sp)
1c0025f2:	c395                	beqz	a5,1c002616 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2d0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0025f4:	21812683          	lw	a3,536(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0025f8:	02000713          	li	a4,32
1c0025fc:	002047b7          	lui	a5,0x204
1c002600:	caa5                	beqz	a3,1c002670 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x32a>
1c002602:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002606:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00260a:	00e7a223          	sw	a4,4(a5)
1c00260e:	21812683          	lw	a3,536(sp)
1c002612:	fae5                	bnez	a3,1c002602 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2bc>
1c002614:	a8b1                	j	1c002670 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x32a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002616:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00261a:	002047b7          	lui	a5,0x204
1c00261e:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c002622:	20012683          	lw	a3,512(sp)
1c002626:	40d7d7b3          	sra	a5,a5,a3
1c00262a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00262e:	cb85                	beqz	a5,1c00265e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x318>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002630:	10000893          	li	a7,256
1c002634:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002638:	30061073          	csrw	mstatus,a2
1c00263c:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002640:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002644:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002648:	30047673          	csrrci	a2,mstatus,8
1c00264c:	40472783          	lw	a5,1028(a4)
1c002650:	20012683          	lw	a3,512(sp)
1c002654:	40d7d7b3          	sra	a5,a5,a3
1c002658:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00265c:	fff1                	bnez	a5,1c002638 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2f2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00265e:	4785                	li	a5,1
1c002660:	00d796b3          	sll	a3,a5,a3
1c002664:	002047b7          	lui	a5,0x204
1c002668:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00266c:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5504+0), 9216, 0, &DmaR_Evt4);
1c002670:	c6ae                	sw	a1,76(sp)
1c002672:	10000637          	lui	a2,0x10000
1c002676:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c00267a:	00062303          	lw	t1,0(a2)
1c00267e:	6885                	lui	a7,0x1
1c002680:	58088793          	addi	a5,a7,1408 # 1580 <__rt_stack_size+0xd80>
1c002684:	933e                	add	t1,t1,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002686:	30047e73          	csrrci	t3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00268a:	002046b7          	lui	a3,0x204
1c00268e:	4006ae83          	lw	t4,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c002692:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002696:	6709                	lui	a4,0x2
1c002698:	40070713          	addi	a4,a4,1024 # 2400 <__rt_stack_size+0x1c00>
1c00269c:	8f3e                	mv	t5,a5
1c00269e:	de072f33          	p.insert	t5,a4,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0026a2:	c13f4733          	p.bset	a4,t5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0026a6:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0026aa:	00204f37          	lui	t5,0x204
1c0026ae:	40ef2023          	sw	a4,1024(t5) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0026b2:	00204737          	lui	a4,0x204
1c0026b6:	40672023          	sw	t1,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0026ba:	40b72023          	sw	a1,1024(a4)
        if (!merge) copy->id = id;
1c0026be:	1fd12023          	sw	t4,480(sp)
        copy->length = 0;
1c0026c2:	1e012823          	sw	zero,496(sp)
  __builtin_pulp_spr_write(reg, val);
1c0026c6:	300e1073          	csrw	mstatus,t3
	_N_Filter=0;
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+0), 2560, 4800, 320, 0, &DmaR_Evt5);
1c0026ca:	ca2a                	sw	a0,20(sp)
1c0026cc:	00062e03          	lw	t3,0(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0026d0:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0026d4:	4006a303          	lw	t1,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0026d8:	a0088893          	addi	a7,a7,-1536
1c0026dc:	00070737          	lui	a4,0x70
1c0026e0:	de08a733          	p.insert	a4,a7,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0026e4:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0026e8:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0026ec:	002048b7          	lui	a7,0x204
1c0026f0:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0026f4:	00204737          	lui	a4,0x204
1c0026f8:	41c72023          	sw	t3,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0026fc:	40a72023          	sw	a0,1024(a4)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c002700:	12c00737          	lui	a4,0x12c00
1c002704:	14070713          	addi	a4,a4,320 # 12c00140 <__l1_end+0x2c000fc>
1c002708:	00204537          	lui	a0,0x204
1c00270c:	40e52023          	sw	a4,1024(a0) # 204400 <__L2+0x184400>
        if (!merge) copy->id = id;
1c002710:	1c612023          	sw	t1,448(sp)
        copy->length = 0;
1c002714:	1c012823          	sw	zero,464(sp)
  __builtin_pulp_spr_write(reg, val);
1c002718:	30059073          	csrw	mstatus,a1
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+46400), 9, 0, &DmaR_Evt6);
1c00271c:	4218                	lw	a4,0(a2)
1c00271e:	662d                	lui	a2,0xb
1c002720:	54060613          	addi	a2,a2,1344 # b540 <__rt_stack_size+0xad40>
1c002724:	9732                	add	a4,a4,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002726:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00272a:	4006a683          	lw	a3,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00272e:	0097e793          	ori	a5,a5,9
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002732:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002736:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00273a:	002045b7          	lui	a1,0x204
1c00273e:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002742:	002047b7          	lui	a5,0x204
1c002746:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00274a:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c00274e:	1ad12023          	sw	a3,416(sp)
        copy->length = 0;
1c002752:	1a012823          	sw	zero,432(sp)
  __builtin_pulp_spr_write(reg, val);
1c002756:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00275a:	1b012783          	lw	a5,432(sp)
1c00275e:	c395                	beqz	a5,1c002782 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x43c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002760:	1b812683          	lw	a3,440(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002764:	02000713          	li	a4,32
1c002768:	002047b7          	lui	a5,0x204
1c00276c:	caa5                	beqz	a3,1c0027dc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x496>
1c00276e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002772:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002776:	00e7a223          	sw	a4,4(a5)
1c00277a:	1b812683          	lw	a3,440(sp)
1c00277e:	fae5                	bnez	a3,1c00276e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x428>
1c002780:	a8b1                	j	1c0027dc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x496>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002782:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002786:	002047b7          	lui	a5,0x204
1c00278a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00278e:	1a012683          	lw	a3,416(sp)
1c002792:	40d7d7b3          	sra	a5,a5,a3
1c002796:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00279a:	cb85                	beqz	a5,1c0027ca <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x484>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00279c:	10000593          	li	a1,256
1c0027a0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0027a4:	30061073          	csrw	mstatus,a2
1c0027a8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0027ac:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0027b0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0027b4:	30047673          	csrrci	a2,mstatus,8
1c0027b8:	40472783          	lw	a5,1028(a4)
1c0027bc:	1a012683          	lw	a3,416(sp)
1c0027c0:	40d7d7b3          	sra	a5,a5,a3
1c0027c4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0027c8:	fff1                	bnez	a5,1c0027a4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x45e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0027ca:	4785                	li	a5,1
1c0027cc:	00d796b3          	sll	a3,a5,a3
1c0027d0:	002047b7          	lui	a5,0x204
1c0027d4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0027d8:	30061073          	csrw	mstatus,a2
{
1c0027dc:	4c01                	li	s8,0
1c0027de:	c082                	sw	zero,64(sp)
1c0027e0:	4e000613          	li	a2,1248
1c0027e4:	c202                	sw	zero,4(sp)
1c0027e6:	c402                	sw	zero,8(sp)
1c0027e8:	4781                	li	a5,0
1c0027ea:	4c81                	li	s9,0
1c0027ec:	4d01                	li	s10,0
1c0027ee:	de02                	sw	zero,60(sp)
1c0027f0:	00204db7          	lui	s11,0x204
		}
		/*============================= End Prepare Tiles ===================================*/
		/*================================= Read Tiles ======================================*/
		AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
		if (_SN_Filter) {
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5504+9216*((D1Ind_Total+1)%2)),
1c0027f4:	10000ab7          	lui	s5,0x10000
1c0027f8:	6305                	lui	t1,0x1
1c0027fa:	58030313          	addi	t1,t1,1408 # 1580 <__rt_stack_size+0xd80>
1c0027fe:	c49a                	sw	t1,72(sp)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002800:	200d8b93          	addi	s7,s11,512 # 204200 <__L2+0x184200>
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002804:	8b5e                	mv	s6,s7
1c002806:	ab89                	j	1c002d58 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa12>
		_SN_Filter = 0;
1c002808:	4681                	li	a3,0
1c00280a:	a385                	j	1c002d6a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa24>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00280c:	30047573          	csrrci	a0,mstatus,8
1c002810:	404da703          	lw	a4,1028(s11)
1c002814:	1e012583          	lw	a1,480(sp)
1c002818:	40b75733          	sra	a4,a4,a1
1c00281c:	fc173733          	p.bclr	a4,a4,30,1
1c002820:	c715                	beqz	a4,1c00284c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x506>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002822:	10000813          	li	a6,256
  __builtin_pulp_spr_write(reg, val);
1c002826:	30051073          	csrw	mstatus,a0
1c00282a:	010da423          	sw	a6,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00282e:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002832:	010da223          	sw	a6,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002836:	30047573          	csrrci	a0,mstatus,8
1c00283a:	404da703          	lw	a4,1028(s11)
1c00283e:	1e012583          	lw	a1,480(sp)
1c002842:	40b75733          	sra	a4,a4,a1
1c002846:	fc173733          	p.bclr	a4,a4,30,1
1c00284a:	ff71                	bnez	a4,1c002826 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4e0>
1c00284c:	4705                	li	a4,1
1c00284e:	00b715b3          	sll	a1,a4,a1
1c002852:	40bda223          	sw	a1,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c002856:	30051073          	csrw	mstatus,a0
		if (_SN_Filter) {
1c00285a:	e2ad                	bnez	a3,1c0028bc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x576>
1c00285c:	5572                	lw	a0,60(sp)
1c00285e:	02850713          	addi	a4,a0,40
1c002862:	071e                	slli	a4,a4,0x7
1c002864:	d23a                	sw	a4,36(sp)
							_SN_In, 4800, _LN_In, 0, &DmaR_Evt5);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+2560*((D0Ind_Total)%2));
				KerArg1->Filter = (signed char * __restrict__) (model_L1_Memory+5504+((D0Ind)*72)+9216*((D1Ind_Total)%2));
1c002866:	01f55693          	srli	a3,a0,0x1f
1c00286a:	00d50733          	add	a4,a0,a3
1c00286e:	fc173733          	p.bclr	a4,a4,30,1
1c002872:	8f15                	sub	a4,a4,a3
1c002874:	00371693          	slli	a3,a4,0x3
1c002878:	9736                	add	a4,a4,a3
1c00287a:	072a                	slli	a4,a4,0xa
1c00287c:	45a6                	lw	a1,72(sp)
1c00287e:	972e                	add	a4,a4,a1
1c002880:	d43a                	sw	a4,40(sp)
1c002882:	0a850713          	addi	a4,a0,168
1c002886:	0716                	slli	a4,a4,0x5
1c002888:	ce3a                	sw	a4,28(sp)
1c00288a:	04070693          	addi	a3,a4,64
1c00288e:	d636                	sw	a3,44(sp)
1c002890:	c2ea                	sw	s10,68(sp)
1c002892:	01dd0713          	addi	a4,s10,29
1c002896:	d83a                	sw	a4,48(sp)
1c002898:	01cd0893          	addi	a7,s10,28
1c00289c:	d046                	sw	a7,32(sp)
1c00289e:	4f22                	lw	t5,8(sp)
1c0028a0:	c87a                	sw	t5,16(sp)
1c0028a2:	4312                	lw	t1,4(sp)
1c0028a4:	c41a                	sw	t1,8(sp)
1c0028a6:	c232                	sw	a2,4(sp)
1c0028a8:	4532                	lw	a0,12(sp)
1c0028aa:	cc2a                	sw	a0,24(sp)
1c0028ac:	c63e                	sw	a5,12(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0028ae:	0ff00493          	li	s1,255
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0028b2:	1c0067b7          	lui	a5,0x1c006
1c0028b6:	f2678a13          	addi	s4,a5,-218 # 1c005f26 <KerParConv3x3Stride1_SQ8>
1c0028ba:	a4d9                	j	1c002b80 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x83a>
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5504+9216*((D1Ind_Total+1)%2)),
1c0028bc:	4736                	lw	a4,76(sp)
1c0028be:	4886                	lw	a7,64(sp)
1c0028c0:	01170533          	add	a0,a4,a7
1c0028c4:	5f72                	lw	t5,60(sp)
1c0028c6:	001f0713          	addi	a4,t5,1
1c0028ca:	01f75593          	srli	a1,a4,0x1f
1c0028ce:	972e                	add	a4,a4,a1
1c0028d0:	fc173733          	p.bclr	a4,a4,30,1
1c0028d4:	8f0d                	sub	a4,a4,a1
1c0028d6:	00371593          	slli	a1,a4,0x3
1c0028da:	972e                	add	a4,a4,a1
1c0028dc:	072a                	slli	a4,a4,0xa
1c0028de:	4326                	lw	t1,72(sp)
1c0028e0:	971a                	add	a4,a4,t1
1c0028e2:	01caa583          	lw	a1,28(s5) # 1000001c <model_L1_Memory>
1c0028e6:	972e                	add	a4,a4,a1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0028e8:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0028ec:	400da803          	lw	a6,1024(s11)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0028f0:	002b08b7          	lui	a7,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0028f4:	0116e6b3          	or	a3,a3,a7
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0028f8:	40dda023          	sw	a3,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0028fc:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002900:	40ada023          	sw	a0,1024(s11)
        if (!merge) copy->id = id;
1c002904:	1f012023          	sw	a6,480(sp)
        copy->length = 0;
1c002908:	1e012823          	sw	zero,496(sp)
  __builtin_pulp_spr_write(reg, val);
1c00290c:	30059073          	csrw	mstatus,a1
1c002910:	b7b1                	j	1c00285c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x516>
				} else if (!(T0Ind_Last)) {
1c002912:	fe4d0793          	addi	a5,s10,-28
1c002916:	4896                	lw	a7,68(sp)
1c002918:	01178a63          	beq	a5,a7,1c00292c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5e6>
					_N_In = _N_In + (160)+(-115200); _LN_In = (320); _SN_In = (8*_LN_In); 
1c00291c:	7791                	lui	a5,0xfffe4
1c00291e:	ea078793          	addi	a5,a5,-352 # fffe3ea0 <pulp__FC+0xfffe3ea1>
1c002922:	9c3e                	add	s8,s8,a5
1c002924:	6f05                	lui	t5,0x1
1c002926:	a00f0813          	addi	a6,t5,-1536 # a00 <__rt_stack_size+0x200>
1c00292a:	a0f1                	j	1c0029f6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
				} else if (!(D1Ind_Last)) {
1c00292c:	5372                	lw	t1,60(sp)
1c00292e:	00132863          	p.beqimm	t1,1,1c00293e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5f8>
					_N_In = _N_In + (-4480)+(-115200); _LN_In = (320); _SN_In = (8*_LN_In); 
1c002932:	55d2                	lw	a1,52(sp)
1c002934:	9c2e                	add	s8,s8,a1
1c002936:	6605                	lui	a2,0x1
1c002938:	a0060813          	addi	a6,a2,-1536 # a00 <__rt_stack_size+0x200>
1c00293c:	a86d                	j	1c0029f6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
				_SN_In = 0;
1c00293e:	4801                	li	a6,0
1c002940:	a85d                	j	1c0029f6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002942:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002946:	404da783          	lw	a5,1028(s11)
1c00294a:	1c012683          	lw	a3,448(sp)
1c00294e:	40d7d7b3          	sra	a5,a5,a3
1c002952:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002956:	c795                	beqz	a5,1c002982 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x63c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002958:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c00295c:	30061073          	csrw	mstatus,a2
1c002960:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002964:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002968:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00296c:	30047673          	csrrci	a2,mstatus,8
1c002970:	404da783          	lw	a5,1028(s11)
1c002974:	1c012683          	lw	a3,448(sp)
1c002978:	40d7d7b3          	sra	a5,a5,a3
1c00297c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002980:	fff1                	bnez	a5,1c00295c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x616>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002982:	4785                	li	a5,1
1c002984:	00d796b3          	sll	a3,a5,a3
1c002988:	40dda223          	sw	a3,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c00298c:	30061073          	csrw	mstatus,a2
				if (_SN_In) {
1c002990:	08081563          	bnez	a6,1c002a1a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6d4>
				KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+2560*((D0Ind_Total)%2));
1c002994:	01caa683          	lw	a3,28(s5)
1c002998:	01f75613          	srli	a2,a4,0x1f
1c00299c:	00c707b3          	add	a5,a4,a2
1c0029a0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0029a4:	8f91                	sub	a5,a5,a2
1c0029a6:	00279713          	slli	a4,a5,0x2
1c0029aa:	97ba                	add	a5,a5,a4
1c0029ac:	07a6                	slli	a5,a5,0x9
1c0029ae:	97b6                	add	a5,a5,a3
1c0029b0:	cf3e                	sw	a5,156(sp)
				KerArg1->Filter = (signed char * __restrict__) (model_L1_Memory+5504+((D0Ind)*72)+9216*((D1Ind_Total)%2));
1c0029b2:	96ca                	add	a3,a3,s2
1c0029b4:	d936                	sw	a3,176(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0029b6:	089da223          	sw	s1,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0029ba:	009ba023          	sw	s1,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0029be:	009b2623          	sw	s1,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0029c2:	094da023          	sw	s4,128(s11)
1c0029c6:	0968                	addi	a0,sp,156
1c0029c8:	08ada023          	sw	a0,128(s11)
1c0029cc:	55a030ef          	jal	ra,1c005f26 <KerParConv3x3Stride1_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0029d0:	01cbe783          	p.elw	a5,28(s7)
			for (D0Ind=0; D0Ind<4; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0029d4:	0405                	addi	s0,s0,1
1c0029d6:	04890913          	addi	s2,s2,72
1c0029da:	08442c63          	p.beqimm	s0,4,1c002a72 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x72c>
1c0029de:	8522                	mv	a0,s0
1c0029e0:	01940733          	add	a4,s0,s9
				if (!(D0Ind_Last)) {
1c0029e4:	f23427e3          	p.beqimm	s0,3,1c002912 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5cc>
					_N_In = _N_In + (38400); _LN_In = (320); _SN_In = (8*_LN_In); 
1c0029e8:	67a5                	lui	a5,0x9
1c0029ea:	60078793          	addi	a5,a5,1536 # 9600 <__rt_stack_size+0x8e00>
1c0029ee:	9c3e                	add	s8,s8,a5
1c0029f0:	6785                	lui	a5,0x1
1c0029f2:	a0078813          	addi	a6,a5,-1536 # a00 <__rt_stack_size+0x200>
  if (copy->length == 0)
1c0029f6:	1d012783          	lw	a5,464(sp)
1c0029fa:	d7a1                	beqz	a5,1c002942 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5fc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0029fc:	1d812683          	lw	a3,472(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002a00:	02000793          	li	a5,32
1c002a04:	d6d1                	beqz	a3,1c002990 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64a>
1c002a06:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a0a:	03cde683          	p.elw	a3,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002a0e:	00fda223          	sw	a5,4(s11)
1c002a12:	1d812683          	lw	a3,472(sp)
1c002a16:	fae5                	bnez	a3,1c002a06 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6c0>
1c002a18:	bfa5                	j	1c002990 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64a>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+2560*((D0Ind_Total+1)%2)),
1c002a1a:	954e                	add	a0,a0,s3
1c002a1c:	01f55693          	srli	a3,a0,0x1f
1c002a20:	9536                	add	a0,a0,a3
1c002a22:	fc1537b3          	p.bclr	a5,a0,30,1
1c002a26:	8f95                	sub	a5,a5,a3
1c002a28:	00279693          	slli	a3,a5,0x2
1c002a2c:	97b6                	add	a5,a5,a3
1c002a2e:	07a6                	slli	a5,a5,0x9
1c002a30:	01caa683          	lw	a3,28(s5)
1c002a34:	97b6                	add	a5,a5,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a36:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002a3a:	400da603          	lw	a2,1024(s11)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002a3e:	c7084833          	p.bset	a6,a6,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002a42:	c1584833          	p.bset	a6,a6,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002a46:	410da023          	sw	a6,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002a4a:	40fda023          	sw	a5,1024(s11)
1c002a4e:	48d2                	lw	a7,20(sp)
1c002a50:	018887b3          	add	a5,a7,s8
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002a54:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c002a58:	12c007b7          	lui	a5,0x12c00
1c002a5c:	14078793          	addi	a5,a5,320 # 12c00140 <__l1_end+0x2c000fc>
1c002a60:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c002a64:	1cc12023          	sw	a2,448(sp)
        copy->length = 0;
1c002a68:	1c012823          	sw	zero,464(sp)
  __builtin_pulp_spr_write(reg, val);
1c002a6c:	30069073          	csrw	mstatus,a3
1c002a70:	b715                	j	1c002994 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64e>
1c002a72:	0c91                	addi	s9,s9,4
				__CALL(KerParConv3x3Stride1_SQ8, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Scale = (unsigned char *__restrict__) (model_L1_Memory+5376+((D1Ind)*32));
1c002a74:	01ca8993          	addi	s3,s5,28
1c002a78:	0009a783          	lw	a5,0(s3)
1c002a7c:	4f72                	lw	t5,28(sp)
1c002a7e:	01e78733          	add	a4,a5,t5
1c002a82:	c93a                	sw	a4,144(sp)
			KerArg2->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+5440+((D1Ind)*32));
1c002a84:	5332                	lw	t1,44(sp)
1c002a86:	979a                	add	a5,a5,t1
1c002a88:	cb3e                	sw	a5,148(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002a8a:	089da223          	sw	s1,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002a8e:	009ba023          	sw	s1,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002a92:	009b2623          	sw	s1,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002a96:	1c0057b7          	lui	a5,0x1c005
1c002a9a:	2a678793          	addi	a5,a5,678 # 1c0052a6 <KerParReductIO_CC_SQ8>
1c002a9e:	08fda023          	sw	a5,128(s11)
1c002aa2:	0108                	addi	a0,sp,128
1c002aa4:	08ada023          	sw	a0,128(s11)
1c002aa8:	7fe020ef          	jal	ra,1c0052a6 <KerParReductIO_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002aac:	01cbe783          	p.elw	a5,28(s7)
			AT_FORK(gap_ncore(), (void *) KerParReductIO_CC_SQ8, (void *) KerArg2);
			__CALL(KerParReductIO_CC_SQ8, KerArg2);
			KerArg3->Out = (signed char * __restrict__) (model_L1_Memory+23936+1248*((T0Ind_Total)%2));
1c002ab0:	01fd5793          	srli	a5,s10,0x1f
1c002ab4:	00fd0433          	add	s0,s10,a5
1c002ab8:	fc143433          	p.bclr	s0,s0,30,1
1c002abc:	8c1d                	sub	s0,s0,a5
1c002abe:	4e000793          	li	a5,1248
1c002ac2:	02f40433          	mul	s0,s0,a5
1c002ac6:	6919                	lui	s2,0x6
1c002ac8:	d8090913          	addi	s2,s2,-640 # 5d80 <__rt_stack_size+0x5580>
1c002acc:	9922                	add	s2,s2,s0
1c002ace:	0009a783          	lw	a5,0(s3)
1c002ad2:	97ca                	add	a5,a5,s2
1c002ad4:	cebe                	sw	a5,92(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002ad6:	089da223          	sw	s1,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002ada:	009b2023          	sw	s1,0(s6)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002ade:	009b2623          	sw	s1,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002ae2:	1c0077b7          	lui	a5,0x1c007
1c002ae6:	cec78793          	addi	a5,a5,-788 # 1c006cec <KerParPool2x2Stride2_ReLU_SQ8>
1c002aea:	08fda023          	sw	a5,128(s11)
1c002aee:	08a8                	addi	a0,sp,88
1c002af0:	08ada023          	sw	a0,128(s11)
1c002af4:	1f8040ef          	jal	ra,1c006cec <KerParPool2x2Stride2_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002af8:	01cbe783          	p.elw	a5,28(s7)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_ReLU_SQ8, (void *) KerArg3);
			__CALL(KerParPool2x2Stride2_ReLU_SQ8, KerArg3);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c002afc:	4522                	lw	a0,8(sp)
1c002afe:	e969                	bnez	a0,1c002bd0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x88a>
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c002b00:	45c2                	lw	a1,16(sp)
1c002b02:	40059463          	bnez	a1,1c002f0a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xbc4>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+172960+1248*((T0Ind_Total+-1)%2)),
						_SP_Out, 1131, _LP_Out, 1, &UchanHR1);
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+172960+1248*((T0Ind_Total)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+23936+1248*((T0Ind_Total)%2)),
1c002b06:	1c00e7b7          	lui	a5,0x1c00e
1c002b0a:	ea47a783          	lw	a5,-348(a5) # 1c00dea4 <model_L2_Memory>
1c002b0e:	943e                	add	s0,s0,a5
1c002b10:	0002a7b7          	lui	a5,0x2a
1c002b14:	3a078793          	addi	a5,a5,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c002b18:	97a2                	add	a5,a5,s0
1c002b1a:	01caa703          	lw	a4,28(s5)
1c002b1e:	993a                	add	s2,s2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b20:	300476f3          	csrrci	a3,mstatus,8
    if (size < max_len)
1c002b24:	4512                	lw	a0,4(sp)
1c002b26:	01051593          	slli	a1,a0,0x10
1c002b2a:	1805ca63          	bltz	a1,1c002cbe <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x978>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002b2e:	400da603          	lw	a2,1024(s11)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c002b32:	00020737          	lui	a4,0x20
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002b36:	de052733          	p.insert	a4,a0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002b3a:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002b3e:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002b42:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002b46:	412da023          	sw	s2,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002b4a:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c002b4e:	18c12023          	sw	a2,384(sp)
        copy->length = 0;
1c002b52:	18012823          	sw	zero,400(sp)
  __builtin_pulp_spr_write(reg, val);
1c002b56:	30069073          	csrw	mstatus,a3
			_SPP_Out = _SP_Out;_LPP_Out = _LP_Out;
			_P_Out = _C_Out;_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c002b5a:	5f02                	lw	t5,32(sp)
1c002b5c:	23af0b63          	beq	t5,s10,1c002d92 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa4c>
				_C_Out = _C_Out + (39); _LC_Out = (39); _SC_Out = (32*_LC_Out); 
1c002b60:	4332                	lw	t1,12(sp)
1c002b62:	02730793          	addi	a5,t1,39
		for (T0Ind=0; T0Ind<29; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002b66:	0d05                	addi	s10,s10,1
1c002b68:	cc1a                	sw	t1,24(sp)
1c002b6a:	4522                	lw	a0,8(sp)
1c002b6c:	c82a                	sw	a0,16(sp)
1c002b6e:	55c2                	lw	a1,48(sp)
1c002b70:	1da58d63          	beq	a1,s10,1c002d4a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa04>
1c002b74:	4592                	lw	a1,4(sp)
1c002b76:	c42e                	sw	a1,8(sp)
				_C_Out = _C_Out + (39); _LC_Out = (39); _SC_Out = (32*_LC_Out); 
1c002b78:	4e000613          	li	a2,1248
1c002b7c:	c232                	sw	a2,4(sp)
1c002b7e:	c63e                	sw	a5,12(sp)
			KerArg0->Bias = (void * __restrict__) (model_L1_Memory+5120+((D1Ind)*128));
1c002b80:	01caa783          	lw	a5,28(s5)
1c002b84:	5692                	lw	a3,36(sp)
1c002b86:	00d78733          	add	a4,a5,a3
1c002b8a:	cdba                	sw	a4,216(sp)
			KerArg0->NormBias = (unsigned char) (((char *)(model_L1_Memory+46400))[5]);
1c002b8c:	672d                	lui	a4,0xb
1c002b8e:	97ba                	add	a5,a5,a4
1c002b90:	5457c783          	lbu	a5,1349(a5)
1c002b94:	0cf10e23          	sb	a5,220(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002b98:	089da223          	sw	s1,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002b9c:	009ba023          	sw	s1,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002ba0:	009b2623          	sw	s1,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002ba4:	1c005737          	lui	a4,0x1c005
1c002ba8:	35470713          	addi	a4,a4,852 # 1c005354 <KerParSetBiasB32_SQ8>
1c002bac:	08eda023          	sw	a4,128(s11)
1c002bb0:	01e8                	addi	a0,sp,204
1c002bb2:	08ada023          	sw	a0,128(s11)
1c002bb6:	79e020ef          	jal	ra,1c005354 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002bba:	01cbe783          	p.elw	a5,28(s7)
1c002bbe:	5922                	lw	s2,40(sp)
			for (D0Ind=0; D0Ind<4; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c002bc0:	4401                	li	s0,0
					_N_In = _N_In + (-4480)+(-115200); _LN_In = (320); _SN_In = (8*_LN_In); 
1c002bc2:	778d                	lui	a5,0xfffe3
1c002bc4:	c8078793          	addi	a5,a5,-896 # fffe2c80 <pulp__FC+0xfffe2c81>
1c002bc8:	da3e                	sw	a5,52(sp)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+2560*((D0Ind_Total+1)%2)),
1c002bca:	001c8993          	addi	s3,s9,1
1c002bce:	bd01                	j	1c0029de <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x698>
  if (copy->length == 0)
1c002bd0:	19012783          	lw	a5,400(sp)
1c002bd4:	c385                	beqz	a5,1c002bf4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8ae>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002bd6:	19812703          	lw	a4,408(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002bda:	02000793          	li	a5,32
1c002bde:	c335                	beqz	a4,1c002c42 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8fc>
1c002be0:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002be4:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002be8:	00fda223          	sw	a5,4(s11)
1c002bec:	19812703          	lw	a4,408(sp)
1c002bf0:	fb65                	bnez	a4,1c002be0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x89a>
1c002bf2:	a881                	j	1c002c42 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8fc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002bf4:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002bf8:	404da783          	lw	a5,1028(s11)
1c002bfc:	18012703          	lw	a4,384(sp)
1c002c00:	40e7d7b3          	sra	a5,a5,a4
1c002c04:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002c08:	c795                	beqz	a5,1c002c34 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8ee>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c0a:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c002c0e:	30069073          	csrw	mstatus,a3
1c002c12:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c16:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002c1a:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002c1e:	300476f3          	csrrci	a3,mstatus,8
1c002c22:	404da783          	lw	a5,1028(s11)
1c002c26:	18012703          	lw	a4,384(sp)
1c002c2a:	40e7d7b3          	sra	a5,a5,a4
1c002c2e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002c32:	fff1                	bnez	a5,1c002c0e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8c8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002c34:	4785                	li	a5,1
1c002c36:	00e79733          	sll	a4,a5,a4
1c002c3a:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c002c3e:	30069073          	csrw	mstatus,a3
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c002c42:	4542                	lw	a0,16(sp)
1c002c44:	c50d                	beqz	a0,1c002c6e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x928>
1c002c46:	17c14783          	lbu	a5,380(sp)
1c002c4a:	0ff7f793          	andi	a5,a5,255
1c002c4e:	e385                	bnez	a5,1c002c6e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x928>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c50:	4709                	li	a4,2
1c002c52:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c56:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002c5a:	00eda223          	sw	a4,4(s11)
1c002c5e:	17c14783          	lbu	a5,380(sp)
1c002c62:	0ff7f793          	andi	a5,a5,255
1c002c66:	d7f5                	beqz	a5,1c002c52 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x90c>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+172960+1248*((T0Ind_Total+-1)%2)),
1c002c68:	45a2                	lw	a1,8(sp)
1c002c6a:	e8058ee3          	beqz	a1,1c002b06 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c002c6e:	fffd0793          	addi	a5,s10,-1
1c002c72:	01f7d713          	srli	a4,a5,0x1f
1c002c76:	97ba                	add	a5,a5,a4
1c002c78:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002c7c:	8f99                	sub	a5,a5,a4
1c002c7e:	4e000713          	li	a4,1248
1c002c82:	0002a637          	lui	a2,0x2a
1c002c86:	3a060613          	addi	a2,a2,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c002c8a:	42e78633          	p.mac	a2,a5,a4
1c002c8e:	1c00e7b7          	lui	a5,0x1c00e
1c002c92:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
1c002c96:	0e010893          	addi	a7,sp,224
1c002c9a:	4801                	li	a6,0
1c002c9c:	02700793          	li	a5,39
1c002ca0:	46b00713          	li	a4,1131
1c002ca4:	46a2                	lw	a3,8(sp)
1c002ca6:	962e                	add	a2,a2,a1
1c002ca8:	5f62                	lw	t5,56(sp)
1c002caa:	4362                	lw	t1,24(sp)
1c002cac:	006f05b3          	add	a1,t5,t1
1c002cb0:	1c00e537          	lui	a0,0x1c00e
1c002cb4:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c002cb8:	1f7050ef          	jal	ra,1c0086ae <pi_cl_ram_copy_2d>
1c002cbc:	b5a9                	j	1c002b06 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002cbe:	6721                	lui	a4,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002cc0:	00320637          	lui	a2,0x320
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c002cc4:	18c12223          	sw	a2,388(sp)
    cmd->loc_addr = loc;
1c002cc8:	19212a23          	sw	s2,404(sp)
    cmd->ext_addr = ext;
1c002ccc:	18f12c23          	sw	a5,408(sp)
    cmd->size = len;
1c002cd0:	4612                	lw	a2,4(sp)
1c002cd2:	18c12423          	sw	a2,392(sp)
    cmd->stride = stride;
1c002cd6:	18e12623          	sw	a4,396(sp)
    cmd->length = length;
1c002cda:	18e12823          	sw	a4,400(sp)
    cmd->id = tid;
1c002cde:	577d                	li	a4,-1
1c002ce0:	18e12023          	sw	a4,384(sp)
    cmd->next = NULL;
1c002ce4:	18012e23          	sw	zero,412(sp)
    if (__rt_dma_first_pending)
1c002ce8:	01402703          	lw	a4,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002cec:	cb09                	beqz	a4,1c002cfe <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b8>
        __rt_dma_last_pending->next = cmd;
1c002cee:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002cf2:	0318                	addi	a4,sp,384
1c002cf4:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c002cf6:	031c                	addi	a5,sp,384
1c002cf8:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002cfc:	bda9                	j	1c002b56 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x810>
    uint32_t iter_length = (len < length) ? len : length;
1c002cfe:	6721                	lui	a4,0x8
1c002d00:	4892                	lw	a7,4(sp)
1c002d02:	04e8d733          	p.minu	a4,a7,a4
        cmd->loc_addr += iter_length;
1c002d06:	00e90633          	add	a2,s2,a4
1c002d0a:	18c12a23          	sw	a2,404(sp)
        cmd->ext_addr += stride;
1c002d0e:	00032637          	lui	a2,0x32
1c002d12:	3a060613          	addi	a2,a2,928 # 323a0 <__L1Cl+0x223a0>
1c002d16:	9432                	add	s0,s0,a2
1c002d18:	18812c23          	sw	s0,408(sp)
        cmd->size -= iter_length;
1c002d1c:	40e88733          	sub	a4,a7,a4
1c002d20:	18e12423          	sw	a4,392(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002d24:	400da703          	lw	a4,1024(s11)
        cmd->id = plp_dma_counter_alloc();
1c002d28:	18e12023          	sw	a4,384(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002d2c:	00328737          	lui	a4,0x328
1c002d30:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002d34:	412da023          	sw	s2,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002d38:	40fda023          	sw	a5,1024(s11)
        if (cmd->length != 0)
1c002d3c:	19012783          	lw	a5,400(sp)
1c002d40:	dbdd                	beqz	a5,1c002cf6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b0>
            __rt_dma_first_pending = cmd;
1c002d42:	031c                	addi	a5,sp,384
1c002d44:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002d48:	b77d                	j	1c002cf6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b0>
				_C_Out = _C_Out + (39); _LC_Out = (39); _SC_Out = (32*_LC_Out); 
1c002d4a:	4e000613          	li	a2,1248
	for (D1Ind=0; D1Ind<2; D1Ind++, D1Ind_Total++) { /* Iteration on D1 */
1c002d4e:	5772                	lw	a4,60(sp)
1c002d50:	0705                	addi	a4,a4,1
1c002d52:	de3a                	sw	a4,60(sp)
1c002d54:	04272b63          	p.beqimm	a4,2,1c002daa <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa64>
		if (!(D1Ind_Last)) {
1c002d58:	5572                	lw	a0,60(sp)
1c002d5a:	aa1527e3          	p.beqimm	a0,1,1c002808 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4c2>
			_N_Filter = _N_Filter + (9216); _SN_Filter = (9216); 
1c002d5e:	6689                	lui	a3,0x2
1c002d60:	40068693          	addi	a3,a3,1024 # 2400 <__rt_stack_size+0x1c00>
1c002d64:	4586                	lw	a1,64(sp)
1c002d66:	95b6                	add	a1,a1,a3
1c002d68:	c0ae                	sw	a1,64(sp)
  if (copy->length == 0)
1c002d6a:	1f012703          	lw	a4,496(sp)
1c002d6e:	a8070fe3          	beqz	a4,1c00280c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4c6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002d72:	1f812583          	lw	a1,504(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002d76:	02000713          	li	a4,32
1c002d7a:	ae0580e3          	beqz	a1,1c00285a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x514>
1c002d7e:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002d82:	03cde583          	p.elw	a1,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002d86:	00eda223          	sw	a4,4(s11)
1c002d8a:	1f812583          	lw	a1,504(sp)
1c002d8e:	f9e5                	bnez	a1,1c002d7e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa38>
1c002d90:	b4e9                	j	1c00285a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x514>
			} else if (!(D1Ind_Last)) {
1c002d92:	5672                	lw	a2,60(sp)
1c002d94:	16162863          	p.beqimm	a2,1,1c002f04 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xbbe>
				_C_Out = _C_Out + (36192)+(-1092); _LC_Out = (39); _SC_Out = (32*_LC_Out); 
1c002d98:	67a5                	lui	a5,0x9
1c002d9a:	91c78793          	addi	a5,a5,-1764 # 891c <__rt_stack_size+0x811c>
1c002d9e:	46b2                	lw	a3,12(sp)
1c002da0:	97b6                	add	a5,a5,a3
1c002da2:	4e000613          	li	a2,1248
		for (T0Ind=0; T0Ind<29; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002da6:	0d05                	addi	s10,s10,1
1c002da8:	b75d                	j	1c002d4e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa08>
  if (copy->length == 0)
1c002daa:	19012783          	lw	a5,400(sp)
1c002dae:	c395                	beqz	a5,1c002dd2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa8c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002db0:	19812683          	lw	a3,408(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002db4:	02000713          	li	a4,32
1c002db8:	002047b7          	lui	a5,0x204
1c002dbc:	caa5                	beqz	a3,1c002e2c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xae6>
1c002dbe:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002dc2:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002dc6:	00e7a223          	sw	a4,4(a5)
1c002dca:	19812683          	lw	a3,408(sp)
1c002dce:	fae5                	bnez	a3,1c002dbe <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa78>
1c002dd0:	a8b1                	j	1c002e2c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xae6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002dd2:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002dd6:	002047b7          	lui	a5,0x204
1c002dda:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c002dde:	18012683          	lw	a3,384(sp)
1c002de2:	40d7d7b3          	sra	a5,a5,a3
1c002de6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002dea:	cb85                	beqz	a5,1c002e1a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xad4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002dec:	10000593          	li	a1,256
1c002df0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002df4:	30061073          	csrw	mstatus,a2
1c002df8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002dfc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002e00:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002e04:	30047673          	csrrci	a2,mstatus,8
1c002e08:	40472783          	lw	a5,1028(a4)
1c002e0c:	18012683          	lw	a3,384(sp)
1c002e10:	40d7d7b3          	sra	a5,a5,a3
1c002e14:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002e18:	fff1                	bnez	a5,1c002df4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xaae>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002e1a:	4785                	li	a5,1
1c002e1c:	00d796b3          	sll	a3,a5,a3
1c002e20:	002047b7          	lui	a5,0x204
1c002e24:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002e28:	30061073          	csrw	mstatus,a2
		/*================================= Update Arg Pipeline =============================*/
		/*============================= End Update Arg Pipeline =============================*/
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c002e2c:	47a2                	lw	a5,8(sp)
1c002e2e:	c785                	beqz	a5,1c002e56 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb10>
1c002e30:	17c14783          	lbu	a5,380(sp)
1c002e34:	0ff7f793          	andi	a5,a5,255
1c002e38:	ef99                	bnez	a5,1c002e56 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb10>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002e3a:	4689                	li	a3,2
1c002e3c:	00204737          	lui	a4,0x204
1c002e40:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002e44:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002e48:	00d72223          	sw	a3,4(a4)
1c002e4c:	17c14783          	lbu	a5,380(sp)
1c002e50:	0ff7f793          	andi	a5,a5,255
1c002e54:	d7f5                	beqz	a5,1c002e40 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xafa>
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+172960+1248*((T0Ind_Total+-1)%2)), _SP_Out, 1131, _LP_Out, 1, &UchanHR1);
1c002e56:	fffd0793          	addi	a5,s10,-1
1c002e5a:	01f7d713          	srli	a4,a5,0x1f
1c002e5e:	97ba                	add	a5,a5,a4
1c002e60:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002e64:	8f99                	sub	a5,a5,a4
1c002e66:	4e000713          	li	a4,1248
1c002e6a:	0002a637          	lui	a2,0x2a
1c002e6e:	3a060613          	addi	a2,a2,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c002e72:	42e78633          	p.mac	a2,a5,a4
1c002e76:	1c00e7b7          	lui	a5,0x1c00e
1c002e7a:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
1c002e7e:	0e010893          	addi	a7,sp,224
1c002e82:	4801                	li	a6,0
1c002e84:	02700793          	li	a5,39
1c002e88:	46b00713          	li	a4,1131
1c002e8c:	4692                	lw	a3,4(sp)
1c002e8e:	962e                	add	a2,a2,a1
1c002e90:	5f62                	lw	t5,56(sp)
1c002e92:	4332                	lw	t1,12(sp)
1c002e94:	006f05b3          	add	a1,t5,t1
1c002e98:	1c00e537          	lui	a0,0x1c00e
1c002e9c:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c002ea0:	00f050ef          	jal	ra,1c0086ae <pi_cl_ram_copy_2d>
1c002ea4:	17c14783          	lbu	a5,380(sp)
1c002ea8:	0ff7f793          	andi	a5,a5,255
1c002eac:	ef99                	bnez	a5,1c002eca <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb84>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002eae:	4689                	li	a3,2
1c002eb0:	00204737          	lui	a4,0x204
1c002eb4:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002eb8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002ebc:	00d72223          	sw	a3,4(a4)
1c002ec0:	17c14783          	lbu	a5,380(sp)
1c002ec4:	0ff7f793          	andi	a5,a5,255
1c002ec8:	d7f5                	beqz	a5,1c002eb4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb6e>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait current uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c002eca:	29c12083          	lw	ra,668(sp)
1c002ece:	29812403          	lw	s0,664(sp)
1c002ed2:	29412483          	lw	s1,660(sp)
1c002ed6:	29012903          	lw	s2,656(sp)
1c002eda:	28c12983          	lw	s3,652(sp)
1c002ede:	28812a03          	lw	s4,648(sp)
1c002ee2:	28412a83          	lw	s5,644(sp)
1c002ee6:	28012b03          	lw	s6,640(sp)
1c002eea:	27c12b83          	lw	s7,636(sp)
1c002eee:	27812c03          	lw	s8,632(sp)
1c002ef2:	27412c83          	lw	s9,628(sp)
1c002ef6:	27012d03          	lw	s10,624(sp)
1c002efa:	26c12d83          	lw	s11,620(sp)
1c002efe:	2a010113          	addi	sp,sp,672
1c002f02:	8082                	ret
1c002f04:	47b2                	lw	a5,12(sp)
			_SC_Out = 0;
1c002f06:	4601                	li	a2,0
1c002f08:	bd79                	j	1c002da6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa60>
1c002f0a:	17c14783          	lbu	a5,380(sp)
1c002f0e:	0ff7f793          	andi	a5,a5,255
1c002f12:	be079ae3          	bnez	a5,1c002b06 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c002f16:	bb2d                	j	1c002c50 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x90a>

1c002f18 <S4_Linear_2x29x39x64>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c002f18:	d2010113          	addi	sp,sp,-736
1c002f1c:	2c112e23          	sw	ra,732(sp)
1c002f20:	2c812c23          	sw	s0,728(sp)
1c002f24:	2c912a23          	sw	s1,724(sp)
1c002f28:	2d212823          	sw	s2,720(sp)
1c002f2c:	2d312623          	sw	s3,716(sp)
1c002f30:	2d412423          	sw	s4,712(sp)
1c002f34:	2d512223          	sw	s5,708(sp)
1c002f38:	2d612023          	sw	s6,704(sp)
1c002f3c:	2b712e23          	sw	s7,700(sp)
1c002f40:	2b812c23          	sw	s8,696(sp)
1c002f44:	2b912a23          	sw	s9,692(sp)
1c002f48:	2ba12823          	sw	s10,688(sp)
1c002f4c:	2bb12623          	sw	s11,684(sp)
1c002f50:	8aaa                	mv	s5,a0
1c002f52:	842e                	mv	s0,a1
1c002f54:	8a32                	mv	s4,a2
1c002f56:	ce36                	sw	a3,28(sp)
1c002f58:	89ba                	mv	s3,a4
1c002f5a:	893e                	mv	s2,a5
1c002f5c:	84c2                	mv	s1,a6
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 9:[1x1, 7:1x1, 1x1], 9]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (model_L1_Memory+48744);
1c002f5e:	100007b7          	lui	a5,0x10000
1c002f62:	01c7a783          	lw	a5,28(a5) # 1000001c <model_L1_Memory>
1c002f66:	6731                	lui	a4,0xc
1c002f68:	e6870693          	addi	a3,a4,-408 # be68 <__rt_stack_size+0xb668>
1c002f6c:	96be                	add	a3,a3,a5
1c002f6e:	d6b6                	sw	a3,108(sp)
	KerArg0->W = (unsigned short int) (1);
1c002f70:	4585                	li	a1,1
1c002f72:	06b11823          	sh	a1,112(sp)
	KerArg0->H = (unsigned short int) (1);
1c002f76:	06b11923          	sh	a1,114(sp)
	KerArg0->Feat = (unsigned short int) (2);
1c002f7a:	4509                	li	a0,2
1c002f7c:	06a11a23          	sh	a0,116(sp)
	KerArg0->Bias = (void * __restrict__) (model_L1_Memory+48736);
1c002f80:	e6070613          	addi	a2,a4,-416
1c002f84:	963e                	add	a2,a2,a5
1c002f86:	dcb2                	sw	a2,120(sp)
	KerArg1->Out = (void * __restrict__) (model_L1_Memory+48744);
1c002f88:	cab6                	sw	a3,84(sp)
	KerArg1->OutDim = (unsigned short int) (2);
1c002f8a:	04a11e23          	sh	a0,92(sp)
	KerArg1->Infos = (signed char *__restrict__) (model_L1_Memory+48764);
1c002f8e:	e7c70613          	addi	a2,a4,-388
1c002f92:	963e                	add	a2,a2,a5
1c002f94:	d4b2                	sw	a2,104(sp)
	KerArg2->In = (int *__restrict__) (model_L1_Memory+48744);
1c002f96:	d636                	sw	a3,44(sp)
	KerArg2->Out = (void *__restrict__) (model_L1_Memory+48752);
1c002f98:	e7070693          	addi	a3,a4,-400
1c002f9c:	96be                	add	a3,a3,a5
1c002f9e:	d836                	sw	a3,48(sp)
	KerArg2->Feat = (unsigned short int) (2);
1c002fa0:	02a11a23          	sh	a0,52(sp)
	KerArg2->W = (unsigned short int) (1);
1c002fa4:	02b11b23          	sh	a1,54(sp)
	KerArg2->H = (unsigned short int) (1);
1c002fa8:	02b11c23          	sh	a1,56(sp)
	KerArg2->Scale = (unsigned char *__restrict__) (model_L1_Memory+48756);
1c002fac:	e7470693          	addi	a3,a4,-396
1c002fb0:	96be                	add	a3,a3,a5
1c002fb2:	de36                	sw	a3,60(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+48760);
1c002fb4:	e7870713          	addi	a4,a4,-392
1c002fb8:	97ba                	add	a5,a5,a4
1c002fba:	c0be                	sw	a5,64(sp)
	KerArg2->Infos = (signed char *__restrict__) (model_L1_Memory+48764);
1c002fbc:	c2b2                	sw	a2,68(sp)
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+19364+0), 8122, 0, &UchanHR1);
1c002fbe:	ca56                	sw	s5,20(sp)
1c002fc0:	1c00e7b7          	lui	a5,0x1c00e
1c002fc4:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
1c002fc8:	121c                	addi	a5,sp,288
1c002fca:	4705                	li	a4,1
1c002fcc:	6689                	lui	a3,0x2
1c002fce:	fba68693          	addi	a3,a3,-70 # 1fba <__rt_stack_size+0x17ba>
1c002fd2:	6615                	lui	a2,0x5
1c002fd4:	ba460613          	addi	a2,a2,-1116 # 4ba4 <__rt_stack_size+0x43a4>
1c002fd8:	962e                	add	a2,a2,a1
1c002fda:	85d6                	mv	a1,s5
1c002fdc:	1c00e537          	lui	a0,0x1c00e
1c002fe0:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c002fe4:	688050ef          	jal	ra,1c00866c <pi_cl_ram_copy>
1c002fe8:	1bc14783          	lbu	a5,444(sp)
1c002fec:	0ff7f793          	andi	a5,a5,255
1c002ff0:	ef99                	bnez	a5,1c00300e <S4_Linear_2x29x39x64+0xf6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002ff2:	4689                	li	a3,2
1c002ff4:	00204737          	lui	a4,0x204
1c002ff8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002ffc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003000:	00d72223          	sw	a3,4(a4)
1c003004:	1bc14783          	lbu	a5,444(sp)
1c003008:	0ff7f793          	andi	a5,a5,255
1c00300c:	d7f5                	beqz	a5,1c002ff8 <S4_Linear_2x29x39x64+0xe0>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+8122), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+19364+8124), 8122, 0, &UchanHR1);
1c00300e:	1c00eb37          	lui	s6,0x1c00e
1c003012:	ea4b0b13          	addi	s6,s6,-348 # 1c00dea4 <model_L2_Memory>
1c003016:	000b2583          	lw	a1,0(s6)
1c00301a:	6c09                	lui	s8,0x2
1c00301c:	fbac0c13          	addi	s8,s8,-70 # 1fba <__rt_stack_size+0x17ba>
1c003020:	1c00ebb7          	lui	s7,0x1c00e
1c003024:	121c                	addi	a5,sp,288
1c003026:	4705                	li	a4,1
1c003028:	86e2                	mv	a3,s8
1c00302a:	661d                	lui	a2,0x7
1c00302c:	b6060613          	addi	a2,a2,-1184 # 6b60 <__rt_stack_size+0x6360>
1c003030:	962e                	add	a2,a2,a1
1c003032:	018a85b3          	add	a1,s5,s8
1c003036:	f94b8513          	addi	a0,s7,-108 # 1c00df94 <HyperRam>
1c00303a:	632050ef          	jal	ra,1c00866c <pi_cl_ram_copy>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+19364+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+0), 8122, 0, &DmaR_Evt1);
1c00303e:	000b2683          	lw	a3,0(s6)
1c003042:	6795                	lui	a5,0x5
1c003044:	ba478793          	addi	a5,a5,-1116 # 4ba4 <__rt_stack_size+0x43a4>
1c003048:	96be                	add	a3,a3,a5
1c00304a:	100007b7          	lui	a5,0x10000
1c00304e:	01c7a583          	lw	a1,28(a5) # 1000001c <model_L1_Memory>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003052:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003056:	00204737          	lui	a4,0x204
1c00305a:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00305e:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003062:	de0c27b3          	p.insert	a5,s8,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003066:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00306a:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00306e:	00204537          	lui	a0,0x204
1c003072:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003076:	002047b7          	lui	a5,0x204
1c00307a:	40b7a023          	sw	a1,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00307e:	40d7a023          	sw	a3,1024(a5)
        if (!merge) copy->id = id;
1c003082:	28e12023          	sw	a4,640(sp)
        copy->length = 0;
1c003086:	28012823          	sw	zero,656(sp)
  __builtin_pulp_spr_write(reg, val);
1c00308a:	30061073          	csrw	mstatus,a2
	_NN_In=8122; _SN_In=8122;
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Filter+0), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+35612+0), 16244, 0, &UchanHR2);
1c00308e:	cc22                	sw	s0,24(sp)
1c003090:	000b2583          	lw	a1,0(s6)
1c003094:	011c                	addi	a5,sp,128
1c003096:	4705                	li	a4,1
1c003098:	6691                	lui	a3,0x4
1c00309a:	f7468693          	addi	a3,a3,-140 # 3f74 <__rt_stack_size+0x3774>
1c00309e:	6625                	lui	a2,0x9
1c0030a0:	b1c60613          	addi	a2,a2,-1252 # 8b1c <__rt_stack_size+0x831c>
1c0030a4:	962e                	add	a2,a2,a1
1c0030a6:	85a2                	mv	a1,s0
1c0030a8:	f94b8513          	addi	a0,s7,-108
1c0030ac:	5c0050ef          	jal	ra,1c00866c <pi_cl_ram_copy>
1c0030b0:	11c14783          	lbu	a5,284(sp)
1c0030b4:	0ff7f793          	andi	a5,a5,255
1c0030b8:	ef99                	bnez	a5,1c0030d6 <S4_Linear_2x29x39x64+0x1be>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0030ba:	4689                	li	a3,2
1c0030bc:	00204737          	lui	a4,0x204
1c0030c0:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0030c4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0030c8:	00d72223          	sw	a3,4(a4)
1c0030cc:	11c14783          	lbu	a5,284(sp)
1c0030d0:	0ff7f793          	andi	a5,a5,255
1c0030d4:	d7f5                	beqz	a5,1c0030c0 <S4_Linear_2x29x39x64+0x1a8>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA read Filter */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Filter+16244), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+35612+16244), 16244, 0, &UchanHR2);
1c0030d6:	1c00ebb7          	lui	s7,0x1c00e
1c0030da:	ea4b8b93          	addi	s7,s7,-348 # 1c00dea4 <model_L2_Memory>
1c0030de:	000ba583          	lw	a1,0(s7)
1c0030e2:	6b11                	lui	s6,0x4
1c0030e4:	f74b0a93          	addi	s5,s6,-140 # 3f74 <__rt_stack_size+0x3774>
1c0030e8:	011c                	addi	a5,sp,128
1c0030ea:	4705                	li	a4,1
1c0030ec:	86d6                	mv	a3,s5
1c0030ee:	6635                	lui	a2,0xd
1c0030f0:	a9060613          	addi	a2,a2,-1392 # ca90 <__rt_stack_size+0xc290>
1c0030f4:	962e                	add	a2,a2,a1
1c0030f6:	015405b3          	add	a1,s0,s5
1c0030fa:	1c00e537          	lui	a0,0x1c00e
1c0030fe:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c003102:	56a050ef          	jal	ra,1c00866c <pi_cl_ram_copy>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+35612+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+16248+0), 16244, 0, &DmaR_Evt2);
1c003106:	000ba583          	lw	a1,0(s7)
1c00310a:	67a5                	lui	a5,0x9
1c00310c:	b1c78793          	addi	a5,a5,-1252 # 8b1c <__rt_stack_size+0x831c>
1c003110:	95be                	add	a1,a1,a5
1c003112:	10000637          	lui	a2,0x10000
1c003116:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c00311a:	421c                	lw	a5,0(a2)
1c00311c:	f78b0b13          	addi	s6,s6,-136
1c003120:	9b3e                	add	s6,s6,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003122:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003126:	002046b7          	lui	a3,0x204
1c00312a:	4006a803          	lw	a6,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00312e:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003132:	873e                	mv	a4,a5
1c003134:	de0aa733          	p.insert	a4,s5,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003138:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00313c:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003140:	002048b7          	lui	a7,0x204
1c003144:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003148:	00204737          	lui	a4,0x204
1c00314c:	41672023          	sw	s6,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003150:	40b72023          	sw	a1,1024(a4)
        if (!merge) copy->id = id;
1c003154:	27012023          	sw	a6,608(sp)
        copy->length = 0;
1c003158:	26012823          	sw	zero,624(sp)
  __builtin_pulp_spr_write(reg, val);
1c00315c:	30051073          	csrw	mstatus,a0
	_NN_Filter=16244; _SN_Filter=16244;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48736), 8, 0, &DmaR_Evt3);
1c003160:	4218                	lw	a4,0(a2)
1c003162:	6631                	lui	a2,0xc
1c003164:	e6060613          	addi	a2,a2,-416 # be60 <__rt_stack_size+0xb660>
1c003168:	9732                	add	a4,a4,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00316a:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00316e:	4006a683          	lw	a3,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003172:	c037c7b3          	p.bset	a5,a5,0,3
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003176:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00317a:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00317e:	002045b7          	lui	a1,0x204
1c003182:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003186:	002047b7          	lui	a5,0x204
1c00318a:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00318e:	4147a023          	sw	s4,1024(a5)
        if (!merge) copy->id = id;
1c003192:	24d12023          	sw	a3,576(sp)
        copy->length = 0;
1c003196:	24012823          	sw	zero,592(sp)
  __builtin_pulp_spr_write(reg, val);
1c00319a:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00319e:	25012783          	lw	a5,592(sp)
1c0031a2:	c395                	beqz	a5,1c0031c6 <S4_Linear_2x29x39x64+0x2ae>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0031a4:	25812683          	lw	a3,600(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0031a8:	02000713          	li	a4,32
1c0031ac:	002047b7          	lui	a5,0x204
1c0031b0:	caa5                	beqz	a3,1c003220 <S4_Linear_2x29x39x64+0x308>
1c0031b2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0031b6:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0031ba:	00e7a223          	sw	a4,4(a5)
1c0031be:	25812683          	lw	a3,600(sp)
1c0031c2:	fae5                	bnez	a3,1c0031b2 <S4_Linear_2x29x39x64+0x29a>
1c0031c4:	a8b1                	j	1c003220 <S4_Linear_2x29x39x64+0x308>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0031c6:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0031ca:	002047b7          	lui	a5,0x204
1c0031ce:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0031d2:	24012683          	lw	a3,576(sp)
1c0031d6:	40d7d7b3          	sra	a5,a5,a3
1c0031da:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0031de:	cb85                	beqz	a5,1c00320e <S4_Linear_2x29x39x64+0x2f6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0031e0:	10000593          	li	a1,256
1c0031e4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0031e8:	30061073          	csrw	mstatus,a2
1c0031ec:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0031f0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0031f4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0031f8:	30047673          	csrrci	a2,mstatus,8
1c0031fc:	40472783          	lw	a5,1028(a4)
1c003200:	24012683          	lw	a3,576(sp)
1c003204:	40d7d7b3          	sra	a5,a5,a3
1c003208:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00320c:	fff1                	bnez	a5,1c0031e8 <S4_Linear_2x29x39x64+0x2d0>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00320e:	4785                	li	a5,1
1c003210:	00d796b3          	sll	a3,a5,a3
1c003214:	002047b7          	lui	a5,0x204
1c003218:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00321c:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48756), 2, 0, &DmaR_Evt4);
1c003220:	100007b7          	lui	a5,0x10000
1c003224:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c003228:	67b1                	lui	a5,0xc
1c00322a:	e7478793          	addi	a5,a5,-396 # be74 <__rt_stack_size+0xb674>
1c00322e:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003230:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003234:	00204737          	lui	a4,0x204
1c003238:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00323c:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003240:	0789                	addi	a5,a5,2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003242:	c157c7b3          	p.bset	a5,a5,0,21
1c003246:	002045b7          	lui	a1,0x204
1c00324a:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00324e:	002047b7          	lui	a5,0x204
1c003252:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003256:	4137a023          	sw	s3,1024(a5)
        if (!merge) copy->id = id;
1c00325a:	22e12023          	sw	a4,544(sp)
        copy->length = 0;
1c00325e:	22012823          	sw	zero,560(sp)
  __builtin_pulp_spr_write(reg, val);
1c003262:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c003266:	23012783          	lw	a5,560(sp)
1c00326a:	c395                	beqz	a5,1c00328e <S4_Linear_2x29x39x64+0x376>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00326c:	23812683          	lw	a3,568(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003270:	02000713          	li	a4,32
1c003274:	002047b7          	lui	a5,0x204
1c003278:	caa5                	beqz	a3,1c0032e8 <S4_Linear_2x29x39x64+0x3d0>
1c00327a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00327e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003282:	00e7a223          	sw	a4,4(a5)
1c003286:	23812683          	lw	a3,568(sp)
1c00328a:	fae5                	bnez	a3,1c00327a <S4_Linear_2x29x39x64+0x362>
1c00328c:	a8b1                	j	1c0032e8 <S4_Linear_2x29x39x64+0x3d0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00328e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003292:	002047b7          	lui	a5,0x204
1c003296:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00329a:	22012683          	lw	a3,544(sp)
1c00329e:	40d7d7b3          	sra	a5,a5,a3
1c0032a2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0032a6:	cb85                	beqz	a5,1c0032d6 <S4_Linear_2x29x39x64+0x3be>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0032a8:	10000593          	li	a1,256
1c0032ac:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0032b0:	30061073          	csrw	mstatus,a2
1c0032b4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0032b8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0032bc:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0032c0:	30047673          	csrrci	a2,mstatus,8
1c0032c4:	40472783          	lw	a5,1028(a4)
1c0032c8:	22012683          	lw	a3,544(sp)
1c0032cc:	40d7d7b3          	sra	a5,a5,a3
1c0032d0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0032d4:	fff1                	bnez	a5,1c0032b0 <S4_Linear_2x29x39x64+0x398>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0032d6:	4785                	li	a5,1
1c0032d8:	00d796b3          	sll	a3,a5,a3
1c0032dc:	002047b7          	lui	a5,0x204
1c0032e0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0032e4:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48760), 2, 0, &DmaR_Evt5);
1c0032e8:	100007b7          	lui	a5,0x10000
1c0032ec:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c0032f0:	67b1                	lui	a5,0xc
1c0032f2:	e7878793          	addi	a5,a5,-392 # be78 <__rt_stack_size+0xb678>
1c0032f6:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0032f8:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0032fc:	00204737          	lui	a4,0x204
1c003300:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003304:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003308:	0789                	addi	a5,a5,2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00330a:	c157c7b3          	p.bset	a5,a5,0,21
1c00330e:	002045b7          	lui	a1,0x204
1c003312:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003316:	002047b7          	lui	a5,0x204
1c00331a:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00331e:	4127a023          	sw	s2,1024(a5)
        if (!merge) copy->id = id;
1c003322:	20e12023          	sw	a4,512(sp)
        copy->length = 0;
1c003326:	20012823          	sw	zero,528(sp)
  __builtin_pulp_spr_write(reg, val);
1c00332a:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00332e:	21012783          	lw	a5,528(sp)
1c003332:	c395                	beqz	a5,1c003356 <S4_Linear_2x29x39x64+0x43e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003334:	21812683          	lw	a3,536(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003338:	02000713          	li	a4,32
1c00333c:	002047b7          	lui	a5,0x204
1c003340:	caa5                	beqz	a3,1c0033b0 <S4_Linear_2x29x39x64+0x498>
1c003342:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003346:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00334a:	00e7a223          	sw	a4,4(a5)
1c00334e:	21812683          	lw	a3,536(sp)
1c003352:	fae5                	bnez	a3,1c003342 <S4_Linear_2x29x39x64+0x42a>
1c003354:	a8b1                	j	1c0033b0 <S4_Linear_2x29x39x64+0x498>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003356:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00335a:	002047b7          	lui	a5,0x204
1c00335e:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003362:	20012683          	lw	a3,512(sp)
1c003366:	40d7d7b3          	sra	a5,a5,a3
1c00336a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00336e:	cb85                	beqz	a5,1c00339e <S4_Linear_2x29x39x64+0x486>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003370:	10000593          	li	a1,256
1c003374:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003378:	30061073          	csrw	mstatus,a2
1c00337c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003380:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003384:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003388:	30047673          	csrrci	a2,mstatus,8
1c00338c:	40472783          	lw	a5,1028(a4)
1c003390:	20012683          	lw	a3,512(sp)
1c003394:	40d7d7b3          	sra	a5,a5,a3
1c003398:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00339c:	fff1                	bnez	a5,1c003378 <S4_Linear_2x29x39x64+0x460>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00339e:	4785                	li	a5,1
1c0033a0:	00d796b3          	sll	a3,a5,a3
1c0033a4:	002047b7          	lui	a5,0x204
1c0033a8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0033ac:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48764), 9, 0, &DmaR_Evt6);
1c0033b0:	100007b7          	lui	a5,0x10000
1c0033b4:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c0033b8:	67b1                	lui	a5,0xc
1c0033ba:	e7c78793          	addi	a5,a5,-388 # be7c <__rt_stack_size+0xb67c>
1c0033be:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0033c0:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0033c4:	00204737          	lui	a4,0x204
1c0033c8:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0033cc:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0033d0:	07a5                	addi	a5,a5,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0033d2:	c157c7b3          	p.bset	a5,a5,0,21
1c0033d6:	002045b7          	lui	a1,0x204
1c0033da:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0033de:	002047b7          	lui	a5,0x204
1c0033e2:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0033e6:	4097a023          	sw	s1,1024(a5)
        if (!merge) copy->id = id;
1c0033ea:	1ee12023          	sw	a4,480(sp)
        copy->length = 0;
1c0033ee:	1e012823          	sw	zero,496(sp)
  __builtin_pulp_spr_write(reg, val);
1c0033f2:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0033f6:	1f012783          	lw	a5,496(sp)
1c0033fa:	c395                	beqz	a5,1c00341e <S4_Linear_2x29x39x64+0x506>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0033fc:	1f812683          	lw	a3,504(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003400:	02000713          	li	a4,32
1c003404:	002047b7          	lui	a5,0x204
1c003408:	caa5                	beqz	a3,1c003478 <S4_Linear_2x29x39x64+0x560>
1c00340a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00340e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003412:	00e7a223          	sw	a4,4(a5)
1c003416:	1f812683          	lw	a3,504(sp)
1c00341a:	fae5                	bnez	a3,1c00340a <S4_Linear_2x29x39x64+0x4f2>
1c00341c:	a8b1                	j	1c003478 <S4_Linear_2x29x39x64+0x560>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00341e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003422:	002047b7          	lui	a5,0x204
1c003426:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00342a:	1e012683          	lw	a3,480(sp)
1c00342e:	40d7d7b3          	sra	a5,a5,a3
1c003432:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003436:	cb85                	beqz	a5,1c003466 <S4_Linear_2x29x39x64+0x54e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003438:	10000593          	li	a1,256
1c00343c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003440:	30061073          	csrw	mstatus,a2
1c003444:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003448:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00344c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003450:	30047673          	csrrci	a2,mstatus,8
1c003454:	40472783          	lw	a5,1028(a4)
1c003458:	1e012683          	lw	a3,480(sp)
1c00345c:	40d7d7b3          	sra	a5,a5,a3
1c003460:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003464:	fff1                	bnez	a5,1c003440 <S4_Linear_2x29x39x64+0x528>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003466:	4785                	li	a5,1
1c003468:	00d796b3          	sll	a3,a5,a3
1c00346c:	002047b7          	lui	a5,0x204
1c003470:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003474:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt6); /* Wait previous DMA read Infos */
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D0 */
		int D0Ind_Last = 1, D0Ind_NextLast = 1, D0Ind_NextNextLast = 1;
		/*====================== Call Kernel LOC_LOOP_PROLOG =========================*/
		KerArg0->NormBias = (unsigned char) (((char *)(model_L1_Memory+48764))[5]);
1c003478:	100007b7          	lui	a5,0x10000
1c00347c:	01c7a783          	lw	a5,28(a5) # 1000001c <model_L1_Memory>
1c003480:	6731                	lui	a4,0xc
1c003482:	97ba                	add	a5,a5,a4
1c003484:	e817c783          	lbu	a5,-383(a5)
1c003488:	06f10e23          	sb	a5,124(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00348c:	00204437          	lui	s0,0x204
1c003490:	0ff00793          	li	a5,255
1c003494:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003498:	20040413          	addi	s0,s0,512
1c00349c:	00f42023          	sw	a5,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0034a0:	00f42623          	sw	a5,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0034a4:	1c0057b7          	lui	a5,0x1c005
1c0034a8:	35478793          	addi	a5,a5,852 # 1c005354 <KerParSetBiasB32_SQ8>
1c0034ac:	00204737          	lui	a4,0x204
1c0034b0:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c0034b4:	10e8                	addi	a0,sp,108
1c0034b6:	002047b7          	lui	a5,0x204
1c0034ba:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c0034be:	697010ef          	jal	ra,1c005354 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0034c2:	01c46783          	p.elw	a5,28(s0)
	_NN_Filter=16244; _SN_Filter=16244;
1c0034c6:	6a11                	lui	s4,0x4
1c0034c8:	f74a0a13          	addi	s4,s4,-140 # 3f74 <__rt_stack_size+0x3774>
1c0034cc:	8bd2                	mv	s7,s4
	_NN_In=8122; _SN_In=8122;
1c0034ce:	6989                	lui	s3,0x2
1c0034d0:	fba98993          	addi	s3,s3,-70 # 1fba <__rt_stack_size+0x17ba>
1c0034d4:	8b4e                	mv	s6,s3
		AT_FORK(gap_ncore(), (void *) KerParSetBiasB32_SQ8, (void *) KerArg0);
		__CALL(KerParSetBiasB32_SQ8, KerArg0);
		for (T0Ind=0; T0Ind<9; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0034d6:	4401                	li	s0,0
			}
			/*============================= End Prepare Tiles ===================================*/
			/*================================= Read Tiles ======================================*/
			AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
			if (_SNN_In) {
				AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+_NN_In), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+19364+8124*((T0Ind_Total)%2)),
1c0034d8:	6c09                	lui	s8,0x2
1c0034da:	fbcc0d13          	addi	s10,s8,-68 # 1fbc <__rt_stack_size+0x17bc>
					_NN_Filter = _NN_Filter + (16244); _LNN_Filter = ((T0Ind_NextNextLast)?7408:8122); _SNN_Filter = (2*_LNN_Filter); 
1c0034de:	6d91                	lui	s11,0x4
1c0034e0:	8ad2                	mv	s5,s4
						_SNN_In, 0, &UchanHR1);
			}
			AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
			if (_SN_In) {
				AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+19364+8124*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+8124*((T0Ind_Total+1)%2)),
1c0034e2:	10000cb7          	lui	s9,0x10000
				AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Filter+_NN_Filter), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+35612+16244*((T0Ind_Total)%2)),
						_SNN_Filter, 0, &UchanHR2);
			}
			AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
			if (_SN_Filter) {
				AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+35612+16244*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+16248+16244*((T0Ind_Total+1)%2)),
1c0034e6:	f78d8d93          	addi	s11,s11,-136 # 3f78 <__rt_stack_size+0x3778>
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0034ea:	1c0057b7          	lui	a5,0x1c005
1c0034ee:	40878793          	addi	a5,a5,1032 # 1c005408 <KerParLinearLayer_SQ8>
1c0034f2:	c83e                	sw	a5,16(sp)
1c0034f4:	a629                	j	1c0037fe <S4_Linear_2x29x39x64+0x8e6>
				AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+_NN_In), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+19364+8124*((T0Ind_Total)%2)),
1c0034f6:	01f45713          	srli	a4,s0,0x1f
1c0034fa:	00e407b3          	add	a5,s0,a4
1c0034fe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003502:	8f99                	sub	a5,a5,a4
1c003504:	6615                	lui	a2,0x5
1c003506:	ba460613          	addi	a2,a2,-1116 # 4ba4 <__rt_stack_size+0x43a4>
1c00350a:	43a78633          	p.mac	a2,a5,s10
1c00350e:	1c00e7b7          	lui	a5,0x1c00e
1c003512:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
1c003516:	121c                	addi	a5,sp,288
1c003518:	4705                	li	a4,1
1c00351a:	86ca                	mv	a3,s2
1c00351c:	962e                	add	a2,a2,a1
1c00351e:	4552                	lw	a0,20(sp)
1c003520:	016505b3          	add	a1,a0,s6
1c003524:	1c00e537          	lui	a0,0x1c00e
1c003528:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c00352c:	140050ef          	jal	ra,1c00866c <pi_cl_ram_copy>
1c003530:	ae21                	j	1c003848 <S4_Linear_2x29x39x64+0x930>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003532:	30047673          	csrrci	a2,mstatus,8
1c003536:	002047b7          	lui	a5,0x204
1c00353a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00353e:	28012683          	lw	a3,640(sp)
1c003542:	40d7d7b3          	sra	a5,a5,a3
1c003546:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00354a:	cb85                	beqz	a5,1c00357a <S4_Linear_2x29x39x64+0x662>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00354c:	10000593          	li	a1,256
1c003550:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003554:	30061073          	csrw	mstatus,a2
1c003558:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00355c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003560:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003564:	30047673          	csrrci	a2,mstatus,8
1c003568:	40472783          	lw	a5,1028(a4)
1c00356c:	28012683          	lw	a3,640(sp)
1c003570:	40d7d7b3          	sra	a5,a5,a3
1c003574:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003578:	fff1                	bnez	a5,1c003554 <S4_Linear_2x29x39x64+0x63c>
1c00357a:	4785                	li	a5,1
1c00357c:	00d796b3          	sll	a3,a5,a3
1c003580:	002047b7          	lui	a5,0x204
1c003584:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003588:	30061073          	csrw	mstatus,a2
			if (_SN_In) {
1c00358c:	04099d63          	bnez	s3,1c0035e6 <S4_Linear_2x29x39x64+0x6ce>
1c003590:	11c14783          	lbu	a5,284(sp)
1c003594:	0ff7f793          	andi	a5,a5,255
1c003598:	ef99                	bnez	a5,1c0035b6 <S4_Linear_2x29x39x64+0x69e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00359a:	4689                	li	a3,2
1c00359c:	00204737          	lui	a4,0x204
1c0035a0:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0035a4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0035a8:	00d72223          	sw	a3,4(a4)
1c0035ac:	11c14783          	lbu	a5,284(sp)
1c0035b0:	0ff7f793          	andi	a5,a5,255
1c0035b4:	d7f5                	beqz	a5,1c0035a0 <S4_Linear_2x29x39x64+0x688>
			if (_SNN_Filter) {
1c0035b6:	12049f63          	bnez	s1,1c0036f4 <S4_Linear_2x29x39x64+0x7dc>
  if (copy->length == 0)
1c0035ba:	27012783          	lw	a5,624(sp)
1c0035be:	16078963          	beqz	a5,1c003730 <S4_Linear_2x29x39x64+0x818>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0035c2:	27812683          	lw	a3,632(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0035c6:	02000713          	li	a4,32
1c0035ca:	002047b7          	lui	a5,0x204
1c0035ce:	1a068e63          	beqz	a3,1c00378a <S4_Linear_2x29x39x64+0x872>
1c0035d2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0035d6:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0035da:	00e7a223          	sw	a4,4(a5)
1c0035de:	27812683          	lw	a3,632(sp)
1c0035e2:	fae5                	bnez	a3,1c0035d2 <S4_Linear_2x29x39x64+0x6ba>
1c0035e4:	a25d                	j	1c00378a <S4_Linear_2x29x39x64+0x872>
				AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+19364+8124*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+8124*((T0Ind_Total+1)%2)),
1c0035e6:	4632                	lw	a2,12(sp)
1c0035e8:	00160793          	addi	a5,a2,1
1c0035ec:	01f7d713          	srli	a4,a5,0x1f
1c0035f0:	97ba                	add	a5,a5,a4
1c0035f2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0035f6:	8f99                	sub	a5,a5,a4
1c0035f8:	03a787b3          	mul	a5,a5,s10
1c0035fc:	1c00e737          	lui	a4,0x1c00e
1c003600:	ea472683          	lw	a3,-348(a4) # 1c00dea4 <model_L2_Memory>
1c003604:	96be                	add	a3,a3,a5
1c003606:	6715                	lui	a4,0x5
1c003608:	ba470713          	addi	a4,a4,-1116 # 4ba4 <__rt_stack_size+0x43a4>
1c00360c:	9736                	add	a4,a4,a3
1c00360e:	01cca603          	lw	a2,28(s9) # 1000001c <model_L1_Memory>
1c003612:	97b2                	add	a5,a5,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003614:	300475f3          	csrrci	a1,mstatus,8
    if (size < max_len)
1c003618:	01099513          	slli	a0,s3,0x10
1c00361c:	04054163          	bltz	a0,1c00365e <S4_Linear_2x29x39x64+0x746>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003620:	00204637          	lui	a2,0x204
1c003624:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c003628:	000306b7          	lui	a3,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00362c:	de09a6b3          	p.insert	a3,s3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c003630:	c136c6b3          	p.bset	a3,a3,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003634:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003638:	00204537          	lui	a0,0x204
1c00363c:	40d52023          	sw	a3,1024(a0) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003640:	002046b7          	lui	a3,0x204
1c003644:	40f6a023          	sw	a5,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003648:	002047b7          	lui	a5,0x204
1c00364c:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
        if (!merge) copy->id = id;
1c003650:	28c12023          	sw	a2,640(sp)
        copy->length = 0;
1c003654:	28012823          	sw	zero,656(sp)
  __builtin_pulp_spr_write(reg, val);
1c003658:	30059073          	csrw	mstatus,a1
1c00365c:	bf15                	j	1c003590 <S4_Linear_2x29x39x64+0x678>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00365e:	6621                	lui	a2,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003660:	00330537          	lui	a0,0x330
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c003664:	28a12223          	sw	a0,644(sp)
    cmd->loc_addr = loc;
1c003668:	28f12a23          	sw	a5,660(sp)
    cmd->ext_addr = ext;
1c00366c:	28e12c23          	sw	a4,664(sp)
    cmd->size = len;
1c003670:	29312423          	sw	s3,648(sp)
    cmd->stride = stride;
1c003674:	28c12623          	sw	a2,652(sp)
    cmd->length = length;
1c003678:	28c12823          	sw	a2,656(sp)
    cmd->id = tid;
1c00367c:	567d                	li	a2,-1
1c00367e:	28c12023          	sw	a2,640(sp)
    cmd->next = NULL;
1c003682:	28012e23          	sw	zero,668(sp)
    if (__rt_dma_first_pending)
1c003686:	01402603          	lw	a2,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00368a:	ca09                	beqz	a2,1c00369c <S4_Linear_2x29x39x64+0x784>
        __rt_dma_last_pending->next = cmd;
1c00368c:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c003690:	0518                	addi	a4,sp,640
1c003692:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c003694:	051c                	addi	a5,sp,640
1c003696:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00369a:	bf7d                	j	1c003658 <S4_Linear_2x29x39x64+0x740>
    uint32_t iter_length = (len < length) ? len : length;
1c00369c:	6621                	lui	a2,0x8
1c00369e:	04c9d633          	p.minu	a2,s3,a2
        cmd->loc_addr += iter_length;
1c0036a2:	00c78533          	add	a0,a5,a2
1c0036a6:	28a12a23          	sw	a0,660(sp)
        cmd->ext_addr += stride;
1c0036aa:	6535                	lui	a0,0xd
1c0036ac:	ba450513          	addi	a0,a0,-1116 # cba4 <__rt_stack_size+0xc3a4>
1c0036b0:	96aa                	add	a3,a3,a0
1c0036b2:	28d12c23          	sw	a3,664(sp)
        cmd->size -= iter_length;
1c0036b6:	40c98633          	sub	a2,s3,a2
1c0036ba:	28c12423          	sw	a2,648(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0036be:	002046b7          	lui	a3,0x204
1c0036c2:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c0036c6:	28d12023          	sw	a3,640(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0036ca:	003386b7          	lui	a3,0x338
1c0036ce:	00204637          	lui	a2,0x204
1c0036d2:	40d62023          	sw	a3,1024(a2) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0036d6:	002046b7          	lui	a3,0x204
1c0036da:	40f6a023          	sw	a5,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0036de:	002047b7          	lui	a5,0x204
1c0036e2:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
        if (cmd->length != 0)
1c0036e6:	29012783          	lw	a5,656(sp)
1c0036ea:	d7cd                	beqz	a5,1c003694 <S4_Linear_2x29x39x64+0x77c>
            __rt_dma_first_pending = cmd;
1c0036ec:	051c                	addi	a5,sp,640
1c0036ee:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0036f2:	b74d                	j	1c003694 <S4_Linear_2x29x39x64+0x77c>
				AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Filter+_NN_Filter), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+35612+16244*((T0Ind_Total)%2)),
1c0036f4:	01f45713          	srli	a4,s0,0x1f
1c0036f8:	00e407b3          	add	a5,s0,a4
1c0036fc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003700:	8f99                	sub	a5,a5,a4
1c003702:	6625                	lui	a2,0x9
1c003704:	b1c60613          	addi	a2,a2,-1252 # 8b1c <__rt_stack_size+0x831c>
1c003708:	43578633          	p.mac	a2,a5,s5
1c00370c:	1c00e7b7          	lui	a5,0x1c00e
1c003710:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
1c003714:	011c                	addi	a5,sp,128
1c003716:	4705                	li	a4,1
1c003718:	86a6                	mv	a3,s1
1c00371a:	962e                	add	a2,a2,a1
1c00371c:	4562                	lw	a0,24(sp)
1c00371e:	017505b3          	add	a1,a0,s7
1c003722:	1c00e537          	lui	a0,0x1c00e
1c003726:	f9450513          	addi	a0,a0,-108 # 1c00df94 <HyperRam>
1c00372a:	743040ef          	jal	ra,1c00866c <pi_cl_ram_copy>
1c00372e:	b571                	j	1c0035ba <S4_Linear_2x29x39x64+0x6a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003730:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003734:	002047b7          	lui	a5,0x204
1c003738:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00373c:	26012683          	lw	a3,608(sp)
1c003740:	40d7d7b3          	sra	a5,a5,a3
1c003744:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003748:	cb85                	beqz	a5,1c003778 <S4_Linear_2x29x39x64+0x860>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00374a:	10000593          	li	a1,256
1c00374e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003752:	30061073          	csrw	mstatus,a2
1c003756:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00375a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00375e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003762:	30047673          	csrrci	a2,mstatus,8
1c003766:	40472783          	lw	a5,1028(a4)
1c00376a:	26012683          	lw	a3,608(sp)
1c00376e:	40d7d7b3          	sra	a5,a5,a3
1c003772:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003776:	fff1                	bnez	a5,1c003752 <S4_Linear_2x29x39x64+0x83a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003778:	4785                	li	a5,1
1c00377a:	00d796b3          	sll	a3,a5,a3
1c00377e:	002047b7          	lui	a5,0x204
1c003782:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003786:	30061073          	csrw	mstatus,a2
			if (_SN_Filter) {
1c00378a:	0e0a1563          	bnez	s4,1c003874 <S4_Linear_2x29x39x64+0x95c>
						_SN_Filter, 0, &DmaR_Evt2);
			}
			/*============================= End Read Tiles ======================================*/
			/*====================== Call Kernel LOC_LOOP =========================*/
			KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+8124*((T0Ind_Total)%2));
1c00378e:	01cca703          	lw	a4,28(s9)
1c003792:	01f45693          	srli	a3,s0,0x1f
1c003796:	00d407b3          	add	a5,s0,a3
1c00379a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00379e:	8f95                	sub	a5,a5,a3
1c0037a0:	86ba                	mv	a3,a4
1c0037a2:	43a786b3          	p.mac	a3,a5,s10
1c0037a6:	c4b6                	sw	a3,72(sp)
			KerArg1->Weights = (signed char * __restrict__) (model_L1_Memory+16248+16244*((T0Ind_Total)%2));
1c0037a8:	86ee                	mv	a3,s11
1c0037aa:	435786b3          	p.mac	a3,a5,s5
1c0037ae:	9736                	add	a4,a4,a3
1c0037b0:	c6ba                	sw	a4,76(sp)
			KerArg1->InDim = (unsigned short int) (T0Ind_Last?7408:8122);
1c0037b2:	26842063          	p.beqimm	s0,8,1c003a12 <S4_Linear_2x29x39x64+0xafa>
1c0037b6:	6789                	lui	a5,0x2
1c0037b8:	fba78793          	addi	a5,a5,-70 # 1fba <__rt_stack_size+0x17ba>
1c0037bc:	04f11c23          	sh	a5,88(sp)
			KerArg1->TotalInDim = (unsigned short int) (T0Ind_Last?7408:8122);
1c0037c0:	04f11d23          	sh	a5,90(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0037c4:	002049b7          	lui	s3,0x204
1c0037c8:	0ff00793          	li	a5,255
1c0037cc:	08f9a223          	sw	a5,132(s3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0037d0:	20098993          	addi	s3,s3,512
1c0037d4:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0037d8:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0037dc:	002047b7          	lui	a5,0x204
1c0037e0:	4742                	lw	a4,16(sp)
1c0037e2:	08e7a023          	sw	a4,128(a5) # 204080 <__L2+0x184080>
1c0037e6:	00a8                	addi	a0,sp,72
1c0037e8:	08a7a023          	sw	a0,128(a5)
1c0037ec:	41d010ef          	jal	ra,1c005408 <KerParLinearLayer_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0037f0:	01c9e783          	p.elw	a5,28(s3)
		for (T0Ind=0; T0Ind<9; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0037f4:	0405                	addi	s0,s0,1
1c0037f6:	89ca                	mv	s3,s2
1c0037f8:	8a26                	mv	s4,s1
1c0037fa:	26942063          	p.beqimm	s0,9,1c003a5a <S4_Linear_2x29x39x64+0xb42>
1c0037fe:	c622                	sw	s0,12(sp)
				if (!(T0Ind_NextLast)) {
1c003800:	ff940793          	addi	a5,s0,-7
1c003804:	4705                	li	a4,1
1c003806:	2ef77f63          	bleu	a5,a4,1c003b04 <S4_Linear_2x29x39x64+0xbec>
					_NN_In = _NN_In + (8122); _SNN_In = ((T0Ind_NextNextLast)?7408:8122); 
1c00380a:	fbac0793          	addi	a5,s8,-70
1c00380e:	9b3e                	add	s6,s6,a5
1c003810:	30642363          	p.beqimm	s0,6,1c003b16 <S4_Linear_2x29x39x64+0xbfe>
					_NN_Filter = _NN_Filter + (16244); _LNN_Filter = ((T0Ind_NextNextLast)?7408:8122); _SNN_Filter = (2*_LNN_Filter); 
1c003814:	9bd6                	add	s7,s7,s5
					_NN_In = _NN_In + (8122); _SNN_In = ((T0Ind_NextNextLast)?7408:8122); 
1c003816:	fbac0913          	addi	s2,s8,-70
					_NN_Filter = _NN_Filter + (16244); _LNN_Filter = ((T0Ind_NextNextLast)?7408:8122); _SNN_Filter = (2*_LNN_Filter); 
1c00381a:	84ca                	mv	s1,s2
1c00381c:	0486                	slli	s1,s1,0x1
1c00381e:	1bc14783          	lbu	a5,444(sp)
1c003822:	0ff7f793          	andi	a5,a5,255
1c003826:	ef99                	bnez	a5,1c003844 <S4_Linear_2x29x39x64+0x92c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003828:	4689                	li	a3,2
1c00382a:	00204737          	lui	a4,0x204
1c00382e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003832:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003836:	00d72223          	sw	a3,4(a4)
1c00383a:	1bc14783          	lbu	a5,444(sp)
1c00383e:	0ff7f793          	andi	a5,a5,255
1c003842:	d7f5                	beqz	a5,1c00382e <S4_Linear_2x29x39x64+0x916>
			if (_SNN_In) {
1c003844:	ca0919e3          	bnez	s2,1c0034f6 <S4_Linear_2x29x39x64+0x5de>
  if (copy->length == 0)
1c003848:	29012783          	lw	a5,656(sp)
1c00384c:	ce0783e3          	beqz	a5,1c003532 <S4_Linear_2x29x39x64+0x61a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003850:	29812683          	lw	a3,664(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003854:	02000713          	li	a4,32
1c003858:	002047b7          	lui	a5,0x204
1c00385c:	d20688e3          	beqz	a3,1c00358c <S4_Linear_2x29x39x64+0x674>
1c003860:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003864:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003868:	00e7a223          	sw	a4,4(a5)
1c00386c:	29812683          	lw	a3,664(sp)
1c003870:	fae5                	bnez	a3,1c003860 <S4_Linear_2x29x39x64+0x948>
1c003872:	bb29                	j	1c00358c <S4_Linear_2x29x39x64+0x674>
				AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+35612+16244*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+16248+16244*((T0Ind_Total+1)%2)),
1c003874:	4632                	lw	a2,12(sp)
1c003876:	00160793          	addi	a5,a2,1
1c00387a:	01f7d713          	srli	a4,a5,0x1f
1c00387e:	97ba                	add	a5,a5,a4
1c003880:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003884:	8f99                	sub	a5,a5,a4
1c003886:	035787b3          	mul	a5,a5,s5
1c00388a:	1c00e737          	lui	a4,0x1c00e
1c00388e:	ea472683          	lw	a3,-348(a4) # 1c00dea4 <model_L2_Memory>
1c003892:	96be                	add	a3,a3,a5
1c003894:	6725                	lui	a4,0x9
1c003896:	b1c70713          	addi	a4,a4,-1252 # 8b1c <__rt_stack_size+0x831c>
1c00389a:	9736                	add	a4,a4,a3
1c00389c:	97ee                	add	a5,a5,s11
1c00389e:	01cca603          	lw	a2,28(s9)
1c0038a2:	97b2                	add	a5,a5,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0038a4:	30047573          	csrrci	a0,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c0038a8:	100a55b3          	p.exthz	a1,s4
    if (size < max_len)
1c0038ac:	010a1613          	slli	a2,s4,0x10
1c0038b0:	02064c63          	bltz	a2,1c0038e8 <S4_Linear_2x29x39x64+0x9d0>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0038b4:	002046b7          	lui	a3,0x204
1c0038b8:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0038bc:	002b0637          	lui	a2,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0038c0:	8e4d                	or	a2,a2,a1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0038c2:	002045b7          	lui	a1,0x204
1c0038c6:	40c5a023          	sw	a2,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0038ca:	00204637          	lui	a2,0x204
1c0038ce:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0038d2:	002047b7          	lui	a5,0x204
1c0038d6:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
        if (!merge) copy->id = id;
1c0038da:	26d12023          	sw	a3,608(sp)
        copy->length = 0;
1c0038de:	26012823          	sw	zero,624(sp)
  __builtin_pulp_spr_write(reg, val);
1c0038e2:	30051073          	csrw	mstatus,a0
1c0038e6:	b565                	j	1c00378e <S4_Linear_2x29x39x64+0x876>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0038e8:	6621                	lui	a2,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0038ea:	00330837          	lui	a6,0x330
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c0038ee:	27012223          	sw	a6,612(sp)
    cmd->loc_addr = loc;
1c0038f2:	26f12a23          	sw	a5,628(sp)
    cmd->ext_addr = ext;
1c0038f6:	26e12c23          	sw	a4,632(sp)
    cmd->size = len;
1c0038fa:	26b12423          	sw	a1,616(sp)
    cmd->stride = stride;
1c0038fe:	26c12623          	sw	a2,620(sp)
    cmd->length = length;
1c003902:	26c12823          	sw	a2,624(sp)
    cmd->id = tid;
1c003906:	567d                	li	a2,-1
1c003908:	26c12023          	sw	a2,608(sp)
    cmd->next = NULL;
1c00390c:	26012e23          	sw	zero,636(sp)
    if (__rt_dma_first_pending)
1c003910:	01402603          	lw	a2,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c003914:	ca09                	beqz	a2,1c003926 <S4_Linear_2x29x39x64+0xa0e>
        __rt_dma_last_pending->next = cmd;
1c003916:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00391a:	1498                	addi	a4,sp,608
1c00391c:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c00391e:	149c                	addi	a5,sp,608
1c003920:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c003924:	bf7d                	j	1c0038e2 <S4_Linear_2x29x39x64+0x9ca>
    uint32_t iter_length = (len < length) ? len : length;
1c003926:	6621                	lui	a2,0x8
1c003928:	04c5d633          	p.minu	a2,a1,a2
        cmd->loc_addr += iter_length;
1c00392c:	00c78833          	add	a6,a5,a2
1c003930:	27012a23          	sw	a6,628(sp)
        cmd->ext_addr += stride;
1c003934:	6845                	lui	a6,0x11
1c003936:	b1c80813          	addi	a6,a6,-1252 # 10b1c <__L1Cl+0xb1c>
1c00393a:	96c2                	add	a3,a3,a6
1c00393c:	26d12c23          	sw	a3,632(sp)
        cmd->size -= iter_length;
1c003940:	40c586b3          	sub	a3,a1,a2
1c003944:	26d12423          	sw	a3,616(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003948:	002046b7          	lui	a3,0x204
1c00394c:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c003950:	26d12023          	sw	a3,608(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003954:	003386b7          	lui	a3,0x338
1c003958:	00204637          	lui	a2,0x204
1c00395c:	40d62023          	sw	a3,1024(a2) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003960:	002046b7          	lui	a3,0x204
1c003964:	40f6a023          	sw	a5,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003968:	002047b7          	lui	a5,0x204
1c00396c:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
        if (cmd->length != 0)
1c003970:	27012783          	lw	a5,624(sp)
1c003974:	d7cd                	beqz	a5,1c00391e <S4_Linear_2x29x39x64+0xa06>
            __rt_dma_first_pending = cmd;
1c003976:	149c                	addi	a5,sp,608
1c003978:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00397c:	b74d                	j	1c00391e <S4_Linear_2x29x39x64+0xa06>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00397e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003982:	002047b7          	lui	a5,0x204
1c003986:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00398a:	1c012683          	lw	a3,448(sp)
1c00398e:	40d7d7b3          	sra	a5,a5,a3
1c003992:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003996:	cb85                	beqz	a5,1c0039c6 <S4_Linear_2x29x39x64+0xaae>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003998:	10000593          	li	a1,256
1c00399c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0039a0:	30061073          	csrw	mstatus,a2
1c0039a4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0039a8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0039ac:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0039b0:	30047673          	csrrci	a2,mstatus,8
1c0039b4:	40472783          	lw	a5,1028(a4)
1c0039b8:	1c012683          	lw	a3,448(sp)
1c0039bc:	40d7d7b3          	sra	a5,a5,a3
1c0039c0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0039c4:	fff1                	bnez	a5,1c0039a0 <S4_Linear_2x29x39x64+0xa88>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0039c6:	4785                	li	a5,1
1c0039c8:	00d796b3          	sll	a3,a5,a3
1c0039cc:	002047b7          	lui	a5,0x204
1c0039d0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0039d4:	30061073          	csrw	mstatus,a2
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48752), 2, 1, &DmaW_Evt1);
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0039d8:	2dc12083          	lw	ra,732(sp)
1c0039dc:	2d812403          	lw	s0,728(sp)
1c0039e0:	2d412483          	lw	s1,724(sp)
1c0039e4:	2d012903          	lw	s2,720(sp)
1c0039e8:	2cc12983          	lw	s3,716(sp)
1c0039ec:	2c812a03          	lw	s4,712(sp)
1c0039f0:	2c412a83          	lw	s5,708(sp)
1c0039f4:	2c012b03          	lw	s6,704(sp)
1c0039f8:	2bc12b83          	lw	s7,700(sp)
1c0039fc:	2b812c03          	lw	s8,696(sp)
1c003a00:	2b412c83          	lw	s9,692(sp)
1c003a04:	2b012d03          	lw	s10,688(sp)
1c003a08:	2ac12d83          	lw	s11,684(sp)
1c003a0c:	2e010113          	addi	sp,sp,736
1c003a10:	8082                	ret
			KerArg1->InDim = (unsigned short int) (T0Ind_Last?7408:8122);
1c003a12:	6789                	lui	a5,0x2
1c003a14:	cf078793          	addi	a5,a5,-784 # 1cf0 <__rt_stack_size+0x14f0>
1c003a18:	04f11c23          	sh	a5,88(sp)
			KerArg1->TotalInDim = (unsigned short int) (T0Ind_Last?7408:8122);
1c003a1c:	04f11d23          	sh	a5,90(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003a20:	00204437          	lui	s0,0x204
1c003a24:	0ff00793          	li	a5,255
1c003a28:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003a2c:	20040413          	addi	s0,s0,512
1c003a30:	00f42023          	sw	a5,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003a34:	00f42623          	sw	a5,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003a38:	1c0057b7          	lui	a5,0x1c005
1c003a3c:	40878793          	addi	a5,a5,1032 # 1c005408 <KerParLinearLayer_SQ8>
1c003a40:	00204737          	lui	a4,0x204
1c003a44:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c003a48:	00a8                	addi	a0,sp,72
1c003a4a:	002047b7          	lui	a5,0x204
1c003a4e:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c003a52:	1b7010ef          	jal	ra,1c005408 <KerParLinearLayer_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003a56:	01c46783          	p.elw	a5,28(s0)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003a5a:	00204437          	lui	s0,0x204
1c003a5e:	0ff00793          	li	a5,255
1c003a62:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003a66:	20040493          	addi	s1,s0,512
1c003a6a:	00f4a023          	sw	a5,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003a6e:	00f4a623          	sw	a5,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003a72:	1c0057b7          	lui	a5,0x1c005
1c003a76:	20c78793          	addi	a5,a5,524 # 1c00520c <KerParReduct_CC_SQ8>
1c003a7a:	00204737          	lui	a4,0x204
1c003a7e:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c003a82:	1068                	addi	a0,sp,44
1c003a84:	002047b7          	lui	a5,0x204
1c003a88:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c003a8c:	780010ef          	jal	ra,1c00520c <KerParReduct_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003a90:	01c4e783          	p.elw	a5,28(s1)
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48752), 2, 1, &DmaW_Evt1);
1c003a94:	100007b7          	lui	a5,0x10000
1c003a98:	01c7a703          	lw	a4,28(a5) # 1000001c <model_L1_Memory>
1c003a9c:	67b1                	lui	a5,0xc
1c003a9e:	e7078793          	addi	a5,a5,-400 # be70 <__rt_stack_size+0xb670>
1c003aa2:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003aa4:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003aa8:	40042403          	lw	s0,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003aac:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003ab0:	0789                	addi	a5,a5,2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003ab2:	c157c7b3          	p.bset	a5,a5,0,21
1c003ab6:	00204637          	lui	a2,0x204
1c003aba:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003abe:	002047b7          	lui	a5,0x204
1c003ac2:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003ac6:	4572                	lw	a0,28(sp)
1c003ac8:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c003acc:	1c812023          	sw	s0,448(sp)
        copy->length = 0;
1c003ad0:	1c012823          	sw	zero,464(sp)
  __builtin_pulp_spr_write(reg, val);
1c003ad4:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c003ad8:	1d012783          	lw	a5,464(sp)
1c003adc:	ea0781e3          	beqz	a5,1c00397e <S4_Linear_2x29x39x64+0xa66>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003ae0:	1d812683          	lw	a3,472(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003ae4:	02000713          	li	a4,32
1c003ae8:	002047b7          	lui	a5,0x204
1c003aec:	ee0686e3          	beqz	a3,1c0039d8 <S4_Linear_2x29x39x64+0xac0>
1c003af0:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003af4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003af8:	00e7a223          	sw	a4,4(a5)
1c003afc:	1d812683          	lw	a3,472(sp)
1c003b00:	fae5                	bnez	a3,1c003af0 <S4_Linear_2x29x39x64+0xbd8>
1c003b02:	bdd9                	j	1c0039d8 <S4_Linear_2x29x39x64+0xac0>
1c003b04:	1bc14783          	lbu	a5,444(sp)
1c003b08:	0ff7f793          	andi	a5,a5,255
			_SNN_In = 0;
1c003b0c:	4901                	li	s2,0
			_SNN_Filter = 0;
1c003b0e:	4481                	li	s1,0
1c003b10:	d0078ce3          	beqz	a5,1c003828 <S4_Linear_2x29x39x64+0x910>
1c003b14:	bb15                	j	1c003848 <S4_Linear_2x29x39x64+0x930>
					_NN_Filter = _NN_Filter + (16244); _LNN_Filter = ((T0Ind_NextNextLast)?7408:8122); _SNN_Filter = (2*_LNN_Filter); 
1c003b16:	9bd6                	add	s7,s7,s5
					_NN_In = _NN_In + (8122); _SNN_In = ((T0Ind_NextNextLast)?7408:8122); 
1c003b18:	cf0c0913          	addi	s2,s8,-784
					_NN_Filter = _NN_Filter + (16244); _LNN_Filter = ((T0Ind_NextNextLast)?7408:8122); _SNN_Filter = (2*_LNN_Filter); 
1c003b1c:	84ca                	mv	s1,s2
1c003b1e:	b9fd                	j	1c00381c <S4_Linear_2x29x39x64+0x904>

1c003b20 <S5_SoftMax>:
void S5_SoftMax(
		signed char * __restrict__ In,
		short int * __restrict__ Out,
		signed char * __restrict__ Infos)

{
1c003b20:	7175                	addi	sp,sp,-144
1c003b22:	c706                	sw	ra,140(sp)
1c003b24:	c522                	sw	s0,136(sp)
1c003b26:	c326                	sw	s1,132(sp)
1c003b28:	c14a                	sw	s2,128(sp)
1c003b2a:	dece                	sw	s3,124(sp)
1c003b2c:	842e                	mv	s0,a1
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[9x1], 1]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (signed char *__restrict__) (model_L1_Memory+0);
1c003b2e:	100007b7          	lui	a5,0x10000
1c003b32:	01c7a703          	lw	a4,28(a5) # 1000001c <model_L1_Memory>
1c003b36:	c03a                	sw	a4,0(sp)
	KerArg0->N = (unsigned short int) (2);
1c003b38:	4789                	li	a5,2
1c003b3a:	00f11223          	sh	a5,4(sp)
	KerArg0->Out = (short int *__restrict__) (model_L1_Memory+4);
1c003b3e:	00470793          	addi	a5,a4,4
1c003b42:	c43e                	sw	a5,8(sp)
	KerArg0->Infos = (signed char *__restrict__) (model_L1_Memory+8);
1c003b44:	00870793          	addi	a5,a4,8
1c003b48:	c63e                	sw	a5,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003b4a:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003b4e:	002046b7          	lui	a3,0x204
1c003b52:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003b56:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003b5a:	0789                	addi	a5,a5,2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003b5c:	c157c7b3          	p.bset	a5,a5,0,21
1c003b60:	00204837          	lui	a6,0x204
1c003b64:	40f82023          	sw	a5,1024(a6) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003b68:	002047b7          	lui	a5,0x204
1c003b6c:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003b70:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c003b74:	c8b6                	sw	a3,80(sp)
        copy->length = 0;
1c003b76:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c003b78:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c003b7c:	5786                	lw	a5,96(sp)
1c003b7e:	c385                	beqz	a5,1c003b9e <S5_SoftMax+0x7e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003b80:	56a6                	lw	a3,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003b82:	02000713          	li	a4,32
1c003b86:	002047b7          	lui	a5,0x204
1c003b8a:	c6ad                	beqz	a3,1c003bf4 <S5_SoftMax+0xd4>
1c003b8c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003b90:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003b94:	00e7a223          	sw	a4,4(a5)
1c003b98:	56a6                	lw	a3,104(sp)
1c003b9a:	faed                	bnez	a3,1c003b8c <S5_SoftMax+0x6c>
1c003b9c:	a8a1                	j	1c003bf4 <S5_SoftMax+0xd4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003b9e:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003ba2:	002047b7          	lui	a5,0x204
1c003ba6:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003baa:	46c6                	lw	a3,80(sp)
1c003bac:	40d7d7b3          	sra	a5,a5,a3
1c003bb0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003bb4:	c79d                	beqz	a5,1c003be2 <S5_SoftMax+0xc2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003bb6:	10000513          	li	a0,256
1c003bba:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003bbe:	30059073          	csrw	mstatus,a1
1c003bc2:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003bc6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003bca:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003bce:	300475f3          	csrrci	a1,mstatus,8
1c003bd2:	40472783          	lw	a5,1028(a4)
1c003bd6:	46c6                	lw	a3,80(sp)
1c003bd8:	40d7d7b3          	sra	a5,a5,a3
1c003bdc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003be0:	fff9                	bnez	a5,1c003bbe <S5_SoftMax+0x9e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003be2:	4785                	li	a5,1
1c003be4:	00d796b3          	sll	a3,a5,a3
1c003be8:	002047b7          	lui	a5,0x204
1c003bec:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003bf0:	30059073          	csrw	mstatus,a1
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0), 2, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+8), 9, 0, &DmaR_Evt2);
1c003bf4:	100007b7          	lui	a5,0x10000
1c003bf8:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c003bfc:	06a1                	addi	a3,a3,8
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003bfe:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003c02:	00204737          	lui	a4,0x204
1c003c06:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003c0a:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003c0e:	07a5                	addi	a5,a5,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003c10:	c157c7b3          	p.bset	a5,a5,0,21
1c003c14:	00204537          	lui	a0,0x204
1c003c18:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003c1c:	002047b7          	lui	a5,0x204
1c003c20:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003c24:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c003c28:	d83a                	sw	a4,48(sp)
        copy->length = 0;
1c003c2a:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c003c2c:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c003c30:	4786                	lw	a5,64(sp)
1c003c32:	c385                	beqz	a5,1c003c52 <S5_SoftMax+0x132>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003c34:	46a6                	lw	a3,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003c36:	02000713          	li	a4,32
1c003c3a:	002047b7          	lui	a5,0x204
1c003c3e:	c6ad                	beqz	a3,1c003ca8 <S5_SoftMax+0x188>
1c003c40:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003c44:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003c48:	00e7a223          	sw	a4,4(a5)
1c003c4c:	46a6                	lw	a3,72(sp)
1c003c4e:	faed                	bnez	a3,1c003c40 <S5_SoftMax+0x120>
1c003c50:	a8a1                	j	1c003ca8 <S5_SoftMax+0x188>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003c52:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003c56:	002047b7          	lui	a5,0x204
1c003c5a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003c5e:	56c2                	lw	a3,48(sp)
1c003c60:	40d7d7b3          	sra	a5,a5,a3
1c003c64:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003c68:	c79d                	beqz	a5,1c003c96 <S5_SoftMax+0x176>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003c6a:	10000593          	li	a1,256
1c003c6e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003c72:	30061073          	csrw	mstatus,a2
1c003c76:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003c7a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003c7e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003c82:	30047673          	csrrci	a2,mstatus,8
1c003c86:	40472783          	lw	a5,1028(a4)
1c003c8a:	56c2                	lw	a3,48(sp)
1c003c8c:	40d7d7b3          	sra	a5,a5,a3
1c003c90:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003c94:	fff9                	bnez	a5,1c003c72 <S5_SoftMax+0x152>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003c96:	4785                	li	a5,1
1c003c98:	00d796b3          	sll	a3,a5,a3
1c003c9c:	002047b7          	lui	a5,0x204
1c003ca0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003ca4:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Infos */
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on Tile0 */
		int T0Ind_Last = 1;
		/*====================== Call Kernel LOC_LOOP =========================*/
		KerArg0->Norm = (unsigned short int) (((char *)(model_L1_Memory+8))[0]);
1c003ca8:	10000937          	lui	s2,0x10000
1c003cac:	01c90913          	addi	s2,s2,28 # 1000001c <model_L1_Memory>
1c003cb0:	00092783          	lw	a5,0(s2)
1c003cb4:	0087c783          	lbu	a5,8(a5)
1c003cb8:	00f11323          	sh	a5,6(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003cbc:	002044b7          	lui	s1,0x204
1c003cc0:	0ff00793          	li	a5,255
1c003cc4:	08f4a223          	sw	a5,132(s1) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003cc8:	20048993          	addi	s3,s1,512
1c003ccc:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003cd0:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003cd4:	1c0077b7          	lui	a5,0x1c007
1c003cd8:	e7a78793          	addi	a5,a5,-390 # 1c006e7a <KerParSoftMax_SQ8>
1c003cdc:	00204737          	lui	a4,0x204
1c003ce0:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c003ce4:	850a                	mv	a0,sp
1c003ce6:	002047b7          	lui	a5,0x204
1c003cea:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c003cee:	18c030ef          	jal	ra,1c006e7a <KerParSoftMax_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003cf2:	01c9e783          	p.elw	a5,28(s3)
		AT_FORK(gap_ncore(), (void *) KerParSoftMax_SQ8, (void *) KerArg0);
		__CALL(KerParSoftMax_SQ8, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+4), 4, 1, &DmaW_Evt1);
1c003cf6:	00092703          	lw	a4,0(s2)
1c003cfa:	0711                	addi	a4,a4,4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003cfc:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003d00:	4004a483          	lw	s1,1024(s1)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003d04:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003d08:	0791                	addi	a5,a5,4
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003d0a:	c157c7b3          	p.bset	a5,a5,0,21
1c003d0e:	00204637          	lui	a2,0x204
1c003d12:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003d16:	002047b7          	lui	a5,0x204
1c003d1a:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003d1e:	4087a023          	sw	s0,1024(a5)
        if (!merge) copy->id = id;
1c003d22:	c826                	sw	s1,16(sp)
        copy->length = 0;
1c003d24:	d002                	sw	zero,32(sp)
  __builtin_pulp_spr_write(reg, val);
1c003d26:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c003d2a:	5782                	lw	a5,32(sp)
1c003d2c:	c385                	beqz	a5,1c003d4c <S5_SoftMax+0x22c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003d2e:	56a2                	lw	a3,40(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003d30:	02000713          	li	a4,32
1c003d34:	002047b7          	lui	a5,0x204
1c003d38:	c6ad                	beqz	a3,1c003da2 <S5_SoftMax+0x282>
1c003d3a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d3e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003d42:	00e7a223          	sw	a4,4(a5)
1c003d46:	56a2                	lw	a3,40(sp)
1c003d48:	faed                	bnez	a3,1c003d3a <S5_SoftMax+0x21a>
1c003d4a:	a8a1                	j	1c003da2 <S5_SoftMax+0x282>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003d4c:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003d50:	002047b7          	lui	a5,0x204
1c003d54:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003d58:	46c2                	lw	a3,16(sp)
1c003d5a:	40d7d7b3          	sra	a5,a5,a3
1c003d5e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003d62:	c79d                	beqz	a5,1c003d90 <S5_SoftMax+0x270>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003d64:	10000593          	li	a1,256
1c003d68:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003d6c:	30061073          	csrw	mstatus,a2
1c003d70:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d74:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003d78:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003d7c:	30047673          	csrrci	a2,mstatus,8
1c003d80:	40472783          	lw	a5,1028(a4)
1c003d84:	46c2                	lw	a3,16(sp)
1c003d86:	40d7d7b3          	sra	a5,a5,a3
1c003d8a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003d8e:	fff9                	bnez	a5,1c003d6c <S5_SoftMax+0x24c>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003d90:	4785                	li	a5,1
1c003d92:	00d796b3          	sll	a3,a5,a3
1c003d96:	002047b7          	lui	a5,0x204
1c003d9a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003d9e:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c003da2:	40ba                	lw	ra,140(sp)
1c003da4:	442a                	lw	s0,136(sp)
1c003da6:	449a                	lw	s1,132(sp)
1c003da8:	490a                	lw	s2,128(sp)
1c003daa:	59f6                	lw	s3,124(sp)
1c003dac:	6149                	addi	sp,sp,144
1c003dae:	8082                	ret

1c003db0 <modelCNN_Construct>:
int modelCNN_Construct()

{
1c003db0:	7165                	addi	sp,sp,-400
1c003db2:	18112623          	sw	ra,396(sp)
1c003db6:	18812423          	sw	s0,392(sp)
1c003dba:	18912223          	sw	s1,388(sp)
1c003dbe:	19212023          	sw	s2,384(sp)
1c003dc2:	17312e23          	sw	s3,380(sp)
1c003dc6:	17412c23          	sw	s4,376(sp)
1c003dca:	17512a23          	sw	s5,372(sp)
1c003dce:	17612823          	sw	s6,368(sp)
1c003dd2:	17712623          	sw	s7,364(sp)
1c003dd6:	17812423          	sw	s8,360(sp)
1c003dda:	17912223          	sw	s9,356(sp)
1c003dde:	17a12023          	sw	s10,352(sp)
1c003de2:	15b12e23          	sw	s11,348(sp)
	AT_HYPERFLASH_FS_FC_EVENT UchanHF1;
	AT_HYPERRAM_FC_EVENT UchanHR2;
	AT_HYPERRAM_CONF_T HyperRamConf;
	AT_HYPERFLASH_FS_CONF_T HyperFlashConf;
	int Error;
	AT_HYPERRAM_CONF_INIT(&HyperRamConf, AT_MEM_L3_HRAM, 0);
1c003de6:	1068                	addi	a0,sp,44
1c003de8:	7d0040ef          	jal	ra,1c0085b8 <pi_hyperram_conf_init>
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c003dec:	0828                	addi	a0,sp,24
1c003dee:	400030ef          	jal	ra,1c0071ee <pi_fs_conf_init>
	AT_HYPERRAM_OPEN(&HyperRam, &HyperRamConf, &Error);
1c003df2:	1c00e437          	lui	s0,0x1c00e
1c003df6:	106c                	addi	a1,sp,44
1c003df8:	f9440513          	addi	a0,s0,-108 # 1c00df94 <HyperRam>
1c003dfc:	277050ef          	jal	ra,1c009872 <pi_open_from_conf>
1c003e00:	f9440513          	addi	a0,s0,-108
1c003e04:	05d040ef          	jal	ra,1c008660 <pi_ram_open>
	if (Error) return 1;
1c003e08:	4985                	li	s3,1
1c003e0a:	cd15                	beqz	a0,1c003e46 <modelCNN_Construct+0x96>
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	/* Moving S5_Infos, size 9 from HyperFlash at 164100 to (size 9) L2 at 19332..19340 */
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164100), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19332), 9, 0, &UchanHF1);
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	return 0;
}
1c003e0c:	854e                	mv	a0,s3
1c003e0e:	18c12083          	lw	ra,396(sp)
1c003e12:	18812403          	lw	s0,392(sp)
1c003e16:	18412483          	lw	s1,388(sp)
1c003e1a:	18012903          	lw	s2,384(sp)
1c003e1e:	17c12983          	lw	s3,380(sp)
1c003e22:	17812a03          	lw	s4,376(sp)
1c003e26:	17412a83          	lw	s5,372(sp)
1c003e2a:	17012b03          	lw	s6,368(sp)
1c003e2e:	16c12b83          	lw	s7,364(sp)
1c003e32:	16812c03          	lw	s8,360(sp)
1c003e36:	16412c83          	lw	s9,356(sp)
1c003e3a:	16012d03          	lw	s10,352(sp)
1c003e3e:	15c12d83          	lw	s11,348(sp)
1c003e42:	6159                	addi	sp,sp,400
1c003e44:	8082                	ret
typedef pi_cl_fs_req_t AT_HYPERFLASH_FS_CL_EVENT;

static inline void __at_hyperflash_fs_open(AT_HYPERFLASH_FS_T *file, int is_write, struct pi_fs_conf *conf, const char *filename, int *err)
{
  struct pi_hyperflash_conf hyperflash_conf;
  pi_hyperflash_conf_init(&hyperflash_conf);
1c003e46:	0048                	addi	a0,sp,4
1c003e48:	640040ef          	jal	ra,1c008488 <pi_hyperflash_conf_init>
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c003e4c:	1c00e437          	lui	s0,0x1c00e
1c003e50:	f8440413          	addi	s0,s0,-124 # 1c00df84 <_bss_start+0xc>
1c003e54:	004c                	addi	a1,sp,4
1c003e56:	8522                	mv	a0,s0
1c003e58:	21b050ef          	jal	ra,1c009872 <pi_open_from_conf>
  if (pi_flash_open(&file->hyperflash))
1c003e5c:	8522                	mv	a0,s0
1c003e5e:	350030ef          	jal	ra,1c0071ae <pi_flash_open>
1c003e62:	e905                	bnez	a0,1c003e92 <modelCNN_Construct+0xe2>
  {
    *err = -1;
    return;
  }
  conf->flash = &file->hyperflash;
1c003e64:	1c00e437          	lui	s0,0x1c00e
1c003e68:	f7840793          	addi	a5,s0,-136 # 1c00df78 <_bss_start>
1c003e6c:	07b1                	addi	a5,a5,12
1c003e6e:	ce3e                	sw	a5,28(sp)

  // Always force host FS for now in case we open for writing since readfs only supports reading
  if (is_write)
    conf->type = PI_FS_HOST;
  else
    conf->type = PI_FS_READ_ONLY;
1c003e70:	cc02                	sw	zero,24(sp)

#ifdef __FLASH_FS_SEMIHOST__
  conf->type = PI_FS_HOST;
#endif

  pi_open_from_conf(&file->fs, conf);
1c003e72:	082c                	addi	a1,sp,24
1c003e74:	f7840513          	addi	a0,s0,-136
1c003e78:	1fb050ef          	jal	ra,1c009872 <pi_open_from_conf>
  if (pi_fs_mount(&file->fs))
1c003e7c:	f7840513          	addi	a0,s0,-136
1c003e80:	380030ef          	jal	ra,1c007200 <pi_fs_mount>
1c003e84:	c909                	beqz	a0,1c003e96 <modelCNN_Construct+0xe6>


static inline void pi_flash_close(struct pi_device *device)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->close(device);
1c003e86:	f7840513          	addi	a0,s0,-136
1c003e8a:	455c                	lw	a5,12(a0)
1c003e8c:	43dc                	lw	a5,4(a5)
1c003e8e:	0531                	addi	a0,a0,12
1c003e90:	9782                	jalr	a5
	if (Error) return 1;
1c003e92:	4985                	li	s3,1
1c003e94:	bfa5                	j	1c003e0c <modelCNN_Construct+0x5c>
  {
    pi_flash_close(&file->hyperflash);
    *err = -1;
    return;
  }
  file->file = pi_fs_open(&file->fs, filename, is_write ? PI_FS_FLAGS_WRITE : 0);
1c003e96:	1c00e537          	lui	a0,0x1c00e
1c003e9a:	f7850413          	addi	s0,a0,-136 # 1c00df78 <_bss_start>
1c003e9e:	4601                	li	a2,0
1c003ea0:	1c00d5b7          	lui	a1,0x1c00d
1c003ea4:	74058593          	addi	a1,a1,1856 # 1c00d740 <__clz_tab+0x304>
1c003ea8:	f7850513          	addi	a0,a0,-136
1c003eac:	388030ef          	jal	ra,1c007234 <pi_fs_open>
1c003eb0:	cc08                	sw	a0,24(s0)
  if (file->file == NULL)
1c003eb2:	c515                	beqz	a0,1c003ede <modelCNN_Construct+0x12e>
}

static inline int pi_ram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
    pi_ram_api_t *api = (pi_ram_api_t *)device->api;
    return api->alloc(device, addr, size);
1c003eb4:	1c00e537          	lui	a0,0x1c00e
1c003eb8:	f9452783          	lw	a5,-108(a0) # 1c00df94 <HyperRam>
1c003ebc:	4b9c                	lw	a5,16(a5)
1c003ebe:	00037637          	lui	a2,0x37
1c003ec2:	a5060613          	addi	a2,a2,-1456 # 36a50 <__L1Cl+0x26a50>
1c003ec6:	004c                	addi	a1,sp,4
1c003ec8:	f9450513          	addi	a0,a0,-108
1c003ecc:	9782                	jalr	a5
1c003ece:	8a2a                	mv	s4,a0
	model_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 223824);
1c003ed0:	c11d                	beqz	a0,1c003ef6 <modelCNN_Construct+0x146>
1c003ed2:	1c00e7b7          	lui	a5,0x1c00e
1c003ed6:	2407a423          	sw	zero,584(a5) # 1c00e248 <model_L3_Memory>
	if (model_L3_Memory == 0) return 2;
1c003eda:	4989                	li	s3,2
1c003edc:	bf05                	j	1c003e0c <modelCNN_Construct+0x5c>
  {
    pi_fs_unmount(&file->fs);
1c003ede:	1c00e537          	lui	a0,0x1c00e
1c003ee2:	f7850513          	addi	a0,a0,-136 # 1c00df78 <_bss_start>
1c003ee6:	346030ef          	jal	ra,1c00722c <pi_fs_unmount>
1c003eea:	445c                	lw	a5,12(s0)
1c003eec:	43dc                	lw	a5,4(a5)
1c003eee:	00c40513          	addi	a0,s0,12
1c003ef2:	9782                	jalr	a5
1c003ef4:	bf79                	j	1c003e92 <modelCNN_Construct+0xe2>
	model_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 223824);
1c003ef6:	4792                	lw	a5,4(sp)
1c003ef8:	6a079b63          	bnez	a5,1c0045ae <modelCNN_Construct+0x7fe>
1c003efc:	1c00e537          	lui	a0,0x1c00e
1c003f00:	f9452783          	lw	a5,-108(a0) # 1c00df94 <HyperRam>
1c003f04:	4b9c                	lw	a5,16(a5)
1c003f06:	00037637          	lui	a2,0x37
1c003f0a:	a5060613          	addi	a2,a2,-1456 # 36a50 <__L1Cl+0x26a50>
1c003f0e:	004c                	addi	a1,sp,4
1c003f10:	f9450513          	addi	a0,a0,-108
1c003f14:	9782                	jalr	a5
1c003f16:	fd55                	bnez	a0,1c003ed2 <modelCNN_Construct+0x122>
1c003f18:	4792                	lw	a5,4(sp)
1c003f1a:	1c00e737          	lui	a4,0x1c00e
1c003f1e:	24f72423          	sw	a5,584(a4) # 1c00e248 <model_L3_Memory>
	if (model_L3_Memory == 0) return 2;
1c003f22:	4989                	li	s3,2
1c003f24:	ee0784e3          	beqz	a5,1c003e0c <modelCNN_Construct+0x5c>
	model_L2_Memory = (AT_L2_POINTER) AT_L2_ALLOC(0, 176198);
1c003f28:	0002b537          	lui	a0,0x2b
1c003f2c:	04650513          	addi	a0,a0,70 # 2b046 <__L1Cl+0x1b046>
1c003f30:	26e060ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c003f34:	1c00e7b7          	lui	a5,0x1c00e
1c003f38:	eaa7a223          	sw	a0,-348(a5) # 1c00dea4 <model_L2_Memory>
	if (model_L2_Memory == 0) return 3;
1c003f3c:	498d                	li	s3,3
1c003f3e:	ec0507e3          	beqz	a0,1c003e0c <modelCNN_Construct+0x5c>
	model_L1_Memory = (AT_L1_POINTER) AT_L1_ALLOC(0, 48776);
1c003f42:	65b1                	lui	a1,0xc
1c003f44:	e8858593          	addi	a1,a1,-376 # be88 <__rt_stack_size+0xb688>
1c003f48:	4501                	li	a0,0
1c003f4a:	242060ef          	jal	ra,1c00a18c <pi_cl_l1_malloc>
1c003f4e:	100007b7          	lui	a5,0x10000
1c003f52:	00a7ae23          	sw	a0,28(a5) # 1000001c <model_L1_Memory>
	if (model_L1_Memory == 0) return 4;
1c003f56:	64050963          	beqz	a0,1c0045a8 <modelCNN_Construct+0x7f8>
		int Size = 144768, Base = 0;
1c003f5a:	000239b7          	lui	s3,0x23
1c003f5e:	58098993          	addi	s3,s3,1408 # 23580 <__L1Cl+0x13580>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 0+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c003f62:	1c00ec37          	lui	s8,0x1c00e
1c003f66:	f78c0c13          	addi	s8,s8,-136 # 1c00df78 <_bss_start>
1c003f6a:	1c00ed37          	lui	s10,0x1c00e
1c003f6e:	1c00ebb7          	lui	s7,0x1c00e
  task->id = PI_TASK_NONE_ID;
1c003f72:	4405                	li	s0,1
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L3_Memory + 0+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c003f74:	1c00ecb7          	lui	s9,0x1c00e
    api->copy_async(device, pi_ram_addr, data, size, ext2loc, task);
1c003f78:	1c00eb37          	lui	s6,0x1c00e
			int Chunk = Min(Size, 1024);
1c003f7c:	40000793          	li	a5,1024
1c003f80:	04f9cab3          	p.min	s5,s3,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 0+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c003f84:	8952                	mv	s2,s4
1c003f86:	1fcd2583          	lw	a1,508(s10) # 1c00e1fc <model_L3_Flash>
1c003f8a:	d5a2                	sw	s0,232(sp)
  task->arg[0] = (uint32_t)0;
1c003f8c:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c003f8e:	dda2                	sw	s0,248(sp)

void __rt_event_sched_init();

static inline void __rt_task_init(pi_task_t *task)
{
  task->done = 0;
1c003f90:	0e010223          	sb	zero,228(sp)
1c003f94:	099c                	addi	a5,sp,208
1c003f96:	8722                	mv	a4,s0
1c003f98:	86d6                	mv	a3,s5
1c003f9a:	ea4ba603          	lw	a2,-348(s7) # 1c00dea4 <model_L2_Memory>
1c003f9e:	95d2                	add	a1,a1,s4
1c003fa0:	018c2503          	lw	a0,24(s8)
1c003fa4:	2fc030ef          	jal	ra,1c0072a0 <pi_fs_copy_async>

#endif

static inline void pi_task_wait_on(struct pi_task *task)
{
  while(!task->done)
1c003fa8:	0e410783          	lb	a5,228(sp)
1c003fac:	ef89                	bnez	a5,1c003fc6 <modelCNN_Construct+0x216>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003fae:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c003fb2:	85a2                	mv	a1,s0
1c003fb4:	01c00513          	li	a0,28
1c003fb8:	73b050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c003fbc:	300d9073          	csrw	mstatus,s11
1c003fc0:	0e410783          	lb	a5,228(sp)
1c003fc4:	d7ed                	beqz	a5,1c003fae <modelCNN_Construct+0x1fe>
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L3_Memory + 0+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c003fc6:	248ca583          	lw	a1,584(s9) # 1c00e248 <model_L3_Memory>
  task->id = PI_TASK_NONE_ID;
1c003fca:	d4a2                	sw	s0,104(sp)
  task->arg[0] = (uint32_t)0;
1c003fcc:	ca82                	sw	zero,84(sp)
  task->implem.keep = 1;
1c003fce:	dca2                	sw	s0,120(sp)
  task->done = 0;
1c003fd0:	06010223          	sb	zero,100(sp)
1c003fd4:	f94b2783          	lw	a5,-108(s6) # 1c00df94 <HyperRam>
1c003fd8:	0087a803          	lw	a6,8(a5)
1c003fdc:	089c                	addi	a5,sp,80
1c003fde:	4701                	li	a4,0
1c003fe0:	86d6                	mv	a3,s5
1c003fe2:	ea4ba603          	lw	a2,-348(s7)
1c003fe6:	95ca                	add	a1,a1,s2
1c003fe8:	f94b0513          	addi	a0,s6,-108
1c003fec:	9802                	jalr	a6
1c003fee:	06410783          	lb	a5,100(sp)
1c003ff2:	ef89                	bnez	a5,1c00400c <modelCNN_Construct+0x25c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ff4:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c003ff8:	85a2                	mv	a1,s0
1c003ffa:	01c00513          	li	a0,28
1c003ffe:	6f5050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004002:	30091073          	csrw	mstatus,s2
1c004006:	06410783          	lb	a5,100(sp)
1c00400a:	d7ed                	beqz	a5,1c003ff4 <modelCNN_Construct+0x244>
			Base += Chunk;
1c00400c:	9a56                	add	s4,s4,s5
			Size -= Chunk;
1c00400e:	415989b3          	sub	s3,s3,s5
		while (Size) {
1c004012:	f60995e3          	bnez	s3,1c003f7c <modelCNN_Construct+0x1cc>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164064), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19296), 9, 0, &UchanHF1);
1c004016:	1c00e7b7          	lui	a5,0x1c00e
1c00401a:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c00401e:	1c00e7b7          	lui	a5,0x1c00e
1c004022:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c004026:	1c00e7b7          	lui	a5,0x1c00e
1c00402a:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00402e:	4785                	li	a5,1
1c004030:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c004032:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c004034:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c004036:	0e010223          	sb	zero,228(sp)
1c00403a:	099c                	addi	a5,sp,208
1c00403c:	4705                	li	a4,1
1c00403e:	46a5                	li	a3,9
1c004040:	6615                	lui	a2,0x5
1c004042:	b6060613          	addi	a2,a2,-1184 # 4b60 <__rt_stack_size+0x4360>
1c004046:	962e                	add	a2,a2,a1
1c004048:	000285b7          	lui	a1,0x28
1c00404c:	0e058593          	addi	a1,a1,224 # 280e0 <__L1Cl+0x180e0>
1c004050:	95c2                	add	a1,a1,a6
1c004052:	24e030ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c004056:	0e410783          	lb	a5,228(sp)
1c00405a:	ef89                	bnez	a5,1c004074 <modelCNN_Construct+0x2c4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00405c:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004060:	4585                	li	a1,1
1c004062:	01c00513          	li	a0,28
1c004066:	68d050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00406a:	30041073          	csrw	mstatus,s0
1c00406e:	0e410783          	lb	a5,228(sp)
1c004072:	d7ed                	beqz	a5,1c00405c <modelCNN_Construct+0x2ac>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 163200), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 18432), 288, 0, &UchanHF1);
1c004074:	1c00e7b7          	lui	a5,0x1c00e
1c004078:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c00407c:	1c00e7b7          	lui	a5,0x1c00e
1c004080:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c004084:	1c00e7b7          	lui	a5,0x1c00e
1c004088:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00408c:	4785                	li	a5,1
1c00408e:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c004090:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c004092:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c004094:	0e010223          	sb	zero,228(sp)
1c004098:	099c                	addi	a5,sp,208
1c00409a:	4705                	li	a4,1
1c00409c:	12000693          	li	a3,288
1c0040a0:	6615                	lui	a2,0x5
1c0040a2:	80060613          	addi	a2,a2,-2048 # 4800 <__rt_stack_size+0x4000>
1c0040a6:	962e                	add	a2,a2,a1
1c0040a8:	000285b7          	lui	a1,0x28
1c0040ac:	d8058593          	addi	a1,a1,-640 # 27d80 <__L1Cl+0x17d80>
1c0040b0:	95c2                	add	a1,a1,a6
1c0040b2:	1ee030ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c0040b6:	0e410783          	lb	a5,228(sp)
1c0040ba:	ef89                	bnez	a5,1c0040d4 <modelCNN_Construct+0x324>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0040bc:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0040c0:	4585                	li	a1,1
1c0040c2:	01c00513          	li	a0,28
1c0040c6:	62d050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0040ca:	30041073          	csrw	mstatus,s0
1c0040ce:	0e410783          	lb	a5,228(sp)
1c0040d2:	d7ed                	beqz	a5,1c0040bc <modelCNN_Construct+0x30c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 163744), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 18976), 128, 0, &UchanHF1);
1c0040d4:	1c00e7b7          	lui	a5,0x1c00e
1c0040d8:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c0040dc:	1c00e7b7          	lui	a5,0x1c00e
1c0040e0:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c0040e4:	1c00e7b7          	lui	a5,0x1c00e
1c0040e8:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0040ec:	4785                	li	a5,1
1c0040ee:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c0040f0:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c0040f2:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c0040f4:	0e010223          	sb	zero,228(sp)
1c0040f8:	099c                	addi	a5,sp,208
1c0040fa:	4705                	li	a4,1
1c0040fc:	08000693          	li	a3,128
1c004100:	6615                	lui	a2,0x5
1c004102:	a2060613          	addi	a2,a2,-1504 # 4a20 <__rt_stack_size+0x4220>
1c004106:	962e                	add	a2,a2,a1
1c004108:	000285b7          	lui	a1,0x28
1c00410c:	fa058593          	addi	a1,a1,-96 # 27fa0 <__L1Cl+0x17fa0>
1c004110:	95c2                	add	a1,a1,a6
1c004112:	18e030ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c004116:	0e410783          	lb	a5,228(sp)
1c00411a:	ef89                	bnez	a5,1c004134 <modelCNN_Construct+0x384>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00411c:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004120:	4585                	li	a1,1
1c004122:	01c00513          	li	a0,28
1c004126:	5cd050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00412a:	30041073          	csrw	mstatus,s0
1c00412e:	0e410783          	lb	a5,228(sp)
1c004132:	d7ed                	beqz	a5,1c00411c <modelCNN_Construct+0x36c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164000), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19232), 32, 0, &UchanHF1);
1c004134:	1c00e7b7          	lui	a5,0x1c00e
1c004138:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c00413c:	1c00e7b7          	lui	a5,0x1c00e
1c004140:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c004144:	1c00e7b7          	lui	a5,0x1c00e
1c004148:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00414c:	4785                	li	a5,1
1c00414e:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c004150:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c004152:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c004154:	0e010223          	sb	zero,228(sp)
1c004158:	099c                	addi	a5,sp,208
1c00415a:	4705                	li	a4,1
1c00415c:	02000693          	li	a3,32
1c004160:	6615                	lui	a2,0x5
1c004162:	b2060613          	addi	a2,a2,-1248 # 4b20 <__rt_stack_size+0x4320>
1c004166:	962e                	add	a2,a2,a1
1c004168:	000285b7          	lui	a1,0x28
1c00416c:	0a058593          	addi	a1,a1,160 # 280a0 <__L1Cl+0x180a0>
1c004170:	95c2                	add	a1,a1,a6
1c004172:	12e030ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c004176:	0e410783          	lb	a5,228(sp)
1c00417a:	ef89                	bnez	a5,1c004194 <modelCNN_Construct+0x3e4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00417c:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004180:	4585                	li	a1,1
1c004182:	01c00513          	li	a0,28
1c004186:	56d050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00418a:	30041073          	csrw	mstatus,s0
1c00418e:	0e410783          	lb	a5,228(sp)
1c004192:	d7ed                	beqz	a5,1c00417c <modelCNN_Construct+0x3cc>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164032), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19264), 32, 0, &UchanHF1);
1c004194:	1c00e7b7          	lui	a5,0x1c00e
1c004198:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c00419c:	1c00e7b7          	lui	a5,0x1c00e
1c0041a0:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c0041a4:	1c00e7b7          	lui	a5,0x1c00e
1c0041a8:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0041ac:	4785                	li	a5,1
1c0041ae:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c0041b0:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c0041b2:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c0041b4:	0e010223          	sb	zero,228(sp)
1c0041b8:	099c                	addi	a5,sp,208
1c0041ba:	4705                	li	a4,1
1c0041bc:	02000693          	li	a3,32
1c0041c0:	6615                	lui	a2,0x5
1c0041c2:	b4060613          	addi	a2,a2,-1216 # 4b40 <__rt_stack_size+0x4340>
1c0041c6:	962e                	add	a2,a2,a1
1c0041c8:	000285b7          	lui	a1,0x28
1c0041cc:	0c058593          	addi	a1,a1,192 # 280c0 <__L1Cl+0x180c0>
1c0041d0:	95c2                	add	a1,a1,a6
1c0041d2:	0ce030ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c0041d6:	0e410783          	lb	a5,228(sp)
1c0041da:	ef89                	bnez	a5,1c0041f4 <modelCNN_Construct+0x444>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0041dc:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0041e0:	4585                	li	a1,1
1c0041e2:	01c00513          	li	a0,28
1c0041e6:	50d050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0041ea:	30041073          	csrw	mstatus,s0
1c0041ee:	0e410783          	lb	a5,228(sp)
1c0041f2:	d7ed                	beqz	a5,1c0041dc <modelCNN_Construct+0x42c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164076), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19308), 9, 0, &UchanHF1);
1c0041f4:	1c00e7b7          	lui	a5,0x1c00e
1c0041f8:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c0041fc:	1c00e7b7          	lui	a5,0x1c00e
1c004200:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c004204:	1c00e7b7          	lui	a5,0x1c00e
1c004208:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00420c:	4785                	li	a5,1
1c00420e:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c004210:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c004212:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c004214:	0e010223          	sb	zero,228(sp)
1c004218:	099c                	addi	a5,sp,208
1c00421a:	4705                	li	a4,1
1c00421c:	46a5                	li	a3,9
1c00421e:	6615                	lui	a2,0x5
1c004220:	b6c60613          	addi	a2,a2,-1172 # 4b6c <__rt_stack_size+0x436c>
1c004224:	962e                	add	a2,a2,a1
1c004226:	000285b7          	lui	a1,0x28
1c00422a:	0ec58593          	addi	a1,a1,236 # 280ec <__L1Cl+0x180ec>
1c00422e:	95c2                	add	a1,a1,a6
1c004230:	070030ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c004234:	0e410783          	lb	a5,228(sp)
1c004238:	ef89                	bnez	a5,1c004252 <modelCNN_Construct+0x4a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00423a:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00423e:	4585                	li	a1,1
1c004240:	01c00513          	li	a0,28
1c004244:	4af050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004248:	30041073          	csrw	mstatus,s0
1c00424c:	0e410783          	lb	a5,228(sp)
1c004250:	d7ed                	beqz	a5,1c00423a <modelCNN_Construct+0x48a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 144768), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 0), 18432, 0, &UchanHF1);
1c004252:	1c00e7b7          	lui	a5,0x1c00e
1c004256:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c00425a:	1c00e7b7          	lui	a5,0x1c00e
1c00425e:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c004262:	1c00e7b7          	lui	a5,0x1c00e
1c004266:	ea47a603          	lw	a2,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00426a:	4785                	li	a5,1
1c00426c:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c00426e:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c004270:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c004272:	0e010223          	sb	zero,228(sp)
1c004276:	099c                	addi	a5,sp,208
1c004278:	4705                	li	a4,1
1c00427a:	6695                	lui	a3,0x5
1c00427c:	80068693          	addi	a3,a3,-2048 # 4800 <__rt_stack_size+0x4000>
1c004280:	000235b7          	lui	a1,0x23
1c004284:	58058593          	addi	a1,a1,1408 # 23580 <__L1Cl+0x13580>
1c004288:	95c2                	add	a1,a1,a6
1c00428a:	016030ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c00428e:	0e410783          	lb	a5,228(sp)
1c004292:	ef89                	bnez	a5,1c0042ac <modelCNN_Construct+0x4fc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004294:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004298:	4585                	li	a1,1
1c00429a:	01c00513          	li	a0,28
1c00429e:	455050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0042a2:	30041073          	csrw	mstatus,s0
1c0042a6:	0e410783          	lb	a5,228(sp)
1c0042aa:	d7ed                	beqz	a5,1c004294 <modelCNN_Construct+0x4e4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 163488), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 18720), 256, 0, &UchanHF1);
1c0042ac:	1c00e7b7          	lui	a5,0x1c00e
1c0042b0:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c0042b4:	1c00e7b7          	lui	a5,0x1c00e
1c0042b8:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c0042bc:	1c00e7b7          	lui	a5,0x1c00e
1c0042c0:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0042c4:	4785                	li	a5,1
1c0042c6:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c0042c8:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c0042ca:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c0042cc:	0e010223          	sb	zero,228(sp)
1c0042d0:	099c                	addi	a5,sp,208
1c0042d2:	4705                	li	a4,1
1c0042d4:	10000693          	li	a3,256
1c0042d8:	6615                	lui	a2,0x5
1c0042da:	92060613          	addi	a2,a2,-1760 # 4920 <__rt_stack_size+0x4120>
1c0042de:	962e                	add	a2,a2,a1
1c0042e0:	000285b7          	lui	a1,0x28
1c0042e4:	ea058593          	addi	a1,a1,-352 # 27ea0 <__L1Cl+0x17ea0>
1c0042e8:	95c2                	add	a1,a1,a6
1c0042ea:	7b7020ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c0042ee:	0e410783          	lb	a5,228(sp)
1c0042f2:	ef89                	bnez	a5,1c00430c <modelCNN_Construct+0x55c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0042f4:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0042f8:	4585                	li	a1,1
1c0042fa:	01c00513          	li	a0,28
1c0042fe:	3f5050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004302:	30041073          	csrw	mstatus,s0
1c004306:	0e410783          	lb	a5,228(sp)
1c00430a:	d7ed                	beqz	a5,1c0042f4 <modelCNN_Construct+0x544>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 163872), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19104), 64, 0, &UchanHF1);
1c00430c:	1c00e7b7          	lui	a5,0x1c00e
1c004310:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c004314:	1c00e7b7          	lui	a5,0x1c00e
1c004318:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c00431c:	1c00e7b7          	lui	a5,0x1c00e
1c004320:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c004324:	4785                	li	a5,1
1c004326:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c004328:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c00432a:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c00432c:	0e010223          	sb	zero,228(sp)
1c004330:	099c                	addi	a5,sp,208
1c004332:	4705                	li	a4,1
1c004334:	04000693          	li	a3,64
1c004338:	6615                	lui	a2,0x5
1c00433a:	aa060613          	addi	a2,a2,-1376 # 4aa0 <__rt_stack_size+0x42a0>
1c00433e:	962e                	add	a2,a2,a1
1c004340:	000285b7          	lui	a1,0x28
1c004344:	02058593          	addi	a1,a1,32 # 28020 <__L1Cl+0x18020>
1c004348:	95c2                	add	a1,a1,a6
1c00434a:	757020ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c00434e:	0e410783          	lb	a5,228(sp)
1c004352:	ef89                	bnez	a5,1c00436c <modelCNN_Construct+0x5bc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004354:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004358:	4585                	li	a1,1
1c00435a:	01c00513          	li	a0,28
1c00435e:	395050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004362:	30041073          	csrw	mstatus,s0
1c004366:	0e410783          	lb	a5,228(sp)
1c00436a:	d7ed                	beqz	a5,1c004354 <modelCNN_Construct+0x5a4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 163936), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19168), 64, 0, &UchanHF1);
1c00436c:	1c00e7b7          	lui	a5,0x1c00e
1c004370:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c004374:	1c00e7b7          	lui	a5,0x1c00e
1c004378:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c00437c:	1c00e7b7          	lui	a5,0x1c00e
1c004380:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c004384:	4785                	li	a5,1
1c004386:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c004388:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c00438a:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c00438c:	0e010223          	sb	zero,228(sp)
1c004390:	099c                	addi	a5,sp,208
1c004392:	4705                	li	a4,1
1c004394:	04000693          	li	a3,64
1c004398:	6615                	lui	a2,0x5
1c00439a:	ae060613          	addi	a2,a2,-1312 # 4ae0 <__rt_stack_size+0x42e0>
1c00439e:	962e                	add	a2,a2,a1
1c0043a0:	000285b7          	lui	a1,0x28
1c0043a4:	06058593          	addi	a1,a1,96 # 28060 <__L1Cl+0x18060>
1c0043a8:	95c2                	add	a1,a1,a6
1c0043aa:	6f7020ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c0043ae:	0e410783          	lb	a5,228(sp)
1c0043b2:	ef89                	bnez	a5,1c0043cc <modelCNN_Construct+0x61c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0043b4:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0043b8:	4585                	li	a1,1
1c0043ba:	01c00513          	li	a0,28
1c0043be:	335050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0043c2:	30041073          	csrw	mstatus,s0
1c0043c6:	0e410783          	lb	a5,228(sp)
1c0043ca:	d7ed                	beqz	a5,1c0043b4 <modelCNN_Construct+0x604>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164088), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19320), 9, 0, &UchanHF1);
1c0043cc:	1c00e7b7          	lui	a5,0x1c00e
1c0043d0:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c0043d4:	1c00e7b7          	lui	a5,0x1c00e
1c0043d8:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c0043dc:	1c00e7b7          	lui	a5,0x1c00e
1c0043e0:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0043e4:	4785                	li	a5,1
1c0043e6:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c0043e8:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c0043ea:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c0043ec:	0e010223          	sb	zero,228(sp)
1c0043f0:	099c                	addi	a5,sp,208
1c0043f2:	4705                	li	a4,1
1c0043f4:	46a5                	li	a3,9
1c0043f6:	6615                	lui	a2,0x5
1c0043f8:	b7860613          	addi	a2,a2,-1160 # 4b78 <__rt_stack_size+0x4378>
1c0043fc:	962e                	add	a2,a2,a1
1c0043fe:	000285b7          	lui	a1,0x28
1c004402:	0f858593          	addi	a1,a1,248 # 280f8 <__L1Cl+0x180f8>
1c004406:	95c2                	add	a1,a1,a6
1c004408:	699020ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c00440c:	0e410783          	lb	a5,228(sp)
1c004410:	ef89                	bnez	a5,1c00442a <modelCNN_Construct+0x67a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004412:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004416:	4585                	li	a1,1
1c004418:	01c00513          	li	a0,28
1c00441c:	2d7050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004420:	30041073          	csrw	mstatus,s0
1c004424:	0e410783          	lb	a5,228(sp)
1c004428:	d7ed                	beqz	a5,1c004412 <modelCNN_Construct+0x662>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164112), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19344), 8, 0, &UchanHF1);
1c00442a:	1c00e7b7          	lui	a5,0x1c00e
1c00442e:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c004432:	1c00e7b7          	lui	a5,0x1c00e
1c004436:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c00443a:	1c00e7b7          	lui	a5,0x1c00e
1c00443e:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c004442:	4785                	li	a5,1
1c004444:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c004446:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c004448:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c00444a:	0e010223          	sb	zero,228(sp)
1c00444e:	099c                	addi	a5,sp,208
1c004450:	4705                	li	a4,1
1c004452:	46a1                	li	a3,8
1c004454:	6615                	lui	a2,0x5
1c004456:	b9060613          	addi	a2,a2,-1136 # 4b90 <__rt_stack_size+0x4390>
1c00445a:	962e                	add	a2,a2,a1
1c00445c:	000285b7          	lui	a1,0x28
1c004460:	11058593          	addi	a1,a1,272 # 28110 <__L1Cl+0x18110>
1c004464:	95c2                	add	a1,a1,a6
1c004466:	63b020ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c00446a:	0e410783          	lb	a5,228(sp)
1c00446e:	ef89                	bnez	a5,1c004488 <modelCNN_Construct+0x6d8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004470:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004474:	4585                	li	a1,1
1c004476:	01c00513          	li	a0,28
1c00447a:	279050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00447e:	30041073          	csrw	mstatus,s0
1c004482:	0e410783          	lb	a5,228(sp)
1c004486:	d7ed                	beqz	a5,1c004470 <modelCNN_Construct+0x6c0>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164120), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19352), 2, 0, &UchanHF1);
1c004488:	1c00e7b7          	lui	a5,0x1c00e
1c00448c:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c004490:	1c00e7b7          	lui	a5,0x1c00e
1c004494:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c004498:	1c00e7b7          	lui	a5,0x1c00e
1c00449c:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0044a0:	4785                	li	a5,1
1c0044a2:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c0044a4:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c0044a6:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c0044a8:	0e010223          	sb	zero,228(sp)
1c0044ac:	099c                	addi	a5,sp,208
1c0044ae:	4705                	li	a4,1
1c0044b0:	4689                	li	a3,2
1c0044b2:	6615                	lui	a2,0x5
1c0044b4:	b9860613          	addi	a2,a2,-1128 # 4b98 <__rt_stack_size+0x4398>
1c0044b8:	962e                	add	a2,a2,a1
1c0044ba:	000285b7          	lui	a1,0x28
1c0044be:	11858593          	addi	a1,a1,280 # 28118 <__L1Cl+0x18118>
1c0044c2:	95c2                	add	a1,a1,a6
1c0044c4:	5dd020ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c0044c8:	0e410783          	lb	a5,228(sp)
1c0044cc:	ef89                	bnez	a5,1c0044e6 <modelCNN_Construct+0x736>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0044ce:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0044d2:	4585                	li	a1,1
1c0044d4:	01c00513          	li	a0,28
1c0044d8:	21b050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0044dc:	30041073          	csrw	mstatus,s0
1c0044e0:	0e410783          	lb	a5,228(sp)
1c0044e4:	d7ed                	beqz	a5,1c0044ce <modelCNN_Construct+0x71e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164124), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19356), 2, 0, &UchanHF1);
1c0044e6:	1c00e7b7          	lui	a5,0x1c00e
1c0044ea:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c0044ee:	1c00e7b7          	lui	a5,0x1c00e
1c0044f2:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c0044f6:	1c00e7b7          	lui	a5,0x1c00e
1c0044fa:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0044fe:	4785                	li	a5,1
1c004500:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c004502:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c004504:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c004506:	0e010223          	sb	zero,228(sp)
1c00450a:	099c                	addi	a5,sp,208
1c00450c:	4705                	li	a4,1
1c00450e:	4689                	li	a3,2
1c004510:	6615                	lui	a2,0x5
1c004512:	b9c60613          	addi	a2,a2,-1124 # 4b9c <__rt_stack_size+0x439c>
1c004516:	962e                	add	a2,a2,a1
1c004518:	000285b7          	lui	a1,0x28
1c00451c:	11c58593          	addi	a1,a1,284 # 2811c <__L1Cl+0x1811c>
1c004520:	95c2                	add	a1,a1,a6
1c004522:	57f020ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c004526:	0e410783          	lb	a5,228(sp)
1c00452a:	ef89                	bnez	a5,1c004544 <modelCNN_Construct+0x794>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00452c:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004530:	4585                	li	a1,1
1c004532:	01c00513          	li	a0,28
1c004536:	1bd050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00453a:	30041073          	csrw	mstatus,s0
1c00453e:	0e410783          	lb	a5,228(sp)
1c004542:	d7ed                	beqz	a5,1c00452c <modelCNN_Construct+0x77c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 164100), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19332), 9, 0, &UchanHF1);
1c004544:	1c00e7b7          	lui	a5,0x1c00e
1c004548:	f907a503          	lw	a0,-112(a5) # 1c00df90 <_bss_start+0x18>
1c00454c:	1c00e7b7          	lui	a5,0x1c00e
1c004550:	1fc7a803          	lw	a6,508(a5) # 1c00e1fc <model_L3_Flash>
1c004554:	1c00e7b7          	lui	a5,0x1c00e
1c004558:	ea47a583          	lw	a1,-348(a5) # 1c00dea4 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00455c:	4785                	li	a5,1
1c00455e:	d5be                	sw	a5,232(sp)
  task->arg[0] = (uint32_t)0;
1c004560:	cb82                	sw	zero,212(sp)
  task->implem.keep = 1;
1c004562:	ddbe                	sw	a5,248(sp)
  task->done = 0;
1c004564:	0e010223          	sb	zero,228(sp)
1c004568:	099c                	addi	a5,sp,208
1c00456a:	4705                	li	a4,1
1c00456c:	46a5                	li	a3,9
1c00456e:	6615                	lui	a2,0x5
1c004570:	b8460613          	addi	a2,a2,-1148 # 4b84 <__rt_stack_size+0x4384>
1c004574:	962e                	add	a2,a2,a1
1c004576:	000285b7          	lui	a1,0x28
1c00457a:	10458593          	addi	a1,a1,260 # 28104 <__L1Cl+0x18104>
1c00457e:	95c2                	add	a1,a1,a6
1c004580:	521020ef          	jal	ra,1c0072a0 <pi_fs_copy_async>
1c004584:	0e410783          	lb	a5,228(sp)
1c004588:	880792e3          	bnez	a5,1c003e0c <modelCNN_Construct+0x5c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00458c:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004590:	4585                	li	a1,1
1c004592:	01c00513          	li	a0,28
1c004596:	15d050ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00459a:	30041073          	csrw	mstatus,s0
1c00459e:	0e410783          	lb	a5,228(sp)
1c0045a2:	d7ed                	beqz	a5,1c00458c <modelCNN_Construct+0x7dc>
1c0045a4:	869ff06f          	j	1c003e0c <modelCNN_Construct+0x5c>
	if (model_L1_Memory == 0) return 4;
1c0045a8:	4991                	li	s3,4
1c0045aa:	863ff06f          	j	1c003e0c <modelCNN_Construct+0x5c>
	model_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 223824);
1c0045ae:	4712                	lw	a4,4(sp)
1c0045b0:	1c00e7b7          	lui	a5,0x1c00e
1c0045b4:	24e7a423          	sw	a4,584(a5) # 1c00e248 <model_L3_Memory>
1c0045b8:	ba85                	j	1c003f28 <modelCNN_Construct+0x178>

1c0045ba <modelCNN_Destruct>:
int modelCNN_Destruct()

{
1c0045ba:	1141                	addi	sp,sp,-16
1c0045bc:	c606                	sw	ra,12(sp)
1c0045be:	c422                	sw	s0,8(sp)
1c0045c0:	c226                	sw	s1,4(sp)
}

static inline int pi_ram_free(struct pi_device *device, uint32_t addr, uint32_t size)
{
    pi_ram_api_t *api = (pi_ram_api_t *)device->api;
    return api->free(device, addr, size);
1c0045c2:	1c00e437          	lui	s0,0x1c00e
1c0045c6:	f9440493          	addi	s1,s0,-108 # 1c00df94 <HyperRam>
1c0045ca:	409c                	lw	a5,0(s1)
1c0045cc:	4bdc                	lw	a5,20(a5)
1c0045ce:	00037637          	lui	a2,0x37
1c0045d2:	a5060613          	addi	a2,a2,-1456 # 36a50 <__L1Cl+0x26a50>
1c0045d6:	1c00e737          	lui	a4,0x1c00e
1c0045da:	24872583          	lw	a1,584(a4) # 1c00e248 <model_L3_Memory>
1c0045de:	f9440513          	addi	a0,s0,-108
1c0045e2:	9782                	jalr	a5
	AT_HYPERRAM_FREE(&HyperRam, model_L3_Memory, 223824);
	AT_L2_FREE(0, model_L2_Memory, 176198);
1c0045e4:	0002b5b7          	lui	a1,0x2b
1c0045e8:	04658593          	addi	a1,a1,70 # 2b046 <__L1Cl+0x1b046>
1c0045ec:	1c00e7b7          	lui	a5,0x1c00e
1c0045f0:	ea47a503          	lw	a0,-348(a5) # 1c00dea4 <model_L2_Memory>
1c0045f4:	3b9050ef          	jal	ra,1c00a1ac <pi_l2_free>
	AT_L1_FREE(0, model_L1_Memory, 48776);
1c0045f8:	6631                	lui	a2,0xc
1c0045fa:	e8860613          	addi	a2,a2,-376 # be88 <__rt_stack_size+0xb688>
1c0045fe:	100007b7          	lui	a5,0x10000
1c004602:	01c7a583          	lw	a1,28(a5) # 1000001c <model_L1_Memory>
1c004606:	4501                	li	a0,0
1c004608:	38b050ef          	jal	ra,1c00a192 <pi_cl_l1_free>
    api->close(device);
1c00460c:	409c                	lw	a5,0(s1)
1c00460e:	43dc                	lw	a5,4(a5)
1c004610:	f9440513          	addi	a0,s0,-108
1c004614:	9782                	jalr	a5
    file->file->size = 4*1024*1024;
}

static inline void __at_hyperflash_fs_close(AT_HYPERFLASH_FS_T *file)
{
  pi_fs_close(file->file);
1c004616:	1c00e4b7          	lui	s1,0x1c00e
1c00461a:	f7848413          	addi	s0,s1,-136 # 1c00df78 <_bss_start>
1c00461e:	4c08                	lw	a0,24(s0)
1c004620:	41d020ef          	jal	ra,1c00723c <pi_fs_close>
  pi_fs_unmount(&file->fs);
1c004624:	f7848513          	addi	a0,s1,-136
1c004628:	405020ef          	jal	ra,1c00722c <pi_fs_unmount>
1c00462c:	445c                	lw	a5,12(s0)
1c00462e:	43dc                	lw	a5,4(a5)
1c004630:	00c40513          	addi	a0,s0,12
1c004634:	9782                	jalr	a5
	AT_HYPERRAM_CLOSE(&HyperRam);
	AT_HYPERFLASH_FS_CLOSE(&HyperFlash);
	return 0;
}
1c004636:	4501                	li	a0,0
1c004638:	40b2                	lw	ra,12(sp)
1c00463a:	4422                	lw	s0,8(sp)
1c00463c:	4492                	lw	s1,4(sp)
1c00463e:	0141                	addi	sp,sp,16
1c004640:	8082                	ret

1c004642 <modelCNN>:
};
int modelCNN(
		unsigned char * __restrict__ Input_1,
		signed short * __restrict__ Output_1)

{
1c004642:	7179                	addi	sp,sp,-48
1c004644:	d606                	sw	ra,44(sp)
1c004646:	d422                	sw	s0,40(sp)
1c004648:	d226                	sw	s1,36(sp)
1c00464a:	d04a                	sw	s2,32(sp)
1c00464c:	ce4e                	sw	s3,28(sp)
1c00464e:	cc52                	sw	s4,24(sp)
1c004650:	ca56                	sw	s5,20(sp)
1c004652:	c85a                	sw	s6,16(sp)
1c004654:	c65e                	sw	s7,12(sp)
1c004656:	8bae                	mv	s7,a1
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c004658:	10200937          	lui	s2,0x10200
1c00465c:	40090913          	addi	s2,s2,1024 # 10200400 <__l1_end+0x2003bc>
1c004660:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[0] = gap_cl_readhwtimer();
1c004664:	1c00e437          	lui	s0,0x1c00e
1c004668:	22f42a23          	sw	a5,564(s0) # 1c00e234 <AT_GraphPerf>
	S1_Op_input_1_formatter(
		((unsigned char * __restrict__) Input_1), /* In */
		((signed char * __restrict__) (model_L3_Memory+144768)) /* Out */
1c00466c:	1c00eb37          	lui	s6,0x1c00e
1c004670:	248b2583          	lw	a1,584(s6) # 1c00e248 <model_L3_Memory>
1c004674:	00023a37          	lui	s4,0x23
1c004678:	580a0a13          	addi	s4,s4,1408 # 23580 <__L1Cl+0x13580>
	S1_Op_input_1_formatter(
1c00467c:	95d2                	add	a1,a1,s4
1c00467e:	bebfc0ef          	jal	ra,1c001268 <S1_Op_input_1_formatter>
1c004682:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[0] = gap_cl_readhwtimer() - AT_GraphPerf[0];
1c004686:	23442703          	lw	a4,564(s0)
1c00468a:	8f99                	sub	a5,a5,a4
1c00468c:	22f42a23          	sw	a5,564(s0)
1c004690:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[1] = gap_cl_readhwtimer();
1c004694:	23440413          	addi	s0,s0,564
1c004698:	c05c                	sw	a5,4(s0)
	S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu(
1c00469a:	1c00e9b7          	lui	s3,0x1c00e
1c00469e:	ea498993          	addi	s3,s3,-348 # 1c00dea4 <model_L2_Memory>
1c0046a2:	0009a583          	lw	a1,0(s3)
		((signed char * __restrict__) (model_L2_Memory+18432)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+18976)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+19360)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+19232)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+19264)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+19296)) /* Infos */
1c0046a6:	6495                	lui	s1,0x5
1c0046a8:	b6048813          	addi	a6,s1,-1184 # 4b60 <__rt_stack_size+0x4360>
		((signed char * __restrict__) (model_L2_Memory+19264)), /* ScaleN */
1c0046ac:	b4048793          	addi	a5,s1,-1216
		((unsigned char * __restrict__) (model_L2_Memory+19232)), /* Scale */
1c0046b0:	b2048713          	addi	a4,s1,-1248
		((signed char * __restrict__) (model_L2_Memory+19360)), /* Out */
1c0046b4:	ba048a93          	addi	s5,s1,-1120
		((signed int * __restrict__) (model_L2_Memory+18976)), /* Bias */
1c0046b8:	a2048613          	addi	a2,s1,-1504
		((signed char * __restrict__) (model_L2_Memory+18432)), /* Filter */
1c0046bc:	80048893          	addi	a7,s1,-2048
		((signed char * __restrict__) (model_L3_Memory+144768)), /* In */
1c0046c0:	248b2503          	lw	a0,584(s6)
	S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu(
1c0046c4:	982e                	add	a6,a6,a1
1c0046c6:	97ae                	add	a5,a5,a1
1c0046c8:	972e                	add	a4,a4,a1
1c0046ca:	015586b3          	add	a3,a1,s5
1c0046ce:	962e                	add	a2,a2,a1
1c0046d0:	95c6                	add	a1,a1,a7
1c0046d2:	9552                	add	a0,a0,s4
1c0046d4:	8d6fd0ef          	jal	ra,1c0017aa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu>
1c0046d8:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[1] = gap_cl_readhwtimer() - AT_GraphPerf[1];
1c0046dc:	4058                	lw	a4,4(s0)
1c0046de:	8f99                	sub	a5,a5,a4
1c0046e0:	c05c                	sw	a5,4(s0)
1c0046e2:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[2] = gap_cl_readhwtimer();
1c0046e6:	c41c                	sw	a5,8(s0)
	S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c0046e8:	0009a503          	lw	a0,0(s3)
		((signed char * __restrict__) (model_L2_Memory+0)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+18720)), /* Bias */
		((signed char * __restrict__) (model_L3_Memory+144768)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+19104)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+19168)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+19308)) /* Infos */
1c0046ec:	b6c48813          	addi	a6,s1,-1172
		((signed char * __restrict__) (model_L2_Memory+19168)), /* ScaleN */
1c0046f0:	ae048793          	addi	a5,s1,-1312
		((unsigned char * __restrict__) (model_L2_Memory+19104)), /* Scale */
1c0046f4:	aa048713          	addi	a4,s1,-1376
		((signed char * __restrict__) (model_L3_Memory+144768)), /* Out */
1c0046f8:	248b2683          	lw	a3,584(s6)
		((signed int * __restrict__) (model_L2_Memory+18720)), /* Bias */
1c0046fc:	92048613          	addi	a2,s1,-1760
	S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c004700:	982a                	add	a6,a6,a0
1c004702:	97aa                	add	a5,a5,a0
1c004704:	972a                	add	a4,a4,a0
1c004706:	96d2                	add	a3,a3,s4
1c004708:	962a                	add	a2,a2,a0
1c00470a:	85aa                	mv	a1,a0
1c00470c:	9556                	add	a0,a0,s5
1c00470e:	c39fd0ef          	jal	ra,1c002346 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu>
1c004712:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[2] = gap_cl_readhwtimer() - AT_GraphPerf[2];
1c004716:	4418                	lw	a4,8(s0)
1c004718:	8f99                	sub	a5,a5,a4
1c00471a:	c41c                	sw	a5,8(s0)
1c00471c:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[3] = gap_cl_readhwtimer();
1c004720:	c45c                	sw	a5,12(s0)
	S4_Linear_2x29x39x64(
		((signed char * __restrict__) (model_L3_Memory+144768)), /* In */
1c004722:	248b2503          	lw	a0,584(s6)
	S4_Linear_2x29x39x64(
1c004726:	0009a603          	lw	a2,0(s3)
		((signed char * __restrict__) (model_L3_Memory+0)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+19344)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+19360)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+19352)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+19356)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+19320)) /* Infos */
1c00472a:	b7848813          	addi	a6,s1,-1160
		((signed char * __restrict__) (model_L2_Memory+19356)), /* ScaleN */
1c00472e:	b9c48793          	addi	a5,s1,-1124
		((unsigned char * __restrict__) (model_L2_Memory+19352)), /* Scale */
1c004732:	b9848713          	addi	a4,s1,-1128
		((signed int * __restrict__) (model_L2_Memory+19344)), /* Bias */
1c004736:	b9048593          	addi	a1,s1,-1136
	S4_Linear_2x29x39x64(
1c00473a:	9832                	add	a6,a6,a2
1c00473c:	97b2                	add	a5,a5,a2
1c00473e:	9732                	add	a4,a4,a2
1c004740:	015606b3          	add	a3,a2,s5
1c004744:	962e                	add	a2,a2,a1
1c004746:	85aa                	mv	a1,a0
1c004748:	9552                	add	a0,a0,s4
1c00474a:	fcefe0ef          	jal	ra,1c002f18 <S4_Linear_2x29x39x64>
1c00474e:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[3] = gap_cl_readhwtimer() - AT_GraphPerf[3];
1c004752:	4458                	lw	a4,12(s0)
1c004754:	8f99                	sub	a5,a5,a4
1c004756:	c45c                	sw	a5,12(s0)
1c004758:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[4] = gap_cl_readhwtimer();
1c00475c:	c81c                	sw	a5,16(s0)
	S5_SoftMax(
1c00475e:	0009a503          	lw	a0,0(s3)
		((signed char * __restrict__) (model_L2_Memory+19360)), /* In */
		((signed short * __restrict__) Output_1), /* Out */
		((signed char * __restrict__) (model_L2_Memory+19332)) /* Infos */
1c004762:	b8448613          	addi	a2,s1,-1148
	S5_SoftMax(
1c004766:	962a                	add	a2,a2,a0
1c004768:	85de                	mv	a1,s7
1c00476a:	9556                	add	a0,a0,s5
1c00476c:	bb4ff0ef          	jal	ra,1c003b20 <S5_SoftMax>
1c004770:	00892903          	lw	s2,8(s2)
	);
	AT_GraphPerf[4] = gap_cl_readhwtimer() - AT_GraphPerf[4];
1c004774:	481c                	lw	a5,16(s0)
1c004776:	40f90933          	sub	s2,s2,a5
1c00477a:	01242823          	sw	s2,16(s0)
	return 0;
}
1c00477e:	4501                	li	a0,0
1c004780:	50b2                	lw	ra,44(sp)
1c004782:	5422                	lw	s0,40(sp)
1c004784:	5492                	lw	s1,36(sp)
1c004786:	5902                	lw	s2,32(sp)
1c004788:	49f2                	lw	s3,28(sp)
1c00478a:	4a62                	lw	s4,24(sp)
1c00478c:	4ad2                	lw	s5,20(sp)
1c00478e:	4b42                	lw	s6,16(sp)
1c004790:	4bb2                	lw	s7,12(sp)
1c004792:	6145                	addi	sp,sp,48
1c004794:	8082                	ret

1c004796 <SkipCommentAndWhiteSpace>:
}

void SkipCommentAndWhiteSpace(unsigned char *pImg, int buf_len, int *i)
{
	int saw_nl = 1;
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c004796:	421c                	lw	a5,0(a2)
1c004798:	08b7df63          	ble	a1,a5,1c004836 <SkipCommentAndWhiteSpace+0xa0>
{
1c00479c:	1101                	addi	sp,sp,-32
1c00479e:	ce06                	sw	ra,28(sp)
1c0047a0:	cc22                	sw	s0,24(sp)
1c0047a2:	ca26                	sw	s1,20(sp)
1c0047a4:	c84a                	sw	s2,16(sp)
1c0047a6:	c64e                	sw	s3,12(sp)
1c0047a8:	c452                	sw	s4,8(sp)
1c0047aa:	c256                	sw	s5,4(sp)
1c0047ac:	4705                	li	a4,1
1c0047ae:	8432                	mv	s0,a2
1c0047b0:	892e                	mv	s2,a1
1c0047b2:	84aa                	mv	s1,a0
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c0047b4:	02300993          	li	s3,35
1c0047b8:	4add                	li	s5,23
1c0047ba:	00800a37          	lui	s4,0x800
1c0047be:	0a4d                	addi	s4,s4,19
1c0047c0:	a015                	j	1c0047e4 <SkipCommentAndWhiteSpace+0x4e>
1c0047c2:	00fa57b3          	srl	a5,s4,a5
1c0047c6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0047ca:	c79d                	beqz	a5,1c0047f8 <SkipCommentAndWhiteSpace+0x62>
			while (*i < buf_len && pImg[*i] != '\n') {
				printf("%c", pImg[*i]);
				(*i)++;
			}
		}
		saw_nl = (pImg[*i] == '\n');
1c0047cc:	401c                	lw	a5,0(s0)
1c0047ce:	00f48733          	add	a4,s1,a5
1c0047d2:	00074703          	lbu	a4,0(a4)
1c0047d6:	1759                	addi	a4,a4,-10
1c0047d8:	00173713          	seqz	a4,a4
		(*i)++;
1c0047dc:	0785                	addi	a5,a5,1
1c0047de:	c01c                	sw	a5,0(s0)
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c0047e0:	0127dc63          	ble	s2,a5,1c0047f8 <SkipCommentAndWhiteSpace+0x62>
1c0047e4:	97a6                	add	a5,a5,s1
1c0047e6:	0007c783          	lbu	a5,0(a5)
1c0047ea:	03378063          	beq	a5,s3,1c00480a <SkipCommentAndWhiteSpace+0x74>
1c0047ee:	17dd                	addi	a5,a5,-9
1c0047f0:	0ff7f793          	andi	a5,a5,255
1c0047f4:	fcfaf7e3          	bleu	a5,s5,1c0047c2 <SkipCommentAndWhiteSpace+0x2c>
	}
}
1c0047f8:	40f2                	lw	ra,28(sp)
1c0047fa:	4462                	lw	s0,24(sp)
1c0047fc:	44d2                	lw	s1,20(sp)
1c0047fe:	4942                	lw	s2,16(sp)
1c004800:	49b2                	lw	s3,12(sp)
1c004802:	4a22                	lw	s4,8(sp)
1c004804:	4a92                	lw	s5,4(sp)
1c004806:	6105                	addi	sp,sp,32
1c004808:	8082                	ret
		if (saw_nl && pImg[*i] == '#') {
1c00480a:	d369                	beqz	a4,1c0047cc <SkipCommentAndWhiteSpace+0x36>
			while (*i < buf_len && pImg[*i] != '\n') {
1c00480c:	401c                	lw	a5,0(s0)
1c00480e:	fb27dfe3          	ble	s2,a5,1c0047cc <SkipCommentAndWhiteSpace+0x36>
1c004812:	97a6                	add	a5,a5,s1
1c004814:	0007c503          	lbu	a0,0(a5)
1c004818:	faa52ae3          	p.beqimm	a0,10,1c0047cc <SkipCommentAndWhiteSpace+0x36>
				printf("%c", pImg[*i]);
1c00481c:	1a1070ef          	jal	ra,1c00c1bc <putchar>
				(*i)++;
1c004820:	401c                	lw	a5,0(s0)
1c004822:	0785                	addi	a5,a5,1
1c004824:	c01c                	sw	a5,0(s0)
			while (*i < buf_len && pImg[*i] != '\n') {
1c004826:	fb27d3e3          	ble	s2,a5,1c0047cc <SkipCommentAndWhiteSpace+0x36>
1c00482a:	97a6                	add	a5,a5,s1
1c00482c:	0007c503          	lbu	a0,0(a5)
1c004830:	fea536e3          	p.bneimm	a0,10,1c00481c <SkipCommentAndWhiteSpace+0x86>
1c004834:	bf61                	j	1c0047cc <SkipCommentAndWhiteSpace+0x36>
1c004836:	8082                	ret

1c004838 <ReadValue>:

unsigned int ReadValue(unsigned char *pImg, int buf_len, int *i)
{
1c004838:	1141                	addi	sp,sp,-16
1c00483a:	c606                	sw	ra,12(sp)
1c00483c:	c422                	sw	s0,8(sp)
1c00483e:	c226                	sw	s1,4(sp)
1c004840:	c04a                	sw	s2,0(sp)
1c004842:	892a                	mv	s2,a0
1c004844:	84ae                	mv	s1,a1
1c004846:	8432                	mv	s0,a2
#define IS_DIGIT(C) (((C) >= '0') && ((C) <= '9'))
	unsigned int val = 0;
	SkipCommentAndWhiteSpace(pImg, buf_len, i);
1c004848:	37b9                	jal	1c004796 <SkipCommentAndWhiteSpace>
	while (*i < buf_len && !IS_DIGIT(pImg[*i])) {
1c00484a:	4018                	lw	a4,0(s0)
1c00484c:	08975463          	ble	s1,a4,1c0048d4 <ReadValue+0x9c>
1c004850:	00e907b3          	add	a5,s2,a4
1c004854:	0007c683          	lbu	a3,0(a5)
1c004858:	fd068793          	addi	a5,a3,-48
1c00485c:	0ff7f793          	andi	a5,a5,255
1c004860:	4625                	li	a2,9
1c004862:	04f67163          	bleu	a5,a2,1c0048a4 <ReadValue+0x6c>
1c004866:	0705                	addi	a4,a4,1
1c004868:	00e906b3          	add	a3,s2,a4
1c00486c:	854a                	mv	a0,s2
1c00486e:	012485b3          	add	a1,s1,s2
1c004872:	4825                	li	a6,9
1c004874:	40a68633          	sub	a2,a3,a0
1c004878:	8732                	mv	a4,a2
		(*i)++;
1c00487a:	c010                	sw	a2,0(s0)
	while (*i < buf_len && !IS_DIGIT(pImg[*i])) {
1c00487c:	04b68e63          	beq	a3,a1,1c0048d8 <ReadValue+0xa0>
1c004880:	0016c78b          	p.lbu	a5,1(a3!)
1c004884:	fd078793          	addi	a5,a5,-48
1c004888:	0ff7f793          	andi	a5,a5,255
1c00488c:	fef864e3          	bltu	a6,a5,1c004874 <ReadValue+0x3c>
	}
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c004890:	964a                	add	a2,a2,s2
1c004892:	00064683          	lbu	a3,0(a2)
1c004896:	fd068793          	addi	a5,a3,-48
1c00489a:	0ff7f793          	andi	a5,a5,255
1c00489e:	4625                	li	a2,9
1c0048a0:	04f66363          	bltu	a2,a5,1c0048e6 <ReadValue+0xae>
1c0048a4:	0705                	addi	a4,a4,1
1c0048a6:	993a                	add	s2,s2,a4
{
1c0048a8:	4501                	li	a0,0
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c0048aa:	4625                	li	a2,9
		val = val * 10 + (pImg[*i] - 0x30);
1c0048ac:	00251793          	slli	a5,a0,0x2
1c0048b0:	953e                	add	a0,a0,a5
1c0048b2:	0506                	slli	a0,a0,0x1
1c0048b4:	9536                	add	a0,a0,a3
1c0048b6:	fd050513          	addi	a0,a0,-48
		(*i)++;
1c0048ba:	c018                	sw	a4,0(s0)
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c0048bc:	00975f63          	ble	s1,a4,1c0048da <ReadValue+0xa2>
1c0048c0:	0019468b          	p.lbu	a3,1(s2!)
1c0048c4:	0705                	addi	a4,a4,1
1c0048c6:	fd068793          	addi	a5,a3,-48
1c0048ca:	0ff7f793          	andi	a5,a5,255
1c0048ce:	fcf67fe3          	bleu	a5,a2,1c0048ac <ReadValue+0x74>
1c0048d2:	a021                	j	1c0048da <ReadValue+0xa2>
	while (*i < buf_len && !IS_DIGIT(pImg[*i])) {
1c0048d4:	4501                	li	a0,0
1c0048d6:	a011                	j	1c0048da <ReadValue+0xa2>
1c0048d8:	4501                	li	a0,0
	}
	return val;
#undef IS_DIGIT
}
1c0048da:	40b2                	lw	ra,12(sp)
1c0048dc:	4422                	lw	s0,8(sp)
1c0048de:	4492                	lw	s1,4(sp)
1c0048e0:	4902                	lw	s2,0(sp)
1c0048e2:	0141                	addi	sp,sp,16
1c0048e4:	8082                	ret
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c0048e6:	4501                	li	a0,0
1c0048e8:	bfcd                	j	1c0048da <ReadValue+0xa2>

1c0048ea <ReadImageFromFile>:
	}
	return 0;
}

int ReadImageFromFile(char *ImageName, unsigned int DesiredW, unsigned int DesiredH, unsigned int DesiredBytesPerPixel, void *InBuffer, unsigned int BuffSize, img_io_out_t out_type, int Transpose2CHW) 
{
1c0048ea:	7131                	addi	sp,sp,-192
1c0048ec:	df06                	sw	ra,188(sp)
1c0048ee:	dd22                	sw	s0,184(sp)
1c0048f0:	db26                	sw	s1,180(sp)
1c0048f2:	d94a                	sw	s2,176(sp)
1c0048f4:	d74e                	sw	s3,172(sp)
1c0048f6:	d552                	sw	s4,168(sp)
1c0048f8:	d356                	sw	s5,164(sp)
1c0048fa:	d15a                	sw	s6,160(sp)
1c0048fc:	cf5e                	sw	s7,156(sp)
1c0048fe:	cd62                	sw	s8,152(sp)
1c004900:	cb66                	sw	s9,148(sp)
1c004902:	c96a                	sw	s10,144(sp)
1c004904:	c76e                	sw	s11,140(sp)
1c004906:	0180                	addi	s0,sp,192
1c004908:	84aa                	mv	s1,a0
1c00490a:	8bae                	mv	s7,a1
1c00490c:	8b32                	mv	s6,a2
1c00490e:	8ab6                	mv	s5,a3
1c004910:	f6e42223          	sw	a4,-156(s0)
1c004914:	f6f42423          	sw	a5,-152(s0)
1c004918:	f7042623          	sw	a6,-148(s0)
1c00491c:	f7142023          	sw	a7,-160(s0)
	__FS_INIT(fs);
1c004920:	f8040513          	addi	a0,s0,-128
1c004924:	0cb020ef          	jal	ra,1c0071ee <pi_fs_conf_init>
1c004928:	4785                	li	a5,1
1c00492a:	f8f42023          	sw	a5,-128(s0)
1c00492e:	f8040593          	addi	a1,s0,-128
1c004932:	f9440513          	addi	a0,s0,-108
1c004936:	73d040ef          	jal	ra,1c009872 <pi_open_from_conf>
1c00493a:	f9440513          	addi	a0,s0,-108
1c00493e:	0c3020ef          	jal	ra,1c007200 <pi_fs_mount>
	switch_file_t File = __OPEN_READ(fs, Name);
1c004942:	4601                	li	a2,0
1c004944:	85a6                	mv	a1,s1
1c004946:	f9440513          	addi	a0,s0,-108
1c00494a:	0eb020ef          	jal	ra,1c007234 <pi_fs_open>
	if (!File) {
1c00494e:	cd49                	beqz	a0,1c0049e8 <ReadImageFromFile+0xfe>
1c004950:	892a                	mv	s2,a0
	unsigned char *Header = (unsigned char *) __ALLOC_L2(256);
1c004952:	10000513          	li	a0,256
1c004956:	049050ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c00495a:	89aa                	mv	s3,a0
	if (__READ(File, Header, 256) == 256) {
1c00495c:	10000613          	li	a2,256
1c004960:	85aa                	mv	a1,a0
1c004962:	854a                	mv	a0,s2
1c004964:	0e9020ef          	jal	ra,1c00724c <pi_fs_read>
1c004968:	10000793          	li	a5,256
1c00496c:	08f50663          	beq	a0,a5,1c0049f8 <ReadImageFromFile+0x10e>
		printf("Unable to read header %s", Name);
1c004970:	85a6                	mv	a1,s1
1c004972:	1c00e537          	lui	a0,0x1c00e
1c004976:	85850513          	addi	a0,a0,-1960 # 1c00d858 <__clz_tab+0x41c>
1c00497a:	163070ef          	jal	ra,1c00c2dc <printf>
	__FREE_L2(Header, 256);
1c00497e:	10000593          	li	a1,256
1c004982:	854e                	mv	a0,s3
1c004984:	029050ef          	jal	ra,1c00a1ac <pi_l2_free>
	__CLOSE(File);
1c004988:	854a                	mv	a0,s2
1c00498a:	0b3020ef          	jal	ra,1c00723c <pi_fs_close>
	__FS_DEINIT(fs);
1c00498e:	f9440513          	addi	a0,s0,-108
1c004992:	09b020ef          	jal	ra,1c00722c <pi_fs_unmount>
	switch_file_t File = (switch_file_t) 0;
	unsigned int BytesPerPixel, W, H, HeaderSize, Size, ReadSize=0;
	unsigned int ImageShort;

	if (GetInputImageInfos(ImageName, &W, &H, &BytesPerPixel, &HeaderSize, &ImageShort)) {
		printf("Failed to get input images infos, %s\n", ImageName); goto Fail;
1c004996:	85a6                	mv	a1,s1
1c004998:	1c00e537          	lui	a0,0x1c00e
1c00499c:	87450513          	addi	a0,a0,-1932 # 1c00d874 <__clz_tab+0x438>
1c0049a0:	13d070ef          	jal	ra,1c00c2dc <printf>
	switch_file_t File = (switch_file_t) 0;
1c0049a4:	4901                	li	s2,0
	__FS_DEINIT(fs);
	PRINTF("Image %s, [W: %d, H: %d], Bytes per pixel %d, Size: %d bytes, Loaded successfully\n", ImageName, W, H, BytesPerPixel, Size);

	return 0;
Fail:
	__CLOSE(File);
1c0049a6:	854a                	mv	a0,s2
1c0049a8:	095020ef          	jal	ra,1c00723c <pi_fs_close>
	__FS_DEINIT(fs);
1c0049ac:	fb440513          	addi	a0,s0,-76
1c0049b0:	07d020ef          	jal	ra,1c00722c <pi_fs_unmount>
	printf("Failed to load image %s from flash\n", ImageName);
1c0049b4:	85a6                	mv	a1,s1
1c0049b6:	1c00e537          	lui	a0,0x1c00e
1c0049ba:	9a850513          	addi	a0,a0,-1624 # 1c00d9a8 <__clz_tab+0x56c>
1c0049be:	11f070ef          	jal	ra,1c00c2dc <printf>
	return 1;
1c0049c2:	4985                	li	s3,1
}
1c0049c4:	854e                	mv	a0,s3
1c0049c6:	f4040113          	addi	sp,s0,-192
1c0049ca:	50fa                	lw	ra,188(sp)
1c0049cc:	546a                	lw	s0,184(sp)
1c0049ce:	54da                	lw	s1,180(sp)
1c0049d0:	594a                	lw	s2,176(sp)
1c0049d2:	59ba                	lw	s3,172(sp)
1c0049d4:	5a2a                	lw	s4,168(sp)
1c0049d6:	5a9a                	lw	s5,164(sp)
1c0049d8:	5b0a                	lw	s6,160(sp)
1c0049da:	4bfa                	lw	s7,156(sp)
1c0049dc:	4c6a                	lw	s8,152(sp)
1c0049de:	4cda                	lw	s9,148(sp)
1c0049e0:	4d4a                	lw	s10,144(sp)
1c0049e2:	4dba                	lw	s11,140(sp)
1c0049e4:	6129                	addi	sp,sp,192
1c0049e6:	8082                	ret
		printf("Unable to open file %s\n", Name);
1c0049e8:	85a6                	mv	a1,s1
1c0049ea:	1c00d537          	lui	a0,0x1c00d
1c0049ee:	7e450513          	addi	a0,a0,2020 # 1c00d7e4 <__clz_tab+0x3a8>
1c0049f2:	0eb070ef          	jal	ra,1c00c2dc <printf>
1c0049f6:	b745                	j	1c004996 <ReadImageFromFile+0xac>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *BytesPerPixel = 1;
1c0049f8:	0009c703          	lbu	a4,0(s3)
1c0049fc:	05000793          	li	a5,80
1c004a00:	00f70a63          	beq	a4,a5,1c004a14 <ReadImageFromFile+0x12a>
			printf("Unable to load header %s", Name);
1c004a04:	85a6                	mv	a1,s1
1c004a06:	1c00e537          	lui	a0,0x1c00e
1c004a0a:	83c50513          	addi	a0,a0,-1988 # 1c00d83c <__clz_tab+0x400>
1c004a0e:	0cf070ef          	jal	ra,1c00c2dc <printf>
1c004a12:	b7b5                	j	1c00497e <ReadImageFromFile+0x94>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *BytesPerPixel = 1;
1c004a14:	0019c783          	lbu	a5,1(s3)
1c004a18:	03500713          	li	a4,53
1c004a1c:	0ee78663          	beq	a5,a4,1c004b08 <ReadImageFromFile+0x21e>
	else if (ImgIn[0] == 'P' && ImgIn[1] == '6' && ImgIn[2] == '\n') *BytesPerPixel = 3;
1c004a20:	03600713          	li	a4,54
1c004a24:	fee790e3          	bne	a5,a4,1c004a04 <ReadImageFromFile+0x11a>
1c004a28:	0029c783          	lbu	a5,2(s3)
1c004a2c:	4c0d                	li	s8,3
1c004a2e:	fca7bbe3          	p.bneimm	a5,10,1c004a04 <ReadImageFromFile+0x11a>
	int i = 3;
1c004a32:	478d                	li	a5,3
1c004a34:	f6f42e23          	sw	a5,-132(s0)
	*W = ReadValue(ImgIn, buf_len, &i);
1c004a38:	f7c40613          	addi	a2,s0,-132
1c004a3c:	10000593          	li	a1,256
1c004a40:	854e                	mv	a0,s3
1c004a42:	3bdd                	jal	1c004838 <ReadValue>
1c004a44:	f4a42e23          	sw	a0,-164(s0)
	*H = ReadValue(ImgIn, buf_len, &i);
1c004a48:	f7c40613          	addi	a2,s0,-132
1c004a4c:	10000593          	li	a1,256
1c004a50:	854e                	mv	a0,s3
1c004a52:	33dd                	jal	1c004838 <ReadValue>
1c004a54:	8d2a                	mv	s10,a0
	unsigned int Val = ReadValue(ImgIn, buf_len, &i);
1c004a56:	f7c40613          	addi	a2,s0,-132
1c004a5a:	10000593          	li	a1,256
1c004a5e:	854e                	mv	a0,s3
1c004a60:	3be1                	jal	1c004838 <ReadValue>
1c004a62:	f4a42a23          	sw	a0,-172(s0)
	if (Val != 255 && Val != 65535) return 1;
1c004a66:	0ff00793          	li	a5,255
1c004a6a:	00f50663          	beq	a0,a5,1c004a76 <ReadImageFromFile+0x18c>
1c004a6e:	67c1                	lui	a5,0x10
1c004a70:	17fd                	addi	a5,a5,-1
1c004a72:	f8f519e3          	bne	a0,a5,1c004a04 <ReadImageFromFile+0x11a>
	while (ImgIn[i++] != 0xA) {};
1c004a76:	f7c42783          	lw	a5,-132(s0)
1c004a7a:	00178c93          	addi	s9,a5,1 # 10001 <__L1Cl+0x1>
1c004a7e:	f7942e23          	sw	s9,-132(s0)
1c004a82:	97ce                	add	a5,a5,s3
1c004a84:	0007c783          	lbu	a5,0(a5)
1c004a88:	fea7b7e3          	p.bneimm	a5,10,1c004a76 <ReadImageFromFile+0x18c>
			PRINTF("Image %s:  [W: %d, H: %d] Bytes per pixel %d, HeaderSize: %d\n", Name, *W, *H, *BytesPerPixel, *HeaderSize);
1c004a8c:	87e6                	mv	a5,s9
1c004a8e:	8762                	mv	a4,s8
1c004a90:	86ea                	mv	a3,s10
1c004a92:	f5c42603          	lw	a2,-164(s0)
1c004a96:	85a6                	mv	a1,s1
1c004a98:	1c00d537          	lui	a0,0x1c00d
1c004a9c:	7fc50513          	addi	a0,a0,2044 # 1c00d7fc <__clz_tab+0x3c0>
1c004aa0:	03d070ef          	jal	ra,1c00c2dc <printf>
1c004aa4:	8a4e                	mv	s4,s3
1c004aa6:	01998db3          	add	s11,s3,s9
			for (i=0; i<*HeaderSize;i++) PRINTF("%c", Header[i]);
1c004aaa:	000c8863          	beqz	s9,1c004aba <ReadImageFromFile+0x1d0>
1c004aae:	001a450b          	p.lbu	a0,1(s4!) # 800001 <__L2+0x780001>
1c004ab2:	70a070ef          	jal	ra,1c00c1bc <putchar>
1c004ab6:	ffba1ce3          	bne	s4,s11,1c004aae <ReadImageFromFile+0x1c4>
			PRINTF("\n");
1c004aba:	4529                	li	a0,10
1c004abc:	700070ef          	jal	ra,1c00c1bc <putchar>
	__FREE_L2(Header, 256);
1c004ac0:	10000593          	li	a1,256
1c004ac4:	854e                	mv	a0,s3
1c004ac6:	6e6050ef          	jal	ra,1c00a1ac <pi_l2_free>
	__CLOSE(File);
1c004aca:	854a                	mv	a0,s2
1c004acc:	770020ef          	jal	ra,1c00723c <pi_fs_close>
	__FS_DEINIT(fs);
1c004ad0:	f9440513          	addi	a0,s0,-108
1c004ad4:	758020ef          	jal	ra,1c00722c <pi_fs_unmount>
	if (GetInputImageInfos(ImageName, &W, &H, &BytesPerPixel, &HeaderSize, &ImageShort)) {
1c004ad8:	ea098fe3          	beqz	s3,1c004996 <ReadImageFromFile+0xac>
	if (BytesPerPixel != DesiredBytesPerPixel) {
1c004adc:	038a9c63          	bne	s5,s8,1c004b14 <ReadImageFromFile+0x22a>
	if (DesiredH != H || DesiredW != W) {
1c004ae0:	01ab1663          	bne	s6,s10,1c004aec <ReadImageFromFile+0x202>
1c004ae4:	f5c42703          	lw	a4,-164(s0)
1c004ae8:	04eb8063          	beq	s7,a4,1c004b28 <ReadImageFromFile+0x23e>
		printf("Expecting [%dx%d] image, got [%dx%d] %s\n", DesiredW, DesiredH, W, H, ImageName); goto Fail;
1c004aec:	87a6                	mv	a5,s1
1c004aee:	876a                	mv	a4,s10
1c004af0:	f5c42683          	lw	a3,-164(s0)
1c004af4:	865a                	mv	a2,s6
1c004af6:	85de                	mv	a1,s7
1c004af8:	1c00e537          	lui	a0,0x1c00e
1c004afc:	8c450513          	addi	a0,a0,-1852 # 1c00d8c4 <__clz_tab+0x488>
1c004b00:	7dc070ef          	jal	ra,1c00c2dc <printf>
	switch_file_t File = (switch_file_t) 0;
1c004b04:	4901                	li	s2,0
		printf("Expecting [%dx%d] image, got [%dx%d] %s\n", DesiredW, DesiredH, W, H, ImageName); goto Fail;
1c004b06:	b545                	j	1c0049a6 <ReadImageFromFile+0xbc>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *BytesPerPixel = 1;
1c004b08:	0029c783          	lbu	a5,2(s3)
1c004b0c:	eea7bce3          	p.bneimm	a5,10,1c004a04 <ReadImageFromFile+0x11a>
1c004b10:	4c05                	li	s8,1
1c004b12:	b705                	j	1c004a32 <ReadImageFromFile+0x148>
		printf("Expecting %d bytes per pixel image, %s\n", BytesPerPixel, ImageName); goto Fail;
1c004b14:	8626                	mv	a2,s1
1c004b16:	85e2                	mv	a1,s8
1c004b18:	1c00e537          	lui	a0,0x1c00e
1c004b1c:	89c50513          	addi	a0,a0,-1892 # 1c00d89c <__clz_tab+0x460>
1c004b20:	7bc070ef          	jal	ra,1c00c2dc <printf>
	switch_file_t File = (switch_file_t) 0;
1c004b24:	4901                	li	s2,0
		printf("Expecting %d bytes per pixel image, %s\n", BytesPerPixel, ImageName); goto Fail;
1c004b26:	b541                	j	1c0049a6 <ReadImageFromFile+0xbc>
	__FS_INIT(fs);
1c004b28:	fa040513          	addi	a0,s0,-96
1c004b2c:	6c2020ef          	jal	ra,1c0071ee <pi_fs_conf_init>
1c004b30:	4785                	li	a5,1
1c004b32:	faf42023          	sw	a5,-96(s0)
1c004b36:	fa040593          	addi	a1,s0,-96
1c004b3a:	fb440513          	addi	a0,s0,-76
1c004b3e:	535040ef          	jal	ra,1c009872 <pi_open_from_conf>
1c004b42:	fb440513          	addi	a0,s0,-76
1c004b46:	6ba020ef          	jal	ra,1c007200 <pi_fs_mount>
	File = __OPEN_READ(fs, ImageName);
1c004b4a:	4601                	li	a2,0
1c004b4c:	85a6                	mv	a1,s1
1c004b4e:	fb440513          	addi	a0,s0,-76
1c004b52:	6e2020ef          	jal	ra,1c007234 <pi_fs_open>
1c004b56:	892a                	mv	s2,a0
	if (File == 0) {
1c004b58:	cd21                	beqz	a0,1c004bb0 <ReadImageFromFile+0x2c6>
	Size = W*H*BytesPerPixel*(ImageShort?sizeof(short int):sizeof(unsigned char));
1c004b5a:	f5c42783          	lw	a5,-164(s0)
1c004b5e:	03a789b3          	mul	s3,a5,s10
1c004b62:	038987b3          	mul	a5,s3,s8
1c004b66:	6a41                	lui	s4,0x10
1c004b68:	1a7d                	addi	s4,s4,-1
1c004b6a:	f5442703          	lw	a4,-172(s0)
1c004b6e:	41470a33          	sub	s4,a4,s4
1c004b72:	001a3a13          	seqz	s4,s4
1c004b76:	0a05                	addi	s4,s4,1
1c004b78:	03478a33          	mul	s4,a5,s4
	if (out_type == IMGIO_OUTPUT_RGB565) {
1c004b7c:	f6c42783          	lw	a5,-148(s0)
1c004b80:	0427a063          	p.beqimm	a5,2,1c004bc0 <ReadImageFromFile+0x2d6>
		if (BuffSize < Size) {
1c004b84:	f6842783          	lw	a5,-152(s0)
1c004b88:	1147e863          	bltu	a5,s4,1c004c98 <ReadImageFromFile+0x3ae>
	__SEEK(File, HeaderSize);
1c004b8c:	85e6                	mv	a1,s9
1c004b8e:	71c020ef          	jal	ra,1c0072aa <pi_fs_seek>
	if (ImageShort){
1c004b92:	67c1                	lui	a5,0x10
1c004b94:	17fd                	addi	a5,a5,-1
1c004b96:	f5442703          	lw	a4,-172(s0)
1c004b9a:	10f70763          	beq	a4,a5,1c004ca8 <ReadImageFromFile+0x3be>
		switch (out_type) {
1c004b9e:	f6c42703          	lw	a4,-148(s0)
1c004ba2:	36172263          	p.beqimm	a4,1,1c004f06 <ReadImageFromFile+0x61c>
1c004ba6:	1c070c63          	beqz	a4,1c004d7e <ReadImageFromFile+0x494>
1c004baa:	1c273263          	p.bneimm	a4,2,1c004d6e <ReadImageFromFile+0x484>
1c004bae:	a03d                	j	1c004bdc <ReadImageFromFile+0x2f2>
		printf("Failed to open file, %s\n", ImageName); goto Fail;
1c004bb0:	85a6                	mv	a1,s1
1c004bb2:	1c00e537          	lui	a0,0x1c00e
1c004bb6:	8f050513          	addi	a0,a0,-1808 # 1c00d8f0 <__clz_tab+0x4b4>
1c004bba:	722070ef          	jal	ra,1c00c2dc <printf>
1c004bbe:	b3e5                	j	1c0049a6 <ReadImageFromFile+0xbc>
		if (BuffSize < W*H*2) {
1c004bc0:	0986                	slli	s3,s3,0x1
1c004bc2:	f6842703          	lw	a4,-152(s0)
1c004bc6:	0d376163          	bltu	a4,s3,1c004c88 <ReadImageFromFile+0x39e>
	__SEEK(File, HeaderSize);
1c004bca:	85e6                	mv	a1,s9
1c004bcc:	6de020ef          	jal	ra,1c0072aa <pi_fs_seek>
	if (ImageShort){
1c004bd0:	67c1                	lui	a5,0x10
1c004bd2:	17fd                	addi	a5,a5,-1
1c004bd4:	f5442703          	lw	a4,-172(s0)
1c004bd8:	0cf70863          	beq	a4,a5,1c004ca8 <ReadImageFromFile+0x3be>
				res = ReadMultiChannelImageRGB565(File, (unsigned short *)InBuffer, W, H);
1c004bdc:	f5c42703          	lw	a4,-164(s0)
1c004be0:	f6e42423          	sw	a4,-152(s0)
1c004be4:	f7a42023          	sw	s10,-160(s0)
{
1c004be8:	f4242c23          	sw	sp,-168(s0)
	unsigned int RowSize = W*3;
1c004bec:	00171b13          	slli	s6,a4,0x1
1c004bf0:	9b3a                	add	s6,s6,a4
	unsigned char InputBuf[RowSize];
1c004bf2:	00fb0793          	addi	a5,s6,15
1c004bf6:	c607b7b3          	p.bclr	a5,a5,3,0
1c004bfa:	40f10133          	sub	sp,sp,a5
1c004bfe:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004c02:	4ba05463          	blez	s10,1c0050aa <ReadImageFromFile+0x7c0>
1c004c06:	00171d93          	slli	s11,a4,0x1
1c004c0a:	f6442c83          	lw	s9,-156(s0)
1c004c0e:	f7b42223          	sw	s11,-156(s0)
1c004c12:	4b81                	li	s7,0
		unsigned char *pInpBuf = InputBuf;
1c004c14:	f6c42a83          	lw	s5,-148(s0)
		int RemainBytes = RowSize;
1c004c18:	89da                	mv	s3,s6
		while (RemainBytes > 0) {
1c004c1a:	01605e63          	blez	s6,1c004c36 <ReadImageFromFile+0x34c>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c004c1e:	864e                	mv	a2,s3
1c004c20:	85d6                	mv	a1,s5
1c004c22:	854a                	mv	a0,s2
1c004c24:	628020ef          	jal	ra,1c00724c <pi_fs_read>
			if (!len) return 1;
1c004c28:	48050363          	beqz	a0,1c0050ae <ReadImageFromFile+0x7c4>
			RemainBytes -= len;
1c004c2c:	40a989b3          	sub	s3,s3,a0
			pInpBuf += len;
1c004c30:	9aaa                	add	s5,s5,a0
		while (RemainBytes > 0) {
1c004c32:	ff3046e3          	bgtz	s3,1c004c1e <ReadImageFromFile+0x334>
		for (int j=0, i=0; i < W; i++) {
1c004c36:	f6842783          	lw	a5,-152(s0)
1c004c3a:	02f05f63          	blez	a5,1c004c78 <ReadImageFromFile+0x38e>
1c004c3e:	f6c42683          	lw	a3,-148(s0)
1c004c42:	85e6                	mv	a1,s9
1c004c44:	f6442703          	lw	a4,-156(s0)
1c004c48:	ffe70613          	addi	a2,a4,-2
1c004c4c:	8205                	srli	a2,a2,0x1
1c004c4e:	0605                	addi	a2,a2,1
1c004c50:	013640fb          	lp.setup	x1,a2,1c004c76 <ReadImageFromFile+0x38c>
			pInBuffer[W * CurRow + i] = ((((uint16_t)InputBuf[j]&0xf8)<<8)|(((uint16_t)InputBuf[j+1]&0xfc)<<3)|(((uint16_t)InputBuf[j+2]&0xf8)>>3));
1c004c54:	0006c783          	lbu	a5,0(a3)
1c004c58:	07a2                	slli	a5,a5,0x8
1c004c5a:	d407b7b3          	p.bclr	a5,a5,10,0
1c004c5e:	0016c703          	lbu	a4,1(a3)
1c004c62:	070e                	slli	a4,a4,0x3
1c004c64:	7e077713          	andi	a4,a4,2016
1c004c68:	8fd9                	or	a5,a5,a4
1c004c6a:	0026c703          	lbu	a4,2(a3)
1c004c6e:	830d                	srli	a4,a4,0x3
1c004c70:	8fd9                	or	a5,a5,a4
1c004c72:	00f5912b          	p.sh	a5,2(a1!)
1c004c76:	068d                	addi	a3,a3,3
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004c78:	0b85                	addi	s7,s7,1
1c004c7a:	9cee                	add	s9,s9,s11
1c004c7c:	f6042783          	lw	a5,-160(s0)
1c004c80:	f9779ae3          	bne	a5,s7,1c004c14 <ReadImageFromFile+0x32a>
	return 0;
1c004c84:	4981                	li	s3,0
1c004c86:	a12d                	j	1c0050b0 <ReadImageFromFile+0x7c6>
			printf("Buffer is too small, %s\n", ImageName); goto Fail;
1c004c88:	85a6                	mv	a1,s1
1c004c8a:	1c00e537          	lui	a0,0x1c00e
1c004c8e:	90c50513          	addi	a0,a0,-1780 # 1c00d90c <__clz_tab+0x4d0>
1c004c92:	64a070ef          	jal	ra,1c00c2dc <printf>
1c004c96:	bb01                	j	1c0049a6 <ReadImageFromFile+0xbc>
			printf("Buffer is too small, %s\n", ImageName); goto Fail;
1c004c98:	85a6                	mv	a1,s1
1c004c9a:	1c00e537          	lui	a0,0x1c00e
1c004c9e:	90c50513          	addi	a0,a0,-1780 # 1c00d90c <__clz_tab+0x4d0>
1c004ca2:	63a070ef          	jal	ra,1c00c2dc <printf>
1c004ca6:	b301                	j	1c0049a6 <ReadImageFromFile+0xbc>
		res = ReadShortImage(File, (short int *)InBuffer, W, H, BytesPerPixel);
1c004ca8:	f5c42783          	lw	a5,-164(s0)
1c004cac:	f6f42023          	sw	a5,-160(s0)
1c004cb0:	f5a42c23          	sw	s10,-168(s0)
1c004cb4:	8be2                	mv	s7,s8
{
1c004cb6:	f4242a23          	sw	sp,-172(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c004cba:	03878b33          	mul	s6,a5,s8
	short int InputBuf[RowSize];
1c004cbe:	0b06                	slli	s6,s6,0x1
1c004cc0:	010b0793          	addi	a5,s6,16
1c004cc4:	c607b7b3          	p.bclr	a5,a5,3,0
1c004cc8:	40f10133          	sub	sp,sp,a5
1c004ccc:	f6242423          	sw	sp,-152(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004cd0:	09a05863          	blez	s10,1c004d60 <ReadImageFromFile+0x476>
1c004cd4:	001c1c93          	slli	s9,s8,0x1
1c004cd8:	8de6                	mv	s11,s9
1c004cda:	f6042623          	sw	zero,-148(s0)
		int RemainBytes = RowSize*2;
1c004cde:	89da                	mv	s3,s6
		while (RemainBytes > 0) {
1c004ce0:	01605f63          	blez	s6,1c004cfe <ReadImageFromFile+0x414>
		unsigned char *pInpBuf = (unsigned char *) InputBuf;
1c004ce4:	f6842a83          	lw	s5,-152(s0)
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c004ce8:	864e                	mv	a2,s3
1c004cea:	85d6                	mv	a1,s5
1c004cec:	854a                	mv	a0,s2
1c004cee:	55e020ef          	jal	ra,1c00724c <pi_fs_read>
			if (!len) return 1;
1c004cf2:	c92d                	beqz	a0,1c004d64 <ReadImageFromFile+0x47a>
			RemainBytes -= len;
1c004cf4:	40a989b3          	sub	s3,s3,a0
			pInpBuf += len;
1c004cf8:	9aaa                	add	s5,s5,a0
		while (RemainBytes > 0) {
1c004cfa:	ff3047e3          	bgtz	s3,1c004ce8 <ReadImageFromFile+0x3fe>
		for (int i=0; i < W; i++) {
1c004cfe:	f6042783          	lw	a5,-160(s0)
1c004d02:	02f05f63          	blez	a5,1c004d40 <ReadImageFromFile+0x456>
1c004d06:	f6842803          	lw	a6,-152(s0)
1c004d0a:	f6442503          	lw	a0,-156(s0)
1c004d0e:	4881                	li	a7,0
1c004d10:	411785b3          	sub	a1,a5,a7
1c004d14:	a01d                	j	1c004d3a <ReadImageFromFile+0x450>
			for (int j=0; j < BytesPerPixel; j++) {
1c004d16:	86aa                	mv	a3,a0
1c004d18:	8742                	mv	a4,a6
1c004d1a:	ffed8793          	addi	a5,s11,-2
1c004d1e:	8385                	srli	a5,a5,0x1
1c004d20:	0785                	addi	a5,a5,1
1c004d22:	0047c0fb          	lp.setup	x1,a5,1c004d2a <ReadImageFromFile+0x440>
				pInBuffer[RowSize * CurRow + i * BytesPerPixel + j] = (short int) (InputBuf[i * BytesPerPixel + j]);
1c004d26:	0027160b          	p.lh	a2,2(a4!)
1c004d2a:	00c6912b          	p.sh	a2,2(a3!)
		for (int i=0; i < W; i++) {
1c004d2e:	0885                	addi	a7,a7,1
1c004d30:	9866                	add	a6,a6,s9
1c004d32:	9566                	add	a0,a0,s9
1c004d34:	15fd                	addi	a1,a1,-1
1c004d36:	e191                	bnez	a1,1c004d3a <ReadImageFromFile+0x450>
1c004d38:	a021                	j	1c004d40 <ReadImageFromFile+0x456>
			for (int j=0; j < BytesPerPixel; j++) {
1c004d3a:	fd704ee3          	bgtz	s7,1c004d16 <ReadImageFromFile+0x42c>
1c004d3e:	bfc5                	j	1c004d2e <ReadImageFromFile+0x444>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004d40:	f6c42703          	lw	a4,-148(s0)
1c004d44:	0705                	addi	a4,a4,1
1c004d46:	f6e42623          	sw	a4,-148(s0)
1c004d4a:	f6442783          	lw	a5,-156(s0)
1c004d4e:	97da                	add	a5,a5,s6
1c004d50:	f6f42223          	sw	a5,-156(s0)
1c004d54:	f5842783          	lw	a5,-168(s0)
1c004d58:	f8e793e3          	bne	a5,a4,1c004cde <ReadImageFromFile+0x3f4>
	return 0;
1c004d5c:	4981                	li	s3,0
1c004d5e:	a021                	j	1c004d66 <ReadImageFromFile+0x47c>
1c004d60:	4981                	li	s3,0
1c004d62:	a011                	j	1c004d66 <ReadImageFromFile+0x47c>
			if (!len) return 1;
1c004d64:	4985                	li	s3,1
1c004d66:	f5442103          	lw	sp,-172(s0)
	if (res) {
1c004d6a:	34098663          	beqz	s3,1c0050b6 <ReadImageFromFile+0x7cc>
		printf("Input ended unexpectedly or bad format, %s\n", ImageName); goto Fail;
1c004d6e:	85a6                	mv	a1,s1
1c004d70:	1c00e537          	lui	a0,0x1c00e
1c004d74:	92850513          	addi	a0,a0,-1752 # 1c00d928 <__clz_tab+0x4ec>
1c004d78:	564070ef          	jal	ra,1c00c2dc <printf>
1c004d7c:	b12d                	j	1c0049a6 <ReadImageFromFile+0xbc>
				if (Transpose2CHW){
1c004d7e:	f6042783          	lw	a5,-160(s0)
1c004d82:	cfd5                	beqz	a5,1c004e3e <ReadImageFromFile+0x554>
					res = ReadMultiChannelImageTranspose2CHW(File, (signed char *)InBuffer, W, H, BytesPerPixel);
1c004d84:	f5c42703          	lw	a4,-164(s0)
1c004d88:	f6e42423          	sw	a4,-152(s0)
1c004d8c:	f7a42023          	sw	s10,-160(s0)
1c004d90:	8b62                	mv	s6,s8
{
1c004d92:	f4242c23          	sw	sp,-168(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c004d96:	03870bb3          	mul	s7,a4,s8
	unsigned char InputBuf[RowSize];
1c004d9a:	00fb8793          	addi	a5,s7,15
1c004d9e:	c607b7b3          	p.bclr	a5,a5,3,0
1c004da2:	40f10133          	sub	sp,sp,a5
1c004da6:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004daa:	09a05463          	blez	s10,1c004e32 <ReadImageFromFile+0x548>
1c004dae:	f6442783          	lw	a5,-156(s0)
1c004db2:	00e78db3          	add	s11,a5,a4
1c004db6:	f6042223          	sw	zero,-156(s0)
		unsigned char *pInpBuf = InputBuf;
1c004dba:	f6c42c83          	lw	s9,-148(s0)
		int RemainBytes = RowSize;
1c004dbe:	8ade                	mv	s5,s7
		while (RemainBytes > 0) {
1c004dc0:	01705d63          	blez	s7,1c004dda <ReadImageFromFile+0x4f0>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c004dc4:	8656                	mv	a2,s5
1c004dc6:	85e6                	mv	a1,s9
1c004dc8:	854a                	mv	a0,s2
1c004dca:	482020ef          	jal	ra,1c00724c <pi_fs_read>
			if (!len) return 1;
1c004dce:	c525                	beqz	a0,1c004e36 <ReadImageFromFile+0x54c>
			RemainBytes -= len;
1c004dd0:	40aa8ab3          	sub	s5,s5,a0
			pInpBuf += len;
1c004dd4:	9caa                	add	s9,s9,a0
		while (RemainBytes > 0) {
1c004dd6:	ff5047e3          	bgtz	s5,1c004dc4 <ReadImageFromFile+0x4da>
		for (int i=0; i < W; i++) {
1c004dda:	f6842703          	lw	a4,-152(s0)
1c004dde:	02e05c63          	blez	a4,1c004e16 <ReadImageFromFile+0x52c>
1c004de2:	f6c42803          	lw	a6,-148(s0)
1c004de6:	f5c42783          	lw	a5,-164(s0)
1c004dea:	40fd8533          	sub	a0,s11,a5
1c004dee:	40ad85b3          	sub	a1,s11,a0
1c004df2:	a839                	j	1c004e10 <ReadImageFromFile+0x526>
			for (int j=0; j < BytesPerPixel; j++) {
1c004df4:	86aa                	mv	a3,a0
1c004df6:	8742                	mv	a4,a6
1c004df8:	87e2                	mv	a5,s8
1c004dfa:	0047c0fb          	lp.setup	x1,a5,1c004e02 <ReadImageFromFile+0x518>
				pInBuffer[ChannelSize * j + W * CurRow + i] = InputBuf[i * BytesPerPixel + j];
1c004dfe:	0017460b          	p.lbu	a2,1(a4!)
1c004e02:	00c6c9ab          	p.sb	a2,s3(a3!)
1c004e06:	9862                	add	a6,a6,s8
1c004e08:	0505                	addi	a0,a0,1
1c004e0a:	15fd                	addi	a1,a1,-1
1c004e0c:	e191                	bnez	a1,1c004e10 <ReadImageFromFile+0x526>
1c004e0e:	a021                	j	1c004e16 <ReadImageFromFile+0x52c>
			for (int j=0; j < BytesPerPixel; j++) {
1c004e10:	ff6042e3          	bgtz	s6,1c004df4 <ReadImageFromFile+0x50a>
1c004e14:	bfcd                	j	1c004e06 <ReadImageFromFile+0x51c>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004e16:	f6442703          	lw	a4,-156(s0)
1c004e1a:	0705                	addi	a4,a4,1
1c004e1c:	f6e42223          	sw	a4,-156(s0)
1c004e20:	f5c42783          	lw	a5,-164(s0)
1c004e24:	9dbe                	add	s11,s11,a5
1c004e26:	f6042783          	lw	a5,-160(s0)
1c004e2a:	f8e798e3          	bne	a5,a4,1c004dba <ReadImageFromFile+0x4d0>
	return 0;
1c004e2e:	4981                	li	s3,0
1c004e30:	a021                	j	1c004e38 <ReadImageFromFile+0x54e>
1c004e32:	4981                	li	s3,0
1c004e34:	a011                	j	1c004e38 <ReadImageFromFile+0x54e>
			if (!len) return 1;
1c004e36:	4985                	li	s3,1
1c004e38:	f5842103          	lw	sp,-168(s0)
1c004e3c:	b73d                	j	1c004d6a <ReadImageFromFile+0x480>
					res = ReadMultiChannelImage(File, (signed char *)InBuffer, W, H, BytesPerPixel);
1c004e3e:	f5c42703          	lw	a4,-164(s0)
1c004e42:	f6e42423          	sw	a4,-152(s0)
1c004e46:	f5a42c23          	sw	s10,-168(s0)
1c004e4a:	8b62                	mv	s6,s8
{
1c004e4c:	f4242a23          	sw	sp,-172(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c004e50:	03870db3          	mul	s11,a4,s8
1c004e54:	f5b42823          	sw	s11,-176(s0)
	unsigned char InputBuf[RowSize];
1c004e58:	00fd8793          	addi	a5,s11,15
1c004e5c:	c607b7b3          	p.bclr	a5,a5,3,0
1c004e60:	40f10133          	sub	sp,sp,a5
1c004e64:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004e68:	09a05863          	blez	s10,1c004ef8 <ReadImageFromFile+0x60e>
1c004e6c:	f4242623          	sw	sp,-180(s0)
1c004e70:	f6442783          	lw	a5,-156(s0)
1c004e74:	41878bb3          	sub	s7,a5,s8
1c004e78:	402b8bb3          	sub	s7,s7,sp
1c004e7c:	f6042c83          	lw	s9,-160(s0)
		unsigned char *pInpBuf = InputBuf;
1c004e80:	f6c42a83          	lw	s5,-148(s0)
		int RemainBytes = RowSize;
1c004e84:	89ee                	mv	s3,s11
		while (RemainBytes > 0) {
1c004e86:	01b05d63          	blez	s11,1c004ea0 <ReadImageFromFile+0x5b6>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c004e8a:	864e                	mv	a2,s3
1c004e8c:	85d6                	mv	a1,s5
1c004e8e:	854a                	mv	a0,s2
1c004e90:	3bc020ef          	jal	ra,1c00724c <pi_fs_read>
			if (!len) return 1;
1c004e94:	c52d                	beqz	a0,1c004efe <ReadImageFromFile+0x614>
			RemainBytes -= len;
1c004e96:	40a989b3          	sub	s3,s3,a0
			pInpBuf += len;
1c004e9a:	9aaa                	add	s5,s5,a0
		while (RemainBytes > 0) {
1c004e9c:	ff3047e3          	bgtz	s3,1c004e8a <ReadImageFromFile+0x5a0>
		for (int i=0; i < W; i++) {
1c004ea0:	f6842703          	lw	a4,-152(s0)
1c004ea4:	02e05f63          	blez	a4,1c004ee2 <ReadImageFromFile+0x5f8>
1c004ea8:	f4c42783          	lw	a5,-180(s0)
1c004eac:	00fc05b3          	add	a1,s8,a5
1c004eb0:	f6042803          	lw	a6,-160(s0)
1c004eb4:	41070533          	sub	a0,a4,a6
1c004eb8:	a821                	j	1c004ed0 <ReadImageFromFile+0x5e6>
				pInBuffer[RowSize * CurRow + i * BytesPerPixel + j] = InputBuf[i * BytesPerPixel + j];
1c004eba:	0017460b          	p.lbu	a2,1(a4!)
1c004ebe:	00c680ab          	p.sb	a2,1(a3!)
1c004ec2:	17fd                	addi	a5,a5,-1
1c004ec4:	fbfd                	bnez	a5,1c004eba <ReadImageFromFile+0x5d0>
		for (int i=0; i < W; i++) {
1c004ec6:	0805                	addi	a6,a6,1
1c004ec8:	95e2                	add	a1,a1,s8
1c004eca:	157d                	addi	a0,a0,-1
1c004ecc:	e111                	bnez	a0,1c004ed0 <ReadImageFromFile+0x5e6>
1c004ece:	a811                	j	1c004ee2 <ReadImageFromFile+0x5f8>
1c004ed0:	41858733          	sub	a4,a1,s8
1c004ed4:	017586b3          	add	a3,a1,s7
1c004ed8:	40e587b3          	sub	a5,a1,a4
			for (int j=0; j < BytesPerPixel; j++) {
1c004edc:	fd604fe3          	bgtz	s6,1c004eba <ReadImageFromFile+0x5d0>
1c004ee0:	b7dd                	j	1c004ec6 <ReadImageFromFile+0x5dc>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004ee2:	0c85                	addi	s9,s9,1
1c004ee4:	f5042703          	lw	a4,-176(s0)
1c004ee8:	9bba                	add	s7,s7,a4
1c004eea:	f5842783          	lw	a5,-168(s0)
1c004eee:	f99799e3          	bne	a5,s9,1c004e80 <ReadImageFromFile+0x596>
	return 0;
1c004ef2:	f6042983          	lw	s3,-160(s0)
1c004ef6:	a029                	j	1c004f00 <ReadImageFromFile+0x616>
1c004ef8:	f6042983          	lw	s3,-160(s0)
1c004efc:	a011                	j	1c004f00 <ReadImageFromFile+0x616>
			if (!len) return 1;
1c004efe:	4985                	li	s3,1
1c004f00:	f5442103          	lw	sp,-172(s0)
1c004f04:	b59d                	j	1c004d6a <ReadImageFromFile+0x480>
				if (Transpose2CHW){
1c004f06:	f6042703          	lw	a4,-160(s0)
1c004f0a:	cf71                	beqz	a4,1c004fe6 <ReadImageFromFile+0x6fc>
					res = ReadMultiChannelImageShortTranspose2CHW(File, (short int *)InBuffer, W, H, BytesPerPixel);
1c004f0c:	f5c42783          	lw	a5,-164(s0)
1c004f10:	f6f42023          	sw	a5,-160(s0)
1c004f14:	f5a42c23          	sw	s10,-168(s0)
1c004f18:	8b62                	mv	s6,s8
{
1c004f1a:	f4242a23          	sw	sp,-172(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c004f1e:	03878bb3          	mul	s7,a5,s8
	unsigned char InputBuf[RowSize];
1c004f22:	00fb8793          	addi	a5,s7,15
1c004f26:	c607b7b3          	p.bclr	a5,a5,3,0
1c004f2a:	40f10133          	sub	sp,sp,a5
1c004f2e:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004f32:	0ba05463          	blez	s10,1c004fda <ReadImageFromFile+0x6f0>
1c004f36:	f5c42703          	lw	a4,-164(s0)
1c004f3a:	0706                	slli	a4,a4,0x1
1c004f3c:	f6e42423          	sw	a4,-152(s0)
1c004f40:	f6442783          	lw	a5,-156(s0)
1c004f44:	00e78db3          	add	s11,a5,a4
1c004f48:	f5c42703          	lw	a4,-164(s0)
1c004f4c:	40e007b3          	neg	a5,a4
1c004f50:	0786                	slli	a5,a5,0x1
1c004f52:	f4f42823          	sw	a5,-176(s0)
1c004f56:	0986                	slli	s3,s3,0x1
1c004f58:	f6042223          	sw	zero,-156(s0)
		unsigned char *pInpBuf = InputBuf;
1c004f5c:	f6c42c83          	lw	s9,-148(s0)
		int RemainBytes = RowSize;
1c004f60:	8ade                	mv	s5,s7
		while (RemainBytes > 0) {
1c004f62:	01705d63          	blez	s7,1c004f7c <ReadImageFromFile+0x692>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c004f66:	8656                	mv	a2,s5
1c004f68:	85e6                	mv	a1,s9
1c004f6a:	854a                	mv	a0,s2
1c004f6c:	2e0020ef          	jal	ra,1c00724c <pi_fs_read>
			if (!len) return 1;
1c004f70:	c53d                	beqz	a0,1c004fde <ReadImageFromFile+0x6f4>
			RemainBytes -= len;
1c004f72:	40aa8ab3          	sub	s5,s5,a0
			pInpBuf += len;
1c004f76:	9caa                	add	s9,s9,a0
		while (RemainBytes > 0) {
1c004f78:	ff5047e3          	bgtz	s5,1c004f66 <ReadImageFromFile+0x67c>
		for (int i=0; i < W; i++) {
1c004f7c:	f6042783          	lw	a5,-160(s0)
1c004f80:	02f05f63          	blez	a5,1c004fbe <ReadImageFromFile+0x6d4>
1c004f84:	f6c42803          	lw	a6,-148(s0)
1c004f88:	f5042703          	lw	a4,-176(s0)
1c004f8c:	00ed8533          	add	a0,s11,a4
1c004f90:	40ad85b3          	sub	a1,s11,a0
1c004f94:	15f9                	addi	a1,a1,-2
1c004f96:	8185                	srli	a1,a1,0x1
1c004f98:	0585                	addi	a1,a1,1
1c004f9a:	a839                	j	1c004fb8 <ReadImageFromFile+0x6ce>
			for (int j=0; j < BytesPerPixel; j++) {
1c004f9c:	86aa                	mv	a3,a0
1c004f9e:	8742                	mv	a4,a6
1c004fa0:	87e2                	mv	a5,s8
1c004fa2:	0047c0fb          	lp.setup	x1,a5,1c004faa <ReadImageFromFile+0x6c0>
				pInBuffer[ChannelSize * j + W * CurRow + i] = (short int) (InputBuf[i * BytesPerPixel + j]);
1c004fa6:	0017460b          	p.lbu	a2,1(a4!)
1c004faa:	00c6d9ab          	p.sh	a2,s3(a3!)
1c004fae:	9862                	add	a6,a6,s8
1c004fb0:	0509                	addi	a0,a0,2
1c004fb2:	15fd                	addi	a1,a1,-1
1c004fb4:	e191                	bnez	a1,1c004fb8 <ReadImageFromFile+0x6ce>
1c004fb6:	a021                	j	1c004fbe <ReadImageFromFile+0x6d4>
			for (int j=0; j < BytesPerPixel; j++) {
1c004fb8:	ff6042e3          	bgtz	s6,1c004f9c <ReadImageFromFile+0x6b2>
1c004fbc:	bfcd                	j	1c004fae <ReadImageFromFile+0x6c4>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c004fbe:	f6442783          	lw	a5,-156(s0)
1c004fc2:	0785                	addi	a5,a5,1
1c004fc4:	f6f42223          	sw	a5,-156(s0)
1c004fc8:	f6842703          	lw	a4,-152(s0)
1c004fcc:	9dba                	add	s11,s11,a4
1c004fce:	f5842703          	lw	a4,-168(s0)
1c004fd2:	f8f715e3          	bne	a4,a5,1c004f5c <ReadImageFromFile+0x672>
	return 0;
1c004fd6:	4981                	li	s3,0
1c004fd8:	a021                	j	1c004fe0 <ReadImageFromFile+0x6f6>
1c004fda:	4981                	li	s3,0
1c004fdc:	a011                	j	1c004fe0 <ReadImageFromFile+0x6f6>
			if (!len) return 1;
1c004fde:	4985                	li	s3,1
1c004fe0:	f5442103          	lw	sp,-172(s0)
1c004fe4:	b359                	j	1c004d6a <ReadImageFromFile+0x480>
					res = ReadMultiChannelImageShort(File, (short int *)InBuffer, W, H, BytesPerPixel);
1c004fe6:	f5c42783          	lw	a5,-164(s0)
1c004fea:	f6f42423          	sw	a5,-152(s0)
1c004fee:	f5a42c23          	sw	s10,-168(s0)
1c004ff2:	8b62                	mv	s6,s8
{
1c004ff4:	f4242a23          	sw	sp,-172(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c004ff8:	03878db3          	mul	s11,a5,s8
	unsigned char InputBuf[RowSize];
1c004ffc:	00fd8793          	addi	a5,s11,15
1c005000:	c607b7b3          	p.bclr	a5,a5,3,0
1c005004:	40f10133          	sub	sp,sp,a5
1c005008:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c00500c:	09a05863          	blez	s10,1c00509c <ReadImageFromFile+0x7b2>
1c005010:	001d9713          	slli	a4,s11,0x1
1c005014:	f4e42823          	sw	a4,-176(s0)
1c005018:	001c1b93          	slli	s7,s8,0x1
1c00501c:	f6042c83          	lw	s9,-160(s0)
		unsigned char *pInpBuf = InputBuf;
1c005020:	f6c42a83          	lw	s5,-148(s0)
		int RemainBytes = RowSize;
1c005024:	89ee                	mv	s3,s11
		while (RemainBytes > 0) {
1c005026:	01b05d63          	blez	s11,1c005040 <ReadImageFromFile+0x756>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c00502a:	864e                	mv	a2,s3
1c00502c:	85d6                	mv	a1,s5
1c00502e:	854a                	mv	a0,s2
1c005030:	21c020ef          	jal	ra,1c00724c <pi_fs_read>
			if (!len) return 1;
1c005034:	c53d                	beqz	a0,1c0050a2 <ReadImageFromFile+0x7b8>
			RemainBytes -= len;
1c005036:	40a989b3          	sub	s3,s3,a0
			pInpBuf += len;
1c00503a:	9aaa                	add	s5,s5,a0
		while (RemainBytes > 0) {
1c00503c:	ff3047e3          	bgtz	s3,1c00502a <ReadImageFromFile+0x740>
		for (int i=0; i < W; i++) {
1c005040:	f6842703          	lw	a4,-152(s0)
1c005044:	02e05d63          	blez	a4,1c00507e <ReadImageFromFile+0x794>
1c005048:	f6c42803          	lw	a6,-148(s0)
1c00504c:	f6442503          	lw	a0,-156(s0)
1c005050:	f6042883          	lw	a7,-160(s0)
1c005054:	411705b3          	sub	a1,a4,a7
1c005058:	a005                	j	1c005078 <ReadImageFromFile+0x78e>
			for (int j=0; j < BytesPerPixel; j++) {
1c00505a:	86aa                	mv	a3,a0
1c00505c:	8742                	mv	a4,a6
1c00505e:	87e2                	mv	a5,s8
1c005060:	0047c0fb          	lp.setup	x1,a5,1c005068 <ReadImageFromFile+0x77e>
				pInBuffer[RowSize * CurRow + i * BytesPerPixel + j] = (short int) (InputBuf[i * BytesPerPixel + j]);
1c005064:	0017460b          	p.lbu	a2,1(a4!)
1c005068:	00c6912b          	p.sh	a2,2(a3!)
		for (int i=0; i < W; i++) {
1c00506c:	0885                	addi	a7,a7,1
1c00506e:	9862                	add	a6,a6,s8
1c005070:	955e                	add	a0,a0,s7
1c005072:	15fd                	addi	a1,a1,-1
1c005074:	e191                	bnez	a1,1c005078 <ReadImageFromFile+0x78e>
1c005076:	a021                	j	1c00507e <ReadImageFromFile+0x794>
			for (int j=0; j < BytesPerPixel; j++) {
1c005078:	ff6041e3          	bgtz	s6,1c00505a <ReadImageFromFile+0x770>
1c00507c:	bfc5                	j	1c00506c <ReadImageFromFile+0x782>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c00507e:	0c85                	addi	s9,s9,1
1c005080:	f6442783          	lw	a5,-156(s0)
1c005084:	f5042703          	lw	a4,-176(s0)
1c005088:	97ba                	add	a5,a5,a4
1c00508a:	f6f42223          	sw	a5,-156(s0)
1c00508e:	f5842783          	lw	a5,-168(s0)
1c005092:	f99797e3          	bne	a5,s9,1c005020 <ReadImageFromFile+0x736>
	return 0;
1c005096:	f6042983          	lw	s3,-160(s0)
1c00509a:	a029                	j	1c0050a4 <ReadImageFromFile+0x7ba>
1c00509c:	f6042983          	lw	s3,-160(s0)
1c0050a0:	a011                	j	1c0050a4 <ReadImageFromFile+0x7ba>
			if (!len) return 1;
1c0050a2:	4985                	li	s3,1
1c0050a4:	f5442103          	lw	sp,-172(s0)
1c0050a8:	b1c9                	j	1c004d6a <ReadImageFromFile+0x480>
	return 0;
1c0050aa:	4981                	li	s3,0
1c0050ac:	a011                	j	1c0050b0 <ReadImageFromFile+0x7c6>
			if (!len) return 1;
1c0050ae:	4985                	li	s3,1
1c0050b0:	f5842103          	lw	sp,-168(s0)
				break;
1c0050b4:	b95d                	j	1c004d6a <ReadImageFromFile+0x480>
	__CLOSE(File);
1c0050b6:	854a                	mv	a0,s2
1c0050b8:	184020ef          	jal	ra,1c00723c <pi_fs_close>
	__FS_DEINIT(fs);
1c0050bc:	fb440513          	addi	a0,s0,-76
1c0050c0:	16c020ef          	jal	ra,1c00722c <pi_fs_unmount>
	PRINTF("Image %s, [W: %d, H: %d], Bytes per pixel %d, Size: %d bytes, Loaded successfully\n", ImageName, W, H, BytesPerPixel, Size);
1c0050c4:	87d2                	mv	a5,s4
1c0050c6:	8762                	mv	a4,s8
1c0050c8:	86ea                	mv	a3,s10
1c0050ca:	f5c42603          	lw	a2,-164(s0)
1c0050ce:	85a6                	mv	a1,s1
1c0050d0:	1c00e537          	lui	a0,0x1c00e
1c0050d4:	95450513          	addi	a0,a0,-1708 # 1c00d954 <__clz_tab+0x518>
1c0050d8:	204070ef          	jal	ra,1c00c2dc <printf>
	return 0;
1c0050dc:	b0e5                	j	1c0049c4 <ReadImageFromFile+0xda>

1c0050de <KerReductIO_Compact_SQ8_1>:
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	for (int c=First; c<Last; c++) KerReduct_Activation_SQ8(In+Size*c, Out+Size*c, Size, Scale[c], ScaleN[c], ACT_LEAKYRELU, ActScale, ActScaleN, A0, B0, C0);
	gap_waitbarrier(0);
}
1c0050de:	f1402773          	csrr	a4,mhartid
1c0050e2:	c8071733          	p.extractu	a4,a4,4,0
1c0050e6:	f83637b3          	p.bclr	a5,a2,28,3
1c0050ea:	00f037b3          	snez	a5,a5
1c0050ee:	00365813          	srli	a6,a2,0x3
1c0050f2:	97c2                	add	a5,a5,a6
1c0050f4:	02f70733          	mul	a4,a4,a5
1c0050f8:	00f70f33          	add	t5,a4,a5
1c0050fc:	04cf4f33          	p.min	t5,t5,a2
1c005100:	40ef0f33          	sub	t5,t5,a4
1c005104:	10d65363          	ble	a3,a2,1c00520a <KerReductIO_Compact_SQ8_1+0x12c>
1c005108:	7139                	addi	sp,sp,-64
1c00510a:	de22                	sw	s0,60(sp)
1c00510c:	dc26                	sw	s1,56(sp)
1c00510e:	da4a                	sw	s2,52(sp)
1c005110:	d84e                	sw	s3,48(sp)
1c005112:	d652                	sw	s4,44(sp)
1c005114:	d456                	sw	s5,40(sp)
1c005116:	d25a                	sw	s6,36(sp)
1c005118:	d05e                	sw	s7,32(sp)
1c00511a:	ce62                	sw	s8,28(sp)
1c00511c:	cc66                	sw	s9,24(sp)
1c00511e:	ca6a                	sw	s10,20(sp)
1c005120:	c86e                	sw	s11,16(sp)
1c005122:	8bb2                	mv	s7,a2
1c005124:	040f6f33          	p.max	t5,t5,zero
1c005128:	00261b13          	slli	s6,a2,0x2
1c00512c:	ffff0793          	addi	a5,t5,-1
1c005130:	97ba                	add	a5,a5,a4
1c005132:	00fb0833          	add	a6,s6,a5
1c005136:	95c2                	add	a1,a1,a6
1c005138:	97b2                	add	a5,a5,a2
1c00513a:	953e                	add	a0,a0,a5
1c00513c:	c40f39b3          	p.bclr	s3,t5,2,0
1c005140:	41e989b3          	sub	s3,s3,t5
1c005144:	8fb2                	mv	t6,a2
1c005146:	4285                	li	t0,1
1c005148:	41e282b3          	sub	t0,t0,t5
1c00514c:	40e283b3          	sub	t2,t0,a4
1c005150:	4d9d                	li	s11,7
1c005152:	4415                	li	s0,5
1c005154:	41e40433          	sub	s0,s0,t5
1c005158:	0985                	addi	s3,s3,1
1c00515a:	004f7d13          	andi	s10,t5,4
1c00515e:	c40f3ab3          	p.bclr	s5,t5,2,0
1c005162:	9aba                	add	s5,s5,a4
1c005164:	002f7c93          	andi	s9,t5,2
1c005168:	c20f37b3          	p.bclr	a5,t5,1,0
1c00516c:	97ba                	add	a5,a5,a4
1c00516e:	c63e                	sw	a5,12(sp)
1c005170:	fc1f3c33          	p.bclr	s8,t5,30,1
1c005174:	00204a37          	lui	s4,0x204
1c005178:	200a0a13          	addi	s4,s4,512 # 204200 <__L2+0x184200>
1c00517c:	a801                	j	1c00518c <KerReductIO_Compact_SQ8_1+0xae>
1c00517e:	01ca6783          	p.elw	a5,28(s4)
1c005182:	9fb2                	add	t6,t6,a2
1c005184:	95da                	add	a1,a1,s6
1c005186:	955e                	add	a0,a0,s7
1c005188:	06dfd363          	ble	a3,t6,1c0051ee <KerReductIO_Compact_SQ8_1+0x110>
1c00518c:	00b38933          	add	s2,t2,a1
1c005190:	00a384b3          	add	s1,t2,a0
1c005194:	03edf963          	bleu	t5,s11,1c0051c6 <KerReductIO_Compact_SQ8_1+0xe8>
1c005198:	00a28333          	add	t1,t0,a0
1c00519c:	00b408b3          	add	a7,s0,a1
1c0051a0:	00a40833          	add	a6,s0,a0
1c0051a4:	00b28733          	add	a4,t0,a1
1c0051a8:	405987b3          	sub	a5,s3,t0
1c0051ac:	17e1                	addi	a5,a5,-8
1c0051ae:	838d                	srli	a5,a5,0x3
1c0051b0:	0785                	addi	a5,a5,1
1c0051b2:	0087c0fb          	lp.setup	x1,a5,1c0051c2 <KerReductIO_Compact_SQ8_1+0xe4>
1c0051b6:	0088ae0b          	p.lw	t3,8(a7!)
1c0051ba:	00872e8b          	p.lw	t4,8(a4!)
1c0051be:	01d3242b          	p.sw	t4,8(t1!)
1c0051c2:	01c8242b          	p.sw	t3,8(a6!)
1c0051c6:	000d0663          	beqz	s10,1c0051d2 <KerReductIO_Compact_SQ8_1+0xf4>
1c0051ca:	21597783          	p.lw	a5,s5(s2)
1c0051ce:	00f4eaa3          	p.sw	a5,s5(s1)
1c0051d2:	000c8763          	beqz	s9,1c0051e0 <KerReductIO_Compact_SQ8_1+0x102>
1c0051d6:	4732                	lw	a4,12(sp)
1c0051d8:	50e97783          	p.lhu	a5,a4(s2)
1c0051dc:	00f4d723          	p.sh	a5,a4(s1)
1c0051e0:	f80c0fe3          	beqz	s8,1c00517e <KerReductIO_Compact_SQ8_1+0xa0>
1c0051e4:	0005c783          	lbu	a5,0(a1)
1c0051e8:	00f50023          	sb	a5,0(a0)
1c0051ec:	bf49                	j	1c00517e <KerReductIO_Compact_SQ8_1+0xa0>
1c0051ee:	5472                	lw	s0,60(sp)
1c0051f0:	54e2                	lw	s1,56(sp)
1c0051f2:	5952                	lw	s2,52(sp)
1c0051f4:	59c2                	lw	s3,48(sp)
1c0051f6:	5a32                	lw	s4,44(sp)
1c0051f8:	5aa2                	lw	s5,40(sp)
1c0051fa:	5b12                	lw	s6,36(sp)
1c0051fc:	5b82                	lw	s7,32(sp)
1c0051fe:	4c72                	lw	s8,28(sp)
1c005200:	4ce2                	lw	s9,24(sp)
1c005202:	4d52                	lw	s10,20(sp)
1c005204:	4dc2                	lw	s11,16(sp)
1c005206:	6121                	addi	sp,sp,64
1c005208:	8082                	ret
1c00520a:	8082                	ret

1c00520c <KerParReduct_CC_SQ8>:
1c00520c:	00855683          	lhu	a3,8(a0)
1c005210:	f1402773          	csrr	a4,mhartid
1c005214:	c8071733          	p.extractu	a4,a4,4,0
1c005218:	f836b7b3          	p.bclr	a5,a3,28,3
1c00521c:	00f037b3          	snez	a5,a5
1c005220:	0036d613          	srli	a2,a3,0x3
1c005224:	97b2                	add	a5,a5,a2
1c005226:	02f70733          	mul	a4,a4,a5
1c00522a:	00f70833          	add	a6,a4,a5
1c00522e:	04d84833          	p.min	a6,a6,a3
1c005232:	00052e03          	lw	t3,0(a0)
1c005236:	01052e83          	lw	t4,16(a0)
1c00523a:	01452f03          	lw	t5,20(a0)
1c00523e:	00452303          	lw	t1,4(a0)
1c005242:	00a55883          	lhu	a7,10(a0)
1c005246:	00c55783          	lhu	a5,12(a0)
1c00524a:	02f888b3          	mul	a7,a7,a5
1c00524e:	05077563          	bleu	a6,a4,1c005298 <KerParReduct_CC_SQ8+0x8c>
1c005252:	9f3a                	add	t5,t5,a4
1c005254:	00289f93          	slli	t6,a7,0x2
1c005258:	43f70e33          	p.mac	t3,a4,t6
1c00525c:	43170333          	p.mac	t1,a4,a7
1c005260:	9eba                	add	t4,t4,a4
1c005262:	40e80833          	sub	a6,a6,a4
1c005266:	0188407b          	lp.setup	x0,a6,1c005296 <KerParReduct_CC_SQ8+0x8a>
1c00526a:	001ec50b          	p.lbu	a0,1(t4!)
1c00526e:	001f468b          	p.lbu	a3,1(t5!)
1c005272:	02088163          	beqz	a7,1c005294 <KerParReduct_CC_SQ8+0x88>
1c005276:	859a                	mv	a1,t1
1c005278:	8672                	mv	a2,t3
1c00527a:	8746                	mv	a4,a7
1c00527c:	00a740fb          	lp.setup	x1,a4,1c005290 <KerParReduct_CC_SQ8+0x84>
1c005280:	0046278b          	p.lw	a5,4(a2!)
1c005284:	02a787b3          	mul	a5,a5,a0
1c005288:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c00528c:	148797b3          	p.clip	a5,a5,8
1c005290:	00f580ab          	p.sb	a5,1(a1!)
1c005294:	9e7e                	add	t3,t3,t6
1c005296:	9346                	add	t1,t1,a7
1c005298:	002047b7          	lui	a5,0x204
1c00529c:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0052a0:	01c7e703          	p.elw	a4,28(a5)
1c0052a4:	8082                	ret

1c0052a6 <KerParReductIO_CC_SQ8>:
*/
extern void DumpFeaturePlanes(char *Mess, int DataSize, void *Plane, unsigned int NPlanes, unsigned int W, unsigned int Wmax, unsigned int H, unsigned int Hmax);

void KerParReductIO_CC_SQ8(KerConvLinReduct_SQ8_T *Arg)

{
1c0052a6:	1141                	addi	sp,sp,-16
1c0052a8:	c606                	sw	ra,12(sp)
	unsigned int S = Arg->Feat;
1c0052aa:	00855703          	lhu	a4,8(a0)
	unsigned int Size = Arg->W*Arg->H;
1c0052ae:	00a55783          	lhu	a5,10(a0)
1c0052b2:	00c55603          	lhu	a2,12(a0)
1c0052b6:	02c78633          	mul	a2,a5,a2
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0052ba:	f14027f3          	csrr	a5,mhartid
1c0052be:	c80797b3          	p.extractu	a5,a5,4,0
        Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0052c2:	f83732b3          	p.bclr	t0,a4,28,3
1c0052c6:	005032b3          	snez	t0,t0
1c0052ca:	00375693          	srli	a3,a4,0x3
1c0052ce:	92b6                	add	t0,t0,a3
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0052d0:	025787b3          	mul	a5,a5,t0
1c0052d4:	00578333          	add	t1,a5,t0
1c0052d8:	04e34333          	p.min	t1,t1,a4
	int * __restrict__ In = (int *__restrict__) Arg->In;
1c0052dc:	00052083          	lw	ra,0(a0)
1c0052e0:	00261393          	slli	t2,a2,0x2
	signed char *__restrict__ Out = (signed char *__restrict__)(In+First*Size);
1c0052e4:	8e06                	mv	t3,ra
1c0052e6:	42f38e33          	p.mac	t3,t2,a5
	unsigned char * __restrict__ Scale = (unsigned char *__restrict__) Arg->Scale;
1c0052ea:	01052f03          	lw	t5,16(a0)
	unsigned char * __restrict__ ScaleN = (unsigned char *__restrict__) Arg->ScaleN;
1c0052ee:	01452f83          	lw	t6,20(a0)
	signed char * __restrict__ Infos = (signed char *__restrict__) Arg->Infos;
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	S = Size*Max(0, Last-First);
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c0052f2:	0267ff63          	bleu	t1,a5,1c005330 <KerParReductIO_CC_SQ8+0x8a>
1c0052f6:	9fbe                	add	t6,t6,a5
1c0052f8:	8ef2                	mv	t4,t3
1c0052fa:	9f3e                	add	t5,t5,a5
1c0052fc:	40f30333          	sub	t1,t1,a5
1c005300:	0173407b          	lp.setup	x0,t1,1c00532e <KerParReductIO_CC_SQ8+0x88>
1c005304:	001f488b          	p.lbu	a7,1(t5!)
1c005308:	001fc68b          	p.lbu	a3,1(t6!)
        for (unsigned int i=0; i<N; i++) {
1c00530c:	c205                	beqz	a2,1c00532c <KerParReductIO_CC_SQ8+0x86>
1c00530e:	8872                	mv	a6,t3
1c005310:	85f6                	mv	a1,t4
1c005312:	8732                	mv	a4,a2
1c005314:	00a740fb          	lp.setup	x1,a4,1c005328 <KerParReductIO_CC_SQ8+0x82>
                int Acc0 = gap_clip(AT_SCALE(In[i], Scale, ScaleN), 7);
1c005318:	0045a78b          	p.lw	a5,4(a1!)
1c00531c:	031787b3          	mul	a5,a5,a7
1c005320:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c005324:	148797b3          	p.clip	a5,a5,8
                Out[i] = Acc0;
1c005328:	00f800ab          	p.sb	a5,1(a6!)
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c00532c:	9e32                	add	t3,t3,a2
1c00532e:	9e9e                	add	t4,t4,t2
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005330:	002047b7          	lui	a5,0x204
1c005334:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c005338:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	// KerReductIO_Compact_SQ8(In, S, CoreId, ChunkCell*Size);
	KerReductIO_Compact_SQ8_1((signed char *__restrict__)In, (signed char *__restrict__)In, Size*ChunkCell, Size * Arg->Feat);
1c00533c:	00855683          	lhu	a3,8(a0)
1c005340:	02c686b3          	mul	a3,a3,a2
1c005344:	02560633          	mul	a2,a2,t0
1c005348:	8586                	mv	a1,ra
1c00534a:	8506                	mv	a0,ra
1c00534c:	3b49                	jal	1c0050de <KerReductIO_Compact_SQ8_1>
}
1c00534e:	40b2                	lw	ra,12(sp)
1c005350:	0141                	addi	sp,sp,16
1c005352:	8082                	ret

1c005354 <KerParSetBiasB32_SQ8>:
			Out[W*H*f + First + 2*i] = B; Out[W*H*f + First + 2*i+1] = B;
		}
		if (Iter&0x1) Out[W*H*f + First + Iter-1] = B;
	}
	gap_waitbarrier(0);
}
1c005354:	4118                	lw	a4,0(a0)
1c005356:	00455303          	lhu	t1,4(a0)
1c00535a:	00655883          	lhu	a7,6(a0)
1c00535e:	00855603          	lhu	a2,8(a0)
1c005362:	00c52803          	lw	a6,12(a0)
1c005366:	01054e03          	lbu	t3,16(a0)
1c00536a:	f14026f3          	csrr	a3,mhartid
1c00536e:	c80696b3          	p.extractu	a3,a3,4,0
1c005372:	f83637b3          	p.bclr	a5,a2,28,3
1c005376:	00f037b3          	snez	a5,a5
1c00537a:	00365593          	srli	a1,a2,0x3
1c00537e:	97ae                	add	a5,a5,a1
1c005380:	02f686b3          	mul	a3,a3,a5
1c005384:	97b6                	add	a5,a5,a3
1c005386:	04c7c7b3          	p.min	a5,a5,a2
1c00538a:	06f6f863          	bleu	a5,a3,1c0053fa <KerParSetBiasB32_SQ8+0xa6>
1c00538e:	03130333          	mul	t1,t1,a7
1c005392:	00231f93          	slli	t6,t1,0x2
1c005396:	00135313          	srli	t1,t1,0x1
1c00539a:	ffcf8893          	addi	a7,t6,-4
1c00539e:	00269613          	slli	a2,a3,0x2
1c0053a2:	8546                	mv	a0,a7
1c0053a4:	42df8533          	p.mac	a0,t6,a3
1c0053a8:	953a                	add	a0,a0,a4
1c0053aa:	00279593          	slli	a1,a5,0x2
1c0053ae:	9832                	add	a6,a6,a2
1c0053b0:	00331f13          	slli	t5,t1,0x3
1c0053b4:	411f0f33          	sub	t5,t5,a7
1c0053b8:	4e91                	li	t4,4
1c0053ba:	411e8eb3          	sub	t4,t4,a7
1c0053be:	8d91                	sub	a1,a1,a2
1c0053c0:	15f1                	addi	a1,a1,-4
1c0053c2:	8189                	srli	a1,a1,0x2
1c0053c4:	0585                	addi	a1,a1,1
1c0053c6:	0195c07b          	lp.setup	x0,a1,1c0053f8 <KerParSetBiasB32_SQ8+0xa4>
1c0053ca:	0048270b          	p.lw	a4,4(a6!)
1c0053ce:	01c71733          	sll	a4,a4,t3
1c0053d2:	02030163          	beqz	t1,1c0053f4 <KerParSetBiasB32_SQ8+0xa0>
1c0053d6:	00ae8633          	add	a2,t4,a0
1c0053da:	411506b3          	sub	a3,a0,a7
1c0053de:	01e887b3          	add	a5,a7,t5
1c0053e2:	17e1                	addi	a5,a5,-8
1c0053e4:	838d                	srli	a5,a5,0x3
1c0053e6:	0785                	addi	a5,a5,1
1c0053e8:	0047c0fb          	lp.setup	x1,a5,1c0053f0 <KerParSetBiasB32_SQ8+0x9c>
1c0053ec:	00e6a42b          	p.sw	a4,8(a3!)
1c0053f0:	00e6242b          	p.sw	a4,8(a2!)
1c0053f4:	00e56fab          	p.sw	a4,t6(a0!)
1c0053f8:	0001                	nop
1c0053fa:	002047b7          	lui	a5,0x204
1c0053fe:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c005402:	01c7e703          	p.elw	a4,28(a5)
1c005406:	8082                	ret

1c005408 <KerParLinearLayer_SQ8>:
**************************************************************************************************************************************/

/* Output cannnot be evaluated completly, result on 32b, Bias assumed to be set before and reduction/scaling/activation after */
void KerParLinearLayer_SQ8(KerLinear_SQ8_T *Arg)

{
1c005408:	7179                	addi	sp,sp,-48
1c00540a:	d622                	sw	s0,44(sp)
1c00540c:	d426                	sw	s1,40(sp)
1c00540e:	d24a                	sw	s2,36(sp)
1c005410:	d04e                	sw	s3,32(sp)
1c005412:	ce52                	sw	s4,28(sp)
1c005414:	cc56                	sw	s5,24(sp)
1c005416:	ca5a                	sw	s6,20(sp)
1c005418:	c85e                	sw	s7,16(sp)
1c00541a:	c662                	sw	s8,12(sp)
1c00541c:	c466                	sw	s9,8(sp)
	signed char * __restrict__ In = Arg->In;
1c00541e:	4104                	lw	s1,0(a0)
	int TotalInDim = Arg->TotalInDim;				// Reorganize weight layout to make TotalInDim = InDim
1c005420:	01255603          	lhu	a2,18(a0)
	unsigned int InDim = Arg->InDim, OutDim = Arg->OutDim;
1c005424:	01055283          	lhu	t0,16(a0)
1c005428:	01455683          	lhu	a3,20(a0)
	const signed char * __restrict__ Weights = Arg->Weights;
1c00542c:	00452a03          	lw	s4,4(a0)
	int * __restrict__ Out = Arg->Out;
1c005430:	00c52903          	lw	s2,12(a0)

	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c005434:	f1402773          	csrr	a4,mhartid
1c005438:	c8071733          	p.extractu	a4,a4,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00543c:	f836b7b3          	p.bclr	a5,a3,28,3
1c005440:	00f037b3          	snez	a5,a5
1c005444:	0036d593          	srli	a1,a3,0x3
1c005448:	97ae                	add	a5,a5,a1
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c00544a:	02f70733          	mul	a4,a4,a5
1c00544e:	97ba                	add	a5,a5,a4
1c005450:	04d7c7b3          	p.min	a5,a5,a3
	v4s * __restrict__ VectIn = (v4s *) In;

	for (int i=First; i<Last; i++) {
1c005454:	0cf77863          	bleu	a5,a4,1c005524 <KerParLinearLayer_SQ8+0x11c>
1c005458:	8396                	mv	t2,t0
1c00545a:	00271693          	slli	a3,a4,0x2
1c00545e:	8cb2                	mv	s9,a2
1c005460:	8fd2                	mv	t6,s4
1c005462:	42e60fb3          	p.mac	t6,a2,a4
1c005466:	00279f13          	slli	t5,a5,0x2
1c00546a:	9936                	add	s2,s2,a3
1c00546c:	89a6                	mv	s3,s1
1c00546e:	c402bb33          	p.bclr	s6,t0,2,0
1c005472:	9b26                	add	s6,s6,s1
		v4s * __restrict__ W = (v4s *) (&Weights[i*TotalInDim]);
		int Acc = Out[i];
		for (int j=0; j<(InDim/(4*2)); j++) {
1c005474:	4c1d                	li	s8,7
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
			v4s C0=W[2*j], C1=W[2*j+1];
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
		}
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c005476:	0042fb93          	andi	s7,t0,4
1c00547a:	c202bab3          	p.bclr	s5,t0,1,0
1c00547e:	1af1                	addi	s5,s5,-4
		for (int j=4*(InDim/4); j<InDim; j++) Acc += In[j]*Weights[i*TotalInDim+j];
1c005480:	c202b2b3          	p.bclr	t0,t0,1,0
1c005484:	40df0f33          	sub	t5,t5,a3
1c005488:	1f71                	addi	t5,t5,-4
1c00548a:	002f5f13          	srli	t5,t5,0x2
1c00548e:	0f05                	addi	t5,t5,1
1c005490:	a83d                	j	1c0054ce <KerParLinearLayer_SQ8+0xc6>
1c005492:	0272f763          	bleu	t2,t0,1c0054c0 <KerParLinearLayer_SQ8+0xb8>
1c005496:	005486b3          	add	a3,s1,t0
1c00549a:	9816                	add	a6,a6,t0
1c00549c:	9852                	add	a6,a6,s4
1c00549e:	40d98733          	sub	a4,s3,a3
1c0054a2:	971e                	add	a4,a4,t2
1c0054a4:	41348633          	sub	a2,s1,s3
1c0054a8:	9616                	add	a2,a2,t0
1c0054aa:	0605                	addi	a2,a2,1
1c0054ac:	06c3ea63          	bltu	t2,a2,1c005520 <KerParLinearLayer_SQ8+0x118>
1c0054b0:	006740fb          	lp.setup	x1,a4,1c0054bc <KerParLinearLayer_SQ8+0xb4>
1c0054b4:	0016858b          	p.lb	a1,1(a3!)
1c0054b8:	0018060b          	p.lb	a2,1(a6!)
1c0054bc:	42c587b3          	p.mac	a5,a1,a2
		Out[i] = Acc;
1c0054c0:	fef92e23          	sw	a5,-4(s2)
1c0054c4:	9fe6                	add	t6,t6,s9
1c0054c6:	1f7d                	addi	t5,t5,-1
1c0054c8:	000f1363          	bnez	t5,1c0054ce <KerParLinearLayer_SQ8+0xc6>
1c0054cc:	a8a1                	j	1c005524 <KerParLinearLayer_SQ8+0x11c>
1c0054ce:	414f8833          	sub	a6,t6,s4
		v4s * __restrict__ W = (v4s *) (&Weights[i*TotalInDim]);
1c0054d2:	847e                	mv	s0,t6
		int Acc = Out[i];
1c0054d4:	0049278b          	p.lw	a5,4(s2!)
		for (int j=0; j<(InDim/(4*2)); j++) {
1c0054d8:	027c7b63          	bleu	t2,s8,1c00550e <KerParLinearLayer_SQ8+0x106>
1c0054dc:	00448e93          	addi	t4,s1,4
1c0054e0:	004f8e13          	addi	t3,t6,4
1c0054e4:	837e                	mv	t1,t6
1c0054e6:	88ce                	mv	a7,s3
1c0054e8:	413b0533          	sub	a0,s6,s3
1c0054ec:	1561                	addi	a0,a0,-8
1c0054ee:	810d                	srli	a0,a0,0x3
1c0054f0:	0505                	addi	a0,a0,1
1c0054f2:	00c540fb          	lp.setup	x1,a0,1c00550a <KerParLinearLayer_SQ8+0x102>
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
1c0054f6:	008ea68b          	p.lw	a3,8(t4!)
			v4s C0=W[2*j], C1=W[2*j+1];
1c0054fa:	008e270b          	p.lw	a4,8(t3!)
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
1c0054fe:	0088a58b          	p.lw	a1,8(a7!)
1c005502:	0083260b          	p.lw	a2,8(t1!)
1c005506:	b8c597d7          	pv.sdotsp.b	a5,a1,a2
1c00550a:	b8e697d7          	pv.sdotsp.b	a5,a3,a4
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c00550e:	f80b82e3          	beqz	s7,1c005492 <KerParLinearLayer_SQ8+0x8a>
1c005512:	2154f703          	p.lw	a4,s5(s1)
1c005516:	21547403          	p.lw	s0,s5(s0)
1c00551a:	b88717d7          	pv.sdotsp.b	a5,a4,s0
1c00551e:	bf95                	j	1c005492 <KerParLinearLayer_SQ8+0x8a>
1c005520:	4705                	li	a4,1
1c005522:	b779                	j	1c0054b0 <KerParLinearLayer_SQ8+0xa8>
1c005524:	002047b7          	lui	a5,0x204
1c005528:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00552c:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c005530:	5432                	lw	s0,44(sp)
1c005532:	54a2                	lw	s1,40(sp)
1c005534:	5912                	lw	s2,36(sp)
1c005536:	5982                	lw	s3,32(sp)
1c005538:	4a72                	lw	s4,28(sp)
1c00553a:	4ae2                	lw	s5,24(sp)
1c00553c:	4b52                	lw	s6,20(sp)
1c00553e:	4bc2                	lw	s7,16(sp)
1c005540:	4c32                	lw	s8,12(sp)
1c005542:	4ca2                	lw	s9,8(sp)
1c005544:	6145                	addi	sp,sp,48
1c005546:	8082                	ret

1c005548 <LastDefinedOutput>:
			int *out = Out+Wo*Ho*(of);
			KerConv1x3Stride1x2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv1x3BorderStride1xN_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, 2, PadIn, PadIn);
		}
	gap_waitbarrier(0);
}
1c005548:	fff68793          	addi	a5,a3,-1
1c00554c:	953e                	add	a0,a0,a5
1c00554e:	9532                	add	a0,a0,a2
1c005550:	0015d613          	srli	a2,a1,0x1
1c005554:	8d11                	sub	a0,a0,a2
1c005556:	15fd                	addi	a1,a1,-1
1c005558:	8185                	srli	a1,a1,0x1
1c00555a:	8d0d                	sub	a0,a0,a1
1c00555c:	02d55533          	divu	a0,a0,a3
1c005560:	8082                	ret

1c005562 <KerConv3x3Stride1_Body_2Out_SQ8>:
1c005562:	7179                	addi	sp,sp,-48
1c005564:	d622                	sw	s0,44(sp)
1c005566:	d426                	sw	s1,40(sp)
1c005568:	d24a                	sw	s2,36(sp)
1c00556a:	d04e                	sw	s3,32(sp)
1c00556c:	ce52                	sw	s4,28(sp)
1c00556e:	cc56                	sw	s5,24(sp)
1c005570:	ca5a                	sw	s6,20(sp)
1c005572:	c85e                	sw	s7,16(sp)
1c005574:	c662                	sw	s8,12(sp)
1c005576:	c466                	sw	s9,8(sp)
1c005578:	c26a                	sw	s10,4(sp)
1c00557a:	c06e                	sw	s11,0(sp)
1c00557c:	54c2                	lw	s1,48(sp)
1c00557e:	5ae2                	lw	s5,56(sp)
1c005580:	5b72                	lw	s6,60(sp)
1c005582:	4306                	lw	t1,64(sp)
1c005584:	780377d7          	pv.extract.b	a5,t1,0
1c005588:	1007d3b3          	p.exthz	t2,a5
1c00558c:	78137357          	pv.extract.b	t1,t1,2
1c005590:	100357b3          	p.exthz	a5,t1
1c005594:	89c6                	mv	s3,a7
1c005596:	435809b3          	p.mac	s3,a6,s5
1c00559a:	098a                	slli	s3,s3,0x2
1c00559c:	99ae                	add	s3,s3,a1
1c00559e:	5952                	lw	s2,52(sp)
1c0055a0:	03280933          	mul	s2,a6,s2
1c0055a4:	090a                	slli	s2,s2,0x2
1c0055a6:	994e                	add	s2,s2,s3
1c0055a8:	00062303          	lw	t1,0(a2)
1c0055ac:	00362e03          	lw	t3,3(a2)
1c0055b0:	00662e83          	lw	t4,6(a2)
1c0055b4:	20d67f03          	p.lw	t5,a3(a2)
1c0055b8:	96b2                	add	a3,a3,a2
1c0055ba:	0036af83          	lw	t6,3(a3)
1c0055be:	0066a283          	lw	t0,6(a3)
1c0055c2:	0a98f263          	bleu	s1,a7,1c005666 <KerConv3x3Stride1_Body_2Out_SQ8+0x104>
1c0055c6:	b2107357          	pv.insert.b	t1,zero,3
1c0055ca:	b2107e57          	pv.insert.b	t3,zero,3
1c0055ce:	b2107ed7          	pv.insert.b	t4,zero,3
1c0055d2:	b2107f57          	pv.insert.b	t5,zero,3
1c0055d6:	b2107fd7          	pv.insert.b	t6,zero,3
1c0055da:	b21072d7          	pv.insert.b	t0,zero,3
1c0055de:	40fa87b3          	sub	a5,s5,a5
1c0055e2:	02e787b3          	mul	a5,a5,a4
1c0055e6:	407787b3          	sub	a5,a5,t2
1c0055ea:	00281c93          	slli	s9,a6,0x2
1c0055ee:	00f88a33          	add	s4,a7,a5
1c0055f2:	9a2a                	add	s4,s4,a0
1c0055f4:	8d3a                	mv	s10,a4
1c0055f6:	00e88433          	add	s0,a7,a4
1c0055fa:	943e                	add	s0,s0,a5
1c0055fc:	942a                	add	s0,s0,a0
1c0055fe:	94aa                	add	s1,s1,a0
1c005600:	94be                	add	s1,s1,a5
1c005602:	00171c13          	slli	s8,a4,0x1
1c005606:	8bda                	mv	s7,s6
1c005608:	414484b3          	sub	s1,s1,s4
1c00560c:	02c4c07b          	lp.setup	x0,s1,1c005664 <KerConv3x3Stride1_Body_2Out_SQ8+0x102>
1c005610:	83d2                	mv	t2,s4
1c005612:	2183f68b          	p.lw	a3,s8(t2!)
1c005616:	401c                	lw	a5,0(s0)
1c005618:	85d6                	mv	a1,s5
1c00561a:	056af263          	bleu	s6,s5,1c00565e <KerConv3x3Stride1_Body_2Out_SQ8+0xfc>
1c00561e:	88ca                	mv	a7,s2
1c005620:	884e                	mv	a6,s3
1c005622:	415b8533          	sub	a0,s7,s5
1c005626:	01b540fb          	lp.setup	x1,a0,1c00565c <KerConv3x3Stride1_Body_2Out_SQ8+0xfa>
1c00562a:	00082603          	lw	a2,0(a6)
1c00562e:	21a3f70b          	p.lw	a4,s10(t2!)
1c005632:	b8669657          	pv.sdotsp.b	a2,a3,t1
1c005636:	b9c79657          	pv.sdotsp.b	a2,a5,t3
1c00563a:	b9d71657          	pv.sdotsp.b	a2,a4,t4
1c00563e:	0008ad83          	lw	s11,0(a7)
1c005642:	b9e69dd7          	pv.sdotsp.b	s11,a3,t5
1c005646:	86ee                	mv	a3,s11
1c005648:	b9f796d7          	pv.sdotsp.b	a3,a5,t6
1c00564c:	b85716d7          	pv.sdotsp.b	a3,a4,t0
1c005650:	00c86cab          	p.sw	a2,s9(a6!)
1c005654:	00d8ecab          	p.sw	a3,s9(a7!)
1c005658:	0585                	addi	a1,a1,1
1c00565a:	86be                	mv	a3,a5
1c00565c:	87ba                	mv	a5,a4
1c00565e:	0991                	addi	s3,s3,4
1c005660:	0911                	addi	s2,s2,4
1c005662:	0a05                	addi	s4,s4,1
1c005664:	0405                	addi	s0,s0,1
1c005666:	5432                	lw	s0,44(sp)
1c005668:	54a2                	lw	s1,40(sp)
1c00566a:	5912                	lw	s2,36(sp)
1c00566c:	5982                	lw	s3,32(sp)
1c00566e:	4a72                	lw	s4,28(sp)
1c005670:	4ae2                	lw	s5,24(sp)
1c005672:	4b52                	lw	s6,20(sp)
1c005674:	4bc2                	lw	s7,16(sp)
1c005676:	4c32                	lw	s8,12(sp)
1c005678:	4ca2                	lw	s9,8(sp)
1c00567a:	4d12                	lw	s10,4(sp)
1c00567c:	4d82                	lw	s11,0(sp)
1c00567e:	6145                	addi	sp,sp,48
1c005680:	8082                	ret

1c005682 <KerConv2x3from3x3Stride1_V_2Out_SQ8>:
1c005682:	7179                	addi	sp,sp,-48
1c005684:	d622                	sw	s0,44(sp)
1c005686:	d426                	sw	s1,40(sp)
1c005688:	d24a                	sw	s2,36(sp)
1c00568a:	d04e                	sw	s3,32(sp)
1c00568c:	ce52                	sw	s4,28(sp)
1c00568e:	cc56                	sw	s5,24(sp)
1c005690:	ca5a                	sw	s6,20(sp)
1c005692:	c85e                	sw	s7,16(sp)
1c005694:	c662                	sw	s8,12(sp)
1c005696:	c466                	sw	s9,8(sp)
1c005698:	5342                	lw	t1,48(sp)
1c00569a:	5e52                	lw	t3,52(sp)
1c00569c:	5ee2                	lw	t4,56(sp)
1c00569e:	0e0e8a63          	beqz	t4,1c005792 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x110>
1c0056a2:	00035383          	lhu	t2,0(t1)
1c0056a6:	00335283          	lhu	t0,3(t1)
1c0056aa:	00635403          	lhu	s0,6(t1)
1c0056ae:	9372                	add	t1,t1,t3
1c0056b0:	00035f83          	lhu	t6,0(t1)
1c0056b4:	00335f03          	lhu	t5,3(t1)
1c0056b8:	00635483          	lhu	s1,6(t1)
1c0056bc:	0e17a963          	p.beqimm	a5,1,1c0057ae <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x12c>
1c0056c0:	40c78633          	sub	a2,a5,a2
1c0056c4:	02d78333          	mul	t1,a5,a3
1c0056c8:	030a                	slli	t1,t1,0x2
1c0056ca:	989a                	add	a7,a7,t1
1c0056cc:	42b60533          	p.mac	a0,a2,a1
1c0056d0:	20b57e0b          	p.lw	t3,a1(a0!)
1c0056d4:	20b5760b          	p.lw	a2,a1(a0!)
1c0056d8:	02d70ab3          	mul	s5,a4,a3
1c0056dc:	0a8a                	slli	s5,s5,0x2
1c0056de:	9ac6                	add	s5,s5,a7
1c0056e0:	8b3e                	mv	s6,a5
1c0056e2:	0707f363          	bleu	a6,a5,1c005748 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xc6>
1c0056e6:	00269b93          	slli	s7,a3,0x2
1c0056ea:	89d6                	mv	s3,s5
1c0056ec:	8946                	mv	s2,a7
1c0056ee:	8a2a                	mv	s4,a0
1c0056f0:	8c2e                	mv	s8,a1
1c0056f2:	40f806b3          	sub	a3,a6,a5
1c0056f6:	01b6c0fb          	lp.setup	x1,a3,1c00572c <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xaa>
1c0056fa:	00092e83          	lw	t4,0(s2)
1c0056fe:	20ba730b          	p.lw	t1,a1(s4!)
1c005702:	b87e1ed7          	pv.sdotsp.b	t4,t3,t2
1c005706:	b8561ed7          	pv.sdotsp.b	t4,a2,t0
1c00570a:	b8831ed7          	pv.sdotsp.b	t4,t1,s0
1c00570e:	0009ac83          	lw	s9,0(s3)
1c005712:	b9fe1cd7          	pv.sdotsp.b	s9,t3,t6
1c005716:	8e66                	mv	t3,s9
1c005718:	b9e61e57          	pv.sdotsp.b	t3,a2,t5
1c00571c:	b8931e57          	pv.sdotsp.b	t3,t1,s1
1c005720:	01d96bab          	p.sw	t4,s7(s2!)
1c005724:	01c9ebab          	p.sw	t3,s7(s3!)
1c005728:	0785                	addi	a5,a5,1
1c00572a:	8e32                	mv	t3,a2
1c00572c:	861a                	mv	a2,t1
1c00572e:	fff80793          	addi	a5,a6,-1
1c005732:	416787b3          	sub	a5,a5,s6
1c005736:	43878c33          	p.mac	s8,a5,s8
1c00573a:	9562                	add	a0,a0,s8
1c00573c:	41680b33          	sub	s6,a6,s6
1c005740:	037b0bb3          	mul	s7,s6,s7
1c005744:	98de                	add	a7,a7,s7
1c005746:	9ade                	add	s5,s5,s7
1c005748:	03070963          	beq	a4,a6,1c00577a <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xf8>
1c00574c:	0008a683          	lw	a3,0(a7)
1c005750:	000aa703          	lw	a4,0(s5)
1c005754:	00159793          	slli	a5,a1,0x1
1c005758:	8d1d                	sub	a0,a0,a5
1c00575a:	411c                	lw	a5,0(a0)
1c00575c:	20b57583          	p.lw	a1,a1(a0)
1c005760:	b87796d7          	pv.sdotsp.b	a3,a5,t2
1c005764:	b85596d7          	pv.sdotsp.b	a3,a1,t0
1c005768:	b9f79757          	pv.sdotsp.b	a4,a5,t6
1c00576c:	87ba                	mv	a5,a4
1c00576e:	b9e597d7          	pv.sdotsp.b	a5,a1,t5
1c005772:	00d8a023          	sw	a3,0(a7)
1c005776:	00faa023          	sw	a5,0(s5)
1c00577a:	5432                	lw	s0,44(sp)
1c00577c:	54a2                	lw	s1,40(sp)
1c00577e:	5912                	lw	s2,36(sp)
1c005780:	5982                	lw	s3,32(sp)
1c005782:	4a72                	lw	s4,28(sp)
1c005784:	4ae2                	lw	s5,24(sp)
1c005786:	4b52                	lw	s6,20(sp)
1c005788:	4bc2                	lw	s7,16(sp)
1c00578a:	4c32                	lw	s8,12(sp)
1c00578c:	4ca2                	lw	s9,8(sp)
1c00578e:	6145                	addi	sp,sp,48
1c005790:	8082                	ret
1c005792:	00135383          	lhu	t2,1(t1)
1c005796:	00435283          	lhu	t0,4(t1)
1c00579a:	00735403          	lhu	s0,7(t1)
1c00579e:	9372                	add	t1,t1,t3
1c0057a0:	00135f83          	lhu	t6,1(t1)
1c0057a4:	00435f03          	lhu	t5,4(t1)
1c0057a8:	00735483          	lhu	s1,7(t1)
1c0057ac:	bf01                	j	1c0056bc <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x3a>
1c0057ae:	20b5760b          	p.lw	a2,a1(a0!)
1c0057b2:	00007e57          	pv.add.sci.b	t3,zero,0
1c0057b6:	4781                	li	a5,0
1c0057b8:	b705                	j	1c0056d8 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x56>

1c0057ba <KerConv3x2from3x3Stride1_H_2Out_SQ8>:
1c0057ba:	4302                	lw	t1,0(sp)
1c0057bc:	4f92                	lw	t6,4(sp)
1c0057be:	4ea2                	lw	t4,8(sp)
1c0057c0:	8e3e                	mv	t3,a5
1c0057c2:	40c78633          	sub	a2,a5,a2
1c0057c6:	9532                	add	a0,a0,a2
1c0057c8:	02e683b3          	mul	t2,a3,a4
1c0057cc:	038a                	slli	t2,t2,0x2
1c0057ce:	93c6                	add	t2,t2,a7
1c0057d0:	060e8063          	beqz	t4,1c005830 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x76>
1c0057d4:	00032e83          	lw	t4,0(t1)
1c0057d8:	b2107ed7          	pv.insert.b	t4,zero,3
1c0057dc:	00332f03          	lw	t5,3(t1)
1c0057e0:	b2107f57          	pv.insert.b	t5,zero,3
1c0057e4:	937e                	add	t1,t1,t6
1c0057e6:	00032f83          	lw	t6,0(t1)
1c0057ea:	b2107fd7          	pv.insert.b	t6,zero,3
1c0057ee:	00332283          	lw	t0,3(t1)
1c0057f2:	b21072d7          	pv.insert.b	t0,zero,3
1c0057f6:	030e7c63          	bleu	a6,t3,1c00582e <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x74>
1c0057fa:	95aa                	add	a1,a1,a0
1c0057fc:	40f80833          	sub	a6,a6,a5
1c005800:	015840fb          	lp.setup	x1,a6,1c00582a <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x70>
1c005804:	0008ae03          	lw	t3,0(a7)
1c005808:	0003a303          	lw	t1,0(t2)
1c00580c:	0015268b          	p.lw	a3,1(a0!)
1c005810:	0015a70b          	p.lw	a4,1(a1!)
1c005814:	b9d69e57          	pv.sdotsp.b	t3,a3,t4
1c005818:	b9e71e57          	pv.sdotsp.b	t3,a4,t5
1c00581c:	b9f69357          	pv.sdotsp.b	t1,a3,t6
1c005820:	869a                	mv	a3,t1
1c005822:	b85716d7          	pv.sdotsp.b	a3,a4,t0
1c005826:	01c8a22b          	p.sw	t3,4(a7!)
1c00582a:	00d3a22b          	p.sw	a3,4(t2!)
1c00582e:	8082                	ret
1c005830:	00332e83          	lw	t4,3(t1)
1c005834:	b2107ed7          	pv.insert.b	t4,zero,3
1c005838:	00632f03          	lw	t5,6(t1)
1c00583c:	b2107f57          	pv.insert.b	t5,zero,3
1c005840:	937e                	add	t1,t1,t6
1c005842:	00332f83          	lw	t6,3(t1)
1c005846:	b2107fd7          	pv.insert.b	t6,zero,3
1c00584a:	00632283          	lw	t0,6(t1)
1c00584e:	b21072d7          	pv.insert.b	t0,zero,3
1c005852:	b755                	j	1c0057f6 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x3c>

1c005854 <KerConv3x3BorderStride1_2Out_SQ8>:
1c005854:	715d                	addi	sp,sp,-80
1c005856:	c686                	sw	ra,76(sp)
1c005858:	c4a2                	sw	s0,72(sp)
1c00585a:	c2a6                	sw	s1,68(sp)
1c00585c:	c0ca                	sw	s2,64(sp)
1c00585e:	de4e                	sw	s3,60(sp)
1c005860:	dc52                	sw	s4,56(sp)
1c005862:	da56                	sw	s5,52(sp)
1c005864:	d85a                	sw	s6,48(sp)
1c005866:	d65e                	sw	s7,44(sp)
1c005868:	d462                	sw	s8,40(sp)
1c00586a:	d266                	sw	s9,36(sp)
1c00586c:	d06a                	sw	s10,32(sp)
1c00586e:	ce6e                	sw	s11,28(sp)
1c005870:	8a2a                	mv	s4,a0
1c005872:	8aae                	mv	s5,a1
1c005874:	8b32                	mv	s6,a2
1c005876:	8bb6                	mv	s7,a3
1c005878:	893a                	mv	s2,a4
1c00587a:	84c2                	mv	s1,a6
1c00587c:	89c6                	mv	s3,a7
1c00587e:	5786                	lw	a5,96(sp)
1c005880:	5416                	lw	s0,100(sp)
1c005882:	78047c57          	pv.extract.b	s8,s0,0
1c005886:	78147457          	pv.extract.b	s0,s0,2
1c00588a:	7a07fdd7          	pv.extract.b	s11,a5,1
1c00588e:	7817fd57          	pv.extract.b	s10,a5,2
1c005892:	7a17fcd7          	pv.extract.b	s9,a5,3
1c005896:	7807f7d7          	pv.extract.b	a5,a5,0
1c00589a:	e795                	bnez	a5,1c0058c6 <KerConv3x3BorderStride1_2Out_SQ8+0x72>
1c00589c:	040d9163          	bnez	s11,1c0058de <KerConv3x3BorderStride1_2Out_SQ8+0x8a>
1c0058a0:	060d1363          	bnez	s10,1c005906 <KerConv3x3BorderStride1_2Out_SQ8+0xb2>
1c0058a4:	080c9063          	bnez	s9,1c005924 <KerConv3x3BorderStride1_2Out_SQ8+0xd0>
1c0058a8:	40b6                	lw	ra,76(sp)
1c0058aa:	4426                	lw	s0,72(sp)
1c0058ac:	4496                	lw	s1,68(sp)
1c0058ae:	4906                	lw	s2,64(sp)
1c0058b0:	59f2                	lw	s3,60(sp)
1c0058b2:	5a62                	lw	s4,56(sp)
1c0058b4:	5ad2                	lw	s5,52(sp)
1c0058b6:	5b42                	lw	s6,48(sp)
1c0058b8:	5bb2                	lw	s7,44(sp)
1c0058ba:	5c22                	lw	s8,40(sp)
1c0058bc:	5c92                	lw	s9,36(sp)
1c0058be:	5d02                	lw	s10,32(sp)
1c0058c0:	4df2                	lw	s11,28(sp)
1c0058c2:	6161                	addi	sp,sp,80
1c0058c4:	8082                	ret
1c0058c6:	c402                	sw	zero,8(sp)
1c0058c8:	c236                	sw	a3,4(sp)
1c0058ca:	c032                	sw	a2,0(sp)
1c0058cc:	88ae                	mv	a7,a1
1c0058ce:	4876                	lw	a6,92(sp)
1c0058d0:	47e6                	lw	a5,88(sp)
1c0058d2:	4756                	lw	a4,84(sp)
1c0058d4:	86a6                	mv	a3,s1
1c0058d6:	8622                	mv	a2,s0
1c0058d8:	85ca                	mv	a1,s2
1c0058da:	3365                	jal	1c005682 <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c0058dc:	b7c1                	j	1c00589c <KerConv3x3BorderStride1_2Out_SQ8+0x48>
1c0058de:	00249893          	slli	a7,s1,0x2
1c0058e2:	18f1                	addi	a7,a7,-4
1c0058e4:	47c6                	lw	a5,80(sp)
1c0058e6:	41878533          	sub	a0,a5,s8
1c0058ea:	4785                	li	a5,1
1c0058ec:	c43e                	sw	a5,8(sp)
1c0058ee:	c25e                	sw	s7,4(sp)
1c0058f0:	c05a                	sw	s6,0(sp)
1c0058f2:	98d6                	add	a7,a7,s5
1c0058f4:	4876                	lw	a6,92(sp)
1c0058f6:	47e6                	lw	a5,88(sp)
1c0058f8:	4756                	lw	a4,84(sp)
1c0058fa:	86a6                	mv	a3,s1
1c0058fc:	8622                	mv	a2,s0
1c0058fe:	85ca                	mv	a1,s2
1c005900:	9552                	add	a0,a0,s4
1c005902:	3341                	jal	1c005682 <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c005904:	bf71                	j	1c0058a0 <KerConv3x3BorderStride1_2Out_SQ8+0x4c>
1c005906:	00299893          	slli	a7,s3,0x2
1c00590a:	c402                	sw	zero,8(sp)
1c00590c:	c25e                	sw	s7,4(sp)
1c00590e:	c05a                	sw	s6,0(sp)
1c005910:	98d6                	add	a7,a7,s5
1c005912:	4846                	lw	a6,80(sp)
1c005914:	87ce                	mv	a5,s3
1c005916:	4756                	lw	a4,84(sp)
1c005918:	86a6                	mv	a3,s1
1c00591a:	8662                	mv	a2,s8
1c00591c:	85ca                	mv	a1,s2
1c00591e:	8552                	mv	a0,s4
1c005920:	3d69                	jal	1c0057ba <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c005922:	b749                	j	1c0058a4 <KerConv3x3BorderStride1_2Out_SQ8+0x50>
1c005924:	88ce                	mv	a7,s3
1c005926:	47f6                	lw	a5,92(sp)
1c005928:	42f488b3          	p.mac	a7,s1,a5
1c00592c:	088a                	slli	a7,a7,0x2
1c00592e:	40878433          	sub	s0,a5,s0
1c005932:	4785                	li	a5,1
1c005934:	c43e                	sw	a5,8(sp)
1c005936:	c25e                	sw	s7,4(sp)
1c005938:	c05a                	sw	s6,0(sp)
1c00593a:	98d6                	add	a7,a7,s5
1c00593c:	4846                	lw	a6,80(sp)
1c00593e:	87ce                	mv	a5,s3
1c005940:	4756                	lw	a4,84(sp)
1c005942:	86a6                	mv	a3,s1
1c005944:	8662                	mv	a2,s8
1c005946:	85ca                	mv	a1,s2
1c005948:	8552                	mv	a0,s4
1c00594a:	43240533          	p.mac	a0,s0,s2
1c00594e:	35b5                	jal	1c0057ba <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c005950:	bfa1                	j	1c0058a8 <KerConv3x3BorderStride1_2Out_SQ8+0x54>

1c005952 <KerConv3x3Stride1_Body_SQ8>:
1c005952:	1101                	addi	sp,sp,-32
1c005954:	ce22                	sw	s0,28(sp)
1c005956:	cc26                	sw	s1,24(sp)
1c005958:	ca4a                	sw	s2,20(sp)
1c00595a:	c84e                	sw	s3,16(sp)
1c00595c:	c652                	sw	s4,12(sp)
1c00595e:	c456                	sw	s5,8(sp)
1c005960:	5392                	lw	t2,36(sp)
1c005962:	5422                	lw	s0,40(sp)
1c005964:	5332                	lw	t1,44(sp)
1c005966:	78037757          	pv.extract.b	a4,t1,0
1c00596a:	78137357          	pv.extract.b	t1,t1,2
1c00596e:	10035f33          	p.exthz	t5,t1
1c005972:	8342                	mv	t1,a6
1c005974:	42778333          	p.mac	t1,a5,t2
1c005978:	030a                	slli	t1,t1,0x2
1c00597a:	959a                	add	a1,a1,t1
1c00597c:	00062303          	lw	t1,0(a2)
1c005980:	00362e03          	lw	t3,3(a2)
1c005984:	00662e83          	lw	t4,6(a2)
1c005988:	09187363          	bleu	a7,a6,1c005a0e <KerConv3x3Stride1_Body_SQ8+0xbc>
1c00598c:	100752b3          	p.exthz	t0,a4
1c005990:	b2107357          	pv.insert.b	t1,zero,3
1c005994:	b2107e57          	pv.insert.b	t3,zero,3
1c005998:	b2107ed7          	pv.insert.b	t4,zero,3
1c00599c:	41e38733          	sub	a4,t2,t5
1c0059a0:	02d70733          	mul	a4,a4,a3
1c0059a4:	40570733          	sub	a4,a4,t0
1c0059a8:	00279913          	slli	s2,a5,0x2
1c0059ac:	00e804b3          	add	s1,a6,a4
1c0059b0:	94aa                	add	s1,s1,a0
1c0059b2:	89b6                	mv	s3,a3
1c0059b4:	00d80fb3          	add	t6,a6,a3
1c0059b8:	9fba                	add	t6,t6,a4
1c0059ba:	9faa                	add	t6,t6,a0
1c0059bc:	011502b3          	add	t0,a0,a7
1c0059c0:	92ba                	add	t0,t0,a4
1c0059c2:	00169a93          	slli	s5,a3,0x1
1c0059c6:	8a22                	mv	s4,s0
1c0059c8:	409282b3          	sub	t0,t0,s1
1c0059cc:	0202c07b          	lp.setup	x0,t0,1c005a0c <KerConv3x3Stride1_Body_SQ8+0xba>
1c0059d0:	88a6                	mv	a7,s1
1c0059d2:	2158f60b          	p.lw	a2,s5(a7!)
1c0059d6:	000fa703          	lw	a4,0(t6)
1c0059da:	8f1e                	mv	t5,t2
1c0059dc:	0283f663          	bleu	s0,t2,1c005a08 <KerConv3x3Stride1_Body_SQ8+0xb6>
1c0059e0:	882e                	mv	a6,a1
1c0059e2:	407a0533          	sub	a0,s4,t2
1c0059e6:	010540fb          	lp.setup	x1,a0,1c005a06 <KerConv3x3Stride1_Body_SQ8+0xb4>
1c0059ea:	00082783          	lw	a5,0(a6)
1c0059ee:	2138f68b          	p.lw	a3,s3(a7!)
1c0059f2:	b86617d7          	pv.sdotsp.b	a5,a2,t1
1c0059f6:	b9c717d7          	pv.sdotsp.b	a5,a4,t3
1c0059fa:	b9d697d7          	pv.sdotsp.b	a5,a3,t4
1c0059fe:	00f8692b          	p.sw	a5,s2(a6!)
1c005a02:	0f05                	addi	t5,t5,1
1c005a04:	863a                	mv	a2,a4
1c005a06:	8736                	mv	a4,a3
1c005a08:	0591                	addi	a1,a1,4
1c005a0a:	0485                	addi	s1,s1,1
1c005a0c:	0f85                	addi	t6,t6,1
1c005a0e:	4472                	lw	s0,28(sp)
1c005a10:	44e2                	lw	s1,24(sp)
1c005a12:	4952                	lw	s2,20(sp)
1c005a14:	49c2                	lw	s3,16(sp)
1c005a16:	4a32                	lw	s4,12(sp)
1c005a18:	4aa2                	lw	s5,8(sp)
1c005a1a:	6105                	addi	sp,sp,32
1c005a1c:	8082                	ret

1c005a1e <KerConv2x3from3x3Stride1_V_SQ8>:
1c005a1e:	1141                	addi	sp,sp,-16
1c005a20:	c622                	sw	s0,12(sp)
1c005a22:	c426                	sw	s1,8(sp)
1c005a24:	c24a                	sw	s2,4(sp)
1c005a26:	c04e                	sw	s3,0(sp)
1c005a28:	4342                	lw	t1,16(sp)
1c005a2a:	4e52                	lw	t3,20(sp)
1c005a2c:	0a0e0063          	beqz	t3,1c005acc <KerConv2x3from3x3Stride1_V_SQ8+0xae>
1c005a30:	00035f83          	lhu	t6,0(t1)
1c005a34:	00335f03          	lhu	t5,3(t1)
1c005a38:	00635283          	lhu	t0,6(t1)
1c005a3c:	0817af63          	p.beqimm	a5,1,1c005ada <KerConv2x3from3x3Stride1_V_SQ8+0xbc>
1c005a40:	40c78633          	sub	a2,a5,a2
1c005a44:	02d78333          	mul	t1,a5,a3
1c005a48:	030a                	slli	t1,t1,0x2
1c005a4a:	989a                	add	a7,a7,t1
1c005a4c:	42b60533          	p.mac	a0,a2,a1
1c005a50:	20b57e8b          	p.lw	t4,a1(a0!)
1c005a54:	20b5730b          	p.lw	t1,a1(a0!)
1c005a58:	84be                	mv	s1,a5
1c005a5a:	0507f363          	bleu	a6,a5,1c005aa0 <KerConv2x3from3x3Stride1_V_SQ8+0x82>
1c005a5e:	00269993          	slli	s3,a3,0x2
1c005a62:	86c6                	mv	a3,a7
1c005a64:	842a                	mv	s0,a0
1c005a66:	892e                	mv	s2,a1
1c005a68:	40f803b3          	sub	t2,a6,a5
1c005a6c:	00f3c0fb          	lp.setup	x1,t2,1c005a8a <KerConv2x3from3x3Stride1_V_SQ8+0x6c>
1c005a70:	4290                	lw	a2,0(a3)
1c005a72:	20b47e0b          	p.lw	t3,a1(s0!)
1c005a76:	b9fe9657          	pv.sdotsp.b	a2,t4,t6
1c005a7a:	b9e31657          	pv.sdotsp.b	a2,t1,t5
1c005a7e:	b85e1657          	pv.sdotsp.b	a2,t3,t0
1c005a82:	00c6e9ab          	p.sw	a2,s3(a3!)
1c005a86:	0785                	addi	a5,a5,1
1c005a88:	8e9a                	mv	t4,t1
1c005a8a:	8372                	mv	t1,t3
1c005a8c:	fff80793          	addi	a5,a6,-1
1c005a90:	8f85                	sub	a5,a5,s1
1c005a92:	43278933          	p.mac	s2,a5,s2
1c005a96:	954a                	add	a0,a0,s2
1c005a98:	409804b3          	sub	s1,a6,s1
1c005a9c:	433488b3          	p.mac	a7,s1,s3
1c005aa0:	03070063          	beq	a4,a6,1c005ac0 <KerConv2x3from3x3Stride1_V_SQ8+0xa2>
1c005aa4:	0008a783          	lw	a5,0(a7)
1c005aa8:	00159713          	slli	a4,a1,0x1
1c005aac:	8d19                	sub	a0,a0,a4
1c005aae:	20b57583          	p.lw	a1,a1(a0)
1c005ab2:	4118                	lw	a4,0(a0)
1c005ab4:	b9f717d7          	pv.sdotsp.b	a5,a4,t6
1c005ab8:	b9e597d7          	pv.sdotsp.b	a5,a1,t5
1c005abc:	00f8a023          	sw	a5,0(a7)
1c005ac0:	4432                	lw	s0,12(sp)
1c005ac2:	44a2                	lw	s1,8(sp)
1c005ac4:	4912                	lw	s2,4(sp)
1c005ac6:	4982                	lw	s3,0(sp)
1c005ac8:	0141                	addi	sp,sp,16
1c005aca:	8082                	ret
1c005acc:	00135f83          	lhu	t6,1(t1)
1c005ad0:	00435f03          	lhu	t5,4(t1)
1c005ad4:	00735283          	lhu	t0,7(t1)
1c005ad8:	b795                	j	1c005a3c <KerConv2x3from3x3Stride1_V_SQ8+0x1e>
1c005ada:	20b5730b          	p.lw	t1,a1(a0!)
1c005ade:	00007ed7          	pv.add.sci.b	t4,zero,0
1c005ae2:	4781                	li	a5,0
1c005ae4:	bf95                	j	1c005a58 <KerConv2x3from3x3Stride1_V_SQ8+0x3a>

1c005ae6 <KerConv3x2from3x3Stride1_H_SQ8>:
1c005ae6:	4302                	lw	t1,0(sp)
1c005ae8:	86ba                	mv	a3,a4
1c005aea:	40c70633          	sub	a2,a4,a2
1c005aee:	9532                	add	a0,a0,a2
1c005af0:	02030d63          	beqz	t1,1c005b2a <KerConv3x2from3x3Stride1_H_SQ8+0x44>
1c005af4:	0008ae03          	lw	t3,0(a7)
1c005af8:	b2107e57          	pv.insert.b	t3,zero,3
1c005afc:	0038ae83          	lw	t4,3(a7)
1c005b00:	b2107ed7          	pv.insert.b	t4,zero,3
1c005b04:	02f6f263          	bleu	a5,a3,1c005b28 <KerConv3x2from3x3Stride1_H_SQ8+0x42>
1c005b08:	95aa                	add	a1,a1,a0
1c005b0a:	8f99                	sub	a5,a5,a4
1c005b0c:	00c7c0fb          	lp.setup	x1,a5,1c005b24 <KerConv3x2from3x3Stride1_H_SQ8+0x3e>
1c005b10:	00082683          	lw	a3,0(a6)
1c005b14:	0015230b          	p.lw	t1,1(a0!)
1c005b18:	0015a88b          	p.lw	a7,1(a1!)
1c005b1c:	b9c316d7          	pv.sdotsp.b	a3,t1,t3
1c005b20:	b9d896d7          	pv.sdotsp.b	a3,a7,t4
1c005b24:	00d8222b          	p.sw	a3,4(a6!)
1c005b28:	8082                	ret
1c005b2a:	0038ae03          	lw	t3,3(a7)
1c005b2e:	b2107e57          	pv.insert.b	t3,zero,3
1c005b32:	0068ae83          	lw	t4,6(a7)
1c005b36:	b2107ed7          	pv.insert.b	t4,zero,3
1c005b3a:	b7e9                	j	1c005b04 <KerConv3x2from3x3Stride1_H_SQ8+0x1e>

1c005b3c <KerConv3x3BorderStride1_SQ8>:
1c005b3c:	715d                	addi	sp,sp,-80
1c005b3e:	c686                	sw	ra,76(sp)
1c005b40:	c4a2                	sw	s0,72(sp)
1c005b42:	c2a6                	sw	s1,68(sp)
1c005b44:	c0ca                	sw	s2,64(sp)
1c005b46:	de4e                	sw	s3,60(sp)
1c005b48:	dc52                	sw	s4,56(sp)
1c005b4a:	da56                	sw	s5,52(sp)
1c005b4c:	d85a                	sw	s6,48(sp)
1c005b4e:	d65e                	sw	s7,44(sp)
1c005b50:	d462                	sw	s8,40(sp)
1c005b52:	d266                	sw	s9,36(sp)
1c005b54:	d06a                	sw	s10,32(sp)
1c005b56:	ce6e                	sw	s11,28(sp)
1c005b58:	8a2a                	mv	s4,a0
1c005b5a:	8aae                	mv	s5,a1
1c005b5c:	8b32                	mv	s6,a2
1c005b5e:	8936                	mv	s2,a3
1c005b60:	84be                	mv	s1,a5
1c005b62:	89c2                	mv	s3,a6
1c005b64:	8c46                	mv	s8,a7
1c005b66:	47f6                	lw	a5,92(sp)
1c005b68:	5406                	lw	s0,96(sp)
1c005b6a:	78047bd7          	pv.extract.b	s7,s0,0
1c005b6e:	78147457          	pv.extract.b	s0,s0,2
1c005b72:	7a07fdd7          	pv.extract.b	s11,a5,1
1c005b76:	7817fd57          	pv.extract.b	s10,a5,2
1c005b7a:	7a17fcd7          	pv.extract.b	s9,a5,3
1c005b7e:	7807f7d7          	pv.extract.b	a5,a5,0
1c005b82:	e795                	bnez	a5,1c005bae <KerConv3x3BorderStride1_SQ8+0x72>
1c005b84:	040d9063          	bnez	s11,1c005bc4 <KerConv3x3BorderStride1_SQ8+0x88>
1c005b88:	060d1063          	bnez	s10,1c005be8 <KerConv3x3BorderStride1_SQ8+0xac>
1c005b8c:	060c9b63          	bnez	s9,1c005c02 <KerConv3x3BorderStride1_SQ8+0xc6>
1c005b90:	40b6                	lw	ra,76(sp)
1c005b92:	4426                	lw	s0,72(sp)
1c005b94:	4496                	lw	s1,68(sp)
1c005b96:	4906                	lw	s2,64(sp)
1c005b98:	59f2                	lw	s3,60(sp)
1c005b9a:	5a62                	lw	s4,56(sp)
1c005b9c:	5ad2                	lw	s5,52(sp)
1c005b9e:	5b42                	lw	s6,48(sp)
1c005ba0:	5bb2                	lw	s7,44(sp)
1c005ba2:	5c22                	lw	s8,40(sp)
1c005ba4:	5c92                	lw	s9,36(sp)
1c005ba6:	5d02                	lw	s10,32(sp)
1c005ba8:	4df2                	lw	s11,28(sp)
1c005baa:	6161                	addi	sp,sp,80
1c005bac:	8082                	ret
1c005bae:	c202                	sw	zero,4(sp)
1c005bb0:	c032                	sw	a2,0(sp)
1c005bb2:	88ae                	mv	a7,a1
1c005bb4:	4866                	lw	a6,88(sp)
1c005bb6:	47d6                	lw	a5,84(sp)
1c005bb8:	4746                	lw	a4,80(sp)
1c005bba:	86a6                	mv	a3,s1
1c005bbc:	8622                	mv	a2,s0
1c005bbe:	85ca                	mv	a1,s2
1c005bc0:	3db9                	jal	1c005a1e <KerConv2x3from3x3Stride1_V_SQ8>
1c005bc2:	b7c9                	j	1c005b84 <KerConv3x3BorderStride1_SQ8+0x48>
1c005bc4:	00249893          	slli	a7,s1,0x2
1c005bc8:	18f1                	addi	a7,a7,-4
1c005bca:	417c0533          	sub	a0,s8,s7
1c005bce:	4785                	li	a5,1
1c005bd0:	c23e                	sw	a5,4(sp)
1c005bd2:	c05a                	sw	s6,0(sp)
1c005bd4:	98d6                	add	a7,a7,s5
1c005bd6:	4866                	lw	a6,88(sp)
1c005bd8:	47d6                	lw	a5,84(sp)
1c005bda:	4746                	lw	a4,80(sp)
1c005bdc:	86a6                	mv	a3,s1
1c005bde:	8622                	mv	a2,s0
1c005be0:	85ca                	mv	a1,s2
1c005be2:	9552                	add	a0,a0,s4
1c005be4:	3d2d                	jal	1c005a1e <KerConv2x3from3x3Stride1_V_SQ8>
1c005be6:	b74d                	j	1c005b88 <KerConv3x3BorderStride1_SQ8+0x4c>
1c005be8:	00299813          	slli	a6,s3,0x2
1c005bec:	c002                	sw	zero,0(sp)
1c005bee:	88da                	mv	a7,s6
1c005bf0:	9856                	add	a6,a6,s5
1c005bf2:	87e2                	mv	a5,s8
1c005bf4:	874e                	mv	a4,s3
1c005bf6:	86a6                	mv	a3,s1
1c005bf8:	865e                	mv	a2,s7
1c005bfa:	85ca                	mv	a1,s2
1c005bfc:	8552                	mv	a0,s4
1c005bfe:	35e5                	jal	1c005ae6 <KerConv3x2from3x3Stride1_H_SQ8>
1c005c00:	b771                	j	1c005b8c <KerConv3x3BorderStride1_SQ8+0x50>
1c005c02:	884e                	mv	a6,s3
1c005c04:	47e6                	lw	a5,88(sp)
1c005c06:	42f48833          	p.mac	a6,s1,a5
1c005c0a:	080a                	slli	a6,a6,0x2
1c005c0c:	40878433          	sub	s0,a5,s0
1c005c10:	4785                	li	a5,1
1c005c12:	c03e                	sw	a5,0(sp)
1c005c14:	88da                	mv	a7,s6
1c005c16:	9856                	add	a6,a6,s5
1c005c18:	87e2                	mv	a5,s8
1c005c1a:	874e                	mv	a4,s3
1c005c1c:	86a6                	mv	a3,s1
1c005c1e:	865e                	mv	a2,s7
1c005c20:	85ca                	mv	a1,s2
1c005c22:	8552                	mv	a0,s4
1c005c24:	43240533          	p.mac	a0,s0,s2
1c005c28:	3d7d                	jal	1c005ae6 <KerConv3x2from3x3Stride1_H_SQ8>
1c005c2a:	b79d                	j	1c005b90 <KerConv3x3BorderStride1_SQ8+0x54>

1c005c2c <KerConv3x3Stride2_Body_SQ8>:
1c005c2c:	1101                	addi	sp,sp,-32
1c005c2e:	ce22                	sw	s0,28(sp)
1c005c30:	cc26                	sw	s1,24(sp)
1c005c32:	ca4a                	sw	s2,20(sp)
1c005c34:	c84e                	sw	s3,16(sp)
1c005c36:	c652                	sw	s4,12(sp)
1c005c38:	c456                	sw	s5,8(sp)
1c005c3a:	5412                	lw	s0,36(sp)
1c005c3c:	54a2                	lw	s1,40(sp)
1c005c3e:	5332                	lw	t1,44(sp)
1c005c40:	78037757          	pv.extract.b	a4,t1,0
1c005c44:	78137357          	pv.extract.b	t1,t1,2
1c005c48:	100352b3          	p.exthz	t0,t1
1c005c4c:	8342                	mv	t1,a6
1c005c4e:	42878333          	p.mac	t1,a5,s0
1c005c52:	030a                	slli	t1,t1,0x2
1c005c54:	959a                	add	a1,a1,t1
1c005c56:	00062303          	lw	t1,0(a2)
1c005c5a:	00362e03          	lw	t3,3(a2)
1c005c5e:	00662e83          	lw	t4,6(a2)
1c005c62:	09187763          	bleu	a7,a6,1c005cf0 <KerConv3x3Stride2_Body_SQ8+0xc4>
1c005c66:	10075f33          	p.exthz	t5,a4
1c005c6a:	b2107357          	pv.insert.b	t1,zero,3
1c005c6e:	b2107e57          	pv.insert.b	t3,zero,3
1c005c72:	b2107ed7          	pv.insert.b	t4,zero,3
1c005c76:	00141713          	slli	a4,s0,0x1
1c005c7a:	40570733          	sub	a4,a4,t0
1c005c7e:	02d702b3          	mul	t0,a4,a3
1c005c82:	41e28733          	sub	a4,t0,t5
1c005c86:	00279a13          	slli	s4,a5,0x2
1c005c8a:	00181393          	slli	t2,a6,0x1
1c005c8e:	93ba                	add	t2,t2,a4
1c005c90:	93aa                	add	t2,t2,a0
1c005c92:	00189293          	slli	t0,a7,0x1
1c005c96:	92aa                	add	t0,t0,a0
1c005c98:	92ba                	add	t0,t0,a4
1c005c9a:	89b6                	mv	s3,a3
1c005c9c:	00169a93          	slli	s5,a3,0x1
1c005ca0:	8926                	mv	s2,s1
1c005ca2:	407282b3          	sub	t0,t0,t2
1c005ca6:	12f9                	addi	t0,t0,-2
1c005ca8:	0012d293          	srli	t0,t0,0x1
1c005cac:	0285                	addi	t0,t0,1
1c005cae:	0202c07b          	lp.setup	x0,t0,1c005cee <KerConv3x3Stride2_Body_SQ8+0xc2>
1c005cb2:	889e                	mv	a7,t2
1c005cb4:	2138f68b          	p.lw	a3,s3(a7!)
1c005cb8:	8fc6                	mv	t6,a7
1c005cba:	8f22                	mv	t5,s0
1c005cbc:	02947863          	bleu	s1,s0,1c005cec <KerConv3x3Stride2_Body_SQ8+0xc0>
1c005cc0:	98ce                	add	a7,a7,s3
1c005cc2:	882e                	mv	a6,a1
1c005cc4:	40890533          	sub	a0,s2,s0
1c005cc8:	011540fb          	lp.setup	x1,a0,1c005cea <KerConv3x3Stride2_Body_SQ8+0xbe>
1c005ccc:	00082783          	lw	a5,0(a6)
1c005cd0:	215ff60b          	p.lw	a2,s5(t6!)
1c005cd4:	2158f70b          	p.lw	a4,s5(a7!)
1c005cd8:	b86697d7          	pv.sdotsp.b	a5,a3,t1
1c005cdc:	b9c617d7          	pv.sdotsp.b	a5,a2,t3
1c005ce0:	b9d717d7          	pv.sdotsp.b	a5,a4,t4
1c005ce4:	00f86a2b          	p.sw	a5,s4(a6!)
1c005ce8:	0f05                	addi	t5,t5,1
1c005cea:	86ba                	mv	a3,a4
1c005cec:	0591                	addi	a1,a1,4
1c005cee:	0389                	addi	t2,t2,2
1c005cf0:	4472                	lw	s0,28(sp)
1c005cf2:	44e2                	lw	s1,24(sp)
1c005cf4:	4952                	lw	s2,20(sp)
1c005cf6:	49c2                	lw	s3,16(sp)
1c005cf8:	4a32                	lw	s4,12(sp)
1c005cfa:	4aa2                	lw	s5,8(sp)
1c005cfc:	6105                	addi	sp,sp,32
1c005cfe:	8082                	ret

1c005d00 <KerConv2x3from3x3Stride2_V_SQ8>:
1c005d00:	1101                	addi	sp,sp,-32
1c005d02:	ce22                	sw	s0,28(sp)
1c005d04:	cc26                	sw	s1,24(sp)
1c005d06:	ca4a                	sw	s2,20(sp)
1c005d08:	c84e                	sw	s3,16(sp)
1c005d0a:	c652                	sw	s4,12(sp)
1c005d0c:	5302                	lw	t1,32(sp)
1c005d0e:	5e12                	lw	t3,36(sp)
1c005d10:	0a0e0663          	beqz	t3,1c005dbc <KerConv2x3from3x3Stride2_V_SQ8+0xbc>
1c005d14:	00035f83          	lhu	t6,0(t1)
1c005d18:	00335f03          	lhu	t5,3(t1)
1c005d1c:	00635283          	lhu	t0,6(t1)
1c005d20:	0a17a563          	p.beqimm	a5,1,1c005dca <KerConv2x3from3x3Stride2_V_SQ8+0xca>
1c005d24:	00179313          	slli	t1,a5,0x1
1c005d28:	40c30633          	sub	a2,t1,a2
1c005d2c:	02d78333          	mul	t1,a5,a3
1c005d30:	030a                	slli	t1,t1,0x2
1c005d32:	989a                	add	a7,a7,t1
1c005d34:	42b60533          	p.mac	a0,a2,a1
1c005d38:	20b57e0b          	p.lw	t3,a1(a0!)
1c005d3c:	893e                	mv	s2,a5
1c005d3e:	0507fb63          	bleu	a6,a5,1c005d94 <KerConv2x3from3x3Stride2_V_SQ8+0x94>
1c005d42:	00269993          	slli	s3,a3,0x2
1c005d46:	00159a13          	slli	s4,a1,0x1
1c005d4a:	00b504b3          	add	s1,a0,a1
1c005d4e:	86c6                	mv	a3,a7
1c005d50:	842a                	mv	s0,a0
1c005d52:	40f803b3          	sub	t2,a6,a5
1c005d56:	0103c0fb          	lp.setup	x1,t2,1c005d76 <KerConv2x3from3x3Stride2_V_SQ8+0x76>
1c005d5a:	4290                	lw	a2,0(a3)
1c005d5c:	21447e8b          	p.lw	t4,s4(s0!)
1c005d60:	2144f30b          	p.lw	t1,s4(s1!)
1c005d64:	b9fe1657          	pv.sdotsp.b	a2,t3,t6
1c005d68:	b9ee9657          	pv.sdotsp.b	a2,t4,t5
1c005d6c:	b8531657          	pv.sdotsp.b	a2,t1,t0
1c005d70:	00c6e9ab          	p.sw	a2,s3(a3!)
1c005d74:	0785                	addi	a5,a5,1
1c005d76:	8e1a                	mv	t3,t1
1c005d78:	fff80793          	addi	a5,a6,-1
1c005d7c:	412787b3          	sub	a5,a5,s2
1c005d80:	86ae                	mv	a3,a1
1c005d82:	42b786b3          	p.mac	a3,a5,a1
1c005d86:	00169793          	slli	a5,a3,0x1
1c005d8a:	953e                	add	a0,a0,a5
1c005d8c:	41280933          	sub	s2,a6,s2
1c005d90:	433908b3          	p.mac	a7,s2,s3
1c005d94:	01070d63          	beq	a4,a6,1c005dae <KerConv2x3from3x3Stride2_V_SQ8+0xae>
1c005d98:	0008a783          	lw	a5,0(a7)
1c005d9c:	4118                	lw	a4,0(a0)
1c005d9e:	8d0d                	sub	a0,a0,a1
1c005da0:	4114                	lw	a3,0(a0)
1c005da2:	b9f697d7          	pv.sdotsp.b	a5,a3,t6
1c005da6:	b9e717d7          	pv.sdotsp.b	a5,a4,t5
1c005daa:	00f8a023          	sw	a5,0(a7)
1c005dae:	4472                	lw	s0,28(sp)
1c005db0:	44e2                	lw	s1,24(sp)
1c005db2:	4952                	lw	s2,20(sp)
1c005db4:	49c2                	lw	s3,16(sp)
1c005db6:	4a32                	lw	s4,12(sp)
1c005db8:	6105                	addi	sp,sp,32
1c005dba:	8082                	ret
1c005dbc:	00135f83          	lhu	t6,1(t1)
1c005dc0:	00435f03          	lhu	t5,4(t1)
1c005dc4:	00735283          	lhu	t0,7(t1)
1c005dc8:	bfa1                	j	1c005d20 <KerConv2x3from3x3Stride2_V_SQ8+0x20>
1c005dca:	00007e57          	pv.add.sci.b	t3,zero,0
1c005dce:	4781                	li	a5,0
1c005dd0:	b7b5                	j	1c005d3c <KerConv2x3from3x3Stride2_V_SQ8+0x3c>

1c005dd2 <KerConv3x2from3x3Stride2_H_SQ8>:
1c005dd2:	4302                	lw	t1,0(sp)
1c005dd4:	00171693          	slli	a3,a4,0x1
1c005dd8:	40c68633          	sub	a2,a3,a2
1c005ddc:	9532                	add	a0,a0,a2
1c005dde:	02030f63          	beqz	t1,1c005e1c <KerConv3x2from3x3Stride2_H_SQ8+0x4a>
1c005de2:	0008a303          	lw	t1,0(a7)
1c005de6:	b2107357          	pv.insert.b	t1,zero,3
1c005dea:	0038ae03          	lw	t3,3(a7)
1c005dee:	b2107e57          	pv.insert.b	t3,zero,3
1c005df2:	02f77463          	bleu	a5,a4,1c005e1a <KerConv3x2from3x3Stride2_H_SQ8+0x48>
1c005df6:	95aa                	add	a1,a1,a0
1c005df8:	40e78eb3          	sub	t4,a5,a4
1c005dfc:	00eec0fb          	lp.setup	x1,t4,1c005e18 <KerConv3x2from3x3Stride2_H_SQ8+0x46>
1c005e00:	00082783          	lw	a5,0(a6)
1c005e04:	0025288b          	p.lw	a7,2(a0!)
1c005e08:	0025a68b          	p.lw	a3,2(a1!)
1c005e0c:	b86897d7          	pv.sdotsp.b	a5,a7,t1
1c005e10:	b9c697d7          	pv.sdotsp.b	a5,a3,t3
1c005e14:	00f8222b          	p.sw	a5,4(a6!)
1c005e18:	0705                	addi	a4,a4,1
1c005e1a:	8082                	ret
1c005e1c:	0038a303          	lw	t1,3(a7)
1c005e20:	b2107357          	pv.insert.b	t1,zero,3
1c005e24:	0068ae03          	lw	t3,6(a7)
1c005e28:	b2107e57          	pv.insert.b	t3,zero,3
1c005e2c:	b7d9                	j	1c005df2 <KerConv3x2from3x3Stride2_H_SQ8+0x20>

1c005e2e <KerConv3x3BorderStride2_SQ8>:
1c005e2e:	715d                	addi	sp,sp,-80
1c005e30:	c686                	sw	ra,76(sp)
1c005e32:	c4a2                	sw	s0,72(sp)
1c005e34:	c2a6                	sw	s1,68(sp)
1c005e36:	c0ca                	sw	s2,64(sp)
1c005e38:	de4e                	sw	s3,60(sp)
1c005e3a:	dc52                	sw	s4,56(sp)
1c005e3c:	da56                	sw	s5,52(sp)
1c005e3e:	d85a                	sw	s6,48(sp)
1c005e40:	d65e                	sw	s7,44(sp)
1c005e42:	d462                	sw	s8,40(sp)
1c005e44:	d266                	sw	s9,36(sp)
1c005e46:	d06a                	sw	s10,32(sp)
1c005e48:	ce6e                	sw	s11,28(sp)
1c005e4a:	8a2a                	mv	s4,a0
1c005e4c:	8aae                	mv	s5,a1
1c005e4e:	8b32                	mv	s6,a2
1c005e50:	8936                	mv	s2,a3
1c005e52:	84be                	mv	s1,a5
1c005e54:	89c2                	mv	s3,a6
1c005e56:	8c46                	mv	s8,a7
1c005e58:	47f6                	lw	a5,92(sp)
1c005e5a:	5406                	lw	s0,96(sp)
1c005e5c:	78047bd7          	pv.extract.b	s7,s0,0
1c005e60:	78147457          	pv.extract.b	s0,s0,2
1c005e64:	7a07fdd7          	pv.extract.b	s11,a5,1
1c005e68:	7817fd57          	pv.extract.b	s10,a5,2
1c005e6c:	7a17fcd7          	pv.extract.b	s9,a5,3
1c005e70:	7807f7d7          	pv.extract.b	a5,a5,0
1c005e74:	e795                	bnez	a5,1c005ea0 <KerConv3x3BorderStride2_SQ8+0x72>
1c005e76:	040d9063          	bnez	s11,1c005eb6 <KerConv3x3BorderStride2_SQ8+0x88>
1c005e7a:	060d1263          	bnez	s10,1c005ede <KerConv3x3BorderStride2_SQ8+0xb0>
1c005e7e:	060c9d63          	bnez	s9,1c005ef8 <KerConv3x3BorderStride2_SQ8+0xca>
1c005e82:	40b6                	lw	ra,76(sp)
1c005e84:	4426                	lw	s0,72(sp)
1c005e86:	4496                	lw	s1,68(sp)
1c005e88:	4906                	lw	s2,64(sp)
1c005e8a:	59f2                	lw	s3,60(sp)
1c005e8c:	5a62                	lw	s4,56(sp)
1c005e8e:	5ad2                	lw	s5,52(sp)
1c005e90:	5b42                	lw	s6,48(sp)
1c005e92:	5bb2                	lw	s7,44(sp)
1c005e94:	5c22                	lw	s8,40(sp)
1c005e96:	5c92                	lw	s9,36(sp)
1c005e98:	5d02                	lw	s10,32(sp)
1c005e9a:	4df2                	lw	s11,28(sp)
1c005e9c:	6161                	addi	sp,sp,80
1c005e9e:	8082                	ret
1c005ea0:	c202                	sw	zero,4(sp)
1c005ea2:	c032                	sw	a2,0(sp)
1c005ea4:	88ae                	mv	a7,a1
1c005ea6:	4866                	lw	a6,88(sp)
1c005ea8:	47d6                	lw	a5,84(sp)
1c005eaa:	4746                	lw	a4,80(sp)
1c005eac:	86a6                	mv	a3,s1
1c005eae:	8622                	mv	a2,s0
1c005eb0:	85ca                	mv	a1,s2
1c005eb2:	35b9                	jal	1c005d00 <KerConv2x3from3x3Stride2_V_SQ8>
1c005eb4:	b7c9                	j	1c005e76 <KerConv3x3BorderStride2_SQ8+0x48>
1c005eb6:	00249893          	slli	a7,s1,0x2
1c005eba:	18f1                	addi	a7,a7,-4
1c005ebc:	001c1513          	slli	a0,s8,0x1
1c005ec0:	41750533          	sub	a0,a0,s7
1c005ec4:	4785                	li	a5,1
1c005ec6:	c23e                	sw	a5,4(sp)
1c005ec8:	c05a                	sw	s6,0(sp)
1c005eca:	98d6                	add	a7,a7,s5
1c005ecc:	4866                	lw	a6,88(sp)
1c005ece:	47d6                	lw	a5,84(sp)
1c005ed0:	4746                	lw	a4,80(sp)
1c005ed2:	86a6                	mv	a3,s1
1c005ed4:	8622                	mv	a2,s0
1c005ed6:	85ca                	mv	a1,s2
1c005ed8:	9552                	add	a0,a0,s4
1c005eda:	351d                	jal	1c005d00 <KerConv2x3from3x3Stride2_V_SQ8>
1c005edc:	bf79                	j	1c005e7a <KerConv3x3BorderStride2_SQ8+0x4c>
1c005ede:	00299813          	slli	a6,s3,0x2
1c005ee2:	c002                	sw	zero,0(sp)
1c005ee4:	88da                	mv	a7,s6
1c005ee6:	9856                	add	a6,a6,s5
1c005ee8:	87e2                	mv	a5,s8
1c005eea:	874e                	mv	a4,s3
1c005eec:	86a6                	mv	a3,s1
1c005eee:	865e                	mv	a2,s7
1c005ef0:	85ca                	mv	a1,s2
1c005ef2:	8552                	mv	a0,s4
1c005ef4:	3df9                	jal	1c005dd2 <KerConv3x2from3x3Stride2_H_SQ8>
1c005ef6:	b761                	j	1c005e7e <KerConv3x3BorderStride2_SQ8+0x50>
1c005ef8:	884e                	mv	a6,s3
1c005efa:	4766                	lw	a4,88(sp)
1c005efc:	42e48833          	p.mac	a6,s1,a4
1c005f00:	080a                	slli	a6,a6,0x2
1c005f02:	00171793          	slli	a5,a4,0x1
1c005f06:	40878433          	sub	s0,a5,s0
1c005f0a:	4785                	li	a5,1
1c005f0c:	c03e                	sw	a5,0(sp)
1c005f0e:	88da                	mv	a7,s6
1c005f10:	9856                	add	a6,a6,s5
1c005f12:	87e2                	mv	a5,s8
1c005f14:	874e                	mv	a4,s3
1c005f16:	86a6                	mv	a3,s1
1c005f18:	865e                	mv	a2,s7
1c005f1a:	85ca                	mv	a1,s2
1c005f1c:	8552                	mv	a0,s4
1c005f1e:	43240533          	p.mac	a0,s0,s2
1c005f22:	3d45                	jal	1c005dd2 <KerConv3x2from3x3Stride2_H_SQ8>
1c005f24:	bfb9                	j	1c005e82 <KerConv3x3BorderStride2_SQ8+0x54>

1c005f26 <KerParConv3x3Stride1_SQ8>:

void KerParConv3x3Stride1_SQ8(KerConv_SQ8_T *Arg)

{
1c005f26:	7171                	addi	sp,sp,-176
1c005f28:	d706                	sw	ra,172(sp)
1c005f2a:	d522                	sw	s0,168(sp)
1c005f2c:	d326                	sw	s1,164(sp)
1c005f2e:	d14a                	sw	s2,160(sp)
1c005f30:	cf4e                	sw	s3,156(sp)
1c005f32:	cd52                	sw	s4,152(sp)
1c005f34:	cb56                	sw	s5,148(sp)
1c005f36:	c95a                	sw	s6,144(sp)
1c005f38:	c75e                	sw	s7,140(sp)
1c005f3a:	c562                	sw	s8,136(sp)
1c005f3c:	c366                	sw	s9,132(sp)
1c005f3e:	c16a                	sw	s10,128(sp)
1c005f40:	deee                	sw	s11,124(sp)
1c005f42:	84aa                	mv	s1,a0
	unsigned int FS=3, S=1;
	signed char * __restrict__ In = Arg->In;
1c005f44:	4110                	lw	a2,0(a0)
1c005f46:	cab2                	sw	a2,84(sp)
	unsigned int W = Arg->W;
1c005f48:	00455683          	lhu	a3,4(a0)
1c005f4c:	d636                	sw	a3,44(sp)
	unsigned int H = Arg->H;
1c005f4e:	00855703          	lhu	a4,8(a0)
1c005f52:	d83a                	sw	a4,48(sp)
	int TotalInFeatures = Arg->TotalInFeatures;
1c005f54:	01055783          	lhu	a5,16(a0)
1c005f58:	cebe                	sw	a5,92(sp)
	unsigned int OutFeatures = Arg->OutFeatures;
1c005f5a:	00e55703          	lhu	a4,14(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c005f5e:	4950                	lw	a2,20(a0)
1c005f60:	d2b2                	sw	a2,100(sp)
	int * __restrict__ Out = Arg->Out;
1c005f62:	4d54                	lw	a3,28(a0)
1c005f64:	d6b6                	sw	a3,108(sp)
	unsigned int CoreId = gap_coreid();
1c005f66:	f1402473          	csrr	s0,mhartid
1c005f6a:	c8041433          	p.extractu	s0,s0,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c005f6e:	f83737b3          	p.bclr	a5,a4,28,3
1c005f72:	00f037b3          	snez	a5,a5
1c005f76:	00375693          	srli	a3,a4,0x3
1c005f7a:	97b6                	add	a5,a5,a3
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c005f7c:	02f40433          	mul	s0,s0,a5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c005f80:	97a2                	add	a5,a5,s0
1c005f82:	04e7c7b3          	p.min	a5,a5,a4
1c005f86:	d4be                	sw	a5,104(sp)
	v4s PadIn = Arg->Pad;
1c005f88:	02052903          	lw	s2,32(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c005f8c:	78097657          	pv.extract.b	a2,s2,0
1c005f90:	00655503          	lhu	a0,6(a0)
1c005f94:	ffe50793          	addi	a5,a0,-2
1c005f98:	97b2                	add	a5,a5,a2
1c005f9a:	7a097757          	pv.extract.b	a4,s2,1
1c005f9e:	973e                	add	a4,a4,a5
1c005fa0:	d43a                	sw	a4,40(sp)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c005fa2:	04c74733          	p.min	a4,a4,a2
1c005fa6:	de3a                	sw	a4,60(sp)
1c005fa8:	4685                	li	a3,1
1c005faa:	458d                	li	a1,3
1c005fac:	d9cff0ef          	jal	ra,1c005548 <LastDefinedOutput>
1c005fb0:	57f2                	lw	a5,60(sp)
1c005fb2:	04a7eab3          	p.max	s5,a5,a0
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c005fb6:	78197657          	pv.extract.b	a2,s2,2
1c005fba:	00a4d503          	lhu	a0,10(s1)
1c005fbe:	ffe50993          	addi	s3,a0,-2
1c005fc2:	99b2                	add	s3,s3,a2
1c005fc4:	7a1977d7          	pv.extract.b	a5,s2,3
1c005fc8:	99be                	add	s3,s3,a5
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c005fca:	04c9ca33          	p.min	s4,s3,a2
1c005fce:	4685                	li	a3,1
1c005fd0:	458d                	li	a1,3
1c005fd2:	d76ff0ef          	jal	ra,1c005548 <LastDefinedOutput>
1c005fd6:	04aa6b33          	p.max	s6,s4,a0

	unsigned int InFeatures = Arg->InFeatures;
1c005fda:	00c4d483          	lhu	s1,12(s1)
1c005fde:	c2a6                	sw	s1,68(sp)
	unsigned int Iter = Max(0, Last-First);
1c005fe0:	5626                	lw	a2,104(sp)
1c005fe2:	408607b3          	sub	a5,a2,s0
1c005fe6:	0407e7b3          	p.max	a5,a5,zero
1c005fea:	d0be                	sw	a5,96(sp)
	for (unsigned int i=0; i<Iter/2; i++) {
1c005fec:	0017d693          	srli	a3,a5,0x1
1c005ff0:	c4b6                	sw	a3,72(sp)
1c005ff2:	cec5                	beqz	a3,1c0060aa <KerParConv3x3Stride1_SQ8+0x184>
		unsigned int of = First + 2*i;
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c005ff4:	5732                	lw	a4,44(sp)
1c005ff6:	57c2                	lw	a5,48(sp)
1c005ff8:	02f70d33          	mul	s10,a4,a5
			int *out = Out+Wo*Ho*(of);
1c005ffc:	5622                	lw	a2,40(sp)
1c005ffe:	033607b3          	mul	a5,a2,s3
1c006002:	00279713          	slli	a4,a5,0x2
			KerConv3x3Stride1_Body_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c006006:	4676                	lw	a2,92(sp)
1c006008:	00361693          	slli	a3,a2,0x3
1c00600c:	96b2                	add	a3,a3,a2
1c00600e:	dc36                	sw	a3,56(sp)
1c006010:	0686                	slli	a3,a3,0x1
1c006012:	c6b6                	sw	a3,76(sp)
1c006014:	5d96                	lw	s11,100(sp)
1c006016:	5662                	lw	a2,56(sp)
1c006018:	42860db3          	p.mac	s11,a2,s0
1c00601c:	078e                	slli	a5,a5,0x3
1c00601e:	c8be                	sw	a5,80(sp)
1c006020:	56b6                	lw	a3,108(sp)
1c006022:	428706b3          	p.mac	a3,a4,s0
1c006026:	c0b6                	sw	a3,64(sp)
1c006028:	00349793          	slli	a5,s1,0x3
1c00602c:	97a6                	add	a5,a5,s1
1c00602e:	ccbe                	sw	a5,88(sp)
	for (unsigned int i=0; i<Iter/2; i++) {
1c006030:	4b81                	li	s7,0
			if ((int)PadIn) KerConv3x3BorderStride1_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006032:	8cca                	mv	s9,s2
1c006034:	a08d                	j	1c006096 <KerParConv3x3Stride1_SQ8+0x170>
1c006036:	94ea                	add	s1,s1,s10
1c006038:	0425                	addi	s0,s0,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c00603a:	05840463          	beq	s0,s8,1c006082 <KerParConv3x3Stride1_SQ8+0x15c>
			KerConv3x3Stride1_Body_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c00603e:	c84a                	sw	s2,16(sp)
1c006040:	c65a                	sw	s6,12(sp)
1c006042:	c452                	sw	s4,8(sp)
1c006044:	c24e                	sw	s3,4(sp)
1c006046:	c056                	sw	s5,0(sp)
1c006048:	58f2                	lw	a7,60(sp)
1c00604a:	5822                	lw	a6,40(sp)
1c00604c:	57c2                	lw	a5,48(sp)
1c00604e:	5732                	lw	a4,44(sp)
1c006050:	56e2                	lw	a3,56(sp)
1c006052:	8622                	mv	a2,s0
1c006054:	55d2                	lw	a1,52(sp)
1c006056:	8526                	mv	a0,s1
1c006058:	d0aff0ef          	jal	ra,1c005562 <KerConv3x3Stride1_Body_2Out_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride1_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00605c:	fc0c8de3          	beqz	s9,1c006036 <KerParConv3x3Stride1_SQ8+0x110>
1c006060:	ca4a                	sw	s2,20(sp)
1c006062:	c84a                	sw	s2,16(sp)
1c006064:	c65a                	sw	s6,12(sp)
1c006066:	c452                	sw	s4,8(sp)
1c006068:	c24e                	sw	s3,4(sp)
1c00606a:	c056                	sw	s5,0(sp)
1c00606c:	58f2                	lw	a7,60(sp)
1c00606e:	5822                	lw	a6,40(sp)
1c006070:	57c2                	lw	a5,48(sp)
1c006072:	5732                	lw	a4,44(sp)
1c006074:	56e2                	lw	a3,56(sp)
1c006076:	8622                	mv	a2,s0
1c006078:	55d2                	lw	a1,52(sp)
1c00607a:	8526                	mv	a0,s1
1c00607c:	fd8ff0ef          	jal	ra,1c005854 <KerConv3x3BorderStride1_2Out_SQ8>
1c006080:	bf5d                	j	1c006036 <KerParConv3x3Stride1_SQ8+0x110>
	for (unsigned int i=0; i<Iter/2; i++) {
1c006082:	0b85                	addi	s7,s7,1
1c006084:	46b6                	lw	a3,76(sp)
1c006086:	9db6                	add	s11,s11,a3
1c006088:	4706                	lw	a4,64(sp)
1c00608a:	47c6                	lw	a5,80(sp)
1c00608c:	973e                	add	a4,a4,a5
1c00608e:	c0ba                	sw	a4,64(sp)
1c006090:	4626                	lw	a2,72(sp)
1c006092:	01760c63          	beq	a2,s7,1c0060aa <KerParConv3x3Stride1_SQ8+0x184>
		for (unsigned int If=0; If<InFeatures; If++) {
1c006096:	4716                	lw	a4,68(sp)
1c006098:	d76d                	beqz	a4,1c006082 <KerParConv3x3Stride1_SQ8+0x15c>
			int *out = Out+Wo*Ho*(of);
1c00609a:	4786                	lw	a5,64(sp)
1c00609c:	da3e                	sw	a5,52(sp)
1c00609e:	44d6                	lw	s1,84(sp)
1c0060a0:	4666                	lw	a2,88(sp)
1c0060a2:	00cd8c33          	add	s8,s11,a2
1c0060a6:	846e                	mv	s0,s11
1c0060a8:	bf59                	j	1c00603e <KerParConv3x3Stride1_SQ8+0x118>
		}
	}
	if (Iter&0x1) {
1c0060aa:	5686                	lw	a3,96(sp)
1c0060ac:	fc16b7b3          	p.bclr	a5,a3,30,1
1c0060b0:	cbc1                	beqz	a5,1c006140 <KerParConv3x3Stride1_SQ8+0x21a>
		unsigned int of = Last-1;
1c0060b2:	57a6                	lw	a5,104(sp)
1c0060b4:	fff78713          	addi	a4,a5,-1
		for (unsigned int If=0; If<InFeatures; If++) {
1c0060b8:	4616                	lw	a2,68(sp)
1c0060ba:	c259                	beqz	a2,1c006140 <KerParConv3x3Stride1_SQ8+0x21a>
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c0060bc:	56b2                	lw	a3,44(sp)
1c0060be:	57c2                	lw	a5,48(sp)
1c0060c0:	02f68d33          	mul	s10,a3,a5
1c0060c4:	4676                	lw	a2,92(sp)
1c0060c6:	02e607b3          	mul	a5,a2,a4
			int *out = Out+Wo*Ho*(of);
1c0060ca:	5622                	lw	a2,40(sp)
1c0060cc:	033606b3          	mul	a3,a2,s3
1c0060d0:	068a                	slli	a3,a3,0x2
1c0060d2:	5bb6                	lw	s7,108(sp)
1c0060d4:	42e68bb3          	p.mac	s7,a3,a4
1c0060d8:	4456                	lw	s0,84(sp)
1c0060da:	00379493          	slli	s1,a5,0x3
1c0060de:	94be                	add	s1,s1,a5
1c0060e0:	5696                	lw	a3,100(sp)
1c0060e2:	94b6                	add	s1,s1,a3
1c0060e4:	4716                	lw	a4,68(sp)
1c0060e6:	97ba                	add	a5,a5,a4
1c0060e8:	00379c13          	slli	s8,a5,0x3
1c0060ec:	97e2                	add	a5,a5,s8
1c0060ee:	00f68c33          	add	s8,a3,a5
			KerConv3x3Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv3x3BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c0060f2:	8cca                	mv	s9,s2
1c0060f4:	5df2                	lw	s11,60(sp)
1c0060f6:	a029                	j	1c006100 <KerParConv3x3Stride1_SQ8+0x1da>
1c0060f8:	946a                	add	s0,s0,s10
1c0060fa:	04a5                	addi	s1,s1,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c0060fc:	05848263          	beq	s1,s8,1c006140 <KerParConv3x3Stride1_SQ8+0x21a>
			KerConv3x3Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c006100:	c64a                	sw	s2,12(sp)
1c006102:	c45a                	sw	s6,8(sp)
1c006104:	c252                	sw	s4,4(sp)
1c006106:	c04e                	sw	s3,0(sp)
1c006108:	88d6                	mv	a7,s5
1c00610a:	886e                	mv	a6,s11
1c00610c:	57a2                	lw	a5,40(sp)
1c00610e:	5742                	lw	a4,48(sp)
1c006110:	56b2                	lw	a3,44(sp)
1c006112:	8626                	mv	a2,s1
1c006114:	85de                	mv	a1,s7
1c006116:	8522                	mv	a0,s0
1c006118:	83bff0ef          	jal	ra,1c005952 <KerConv3x3Stride1_Body_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00611c:	fc0c8ee3          	beqz	s9,1c0060f8 <KerParConv3x3Stride1_SQ8+0x1d2>
1c006120:	c84a                	sw	s2,16(sp)
1c006122:	c64a                	sw	s2,12(sp)
1c006124:	c45a                	sw	s6,8(sp)
1c006126:	c252                	sw	s4,4(sp)
1c006128:	c04e                	sw	s3,0(sp)
1c00612a:	88d6                	mv	a7,s5
1c00612c:	886e                	mv	a6,s11
1c00612e:	57a2                	lw	a5,40(sp)
1c006130:	5742                	lw	a4,48(sp)
1c006132:	56b2                	lw	a3,44(sp)
1c006134:	8626                	mv	a2,s1
1c006136:	85de                	mv	a1,s7
1c006138:	8522                	mv	a0,s0
1c00613a:	a03ff0ef          	jal	ra,1c005b3c <KerConv3x3BorderStride1_SQ8>
1c00613e:	bf6d                	j	1c0060f8 <KerParConv3x3Stride1_SQ8+0x1d2>
1c006140:	002047b7          	lui	a5,0x204
1c006144:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006148:	01c7e703          	p.elw	a4,28(a5)
		}
	}
	gap_waitbarrier(0);
}
1c00614c:	50ba                	lw	ra,172(sp)
1c00614e:	542a                	lw	s0,168(sp)
1c006150:	549a                	lw	s1,164(sp)
1c006152:	590a                	lw	s2,160(sp)
1c006154:	49fa                	lw	s3,156(sp)
1c006156:	4a6a                	lw	s4,152(sp)
1c006158:	4ada                	lw	s5,148(sp)
1c00615a:	4b4a                	lw	s6,144(sp)
1c00615c:	4bba                	lw	s7,140(sp)
1c00615e:	4c2a                	lw	s8,136(sp)
1c006160:	4c9a                	lw	s9,132(sp)
1c006162:	4d0a                	lw	s10,128(sp)
1c006164:	5df6                	lw	s11,124(sp)
1c006166:	614d                	addi	sp,sp,176
1c006168:	8082                	ret

1c00616a <KerParConv3x3Stride2_SQ8>:

void KerParConv3x3Stride2_SQ8(KerConv_SQ8_T *Arg)

{
1c00616a:	7175                	addi	sp,sp,-144
1c00616c:	c706                	sw	ra,140(sp)
1c00616e:	c522                	sw	s0,136(sp)
1c006170:	c326                	sw	s1,132(sp)
1c006172:	c14a                	sw	s2,128(sp)
1c006174:	dece                	sw	s3,124(sp)
1c006176:	dcd2                	sw	s4,120(sp)
1c006178:	dad6                	sw	s5,116(sp)
1c00617a:	d8da                	sw	s6,112(sp)
1c00617c:	d6de                	sw	s7,108(sp)
1c00617e:	d4e2                	sw	s8,104(sp)
1c006180:	d2e6                	sw	s9,100(sp)
1c006182:	d0ea                	sw	s10,96(sp)
1c006184:	ceee                	sw	s11,92(sp)
1c006186:	8aaa                	mv	s5,a0
	unsigned int FS=3, S=2;
	signed char * __restrict__ In = Arg->In;
1c006188:	4118                	lw	a4,0(a0)
1c00618a:	c4ba                	sw	a4,72(sp)
	unsigned int W = Arg->W;
1c00618c:	00455783          	lhu	a5,4(a0)
1c006190:	d63e                	sw	a5,44(sp)
	unsigned int H = Arg->H;
1c006192:	00855703          	lhu	a4,8(a0)
1c006196:	d83a                	sw	a4,48(sp)
	int TotalInFeatures = Arg->TotalInFeatures;
1c006198:	01055403          	lhu	s0,16(a0)
	unsigned int OutFeatures = Arg->OutFeatures;
1c00619c:	00e55703          	lhu	a4,14(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c0061a0:	01452d83          	lw	s11,20(a0)
	int * __restrict__ Out = Arg->Out;
1c0061a4:	4d44                	lw	s1,28(a0)
	unsigned int CoreId = gap_coreid();
1c0061a6:	f1402d73          	csrr	s10,mhartid
1c0061aa:	c80d1d33          	p.extractu	s10,s10,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0061ae:	f83737b3          	p.bclr	a5,a4,28,3
1c0061b2:	00f037b3          	snez	a5,a5
1c0061b6:	00375693          	srli	a3,a4,0x3
1c0061ba:	97b6                	add	a5,a5,a3
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c0061bc:	02fd0d33          	mul	s10,s10,a5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c0061c0:	97ea                	add	a5,a5,s10
1c0061c2:	04e7c7b3          	p.min	a5,a5,a4
1c0061c6:	de3e                	sw	a5,60(sp)
	v4s PadIn = Arg->Pad;
1c0061c8:	02052903          	lw	s2,32(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c0061cc:	78097657          	pv.extract.b	a2,s2,0
1c0061d0:	00655503          	lhu	a0,6(a0)
1c0061d4:	ffd50793          	addi	a5,a0,-3
1c0061d8:	97b2                	add	a5,a5,a2
1c0061da:	7a097757          	pv.extract.b	a4,s2,1
1c0061de:	82e7a7db          	p.addun	a5,a5,a4,1
1c0061e2:	0785                	addi	a5,a5,1
1c0061e4:	d23e                	sw	a5,36(sp)
	return ((Pad+Stride-1)/Stride);
1c0061e6:	00160793          	addi	a5,a2,1
1c0061ea:	8385                	srli	a5,a5,0x1
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c0061ec:	5712                	lw	a4,36(sp)
1c0061ee:	04f747b3          	p.min	a5,a4,a5
1c0061f2:	d43e                	sw	a5,40(sp)
1c0061f4:	4689                	li	a3,2
1c0061f6:	458d                	li	a1,3
1c0061f8:	b50ff0ef          	jal	ra,1c005548 <LastDefinedOutput>
1c0061fc:	57a2                	lw	a5,40(sp)
1c0061fe:	04a7e533          	p.max	a0,a5,a0
1c006202:	da2a                	sw	a0,52(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c006204:	78197657          	pv.extract.b	a2,s2,2
1c006208:	00aad503          	lhu	a0,10(s5)
1c00620c:	ffd50993          	addi	s3,a0,-3
1c006210:	99b2                	add	s3,s3,a2
1c006212:	7a1977d7          	pv.extract.b	a5,s2,3
1c006216:	82f9a9db          	p.addun	s3,s3,a5,1
1c00621a:	0985                	addi	s3,s3,1
	return ((Pad+Stride-1)/Stride);
1c00621c:	00160a13          	addi	s4,a2,1
1c006220:	001a5a13          	srli	s4,s4,0x1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c006224:	0549ca33          	p.min	s4,s3,s4
1c006228:	4689                	li	a3,2
1c00622a:	458d                	li	a1,3
1c00622c:	b1cff0ef          	jal	ra,1c005548 <LastDefinedOutput>
1c006230:	04aa6b33          	p.max	s6,s4,a0

	unsigned int InFeatures = Arg->InFeatures;
1c006234:	00cada83          	lhu	s5,12(s5)
1c006238:	dc56                	sw	s5,56(sp)
	for (unsigned int of=First; of<Last; of++) 
1c00623a:	5772                	lw	a4,60(sp)
1c00623c:	0aed7163          	bleu	a4,s10,1c0062de <KerParConv3x3Stride2_SQ8+0x174>
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c006240:	57b2                	lw	a5,44(sp)
1c006242:	5742                	lw	a4,48(sp)
1c006244:	02e78cb3          	mul	s9,a5,a4
			int *out = Out+Wo*Ho*(of);
1c006248:	5712                	lw	a4,36(sp)
1c00624a:	033707b3          	mul	a5,a4,s3
1c00624e:	078a                	slli	a5,a5,0x2
1c006250:	c0be                	sw	a5,64(sp)
1c006252:	00341793          	slli	a5,s0,0x3
1c006256:	97a2                	add	a5,a5,s0
1c006258:	c2be                	sw	a5,68(sp)
1c00625a:	42fd0db3          	p.mac	s11,s10,a5
1c00625e:	8aa6                	mv	s5,s1
1c006260:	4786                	lw	a5,64(sp)
1c006262:	42fd0ab3          	p.mac	s5,s10,a5
1c006266:	5762                	lw	a4,56(sp)
1c006268:	00371793          	slli	a5,a4,0x3
1c00626c:	97ba                	add	a5,a5,a4
1c00626e:	c6be                	sw	a5,76(sp)
			KerConv3x3Stride2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv3x3BorderStride2_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006270:	8c4a                	mv	s8,s2
1c006272:	a8a9                	j	1c0062cc <KerParConv3x3Stride2_SQ8+0x162>
1c006274:	94e6                	add	s1,s1,s9
1c006276:	0425                	addi	s0,s0,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c006278:	05740263          	beq	s0,s7,1c0062bc <KerParConv3x3Stride2_SQ8+0x152>
			KerConv3x3Stride2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c00627c:	c64a                	sw	s2,12(sp)
1c00627e:	c45a                	sw	s6,8(sp)
1c006280:	c252                	sw	s4,4(sp)
1c006282:	c04e                	sw	s3,0(sp)
1c006284:	58d2                	lw	a7,52(sp)
1c006286:	5822                	lw	a6,40(sp)
1c006288:	5792                	lw	a5,36(sp)
1c00628a:	5742                	lw	a4,48(sp)
1c00628c:	56b2                	lw	a3,44(sp)
1c00628e:	8622                	mv	a2,s0
1c006290:	5582                	lw	a1,32(sp)
1c006292:	8526                	mv	a0,s1
1c006294:	999ff0ef          	jal	ra,1c005c2c <KerConv3x3Stride2_Body_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride2_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006298:	fc0c0ee3          	beqz	s8,1c006274 <KerParConv3x3Stride2_SQ8+0x10a>
1c00629c:	c84a                	sw	s2,16(sp)
1c00629e:	c64a                	sw	s2,12(sp)
1c0062a0:	c45a                	sw	s6,8(sp)
1c0062a2:	c252                	sw	s4,4(sp)
1c0062a4:	c04e                	sw	s3,0(sp)
1c0062a6:	58d2                	lw	a7,52(sp)
1c0062a8:	5822                	lw	a6,40(sp)
1c0062aa:	5792                	lw	a5,36(sp)
1c0062ac:	5742                	lw	a4,48(sp)
1c0062ae:	56b2                	lw	a3,44(sp)
1c0062b0:	8622                	mv	a2,s0
1c0062b2:	5582                	lw	a1,32(sp)
1c0062b4:	8526                	mv	a0,s1
1c0062b6:	b79ff0ef          	jal	ra,1c005e2e <KerConv3x3BorderStride2_SQ8>
1c0062ba:	bf6d                	j	1c006274 <KerParConv3x3Stride2_SQ8+0x10a>
	for (unsigned int of=First; of<Last; of++) 
1c0062bc:	0d05                	addi	s10,s10,1
1c0062be:	4716                	lw	a4,68(sp)
1c0062c0:	9dba                	add	s11,s11,a4
1c0062c2:	4786                	lw	a5,64(sp)
1c0062c4:	9abe                	add	s5,s5,a5
1c0062c6:	5772                	lw	a4,60(sp)
1c0062c8:	01a70b63          	beq	a4,s10,1c0062de <KerParConv3x3Stride2_SQ8+0x174>
		for (unsigned int If=0; If<InFeatures; If++) {
1c0062cc:	57e2                	lw	a5,56(sp)
1c0062ce:	d7fd                	beqz	a5,1c0062bc <KerParConv3x3Stride2_SQ8+0x152>
			int *out = Out+Wo*Ho*(of);
1c0062d0:	d056                	sw	s5,32(sp)
1c0062d2:	44a6                	lw	s1,72(sp)
1c0062d4:	47b6                	lw	a5,76(sp)
1c0062d6:	00fd8bb3          	add	s7,s11,a5
1c0062da:	846e                	mv	s0,s11
1c0062dc:	b745                	j	1c00627c <KerParConv3x3Stride2_SQ8+0x112>
1c0062de:	002047b7          	lui	a5,0x204
1c0062e2:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0062e6:	01c7e703          	p.elw	a4,28(a5)
		}
	gap_waitbarrier(0);
}
1c0062ea:	40ba                	lw	ra,140(sp)
1c0062ec:	442a                	lw	s0,136(sp)
1c0062ee:	449a                	lw	s1,132(sp)
1c0062f0:	490a                	lw	s2,128(sp)
1c0062f2:	59f6                	lw	s3,124(sp)
1c0062f4:	5a66                	lw	s4,120(sp)
1c0062f6:	5ad6                	lw	s5,116(sp)
1c0062f8:	5b46                	lw	s6,112(sp)
1c0062fa:	5bb6                	lw	s7,108(sp)
1c0062fc:	5c26                	lw	s8,104(sp)
1c0062fe:	5c96                	lw	s9,100(sp)
1c006300:	5d06                	lw	s10,96(sp)
1c006302:	4df6                	lw	s11,92(sp)
1c006304:	6149                	addi	sp,sp,144
1c006306:	8082                	ret

1c006308 <LastDefinedOutput>:
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);

	if (DoScale) KerParPoolActivation(Out, Wo, Ho, First, Last, Infos, ACT_NONE);
1c006308:	fff68793          	addi	a5,a3,-1
1c00630c:	953e                	add	a0,a0,a5
1c00630e:	9532                	add	a0,a0,a2
1c006310:	0015d613          	srli	a2,a1,0x1
1c006314:	8d11                	sub	a0,a0,a2
1c006316:	15fd                	addi	a1,a1,-1
1c006318:	8185                	srli	a1,a1,0x1
1c00631a:	8d0d                	sub	a0,a0,a1
1c00631c:	02d55533          	divu	a0,a0,a3
1c006320:	8082                	ret

1c006322 <KerMaxPool2x2Stride2_SQ8>:
1c006322:	715d                	addi	sp,sp,-80
1c006324:	c6a2                	sw	s0,76(sp)
1c006326:	c4a6                	sw	s1,72(sp)
1c006328:	c2ca                	sw	s2,68(sp)
1c00632a:	c0ce                	sw	s3,64(sp)
1c00632c:	de52                	sw	s4,60(sp)
1c00632e:	dc56                	sw	s5,56(sp)
1c006330:	da5a                	sw	s6,52(sp)
1c006332:	d85e                	sw	s7,48(sp)
1c006334:	d662                	sw	s8,44(sp)
1c006336:	d466                	sw	s9,40(sp)
1c006338:	d26a                	sw	s10,36(sp)
1c00633a:	d06e                	sw	s11,32(sp)
1c00633c:	ce32                	sw	a2,28(sp)
1c00633e:	c842                	sw	a6,16(sp)
1c006340:	ca46                	sw	a7,20(sp)
1c006342:	4346                	lw	t1,80(sp)
1c006344:	4666                	lw	a2,88(sp)
1c006346:	4bf6                	lw	s7,92(sp)
1c006348:	78067857          	pv.extract.b	a6,a2,0
1c00634c:	c242                	sw	a6,4(sp)
1c00634e:	7a0678d7          	pv.extract.b	a7,a2,1
1c006352:	c646                	sw	a7,12(sp)
1c006354:	78167fd7          	pv.extract.b	t6,a2,2
1c006358:	7a167657          	pv.extract.b	a2,a2,3
1c00635c:	cc32                	sw	a2,24(sp)
1c00635e:	780bf657          	pv.extract.b	a2,s7,0
1c006362:	c432                	sw	a2,8(sp)
1c006364:	781bfbd7          	pv.extract.b	s7,s7,2
1c006368:	0a080f63          	beqz	a6,1c006426 <KerMaxPool2x2Stride2_SQ8+0x104>
1c00636c:	899a                	mv	s3,t1
1c00636e:	4d56                	lw	s10,84(sp)
1c006370:	37a37563          	bleu	s10,t1,1c0066da <KerMaxPool2x2Stride2_SQ8+0x3b8>
1c006374:	00159393          	slli	t2,a1,0x1
1c006378:	00131613          	slli	a2,t1,0x1
1c00637c:	41760833          	sub	a6,a2,s7
1c006380:	8f2a                	mv	t5,a0
1c006382:	42b80f33          	p.mac	t5,a6,a1
1c006386:	00180613          	addi	a2,a6,1
1c00638a:	8eaa                	mv	t4,a0
1c00638c:	42b60eb3          	p.mac	t4,a2,a1
1c006390:	82ba                	mv	t0,a4
1c006392:	8e36                	mv	t3,a3
1c006394:	42e30e33          	p.mac	t3,t1,a4
1c006398:	889a                	mv	a7,t1
1c00639a:	406d0833          	sub	a6,s10,t1
1c00639e:	00c840fb          	lp.setup	x1,a6,1c0063b6 <KerMaxPool2x2Stride2_SQ8+0x94>
1c0063a2:	007f760b          	p.lb	a2,t2(t5!)
1c0063a6:	04066633          	p.max	a2,a2,zero
1c0063aa:	007ef40b          	p.lb	s0,t2(t4!)
1c0063ae:	04866633          	p.max	a2,a2,s0
1c0063b2:	00ce42ab          	p.sb	a2,t0(t3!)
1c0063b6:	0885                	addi	a7,a7,1
1c0063b8:	060f9963          	bnez	t6,1c00642a <KerMaxPool2x2Stride2_SQ8+0x108>
1c0063bc:	4642                	lw	a2,16(sp)
1c0063be:	40f60ab3          	sub	s5,a2,a5
1c0063c2:	001adb13          	srli	s6,s5,0x1
1c0063c6:	002b1493          	slli	s1,s6,0x2
1c0063ca:	00159a13          	slli	s4,a1,0x1
1c0063ce:	00199613          	slli	a2,s3,0x1
1c0063d2:	00179293          	slli	t0,a5,0x1
1c0063d6:	4822                	lw	a6,8(sp)
1c0063d8:	410282b3          	sub	t0,t0,a6
1c0063dc:	92a6                	add	t0,t0,s1
1c0063de:	41760833          	sub	a6,a2,s7
1c0063e2:	8416                	mv	s0,t0
1c0063e4:	42b80433          	p.mac	s0,a6,a1
1c0063e8:	942a                	add	s0,s0,a0
1c0063ea:	00180613          	addi	a2,a6,1
1c0063ee:	42b602b3          	p.mac	t0,a2,a1
1c0063f2:	92aa                	add	t0,t0,a0
1c0063f4:	8c3a                	mv	s8,a4
1c0063f6:	83be                	mv	t2,a5
1c0063f8:	42e983b3          	p.mac	t2,s3,a4
1c0063fc:	93b6                	add	t2,t2,a3
1c0063fe:	894e                	mv	s2,s3
1c006400:	fc1abcb3          	p.bclr	s9,s5,30,1
1c006404:	c00abab3          	p.bclr	s5,s5,0,0
1c006408:	00f68db3          	add	s11,a3,a5
1c00640c:	9aee                	add	s5,s5,s11
1c00640e:	413d08b3          	sub	a7,s10,s3
1c006412:	c046                	sw	a7,0(sp)
1c006414:	00198613          	addi	a2,s3,1
1c006418:	00cd6463          	bltu	s10,a2,1c006420 <KerMaxPool2x2Stride2_SQ8+0xfe>
1c00641c:	0e0d1463          	bnez	s10,1c006504 <KerMaxPool2x2Stride2_SQ8+0x1e2>
1c006420:	4605                	li	a2,1
1c006422:	c032                	sw	a2,0(sp)
1c006424:	a0c5                	j	1c006504 <KerMaxPool2x2Stride2_SQ8+0x1e2>
1c006426:	0c0f8163          	beqz	t6,1c0064e8 <KerMaxPool2x2Stride2_SQ8+0x1c6>
1c00642a:	00179f93          	slli	t6,a5,0x1
1c00642e:	4822                	lw	a6,8(sp)
1c006430:	410f8fb3          	sub	t6,t6,a6
1c006434:	9faa                	add	t6,t6,a0
1c006436:	4642                	lw	a2,16(sp)
1c006438:	40f602b3          	sub	t0,a2,a5
1c00643c:	0012d393          	srli	t2,t0,0x1
1c006440:	04038463          	beqz	t2,1c006488 <KerMaxPool2x2Stride2_SQ8+0x166>
1c006444:	00f68f33          	add	t5,a3,a5
1c006448:	00178e13          	addi	t3,a5,1
1c00644c:	9e36                	add	t3,t3,a3
1c00644e:	8efe                	mv	t4,t6
1c006450:	00239893          	slli	a7,t2,0x2
1c006454:	18f1                	addi	a7,a7,-4
1c006456:	0028d893          	srli	a7,a7,0x2
1c00645a:	0885                	addi	a7,a7,1
1c00645c:	0148c0fb          	lp.setup	x1,a7,1c006484 <KerMaxPool2x2Stride2_SQ8+0x162>
1c006460:	004ea60b          	p.lw	a2,4(t4!)
1c006464:	30067657          	pv.max.sci.b	a2,a2,0
1c006468:	78067857          	pv.extract.b	a6,a2,0
1c00646c:	7a067457          	pv.extract.b	s0,a2,1
1c006470:	04886833          	p.max	a6,a6,s0
1c006474:	010f012b          	p.sb	a6,2(t5!)
1c006478:	78167857          	pv.extract.b	a6,a2,2
1c00647c:	7a167657          	pv.extract.b	a2,a2,3
1c006480:	04c86633          	p.max	a2,a6,a2
1c006484:	00ce012b          	p.sb	a2,2(t3!)
1c006488:	fc12b633          	p.bclr	a2,t0,30,1
1c00648c:	c21d                	beqz	a2,1c0064b2 <KerMaxPool2x2Stride2_SQ8+0x190>
1c00648e:	00239613          	slli	a2,t2,0x2
1c006492:	20cff603          	p.lw	a2,a2(t6)
1c006496:	30067657          	pv.max.sci.b	a2,a2,0
1c00649a:	78067857          	pv.extract.b	a6,a2,0
1c00649e:	7a067657          	pv.extract.b	a2,a2,1
1c0064a2:	04c86633          	p.max	a2,a6,a2
1c0064a6:	c002b2b3          	p.bclr	t0,t0,0,0
1c0064aa:	00f68833          	add	a6,a3,a5
1c0064ae:	00c842a3          	p.sb	a2,t0(a6)
1c0064b2:	4812                	lw	a6,4(sp)
1c0064b4:	00080863          	beqz	a6,1c0064c4 <KerMaxPool2x2Stride2_SQ8+0x1a2>
1c0064b8:	00050603          	lb	a2,0(a0)
1c0064bc:	04066633          	p.max	a2,a2,zero
1c0064c0:	00c68023          	sb	a2,0(a3)
1c0064c4:	48b2                	lw	a7,12(sp)
1c0064c6:	20088d63          	beqz	a7,1c0066e0 <KerMaxPool2x2Stride2_SQ8+0x3be>
1c0064ca:	00b50633          	add	a2,a0,a1
1c0064ce:	fff60603          	lb	a2,-1(a2)
1c0064d2:	04066633          	p.max	a2,a2,zero
1c0064d6:	00e68833          	add	a6,a3,a4
1c0064da:	fec80fa3          	sb	a2,-1(a6)
1c0064de:	899a                	mv	s3,t1
1c0064e0:	4d56                	lw	s10,84(sp)
1c0064e2:	eda36de3          	bltu	t1,s10,1c0063bc <KerMaxPool2x2Stride2_SQ8+0x9a>
1c0064e6:	a8c5                	j	1c0065d6 <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c0064e8:	899a                	mv	s3,t1
1c0064ea:	4d56                	lw	s10,84(sp)
1c0064ec:	eda368e3          	bltu	t1,s10,1c0063bc <KerMaxPool2x2Stride2_SQ8+0x9a>
1c0064f0:	a0dd                	j	1c0065d6 <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c0064f2:	0905                	addi	s2,s2,1
1c0064f4:	9452                	add	s0,s0,s4
1c0064f6:	92d2                	add	t0,t0,s4
1c0064f8:	93e2                	add	t2,t2,s8
1c0064fa:	4802                	lw	a6,0(sp)
1c0064fc:	187d                	addi	a6,a6,-1
1c0064fe:	c042                	sw	a6,0(sp)
1c006500:	06080c63          	beqz	a6,1c006578 <KerMaxPool2x2Stride2_SQ8+0x256>
1c006504:	040b0663          	beqz	s6,1c006550 <KerMaxPool2x2Stride2_SQ8+0x22e>
1c006508:	40928fb3          	sub	t6,t0,s1
1c00650c:	00138f13          	addi	t5,t2,1
1c006510:	8e9e                	mv	t4,t2
1c006512:	40940e33          	sub	t3,s0,s1
1c006516:	ffc48313          	addi	t1,s1,-4
1c00651a:	00235313          	srli	t1,t1,0x2
1c00651e:	0305                	addi	t1,t1,1
1c006520:	016340fb          	lp.setup	x1,t1,1c00654c <KerMaxPool2x2Stride2_SQ8+0x22a>
1c006524:	004e280b          	p.lw	a6,4(t3!)
1c006528:	004fa60b          	p.lw	a2,4(t6!)
1c00652c:	30c81657          	pv.max.b	a2,a6,a2
1c006530:	78067857          	pv.extract.b	a6,a2,0
1c006534:	7a0678d7          	pv.extract.b	a7,a2,1
1c006538:	05186833          	p.max	a6,a6,a7
1c00653c:	010e812b          	p.sb	a6,2(t4!)
1c006540:	78167857          	pv.extract.b	a6,a2,2
1c006544:	7a167657          	pv.extract.b	a2,a2,3
1c006548:	04c86633          	p.max	a2,a6,a2
1c00654c:	00cf012b          	p.sb	a2,2(t5!)
1c006550:	fa0c81e3          	beqz	s9,1c0064f2 <KerMaxPool2x2Stride2_SQ8+0x1d0>
1c006554:	4010                	lw	a2,0(s0)
1c006556:	0002a803          	lw	a6,0(t0)
1c00655a:	31061657          	pv.max.b	a2,a2,a6
1c00655e:	78067857          	pv.extract.b	a6,a2,0
1c006562:	7a067657          	pv.extract.b	a2,a2,1
1c006566:	04c86633          	p.max	a2,a6,a2
1c00656a:	41b38833          	sub	a6,t2,s11
1c00656e:	00cac823          	p.sb	a2,a6(s5)
1c006572:	b741                	j	1c0064f2 <KerMaxPool2x2Stride2_SQ8+0x1d0>
1c006574:	4305                	li	t1,1
1c006576:	a099                	j	1c0065bc <KerMaxPool2x2Stride2_SQ8+0x29a>
1c006578:	4832                	lw	a6,12(sp)
1c00657a:	04080e63          	beqz	a6,1c0065d6 <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c00657e:	00159f13          	slli	t5,a1,0x1
1c006582:	00199613          	slli	a2,s3,0x1
1c006586:	fff58893          	addi	a7,a1,-1
1c00658a:	41760833          	sub	a6,a2,s7
1c00658e:	8ec6                	mv	t4,a7
1c006590:	42b80eb3          	p.mac	t4,a6,a1
1c006594:	9eaa                	add	t4,t4,a0
1c006596:	00180613          	addi	a2,a6,1
1c00659a:	42b608b3          	p.mac	a7,a2,a1
1c00659e:	98aa                	add	a7,a7,a0
1c0065a0:	8fba                	mv	t6,a4
1c0065a2:	fff70e13          	addi	t3,a4,-1
1c0065a6:	42e98e33          	p.mac	t3,s3,a4
1c0065aa:	9e36                	add	t3,t3,a3
1c0065ac:	413d0333          	sub	t1,s10,s3
1c0065b0:	00198613          	addi	a2,s3,1
1c0065b4:	fccd60e3          	bltu	s10,a2,1c006574 <KerMaxPool2x2Stride2_SQ8+0x252>
1c0065b8:	fa0d0ee3          	beqz	s10,1c006574 <KerMaxPool2x2Stride2_SQ8+0x252>
1c0065bc:	00c340fb          	lp.setup	x1,t1,1c0065d4 <KerMaxPool2x2Stride2_SQ8+0x2b2>
1c0065c0:	01eef60b          	p.lb	a2,t5(t4!)
1c0065c4:	04066633          	p.max	a2,a2,zero
1c0065c8:	01e8f80b          	p.lb	a6,t5(a7!)
1c0065cc:	05066633          	p.max	a2,a2,a6
1c0065d0:	00ce4fab          	p.sb	a2,t6(t3!)
1c0065d4:	0985                	addi	s3,s3,1
1c0065d6:	48e2                	lw	a7,24(sp)
1c0065d8:	0e088363          	beqz	a7,1c0066be <KerMaxPool2x2Stride2_SQ8+0x39c>
1c0065dc:	4672                	lw	a2,28(sp)
1c0065de:	fff60293          	addi	t0,a2,-1
1c0065e2:	02b282b3          	mul	t0,t0,a1
1c0065e6:	00179f93          	slli	t6,a5,0x1
1c0065ea:	9f96                	add	t6,t6,t0
1c0065ec:	4822                	lw	a6,8(sp)
1c0065ee:	410f8fb3          	sub	t6,t6,a6
1c0065f2:	9faa                	add	t6,t6,a0
1c0065f4:	4642                	lw	a2,16(sp)
1c0065f6:	40f603b3          	sub	t2,a2,a5
1c0065fa:	0013d413          	srli	s0,t2,0x1
1c0065fe:	c831                	beqz	s0,1c006652 <KerMaxPool2x2Stride2_SQ8+0x330>
1c006600:	4852                	lw	a6,20(sp)
1c006602:	fff80613          	addi	a2,a6,-1
1c006606:	88be                	mv	a7,a5
1c006608:	42e608b3          	p.mac	a7,a2,a4
1c00660c:	01168f33          	add	t5,a3,a7
1c006610:	00188613          	addi	a2,a7,1
1c006614:	00c68e33          	add	t3,a3,a2
1c006618:	8efe                	mv	t4,t6
1c00661a:	00241313          	slli	t1,s0,0x2
1c00661e:	1371                	addi	t1,t1,-4
1c006620:	00235313          	srli	t1,t1,0x2
1c006624:	0305                	addi	t1,t1,1
1c006626:	014340fb          	lp.setup	x1,t1,1c00664e <KerMaxPool2x2Stride2_SQ8+0x32c>
1c00662a:	004ea60b          	p.lw	a2,4(t4!)
1c00662e:	30067657          	pv.max.sci.b	a2,a2,0
1c006632:	78067857          	pv.extract.b	a6,a2,0
1c006636:	7a0678d7          	pv.extract.b	a7,a2,1
1c00663a:	05186833          	p.max	a6,a6,a7
1c00663e:	010f012b          	p.sb	a6,2(t5!)
1c006642:	78167857          	pv.extract.b	a6,a2,2
1c006646:	7a167657          	pv.extract.b	a2,a2,3
1c00664a:	04c86633          	p.max	a2,a6,a2
1c00664e:	00ce012b          	p.sb	a2,2(t3!)
1c006652:	fc13b633          	p.bclr	a2,t2,30,1
1c006656:	c61d                	beqz	a2,1c006684 <KerMaxPool2x2Stride2_SQ8+0x362>
1c006658:	00241613          	slli	a2,s0,0x2
1c00665c:	20cff603          	p.lw	a2,a2(t6)
1c006660:	30067657          	pv.max.sci.b	a2,a2,0
1c006664:	78067857          	pv.extract.b	a6,a2,0
1c006668:	7a067657          	pv.extract.b	a2,a2,1
1c00666c:	04c86633          	p.max	a2,a6,a2
1c006670:	48d2                	lw	a7,20(sp)
1c006672:	fff88813          	addi	a6,a7,-1
1c006676:	c003b3b3          	p.bclr	t2,t2,0,0
1c00667a:	97b6                	add	a5,a5,a3
1c00667c:	42e807b3          	p.mac	a5,a6,a4
1c006680:	00c7c3a3          	p.sb	a2,t2(a5)
1c006684:	4612                	lw	a2,4(sp)
1c006686:	ce11                	beqz	a2,1c0066a2 <KerMaxPool2x2Stride2_SQ8+0x380>
1c006688:	005507b3          	add	a5,a0,t0
1c00668c:	00078783          	lb	a5,0(a5)
1c006690:	0407e7b3          	p.max	a5,a5,zero
1c006694:	4852                	lw	a6,20(sp)
1c006696:	fff80613          	addi	a2,a6,-1
1c00669a:	02e60633          	mul	a2,a2,a4
1c00669e:	00f6c623          	p.sb	a5,a2(a3)
1c0066a2:	48b2                	lw	a7,12(sp)
1c0066a4:	00088d63          	beqz	a7,1c0066be <KerMaxPool2x2Stride2_SQ8+0x39c>
1c0066a8:	9516                	add	a0,a0,t0
1c0066aa:	95aa                	add	a1,a1,a0
1c0066ac:	fff58783          	lb	a5,-1(a1)
1c0066b0:	0407e7b3          	p.max	a5,a5,zero
1c0066b4:	4652                	lw	a2,20(sp)
1c0066b6:	42c706b3          	p.mac	a3,a4,a2
1c0066ba:	fef68fa3          	sb	a5,-1(a3)
1c0066be:	4436                	lw	s0,76(sp)
1c0066c0:	44a6                	lw	s1,72(sp)
1c0066c2:	4916                	lw	s2,68(sp)
1c0066c4:	4986                	lw	s3,64(sp)
1c0066c6:	5a72                	lw	s4,60(sp)
1c0066c8:	5ae2                	lw	s5,56(sp)
1c0066ca:	5b52                	lw	s6,52(sp)
1c0066cc:	5bc2                	lw	s7,48(sp)
1c0066ce:	5c32                	lw	s8,44(sp)
1c0066d0:	5ca2                	lw	s9,40(sp)
1c0066d2:	5d12                	lw	s10,36(sp)
1c0066d4:	5d82                	lw	s11,32(sp)
1c0066d6:	6161                	addi	sp,sp,80
1c0066d8:	8082                	ret
1c0066da:	ee0f8ee3          	beqz	t6,1c0065d6 <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c0066de:	b3b1                	j	1c00642a <KerMaxPool2x2Stride2_SQ8+0x108>
1c0066e0:	899a                	mv	s3,t1
1c0066e2:	4d56                	lw	s10,84(sp)
1c0066e4:	cda36ce3          	bltu	t1,s10,1c0063bc <KerMaxPool2x2Stride2_SQ8+0x9a>
1c0066e8:	b5fd                	j	1c0065d6 <KerMaxPool2x2Stride2_SQ8+0x2b4>

1c0066ea <KerAvgPool2x2Stride2_SQ8>:
1c0066ea:	7139                	addi	sp,sp,-64
1c0066ec:	de22                	sw	s0,60(sp)
1c0066ee:	dc26                	sw	s1,56(sp)
1c0066f0:	da4a                	sw	s2,52(sp)
1c0066f2:	d84e                	sw	s3,48(sp)
1c0066f4:	d652                	sw	s4,44(sp)
1c0066f6:	d456                	sw	s5,40(sp)
1c0066f8:	d25a                	sw	s6,36(sp)
1c0066fa:	d05e                	sw	s7,32(sp)
1c0066fc:	ce62                	sw	s8,28(sp)
1c0066fe:	cc66                	sw	s9,24(sp)
1c006700:	ca6a                	sw	s10,20(sp)
1c006702:	c86e                	sw	s11,16(sp)
1c006704:	c632                	sw	a2,12(sp)
1c006706:	4f86                	lw	t6,64(sp)
1c006708:	4626                	lw	a2,72(sp)
1c00670a:	4ab6                	lw	s5,76(sp)
1c00670c:	78067cd7          	pv.extract.b	s9,a2,0
1c006710:	7a067dd7          	pv.extract.b	s11,a2,1
1c006714:	781673d7          	pv.extract.b	t2,a2,2
1c006718:	7a167657          	pv.extract.b	a2,a2,3
1c00671c:	c432                	sw	a2,8(sp)
1c00671e:	780afd57          	pv.extract.b	s10,s5,0
1c006722:	781afad7          	pv.extract.b	s5,s5,2
1c006726:	1c0c8363          	beqz	s9,1c0068ec <KerAvgPool2x2Stride2_SQ8+0x202>
1c00672a:	8a7e                	mv	s4,t6
1c00672c:	4c16                	lw	s8,68(sp)
1c00672e:	238ffd63          	bleu	s8,t6,1c006968 <KerAvgPool2x2Stride2_SQ8+0x27e>
1c006732:	00159493          	slli	s1,a1,0x1
1c006736:	001f9613          	slli	a2,t6,0x1
1c00673a:	41560333          	sub	t1,a2,s5
1c00673e:	82aa                	mv	t0,a0
1c006740:	42b302b3          	p.mac	t0,t1,a1
1c006744:	00130613          	addi	a2,t1,1
1c006748:	8f2a                	mv	t5,a0
1c00674a:	42b60f33          	p.mac	t5,a2,a1
1c00674e:	843a                	mv	s0,a4
1c006750:	8eb6                	mv	t4,a3
1c006752:	42ef8eb3          	p.mac	t4,t6,a4
1c006756:	8e7e                	mv	t3,t6
1c006758:	41fc0333          	sub	t1,s8,t6
1c00675c:	00a340fb          	lp.setup	x1,t1,1c006770 <KerAvgPool2x2Stride2_SQ8+0x86>
1c006760:	0092f60b          	p.lb	a2,s1(t0!)
1c006764:	009f790b          	p.lb	s2,s1(t5!)
1c006768:	0526665b          	p.mac.zh.zl	a2,a2,s2,sp
1c00676c:	00cec42b          	p.sb	a2,s0(t4!)
1c006770:	0e05                	addi	t3,t3,1
1c006772:	16039f63          	bnez	t2,1c0068f0 <KerAvgPool2x2Stride2_SQ8+0x206>
1c006776:	00159b13          	slli	s6,a1,0x1
1c00677a:	001a1613          	slli	a2,s4,0x1
1c00677e:	41560933          	sub	s2,a2,s5
1c006782:	02b90333          	mul	t1,s2,a1
1c006786:	00179393          	slli	t2,a5,0x1
1c00678a:	41a383b3          	sub	t2,t2,s10
1c00678e:	939a                	add	t2,t2,t1
1c006790:	93aa                	add	t2,t2,a0
1c006792:	8bba                	mv	s7,a4
1c006794:	84b6                	mv	s1,a3
1c006796:	42ea04b3          	p.mac	s1,s4,a4
1c00679a:	0905                	addi	s2,s2,1
1c00679c:	02b90933          	mul	s2,s2,a1
1c0067a0:	40690933          	sub	s2,s2,t1
1c0067a4:	89d2                	mv	s3,s4
1c0067a6:	40f80633          	sub	a2,a6,a5
1c0067aa:	c232                	sw	a2,4(sp)
1c0067ac:	1c00e637          	lui	a2,0x1c00e
1c0067b0:	9cc62303          	lw	t1,-1588(a2) # 1c00d9cc <__clz_tab+0x590>
1c0067b4:	414c0433          	sub	s0,s8,s4
1c0067b8:	001a0613          	addi	a2,s4,1
1c0067bc:	1acc6263          	bltu	s8,a2,1c006960 <KerAvgPool2x2Stride2_SQ8+0x276>
1c0067c0:	1a0c0063          	beqz	s8,1c006960 <KerAvgPool2x2Stride2_SQ8+0x276>
1c0067c4:	0194407b          	lp.setup	x0,s0,1c0067f6 <KerAvgPool2x2Stride2_SQ8+0x10c>
1c0067c8:	03078563          	beq	a5,a6,1c0067f2 <KerAvgPool2x2Stride2_SQ8+0x108>
1c0067cc:	012382b3          	add	t0,t2,s2
1c0067d0:	8fa6                	mv	t6,s1
1c0067d2:	8f1e                	mv	t5,t2
1c0067d4:	4e92                	lw	t4,4(sp)
1c0067d6:	00cec0fb          	lp.setup	x1,t4,1c0067ee <KerAvgPool2x2Stride2_SQ8+0x104>
1c0067da:	002f160b          	p.lh	a2,2(t5!)
1c0067de:	98661657          	pv.dotsp.b	a2,a2,t1
1c0067e2:	00229e0b          	p.lh	t3,2(t0!)
1c0067e6:	b86e1657          	pv.sdotsp.b	a2,t3,t1
1c0067ea:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c0067ee:	00cf80ab          	p.sb	a2,1(t6!)
1c0067f2:	0985                	addi	s3,s3,1
1c0067f4:	93da                	add	t2,t2,s6
1c0067f6:	94de                	add	s1,s1,s7
1c0067f8:	040d8c63          	beqz	s11,1c006850 <KerAvgPool2x2Stride2_SQ8+0x166>
1c0067fc:	00159f93          	slli	t6,a1,0x1
1c006800:	001a1613          	slli	a2,s4,0x1
1c006804:	fff58e13          	addi	t3,a1,-1
1c006808:	41560333          	sub	t1,a2,s5
1c00680c:	82f2                	mv	t0,t3
1c00680e:	42b302b3          	p.mac	t0,t1,a1
1c006812:	92aa                	add	t0,t0,a0
1c006814:	00130613          	addi	a2,t1,1
1c006818:	42b60e33          	p.mac	t3,a2,a1
1c00681c:	9e2a                	add	t3,t3,a0
1c00681e:	83ba                	mv	t2,a4
1c006820:	fff70f13          	addi	t5,a4,-1
1c006824:	42ea0f33          	p.mac	t5,s4,a4
1c006828:	9f36                	add	t5,t5,a3
1c00682a:	414c0eb3          	sub	t4,s8,s4
1c00682e:	001a0613          	addi	a2,s4,1
1c006832:	12cc6963          	bltu	s8,a2,1c006964 <KerAvgPool2x2Stride2_SQ8+0x27a>
1c006836:	120c0763          	beqz	s8,1c006964 <KerAvgPool2x2Stride2_SQ8+0x27a>
1c00683a:	00aec0fb          	lp.setup	x1,t4,1c00684e <KerAvgPool2x2Stride2_SQ8+0x164>
1c00683e:	01f2f60b          	p.lb	a2,t6(t0!)
1c006842:	01fe730b          	p.lb	t1,t6(t3!)
1c006846:	0466665b          	p.mac.zh.zl	a2,a2,t1,sp
1c00684a:	00cf43ab          	p.sb	a2,t2(t5!)
1c00684e:	0a05                	addi	s4,s4,1
1c006850:	4622                	lw	a2,8(sp)
1c006852:	ce3d                	beqz	a2,1c0068d0 <KerAvgPool2x2Stride2_SQ8+0x1e6>
1c006854:	4632                	lw	a2,12(sp)
1c006856:	fff60e93          	addi	t4,a2,-1
1c00685a:	02be8eb3          	mul	t4,t4,a1
1c00685e:	00179613          	slli	a2,a5,0x1
1c006862:	9676                	add	a2,a2,t4
1c006864:	41a60633          	sub	a2,a2,s10
1c006868:	40f80833          	sub	a6,a6,a5
1c00686c:	02080863          	beqz	a6,1c00689c <KerAvgPool2x2Stride2_SQ8+0x1b2>
1c006870:	fff88313          	addi	t1,a7,-1
1c006874:	42e307b3          	p.mac	a5,t1,a4
1c006878:	00c50333          	add	t1,a0,a2
1c00687c:	00f68e33          	add	t3,a3,a5
1c006880:	1c00e7b7          	lui	a5,0x1c00e
1c006884:	9cc7a603          	lw	a2,-1588(a5) # 1c00d9cc <__clz_tab+0x590>
1c006888:	008840fb          	lp.setup	x1,a6,1c006898 <KerAvgPool2x2Stride2_SQ8+0x1ae>
1c00688c:	0023178b          	p.lh	a5,2(t1!)
1c006890:	98c797d7          	pv.dotsp.b	a5,a5,a2
1c006894:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c006898:	00fe00ab          	p.sb	a5,1(t3!)
1c00689c:	000c8e63          	beqz	s9,1c0068b8 <KerAvgPool2x2Stride2_SQ8+0x1ce>
1c0068a0:	01d507b3          	add	a5,a0,t4
1c0068a4:	00078783          	lb	a5,0(a5)
1c0068a8:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c0068ac:	fff88613          	addi	a2,a7,-1
1c0068b0:	02e60633          	mul	a2,a2,a4
1c0068b4:	00f6c623          	p.sb	a5,a2(a3)
1c0068b8:	000d8c63          	beqz	s11,1c0068d0 <KerAvgPool2x2Stride2_SQ8+0x1e6>
1c0068bc:	9576                	add	a0,a0,t4
1c0068be:	95aa                	add	a1,a1,a0
1c0068c0:	fff58783          	lb	a5,-1(a1)
1c0068c4:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c0068c8:	431706b3          	p.mac	a3,a4,a7
1c0068cc:	fef68fa3          	sb	a5,-1(a3)
1c0068d0:	5472                	lw	s0,60(sp)
1c0068d2:	54e2                	lw	s1,56(sp)
1c0068d4:	5952                	lw	s2,52(sp)
1c0068d6:	59c2                	lw	s3,48(sp)
1c0068d8:	5a32                	lw	s4,44(sp)
1c0068da:	5aa2                	lw	s5,40(sp)
1c0068dc:	5b12                	lw	s6,36(sp)
1c0068de:	5b82                	lw	s7,32(sp)
1c0068e0:	4c72                	lw	s8,28(sp)
1c0068e2:	4ce2                	lw	s9,24(sp)
1c0068e4:	4d52                	lw	s10,20(sp)
1c0068e6:	4dc2                	lw	s11,16(sp)
1c0068e8:	6121                	addi	sp,sp,64
1c0068ea:	8082                	ret
1c0068ec:	06038563          	beqz	t2,1c006956 <KerAvgPool2x2Stride2_SQ8+0x26c>
1c0068f0:	00179613          	slli	a2,a5,0x1
1c0068f4:	41a60633          	sub	a2,a2,s10
1c0068f8:	40f80e33          	sub	t3,a6,a5
1c0068fc:	020e0463          	beqz	t3,1c006924 <KerAvgPool2x2Stride2_SQ8+0x23a>
1c006900:	00c50eb3          	add	t4,a0,a2
1c006904:	00f68f33          	add	t5,a3,a5
1c006908:	1c00e637          	lui	a2,0x1c00e
1c00690c:	9cc62303          	lw	t1,-1588(a2) # 1c00d9cc <__clz_tab+0x590>
1c006910:	008e40fb          	lp.setup	x1,t3,1c006920 <KerAvgPool2x2Stride2_SQ8+0x236>
1c006914:	004ea60b          	p.lw	a2,4(t4!)
1c006918:	98661657          	pv.dotsp.b	a2,a2,t1
1c00691c:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c006920:	00cf00ab          	p.sb	a2,1(t5!)
1c006924:	000c8863          	beqz	s9,1c006934 <KerAvgPool2x2Stride2_SQ8+0x24a>
1c006928:	00050603          	lb	a2,0(a0)
1c00692c:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c006930:	00c68023          	sb	a2,0(a3)
1c006934:	020d8d63          	beqz	s11,1c00696e <KerAvgPool2x2Stride2_SQ8+0x284>
1c006938:	00b50633          	add	a2,a0,a1
1c00693c:	fff60603          	lb	a2,-1(a2)
1c006940:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c006944:	00e68333          	add	t1,a3,a4
1c006948:	fec30fa3          	sb	a2,-1(t1)
1c00694c:	8a7e                	mv	s4,t6
1c00694e:	4c16                	lw	s8,68(sp)
1c006950:	e38fe3e3          	bltu	t6,s8,1c006776 <KerAvgPool2x2Stride2_SQ8+0x8c>
1c006954:	bdf5                	j	1c006850 <KerAvgPool2x2Stride2_SQ8+0x166>
1c006956:	8a7e                	mv	s4,t6
1c006958:	4c16                	lw	s8,68(sp)
1c00695a:	e18feee3          	bltu	t6,s8,1c006776 <KerAvgPool2x2Stride2_SQ8+0x8c>
1c00695e:	bdcd                	j	1c006850 <KerAvgPool2x2Stride2_SQ8+0x166>
1c006960:	4405                	li	s0,1
1c006962:	b58d                	j	1c0067c4 <KerAvgPool2x2Stride2_SQ8+0xda>
1c006964:	4e85                	li	t4,1
1c006966:	bdd1                	j	1c00683a <KerAvgPool2x2Stride2_SQ8+0x150>
1c006968:	ee0384e3          	beqz	t2,1c006850 <KerAvgPool2x2Stride2_SQ8+0x166>
1c00696c:	b751                	j	1c0068f0 <KerAvgPool2x2Stride2_SQ8+0x206>
1c00696e:	8a7e                	mv	s4,t6
1c006970:	4c16                	lw	s8,68(sp)
1c006972:	e18fe2e3          	bltu	t6,s8,1c006776 <KerAvgPool2x2Stride2_SQ8+0x8c>
1c006976:	bde9                	j	1c006850 <KerAvgPool2x2Stride2_SQ8+0x166>

1c006978 <Ker_ActivationScale1_SQ8>:
1c006978:	0015d793          	srli	a5,a1,0x1
1c00697c:	cba1                	beqz	a5,1c0069cc <Ker_ActivationScale1_SQ8+0x54>
1c00697e:	00150893          	addi	a7,a0,1
1c006982:	882a                	mv	a6,a0
1c006984:	c005b333          	p.bclr	t1,a1,0,0
1c006988:	1379                	addi	t1,t1,-2
1c00698a:	00135313          	srli	t1,t1,0x1
1c00698e:	0305                	addi	t1,t1,1
1c006990:	a839                	j	1c0069ae <Ker_ActivationScale1_SQ8+0x36>
1c006992:	04076733          	p.max	a4,a4,zero
1c006996:	0407e7b3          	p.max	a5,a5,zero
1c00699a:	00ee8023          	sb	a4,0(t4)
1c00699e:	00fe0023          	sb	a5,0(t3)
1c0069a2:	0809                	addi	a6,a6,2
1c0069a4:	0889                	addi	a7,a7,2
1c0069a6:	137d                	addi	t1,t1,-1
1c0069a8:	00031363          	bnez	t1,1c0069ae <Ker_ActivationScale1_SQ8+0x36>
1c0069ac:	a005                	j	1c0069cc <Ker_ActivationScale1_SQ8+0x54>
1c0069ae:	8ec2                	mv	t4,a6
1c0069b0:	00080703          	lb	a4,0(a6)
1c0069b4:	8e46                	mv	t3,a7
1c0069b6:	00088783          	lb	a5,0(a7)
1c0069ba:	fc162ce3          	p.beqimm	a2,1,1c006992 <Ker_ActivationScale1_SQ8+0x1a>
1c0069be:	fc263ee3          	p.bneimm	a2,2,1c00699a <Ker_ActivationScale1_SQ8+0x22>
1c0069c2:	14d76733          	p.clipur	a4,a4,a3
1c0069c6:	14d7e7b3          	p.clipur	a5,a5,a3
1c0069ca:	bfc1                	j	1c00699a <Ker_ActivationScale1_SQ8+0x22>
1c0069cc:	fc15b7b3          	p.bclr	a5,a1,30,1
1c0069d0:	cb99                	beqz	a5,1c0069e6 <Ker_ActivationScale1_SQ8+0x6e>
1c0069d2:	15fd                	addi	a1,a1,-1
1c0069d4:	95aa                	add	a1,a1,a0
1c0069d6:	00058783          	lb	a5,0(a1)
1c0069da:	00162763          	p.beqimm	a2,1,1c0069e8 <Ker_ActivationScale1_SQ8+0x70>
1c0069de:	00262863          	p.beqimm	a2,2,1c0069ee <Ker_ActivationScale1_SQ8+0x76>
1c0069e2:	00f58023          	sb	a5,0(a1)
1c0069e6:	8082                	ret
1c0069e8:	0407e7b3          	p.max	a5,a5,zero
1c0069ec:	bfdd                	j	1c0069e2 <Ker_ActivationScale1_SQ8+0x6a>
1c0069ee:	14d7e7b3          	p.clipur	a5,a5,a3
1c0069f2:	bfc5                	j	1c0069e2 <Ker_ActivationScale1_SQ8+0x6a>

1c0069f4 <Ker_Activation_SQ8>:
1c0069f4:	1101                	addi	sp,sp,-32
1c0069f6:	ce22                	sw	s0,28(sp)
1c0069f8:	cc26                	sw	s1,24(sp)
1c0069fa:	ca4a                	sw	s2,20(sp)
1c0069fc:	c84e                	sw	s3,16(sp)
1c0069fe:	c652                	sw	s4,12(sp)
1c006a00:	c456                	sw	s5,8(sp)
1c006a02:	0015d313          	srli	t1,a1,0x1
1c006a06:	14030363          	beqz	t1,1c006b4c <Ker_Activation_SQ8+0x158>
1c006a0a:	00150f13          	addi	t5,a0,1
1c006a0e:	8eaa                	mv	t4,a0
1c006a10:	4389                	li	t2,2
1c006a12:	4491                	li	s1,4
1c006a14:	441d                	li	s0,7
1c006a16:	c005bfb3          	p.bclr	t6,a1,0,0
1c006a1a:	1ff9                	addi	t6,t6,-2
1c006a1c:	001fdf93          	srli	t6,t6,0x1
1c006a20:	0f85                	addi	t6,t6,1
1c006a22:	a0b9                	j	1c006a70 <Ker_Activation_SQ8+0x7c>
1c006a24:	c205                	beqz	a2,1c006a44 <Ker_Activation_SQ8+0x50>
1c006a26:	02163763          	p.bneimm	a2,1,1c006a54 <Ker_Activation_SQ8+0x60>
1c006a2a:	040e6933          	p.max	s2,t3,zero
1c006a2e:	02d90933          	mul	s2,s2,a3
1c006a32:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006a36:	040a6333          	p.max	t1,s4,zero
1c006a3a:	02d30333          	mul	t1,t1,a3
1c006a3e:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006a42:	a809                	j	1c006a54 <Ker_Activation_SQ8+0x60>
1c006a44:	02de0933          	mul	s2,t3,a3
1c006a48:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006a4c:	02da0333          	mul	t1,s4,a3
1c006a50:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006a54:	14891933          	p.clip	s2,s2,8
1c006a58:	01298023          	sb	s2,0(s3)
1c006a5c:	14831333          	p.clip	t1,t1,8
1c006a60:	00628023          	sb	t1,0(t0)
1c006a64:	0e89                	addi	t4,t4,2
1c006a66:	0f09                	addi	t5,t5,2
1c006a68:	1ffd                	addi	t6,t6,-1
1c006a6a:	000f9363          	bnez	t6,1c006a70 <Ker_Activation_SQ8+0x7c>
1c006a6e:	a8f9                	j	1c006b4c <Ker_Activation_SQ8+0x158>
1c006a70:	89f6                	mv	s3,t4
1c006a72:	000e8e03          	lb	t3,0(t4)
1c006a76:	8972                	mv	s2,t3
1c006a78:	82fa                	mv	t0,t5
1c006a7a:	000f0a03          	lb	s4,0(t5)
1c006a7e:	8352                	mv	t1,s4
1c006a80:	04262b63          	p.beqimm	a2,2,1c006ad6 <Ker_Activation_SQ8+0xe2>
1c006a84:	fac3f0e3          	bleu	a2,t2,1c006a24 <Ker_Activation_SQ8+0x30>
1c006a88:	08462963          	p.beqimm	a2,4,1c006b1a <Ker_Activation_SQ8+0x126>
1c006a8c:	06966263          	bltu	a2,s1,1c006af0 <Ker_Activation_SQ8+0xfc>
1c006a90:	fc5632e3          	p.bneimm	a2,5,1c006a54 <Ker_Activation_SQ8+0x60>
1c006a94:	c1fe1333          	p.extractu	t1,t3,0,31
1c006a98:	03c78933          	mul	s2,a5,t3
1c006a9c:	4080695b          	p.mac.zh.sl	s2,zero,s0,zero
1c006aa0:	00133a93          	seqz	s5,t1
1c006aa4:	03230933          	mul	s2,t1,s2
1c006aa8:	43ca8933          	p.mac	s2,s5,t3
1c006aac:	02d90933          	mul	s2,s2,a3
1c006ab0:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006ab4:	c1fa1e33          	p.extractu	t3,s4,0,31
1c006ab8:	03478333          	mul	t1,a5,s4
1c006abc:	4080635b          	p.mac.zh.sl	t1,zero,s0,zero
1c006ac0:	001e3a93          	seqz	s5,t3
1c006ac4:	026e0333          	mul	t1,t3,t1
1c006ac8:	434a8333          	p.mac	t1,s5,s4
1c006acc:	02d30333          	mul	t1,t1,a3
1c006ad0:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006ad4:	b741                	j	1c006a54 <Ker_Activation_SQ8+0x60>
1c006ad6:	14fe6933          	p.clipur	s2,t3,a5
1c006ada:	02d90933          	mul	s2,s2,a3
1c006ade:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006ae2:	14fa6333          	p.clipur	t1,s4,a5
1c006ae6:	02d30333          	mul	t1,t1,a3
1c006aea:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006aee:	b79d                	j	1c006a54 <Ker_Activation_SQ8+0x60>
1c006af0:	01c80933          	add	s2,a6,t3
1c006af4:	14f96933          	p.clipur	s2,s2,a5
1c006af8:	03190933          	mul	s2,s2,a7
1c006afc:	02d90933          	mul	s2,s2,a3
1c006b00:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006b04:	01480333          	add	t1,a6,s4
1c006b08:	14f36333          	p.clipur	t1,t1,a5
1c006b0c:	03130333          	mul	t1,t1,a7
1c006b10:	02d30333          	mul	t1,t1,a3
1c006b14:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006b18:	bf35                	j	1c006a54 <Ker_Activation_SQ8+0x60>
1c006b1a:	01c80933          	add	s2,a6,t3
1c006b1e:	14f96933          	p.clipur	s2,s2,a5
1c006b22:	03190933          	mul	s2,s2,a7
1c006b26:	03c90933          	mul	s2,s2,t3
1c006b2a:	02d90933          	mul	s2,s2,a3
1c006b2e:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006b32:	01480333          	add	t1,a6,s4
1c006b36:	14f36333          	p.clipur	t1,t1,a5
1c006b3a:	03130333          	mul	t1,t1,a7
1c006b3e:	03430333          	mul	t1,t1,s4
1c006b42:	02d30333          	mul	t1,t1,a3
1c006b46:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006b4a:	b729                	j	1c006a54 <Ker_Activation_SQ8+0x60>
1c006b4c:	fc15b333          	p.bclr	t1,a1,30,1
1c006b50:	06030a63          	beqz	t1,1c006bc4 <Ker_Activation_SQ8+0x1d0>
1c006b54:	15fd                	addi	a1,a1,-1
1c006b56:	95aa                	add	a1,a1,a0
1c006b58:	00058503          	lb	a0,0(a1)
1c006b5c:	832a                	mv	t1,a0
1c006b5e:	06262b63          	p.beqimm	a2,2,1c006bd4 <Ker_Activation_SQ8+0x1e0>
1c006b62:	4e09                	li	t3,2
1c006b64:	02ce7c63          	bleu	a2,t3,1c006b9c <Ker_Activation_SQ8+0x1a8>
1c006b68:	08462963          	p.beqimm	a2,4,1c006bfa <Ker_Activation_SQ8+0x206>
1c006b6c:	4e11                	li	t3,4
1c006b6e:	07c66b63          	bltu	a2,t3,1c006be4 <Ker_Activation_SQ8+0x1f0>
1c006b72:	04563563          	p.bneimm	a2,5,1c006bbc <Ker_Activation_SQ8+0x1c8>
1c006b76:	c1f51633          	p.extractu	a2,a0,0,31
1c006b7a:	02f507b3          	mul	a5,a0,a5
1c006b7e:	481d                	li	a6,7
1c006b80:	410067db          	p.mac.zh.sl	a5,zero,a6,zero
1c006b84:	00163813          	seqz	a6,a2
1c006b88:	02f607b3          	mul	a5,a2,a5
1c006b8c:	42a807b3          	p.mac	a5,a6,a0
1c006b90:	02d786b3          	mul	a3,a5,a3
1c006b94:	8336                	mv	t1,a3
1c006b96:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006b9a:	a00d                	j	1c006bbc <Ker_Activation_SQ8+0x1c8>
1c006b9c:	ca19                	beqz	a2,1c006bb2 <Ker_Activation_SQ8+0x1be>
1c006b9e:	00163f63          	p.bneimm	a2,1,1c006bbc <Ker_Activation_SQ8+0x1c8>
1c006ba2:	04056333          	p.max	t1,a0,zero
1c006ba6:	02d306b3          	mul	a3,t1,a3
1c006baa:	8336                	mv	t1,a3
1c006bac:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006bb0:	a031                	j	1c006bbc <Ker_Activation_SQ8+0x1c8>
1c006bb2:	02d506b3          	mul	a3,a0,a3
1c006bb6:	8336                	mv	t1,a3
1c006bb8:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006bbc:	14831333          	p.clip	t1,t1,8
1c006bc0:	00658023          	sb	t1,0(a1)
1c006bc4:	4472                	lw	s0,28(sp)
1c006bc6:	44e2                	lw	s1,24(sp)
1c006bc8:	4952                	lw	s2,20(sp)
1c006bca:	49c2                	lw	s3,16(sp)
1c006bcc:	4a32                	lw	s4,12(sp)
1c006bce:	4aa2                	lw	s5,8(sp)
1c006bd0:	6105                	addi	sp,sp,32
1c006bd2:	8082                	ret
1c006bd4:	14f56333          	p.clipur	t1,a0,a5
1c006bd8:	02d306b3          	mul	a3,t1,a3
1c006bdc:	8336                	mv	t1,a3
1c006bde:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006be2:	bfe9                	j	1c006bbc <Ker_Activation_SQ8+0x1c8>
1c006be4:	9542                	add	a0,a0,a6
1c006be6:	14f567b3          	p.clipur	a5,a0,a5
1c006bea:	031788b3          	mul	a7,a5,a7
1c006bee:	02d886b3          	mul	a3,a7,a3
1c006bf2:	8336                	mv	t1,a3
1c006bf4:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006bf8:	b7d1                	j	1c006bbc <Ker_Activation_SQ8+0x1c8>
1c006bfa:	982a                	add	a6,a6,a0
1c006bfc:	14f867b3          	p.clipur	a5,a6,a5
1c006c00:	031788b3          	mul	a7,a5,a7
1c006c04:	02a88333          	mul	t1,a7,a0
1c006c08:	02d306b3          	mul	a3,t1,a3
1c006c0c:	8336                	mv	t1,a3
1c006c0e:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006c12:	b76d                	j	1c006bbc <Ker_Activation_SQ8+0x1c8>

1c006c14 <KerParPoolActivation>:
1c006c14:	1141                	addi	sp,sp,-16
1c006c16:	c606                	sw	ra,12(sp)
1c006c18:	88b6                	mv	a7,a3
1c006c1a:	00078683          	lb	a3,0(a5)
1c006c1e:	c6d9                	beqz	a3,1c006cac <KerParPoolActivation+0x98>
1c006c20:	02c585b3          	mul	a1,a1,a2
1c006c24:	03158333          	mul	t1,a1,a7
1c006c28:	41170733          	sub	a4,a4,a7
1c006c2c:	02b705b3          	mul	a1,a4,a1
1c006c30:	0ff6f693          	andi	a3,a3,255
1c006c34:	0017c703          	lbu	a4,1(a5)
1c006c38:	00278603          	lb	a2,2(a5)
1c006c3c:	00378e03          	lb	t3,3(a5)
1c006c40:	00478883          	lb	a7,4(a5)
1c006c44:	04282263          	p.beqimm	a6,2,1c006c88 <KerParPoolActivation+0x74>
1c006c48:	4789                	li	a5,2
1c006c4a:	0107ff63          	bleu	a6,a5,1c006c68 <KerParPoolActivation+0x54>
1c006c4e:	04482963          	p.beqimm	a6,4,1c006ca0 <KerParPoolActivation+0x8c>
1c006c52:	4791                	li	a5,4
1c006c54:	04f86063          	bltu	a6,a5,1c006c94 <KerParPoolActivation+0x80>
1c006c58:	04583e63          	p.bneimm	a6,5,1c006cb4 <KerParPoolActivation+0xa0>
1c006c5c:	8872                	mv	a6,t3
1c006c5e:	87b2                	mv	a5,a2
1c006c60:	4615                	li	a2,5
1c006c62:	951a                	add	a0,a0,t1
1c006c64:	3b41                	jal	1c0069f4 <Ker_Activation_SQ8>
1c006c66:	a0b9                	j	1c006cb4 <KerParPoolActivation+0xa0>
1c006c68:	00080a63          	beqz	a6,1c006c7c <KerParPoolActivation+0x68>
1c006c6c:	04183463          	p.bneimm	a6,1,1c006cb4 <KerParPoolActivation+0xa0>
1c006c70:	8872                	mv	a6,t3
1c006c72:	87b2                	mv	a5,a2
1c006c74:	4605                	li	a2,1
1c006c76:	951a                	add	a0,a0,t1
1c006c78:	3bb5                	jal	1c0069f4 <Ker_Activation_SQ8>
1c006c7a:	a82d                	j	1c006cb4 <KerParPoolActivation+0xa0>
1c006c7c:	8872                	mv	a6,t3
1c006c7e:	87b2                	mv	a5,a2
1c006c80:	4601                	li	a2,0
1c006c82:	951a                	add	a0,a0,t1
1c006c84:	3b85                	jal	1c0069f4 <Ker_Activation_SQ8>
1c006c86:	a03d                	j	1c006cb4 <KerParPoolActivation+0xa0>
1c006c88:	8872                	mv	a6,t3
1c006c8a:	87b2                	mv	a5,a2
1c006c8c:	4609                	li	a2,2
1c006c8e:	951a                	add	a0,a0,t1
1c006c90:	3395                	jal	1c0069f4 <Ker_Activation_SQ8>
1c006c92:	a00d                	j	1c006cb4 <KerParPoolActivation+0xa0>
1c006c94:	8872                	mv	a6,t3
1c006c96:	87b2                	mv	a5,a2
1c006c98:	460d                	li	a2,3
1c006c9a:	951a                	add	a0,a0,t1
1c006c9c:	3ba1                	jal	1c0069f4 <Ker_Activation_SQ8>
1c006c9e:	a819                	j	1c006cb4 <KerParPoolActivation+0xa0>
1c006ca0:	8872                	mv	a6,t3
1c006ca2:	87b2                	mv	a5,a2
1c006ca4:	4611                	li	a2,4
1c006ca6:	951a                	add	a0,a0,t1
1c006ca8:	33b1                	jal	1c0069f4 <Ker_Activation_SQ8>
1c006caa:	a029                	j	1c006cb4 <KerParPoolActivation+0xa0>
1c006cac:	00182763          	p.beqimm	a6,1,1c006cba <KerParPoolActivation+0xa6>
1c006cb0:	02282163          	p.beqimm	a6,2,1c006cd2 <KerParPoolActivation+0xbe>
1c006cb4:	40b2                	lw	ra,12(sp)
1c006cb6:	0141                	addi	sp,sp,16
1c006cb8:	8082                	ret
1c006cba:	02c58833          	mul	a6,a1,a2
1c006cbe:	411705b3          	sub	a1,a4,a7
1c006cc2:	4681                	li	a3,0
1c006cc4:	4605                	li	a2,1
1c006cc6:	030585b3          	mul	a1,a1,a6
1c006cca:	43180533          	p.mac	a0,a6,a7
1c006cce:	316d                	jal	1c006978 <Ker_ActivationScale1_SQ8>
1c006cd0:	b7d5                	j	1c006cb4 <KerParPoolActivation+0xa0>
1c006cd2:	02c58833          	mul	a6,a1,a2
1c006cd6:	411705b3          	sub	a1,a4,a7
1c006cda:	00278683          	lb	a3,2(a5)
1c006cde:	4609                	li	a2,2
1c006ce0:	030585b3          	mul	a1,a1,a6
1c006ce4:	43180533          	p.mac	a0,a6,a7
1c006ce8:	3941                	jal	1c006978 <Ker_ActivationScale1_SQ8>
1c006cea:	b7e9                	j	1c006cb4 <KerParPoolActivation+0xa0>

1c006cec <KerParPool2x2Stride2_ReLU_SQ8>:
	gap_waitbarrier(0);
}

void KerParPool2x2Stride2_ReLU_SQ8(KerPool_SQ8_T *Arg)

{
1c006cec:	7119                	addi	sp,sp,-128
1c006cee:	de86                	sw	ra,124(sp)
1c006cf0:	dca2                	sw	s0,120(sp)
1c006cf2:	daa6                	sw	s1,116(sp)
1c006cf4:	d8ca                	sw	s2,112(sp)
1c006cf6:	d6ce                	sw	s3,108(sp)
1c006cf8:	d4d2                	sw	s4,104(sp)
1c006cfa:	d2d6                	sw	s5,100(sp)
1c006cfc:	d0da                	sw	s6,96(sp)
1c006cfe:	cede                	sw	s7,92(sp)
1c006d00:	cce2                	sw	s8,88(sp)
1c006d02:	cae6                	sw	s9,84(sp)
1c006d04:	c8ea                	sw	s10,80(sp)
1c006d06:	c6ee                	sw	s11,76(sp)
1c006d08:	892a                	mv	s2,a0
	unsigned int FS=2,S=2;
	signed char * __restrict__ In = Arg->In;
1c006d0a:	4100                	lw	s0,0(a0)
	unsigned int W = Arg->W, H = Arg->H;
1c006d0c:	00a55703          	lhu	a4,10(a0)
1c006d10:	d03a                	sw	a4,32(sp)
1c006d12:	00e55783          	lhu	a5,14(a0)
1c006d16:	d23e                	sw	a5,36(sp)
	unsigned int Feat = Arg->Feat;
1c006d18:	00855703          	lhu	a4,8(a0)
	signed char * __restrict__ Out = Arg->Out;
1c006d1c:	415c                	lw	a5,4(a0)
1c006d1e:	dc3e                	sw	a5,56(sp)
	signed char * __restrict__ Infos = Arg->Infos;
1c006d20:	515c                	lw	a5,36(a0)
1c006d22:	de3e                	sw	a5,60(sp)
	int PoolMax = Arg->PoolMax;
1c006d24:	01254b03          	lbu	s6,18(a0)
	v4s PadIn = Arg->Pad;
1c006d28:	5104                	lw	s1,32(a0)

	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c006d2a:	f1402af3          	csrr	s5,mhartid
1c006d2e:	c80a9ab3          	p.extractu	s5,s5,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c006d32:	f83737b3          	p.bclr	a5,a4,28,3
1c006d36:	00f037b3          	snez	a5,a5
1c006d3a:	00375693          	srli	a3,a4,0x3
1c006d3e:	97b6                	add	a5,a5,a3
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c006d40:	02fa8ab3          	mul	s5,s5,a5
1c006d44:	97d6                	add	a5,a5,s5
1c006d46:	04e7c7b3          	p.min	a5,a5,a4
1c006d4a:	da3e                	sw	a5,52(sp)
1c006d4c:	8bbe                	mv	s7,a5

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c006d4e:	7804f657          	pv.extract.b	a2,s1,0
1c006d52:	00c55503          	lhu	a0,12(a0)
1c006d56:	ffe50993          	addi	s3,a0,-2
1c006d5a:	99b2                	add	s3,s3,a2
1c006d5c:	7a04f7d7          	pv.extract.b	a5,s1,1
1c006d60:	82f9a9db          	p.addun	s3,s3,a5,1
1c006d64:	0985                	addi	s3,s3,1
1c006d66:	d44e                	sw	s3,40(sp)
	return ((Pad+Stride-1)/Stride);
1c006d68:	00160793          	addi	a5,a2,1
1c006d6c:	8385                	srli	a5,a5,0x1
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c006d6e:	04f9c7b3          	p.min	a5,s3,a5
1c006d72:	ce3e                	sw	a5,28(sp)
1c006d74:	4689                	li	a3,2
1c006d76:	4589                	li	a1,2
1c006d78:	d90ff0ef          	jal	ra,1c006308 <LastDefinedOutput>
1c006d7c:	4772                	lw	a4,28(sp)
1c006d7e:	04a76533          	p.max	a0,a4,a0
1c006d82:	d62a                	sw	a0,44(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c006d84:	7814f657          	pv.extract.b	a2,s1,2
1c006d88:	01095503          	lhu	a0,16(s2)
1c006d8c:	ffe50a13          	addi	s4,a0,-2
1c006d90:	9a32                	add	s4,s4,a2
1c006d92:	7a14f7d7          	pv.extract.b	a5,s1,3
1c006d96:	82fa2a5b          	p.addun	s4,s4,a5,1
1c006d9a:	0a05                	addi	s4,s4,1
1c006d9c:	d852                	sw	s4,48(sp)
	return ((Pad+Stride-1)/Stride);
1c006d9e:	00160913          	addi	s2,a2,1
1c006da2:	00195913          	srli	s2,s2,0x1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c006da6:	052a4933          	p.min	s2,s4,s2
1c006daa:	4689                	li	a3,2
1c006dac:	4589                	li	a1,2
1c006dae:	d5aff0ef          	jal	ra,1c006308 <LastDefinedOutput>
1c006db2:	04a96c33          	p.max	s8,s2,a0

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006db6:	040b1463          	bnez	s6,1c006dfe <KerParPool2x2Stride2_ReLU_SQ8+0x112>
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006dba:	097af363          	bleu	s7,s5,1c006e40 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
1c006dbe:	5782                	lw	a5,32(sp)
1c006dc0:	5712                	lw	a4,36(sp)
1c006dc2:	02e78d33          	mul	s10,a5,a4
1c006dc6:	03498cb3          	mul	s9,s3,s4
1c006dca:	43aa8433          	p.mac	s0,s5,s10
1c006dce:	5de2                	lw	s11,56(sp)
1c006dd0:	439a8db3          	p.mac	s11,s5,s9
1c006dd4:	8b56                	mv	s6,s5
1c006dd6:	c626                	sw	s1,12(sp)
1c006dd8:	c426                	sw	s1,8(sp)
1c006dda:	c262                	sw	s8,4(sp)
1c006ddc:	c04a                	sw	s2,0(sp)
1c006dde:	58c2                	lw	a7,48(sp)
1c006de0:	5832                	lw	a6,44(sp)
1c006de2:	47f2                	lw	a5,28(sp)
1c006de4:	5722                	lw	a4,40(sp)
1c006de6:	86ee                	mv	a3,s11
1c006de8:	5612                	lw	a2,36(sp)
1c006dea:	5582                	lw	a1,32(sp)
1c006dec:	8522                	mv	a0,s0
1c006dee:	8fdff0ef          	jal	ra,1c0066ea <KerAvgPool2x2Stride2_SQ8>
1c006df2:	0b05                	addi	s6,s6,1
1c006df4:	946a                	add	s0,s0,s10
1c006df6:	9de6                	add	s11,s11,s9
1c006df8:	fd6b9fe3          	bne	s7,s6,1c006dd6 <KerParPool2x2Stride2_ReLU_SQ8+0xea>
1c006dfc:	a091                	j	1c006e40 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006dfe:	057af163          	bleu	s7,s5,1c006e40 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
1c006e02:	5782                	lw	a5,32(sp)
1c006e04:	5712                	lw	a4,36(sp)
1c006e06:	02e78d33          	mul	s10,a5,a4
1c006e0a:	03498cb3          	mul	s9,s3,s4
1c006e0e:	43aa8433          	p.mac	s0,s5,s10
1c006e12:	5de2                	lw	s11,56(sp)
1c006e14:	439a8db3          	p.mac	s11,s5,s9
1c006e18:	8b56                	mv	s6,s5
1c006e1a:	c626                	sw	s1,12(sp)
1c006e1c:	c426                	sw	s1,8(sp)
1c006e1e:	c262                	sw	s8,4(sp)
1c006e20:	c04a                	sw	s2,0(sp)
1c006e22:	58c2                	lw	a7,48(sp)
1c006e24:	5832                	lw	a6,44(sp)
1c006e26:	47f2                	lw	a5,28(sp)
1c006e28:	5722                	lw	a4,40(sp)
1c006e2a:	86ee                	mv	a3,s11
1c006e2c:	5612                	lw	a2,36(sp)
1c006e2e:	5582                	lw	a1,32(sp)
1c006e30:	8522                	mv	a0,s0
1c006e32:	cf0ff0ef          	jal	ra,1c006322 <KerMaxPool2x2Stride2_SQ8>
1c006e36:	0b05                	addi	s6,s6,1
1c006e38:	946a                	add	s0,s0,s10
1c006e3a:	9de6                	add	s11,s11,s9
1c006e3c:	fd6b9fe3          	bne	s7,s6,1c006e1a <KerParPool2x2Stride2_ReLU_SQ8+0x12e>

	KerParPoolActivation(Out, Wo, Ho, First, Last, Infos, ACT_RELU);
1c006e40:	4805                	li	a6,1
1c006e42:	57f2                	lw	a5,60(sp)
1c006e44:	5752                	lw	a4,52(sp)
1c006e46:	86d6                	mv	a3,s5
1c006e48:	8652                	mv	a2,s4
1c006e4a:	85ce                	mv	a1,s3
1c006e4c:	5562                	lw	a0,56(sp)
1c006e4e:	33d9                	jal	1c006c14 <KerParPoolActivation>
1c006e50:	002047b7          	lui	a5,0x204
1c006e54:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006e58:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
}
1c006e5c:	50f6                	lw	ra,124(sp)
1c006e5e:	5466                	lw	s0,120(sp)
1c006e60:	54d6                	lw	s1,116(sp)
1c006e62:	5946                	lw	s2,112(sp)
1c006e64:	59b6                	lw	s3,108(sp)
1c006e66:	5a26                	lw	s4,104(sp)
1c006e68:	5a96                	lw	s5,100(sp)
1c006e6a:	5b06                	lw	s6,96(sp)
1c006e6c:	4bf6                	lw	s7,92(sp)
1c006e6e:	4c66                	lw	s8,88(sp)
1c006e70:	4cd6                	lw	s9,84(sp)
1c006e72:	4d46                	lw	s10,80(sp)
1c006e74:	4db6                	lw	s11,76(sp)
1c006e76:	6109                	addi	sp,sp,128
1c006e78:	8082                	ret

1c006e7a <KerParSoftMax_SQ8>:
}
#endif

void KerParSoftMax_SQ8(KerSoftMax_SQ8_T *Arg)

{
1c006e7a:	7139                	addi	sp,sp,-64
1c006e7c:	de22                	sw	s0,60(sp)
1c006e7e:	dc26                	sw	s1,56(sp)
1c006e80:	da4a                	sw	s2,52(sp)
1c006e82:	d84e                	sw	s3,48(sp)
1c006e84:	d652                	sw	s4,44(sp)
1c006e86:	d456                	sw	s5,40(sp)
1c006e88:	d25a                	sw	s6,36(sp)
1c006e8a:	d05e                	sw	s7,32(sp)
1c006e8c:	ce62                	sw	s8,28(sp)
1c006e8e:	cc66                	sw	s9,24(sp)
1c006e90:	ca6a                	sw	s10,20(sp)
1c006e92:	c86e                	sw	s11,16(sp)
	signed char * __restrict__ In = Arg->In;
1c006e94:	00052f03          	lw	t5,0(a0)
	short int * __restrict__ Out = Arg->Out;
1c006e98:	450c                	lw	a1,8(a0)
1c006e9a:	c42e                	sw	a1,8(sp)
	int N = Arg->N;
1c006e9c:	00455e83          	lhu	t4,4(a0)
	int Norm = Arg->Infos[AT_INF_BIASL_SM];
1c006ea0:	455c                	lw	a5,12(a0)
1c006ea2:	00078a03          	lb	s4,0(a5)
	static L1_CL_MEM int Reduct[8];
	int M, Sum, InvSum;
	unsigned int CoreId = gap_coreid();
1c006ea6:	f1402473          	csrr	s0,mhartid
1c006eaa:	c8041433          	p.extractu	s0,s0,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c006eae:	f83eb7b3          	p.bclr	a5,t4,28,3
1c006eb2:	00f037b3          	snez	a5,a5
1c006eb6:	003ed713          	srli	a4,t4,0x3
1c006eba:	97ba                	add	a5,a5,a4
	unsigned int ChunkCell = ChunkSize(N);
	unsigned int First = CoreId*ChunkCell;
1c006ebc:	02f40333          	mul	t1,s0,a5
	unsigned int Last  = Min(First+ChunkCell, N);
1c006ec0:	979a                	add	a5,a5,t1
1c006ec2:	05d7ceb3          	p.min	t4,a5,t4
	unsigned int *Red = &Reduct[CoreId];

	/* Turns In into distribution */
	/* Find max */
	M = 0x80000000;
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c006ec6:	8f9a                	mv	t6,t1
1c006ec8:	0dd37563          	bleu	t4,t1,1c006f92 <KerParSoftMax_SQ8+0x118>
1c006ecc:	006f06b3          	add	a3,t5,t1
	M = 0x80000000;
1c006ed0:	80000737          	lui	a4,0x80000
1c006ed4:	406e87b3          	sub	a5,t4,t1
1c006ed8:	0047c0fb          	lp.setup	x1,a5,1c006ee0 <KerParSoftMax_SQ8+0x66>
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c006edc:	0016860b          	p.lb	a2,1(a3!)
1c006ee0:	04c76733          	p.max	a4,a4,a2
	Reduct[CoreId] = M;
1c006ee4:	00241793          	slli	a5,s0,0x2
1c006ee8:	100006b7          	lui	a3,0x10000
1c006eec:	02068693          	addi	a3,a3,32 # 10000020 <Reduct.15734>
1c006ef0:	00e6e7a3          	p.sw	a4,a5(a3)
1c006ef4:	002047b7          	lui	a5,0x204
1c006ef8:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006efc:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	if (CoreId==0) {
1c006f00:	1e041e63          	bnez	s0,1c0070fc <KerParSoftMax_SQ8+0x282>
		M = Reduct[0];
1c006f04:	10000737          	lui	a4,0x10000
1c006f08:	02070713          	addi	a4,a4,32 # 10000020 <Reduct.15734>
1c006f0c:	0047268b          	p.lw	a3,4(a4!)
1c006f10:	007250fb          	lp.setupi	x1,7,1c006f18 <KerParSoftMax_SQ8+0x9e>
		for (int i=1; i<gap_ncore(); i++) M = Max(M, Reduct[i]);
1c006f14:	0047260b          	p.lw	a2,4(a4!)
1c006f18:	04c6e6b3          	p.max	a3,a3,a2
		//for (int i=1; i<8; i++) M = Max(M, Reduct[i]);
		Reduct[0] = M;
1c006f1c:	100007b7          	lui	a5,0x10000
1c006f20:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c006f24:	c394                	sw	a3,0(a5)
1c006f26:	00204737          	lui	a4,0x204
1c006f2a:	20070713          	addi	a4,a4,512 # 204200 <__L2+0x184200>
1c006f2e:	01c76683          	p.elw	a3,28(a4)
	gap_waitbarrier(0);
	/* Computes Exp(In[i]-M) for all in and sum results.
	   Since we substract max from In[i] we always have exp(X) with X<=0 thus exp(X)<=1.0
	   By definition of softmax Sum is <= 1
	*/
	M = Reduct[0];
1c006f32:	0007a983          	lw	s3,0(a5)
	Sum = 0;
	for (int i=First; i<Last; i++) {
1c006f36:	1dd36f63          	bltu	t1,t4,1c007114 <KerParSoftMax_SQ8+0x29a>
		unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(Norm));
		Out[i] = Exp; Sum += Exp;
	}
	Reduct[CoreId] = Sum;
1c006f3a:	040a                	slli	s0,s0,0x2
1c006f3c:	100007b7          	lui	a5,0x10000
1c006f40:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c006f44:	0007e423          	p.sw	zero,s0(a5)
1c006f48:	002047b7          	lui	a5,0x204
1c006f4c:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006f50:	01c7e703          	p.elw	a4,28(a5)
1c006f54:	10000737          	lui	a4,0x10000
1c006f58:	02070713          	addi	a4,a4,32 # 10000020 <Reduct.15734>
	gap_waitbarrier(0);
	if (CoreId==0) {
		Sum = 0;
1c006f5c:	4681                	li	a3,0
1c006f5e:	008250fb          	lp.setupi	x1,8,1c006f66 <KerParSoftMax_SQ8+0xec>
		for (int i=0; i<gap_ncore(); i++) Sum += Reduct[i];
1c006f62:	0047260b          	p.lw	a2,4(a4!)
1c006f66:	96b2                	add	a3,a3,a2
		Reduct[0] = Sum;
1c006f68:	100007b7          	lui	a5,0x10000
1c006f6c:	02d7a023          	sw	a3,32(a5) # 10000020 <Reduct.15734>
1c006f70:	002047b7          	lui	a5,0x204
1c006f74:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006f78:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
	Sum = Reduct[0];
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
	for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c006f7c:	13d37c63          	bleu	t4,t1,1c0070b4 <KerParSoftMax_SQ8+0x23a>
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
1c006f80:	100007b7          	lui	a5,0x10000
1c006f84:	0207a783          	lw	a5,32(a5) # 10000020 <Reduct.15734>
1c006f88:	3fff8637          	lui	a2,0x3fff8
1c006f8c:	02f64633          	div	a2,a2,a5
1c006f90:	a8cd                	j	1c007082 <KerParSoftMax_SQ8+0x208>
	M = 0x80000000;
1c006f92:	80000737          	lui	a4,0x80000
1c006f96:	b7b9                	j	1c006ee4 <KerParSoftMax_SQ8+0x6a>
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c006f98:	0786                	slli	a5,a5,0x1
1c006f9a:	00fc8733          	add	a4,s9,a5
1c006f9e:	00075583          	lhu	a1,0(a4) # 80000000 <pulp__FC+0x80000001>
1c006fa2:	97e2                	add	a5,a5,s8
1c006fa4:	0007d703          	lhu	a4,0(a5)
	FractX_s = FractX; Z_s = FractX; Result = 0;
1c006fa8:	1008c8b3          	p.exths	a7,a7
1c006fac:	002a8813          	addi	a6,s5,2
1c006fb0:	87c6                	mv	a5,a7
1c006fb2:	4501                	li	a0,0
1c006fb4:	410d8633          	sub	a2,s11,a6
1c006fb8:	1679                	addi	a2,a2,-2
1c006fba:	8205                	srli	a2,a2,0x1
1c006fbc:	0605                	addi	a2,a2,1
1c006fbe:	008640fb          	lp.setup	x1,a2,1c006fce <KerParSoftMax_SQ8+0x154>
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c006fc2:	00285d0b          	p.lhu	s10,2(a6!)
1c006fc6:	43a78533          	p.mac	a0,a5,s10
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c006fca:	9f17c7db          	p.mac.sl.zl	a5,a5,a7,a5
1c006fce:	1007c7b3          	p.exths	a5,a5
	Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c006fd2:	1e0567db          	p.mac.zh.zl	a5,a0,zero,a5
1c006fd6:	97ca                	add	a5,a5,s2
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c006fd8:	1ee7c75b          	p.mac.zl.zl	a4,a5,a4,a5
1c006fdc:	0177f7b3          	and	a5,a5,s7
1c006fe0:	42b78733          	p.mac	a4,a5,a1
1c006fe4:	87ba                	mv	a5,a4
	if (Result && (X > 0x7FFFFFFF)) 
1c006fe6:	c319                	beqz	a4,1c006fec <KerParSoftMax_SQ8+0x172>
1c006fe8:	0406c663          	bltz	a3,1c007034 <KerParSoftMax_SQ8+0x1ba>
		Out[i] = Exp; Sum += Exp;
1c006fec:	873e                	mv	a4,a5
1c006fee:	00e2912b          	p.sh	a4,2(t0!)
1c006ff2:	93be                	add	t2,t2,a5
1c006ff4:	1e7d                	addi	t3,t3,-1
1c006ff6:	000e1363          	bnez	t3,1c006ffc <KerParSoftMax_SQ8+0x182>
1c006ffa:	a0b1                	j	1c007046 <KerParSoftMax_SQ8+0x1cc>
		unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(Norm));
1c006ffc:	001f068b          	p.lb	a3,1(t5!)
1c007000:	413686b3          	sub	a3,a3,s3
1c007004:	014696b3          	sll	a3,a3,s4
1c007008:	8636                	mv	a2,a3
	if (!X) return 0x8000;
1c00700a:	87a6                	mv	a5,s1
1c00700c:	d2e5                	beqz	a3,1c006fec <KerParSoftMax_SQ8+0x172>
	Y = Abs(X);
1c00700e:	04068733          	p.avg	a4,a3,zero
	IntX = (Y >> 15);
1c007012:	40f75793          	srai	a5,a4,0xf
	FractX = (Y & 0x7FFF);
1c007016:	012778b3          	and	a7,a4,s2
	if (gap_bitextractu(FractX, 1, 14)) {
1c00701a:	01189593          	slli	a1,a7,0x11
1c00701e:	0005d563          	bgez	a1,1c007028 <KerParSoftMax_SQ8+0x1ae>
		FractX -= 0x8000; IntX++;
1c007022:	75e1                	lui	a1,0xffff8
1c007024:	98ae                	add	a7,a7,a1
1c007026:	0785                	addi	a5,a5,1
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c007028:	f6fb58e3          	ble	a5,s6,1c006f98 <KerParSoftMax_SQ8+0x11e>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c00702c:	00e60963          	beq	a2,a4,1c00703e <KerParSoftMax_SQ8+0x1c4>
1c007030:	4781                	li	a5,0
1c007032:	bf6d                	j	1c006fec <KerParSoftMax_SQ8+0x172>
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c007034:	4732                	lw	a4,12(sp)
1c007036:	02f747b3          	div	a5,a4,a5
1c00703a:	8785                	srai	a5,a5,0x1
1c00703c:	bf45                	j	1c006fec <KerParSoftMax_SQ8+0x172>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c00703e:	47b2                	lw	a5,12(sp)
1c007040:	b775                	j	1c006fec <KerParSoftMax_SQ8+0x172>
1c007042:	4705                	li	a4,1
1c007044:	a899                	j	1c00709a <KerParSoftMax_SQ8+0x220>
	Reduct[CoreId] = Sum;
1c007046:	00241713          	slli	a4,s0,0x2
1c00704a:	100007b7          	lui	a5,0x10000
1c00704e:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c007052:	0077e723          	p.sw	t2,a4(a5)
1c007056:	002047b7          	lui	a5,0x204
1c00705a:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00705e:	01c7e703          	p.elw	a4,28(a5)
	if (CoreId==0) {
1c007062:	ee0409e3          	beqz	s0,1c006f54 <KerParSoftMax_SQ8+0xda>
1c007066:	002047b7          	lui	a5,0x204
1c00706a:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00706e:	01c7e703          	p.elw	a4,28(a5)
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
1c007072:	100007b7          	lui	a5,0x10000
1c007076:	0207a783          	lw	a5,32(a5) # 10000020 <Reduct.15734>
1c00707a:	3fff8637          	lui	a2,0x3fff8
1c00707e:	02f64633          	div	a2,a2,a5
1c007082:	0306                	slli	t1,t1,0x1
1c007084:	47a2                	lw	a5,8(sp)
1c007086:	933e                	add	t1,t1,a5
	for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c007088:	46bd                	li	a3,15
1c00708a:	41fe8733          	sub	a4,t4,t6
1c00708e:	001f8793          	addi	a5,t6,1
1c007092:	fafee8e3          	bltu	t4,a5,1c007042 <KerParSoftMax_SQ8+0x1c8>
1c007096:	fa0e86e3          	beqz	t4,1c007042 <KerParSoftMax_SQ8+0x1c8>
1c00709a:	00c740fb          	lp.setup	x1,a4,1c0070b2 <KerParSoftMax_SQ8+0x238>
1c00709e:	00031783          	lh	a5,0(t1)
1c0070a2:	02c787b3          	mul	a5,a5,a2
1c0070a6:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c0070aa:	040787b3          	p.avg	a5,a5,zero
1c0070ae:	00f3112b          	p.sh	a5,2(t1!)
1c0070b2:	0f85                	addi	t6,t6,1
1c0070b4:	002047b7          	lui	a5,0x204
1c0070b8:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0070bc:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);

}
1c0070c0:	5472                	lw	s0,60(sp)
1c0070c2:	54e2                	lw	s1,56(sp)
1c0070c4:	5952                	lw	s2,52(sp)
1c0070c6:	59c2                	lw	s3,48(sp)
1c0070c8:	5a32                	lw	s4,44(sp)
1c0070ca:	5aa2                	lw	s5,40(sp)
1c0070cc:	5b12                	lw	s6,36(sp)
1c0070ce:	5b82                	lw	s7,32(sp)
1c0070d0:	4c72                	lw	s8,28(sp)
1c0070d2:	4ce2                	lw	s9,24(sp)
1c0070d4:	4d52                	lw	s10,20(sp)
1c0070d6:	4dc2                	lw	s11,16(sp)
1c0070d8:	6121                	addi	sp,sp,64
1c0070da:	8082                	ret
	Reduct[CoreId] = Sum;
1c0070dc:	040a                	slli	s0,s0,0x2
1c0070de:	100007b7          	lui	a5,0x10000
1c0070e2:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c0070e6:	0007e423          	p.sw	zero,s0(a5)
1c0070ea:	002047b7          	lui	a5,0x204
1c0070ee:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0070f2:	01c7e703          	p.elw	a4,28(a5)
1c0070f6:	01c7e703          	p.elw	a4,28(a5)
1c0070fa:	bf6d                	j	1c0070b4 <KerParSoftMax_SQ8+0x23a>
1c0070fc:	002047b7          	lui	a5,0x204
1c007100:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c007104:	01c7e703          	p.elw	a4,28(a5)
	M = Reduct[0];
1c007108:	100007b7          	lui	a5,0x10000
1c00710c:	0207a983          	lw	s3,32(a5) # 10000020 <Reduct.15734>
	for (int i=First; i<Last; i++) {
1c007110:	fdd376e3          	bleu	t4,t1,1c0070dc <KerParSoftMax_SQ8+0x262>
1c007114:	00131293          	slli	t0,t1,0x1
1c007118:	4722                	lw	a4,8(sp)
1c00711a:	92ba                	add	t0,t0,a4
1c00711c:	9f1a                	add	t5,t5,t1
	Sum = 0;
1c00711e:	4381                	li	t2,0
	if (!X) return 0x8000;
1c007120:	64a1                	lui	s1,0x8
	FractX = (Y & 0x7FFF);
1c007122:	fff48913          	addi	s2,s1,-1 # 7fff <__rt_stack_size+0x77ff>
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c007126:	4b2d                	li	s6,11
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c007128:	1c00ecb7          	lui	s9,0x1c00e
1c00712c:	9fcc8c93          	addi	s9,s9,-1540 # 1c00d9fc <IntegerExpLUT>
1c007130:	1c00ec37          	lui	s8,0x1c00e
1c007134:	9e4c0c13          	addi	s8,s8,-1564 # 1c00d9e4 <FractionExpLUT>
1c007138:	1c00eab7          	lui	s5,0x1c00e
1c00713c:	9d0a8a93          	addi	s5,s5,-1584 # 1c00d9d0 <ExpCoeffLUT>
1c007140:	012a8d93          	addi	s11,s5,18
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c007144:	6bc1                	lui	s7,0x10
1c007146:	1bfd                	addi	s7,s7,-1
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c007148:	800007b7          	lui	a5,0x80000
1c00714c:	fff7c793          	not	a5,a5
1c007150:	c63e                	sw	a5,12(sp)
		FractX -= 0x8000; IntX++;
1c007152:	406e8e33          	sub	t3,t4,t1
1c007156:	b55d                	j	1c006ffc <KerParSoftMax_SQ8+0x182>

1c007158 <CNN_NormBW_offset_fps>:
	gap_waitbarrier(0);
}

void CNN_NormBW_offset_fps(KerNormBW_fps_T *Arg)
{
	unsigned char *__restrict__ In = Arg->In;
1c007158:	4114                	lw	a3,0(a0)
	signed char *__restrict__ Out = Arg->Out;
1c00715a:	4150                	lw	a2,4(a0)
	unsigned int W = Arg->W;
	unsigned int H = Arg->H;
	unsigned int Sz = W * H;
1c00715c:	451c                	lw	a5,8(a0)
1c00715e:	4548                	lw	a0,12(a0)
1c007160:	02a78533          	mul	a0,a5,a0
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c007164:	f14025f3          	csrr	a1,mhartid
1c007168:	c80595b3          	p.extractu	a1,a1,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00716c:	f8353733          	p.bclr	a4,a0,28,3
1c007170:	00e03733          	snez	a4,a4
1c007174:	00355793          	srli	a5,a0,0x3
1c007178:	973e                	add	a4,a4,a5
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c00717a:	02e585b3          	mul	a1,a1,a4
1c00717e:	00e587b3          	add	a5,a1,a4
1c007182:	04a7c7b3          	p.min	a5,a5,a0

	for (int Idx=First; Idx<Last; Idx++) {
1c007186:	00f5fd63          	bleu	a5,a1,1c0071a0 <CNN_NormBW_offset_fps+0x48>
1c00718a:	962e                	add	a2,a2,a1
1c00718c:	96ae                	add	a3,a3,a1
1c00718e:	8f8d                	sub	a5,a5,a1
1c007190:	0067c0fb          	lp.setup	x1,a5,1c00719c <CNN_NormBW_offset_fps+0x44>
		Out[Idx] = In[Idx] - 128;
1c007194:	0016c70b          	p.lbu	a4,1(a3!)
1c007198:	f8070713          	addi	a4,a4,-128
1c00719c:	00e600ab          	p.sb	a4,1(a2!) # 3fff8001 <__l2_end+0x23fe9d2d>
1c0071a0:	002047b7          	lui	a5,0x204
1c0071a4:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0071a8:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c0071ac:	8082                	ret

1c0071ae <pi_flash_open>:


int pi_flash_open(struct pi_device *device)
{
  struct pi_flash_conf *conf = (struct pi_flash_conf *)device->config;
  pi_flash_api_t *api = (pi_flash_api_t *)conf->api;
1c0071ae:	415c                	lw	a5,4(a0)
1c0071b0:	439c                	lw	a5,0(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c0071b2:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c0071b6:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c0071b8:	8302                	jr	t1

1c0071ba <__flash_conf_init>:
}


void __flash_conf_init(struct pi_flash_conf *conf)
{
}
1c0071ba:	8082                	ret

1c0071bc <pi_task_wait_on.isra.3>:
{
  pi_task_t task;
  int result = pi_fs_copy_2d_async(file, index, buffer, size, stride, length, ext2loc, pi_task_block(&task));
  pi_task_wait_on(&task);
  return result;
}
1c0071bc:	1141                	addi	sp,sp,-16
1c0071be:	c422                	sw	s0,8(sp)
1c0071c0:	c226                	sw	s1,4(sp)
1c0071c2:	c606                	sw	ra,12(sp)
1c0071c4:	c04a                	sw	s2,0(sp)
1c0071c6:	842a                	mv	s0,a0
1c0071c8:	00040783          	lb	a5,0(s0)
1c0071cc:	c799                	beqz	a5,1c0071da <pi_task_wait_on.isra.3+0x1e>
1c0071ce:	40b2                	lw	ra,12(sp)
1c0071d0:	4422                	lw	s0,8(sp)
1c0071d2:	4492                	lw	s1,4(sp)
1c0071d4:	4902                	lw	s2,0(sp)
1c0071d6:	0141                	addi	sp,sp,16
1c0071d8:	8082                	ret
1c0071da:	30047973          	csrrci	s2,mstatus,8
1c0071de:	4585                	li	a1,1
1c0071e0:	01c00513          	li	a0,28
1c0071e4:	50f020ef          	jal	ra,1c009ef2 <__rt_event_execute>
1c0071e8:	30091073          	csrw	mstatus,s2
1c0071ec:	bff1                	j	1c0071c8 <pi_task_wait_on.isra.3+0xc>

1c0071ee <pi_fs_conf_init>:
1c0071ee:	00052023          	sw	zero,0(a0)
1c0071f2:	00052423          	sw	zero,8(a0)
1c0071f6:	00050623          	sb	zero,12(a0)
1c0071fa:	00052823          	sw	zero,16(a0)
1c0071fe:	8082                	ret

1c007200 <pi_fs_mount>:
1c007200:	4158                	lw	a4,4(a0)
1c007202:	4b1c                	lw	a5,16(a4)
1c007204:	eb89                	bnez	a5,1c007216 <pi_fs_mount+0x16>
1c007206:	431c                	lw	a5,0(a4)
1c007208:	cb99                	beqz	a5,1c00721e <pi_fs_mount+0x1e>
1c00720a:	0017bf63          	p.bneimm	a5,1,1c007228 <pi_fs_mount+0x28>
1c00720e:	1c00e7b7          	lui	a5,0x1c00e
1c007212:	cf078793          	addi	a5,a5,-784 # 1c00dcf0 <__pi_host_fs_api>
1c007216:	0007a303          	lw	t1,0(a5)
1c00721a:	c11c                	sw	a5,0(a0)
1c00721c:	8302                	jr	t1
1c00721e:	1c00e7b7          	lui	a5,0x1c00e
1c007222:	cc878793          	addi	a5,a5,-824 # 1c00dcc8 <__pi_read_fs_api>
1c007226:	bfc5                	j	1c007216 <pi_fs_mount+0x16>
1c007228:	557d                	li	a0,-1
1c00722a:	8082                	ret

1c00722c <pi_fs_unmount>:
1c00722c:	411c                	lw	a5,0(a0)
1c00722e:	0047a303          	lw	t1,4(a5)
1c007232:	8302                	jr	t1

1c007234 <pi_fs_open>:
1c007234:	411c                	lw	a5,0(a0)
1c007236:	0087a303          	lw	t1,8(a5)
1c00723a:	8302                	jr	t1

1c00723c <pi_fs_close>:
1c00723c:	415c                	lw	a5,4(a0)
1c00723e:	00c7a303          	lw	t1,12(a5)
1c007242:	8302                	jr	t1

1c007244 <pi_fs_read_async>:
1c007244:	415c                	lw	a5,4(a0)
1c007246:	0107a303          	lw	t1,16(a5)
1c00724a:	8302                	jr	t1

1c00724c <pi_fs_read>:
1c00724c:	7175                	addi	sp,sp,-144
1c00724e:	4785                	li	a5,1
1c007250:	868a                	mv	a3,sp
1c007252:	c706                	sw	ra,140(sp)
1c007254:	c522                	sw	s0,136(sp)
1c007256:	cc3e                	sw	a5,24(sp)
1c007258:	d43e                	sw	a5,40(sp)
1c00725a:	c202                	sw	zero,4(sp)
1c00725c:	00010a23          	sb	zero,20(sp)
1c007260:	37d5                	jal	1c007244 <pi_fs_read_async>
1c007262:	842a                	mv	s0,a0
1c007264:	0848                	addi	a0,sp,20
1c007266:	3f99                	jal	1c0071bc <pi_task_wait_on.isra.3>
1c007268:	8522                	mv	a0,s0
1c00726a:	40ba                	lw	ra,140(sp)
1c00726c:	442a                	lw	s0,136(sp)
1c00726e:	6149                	addi	sp,sp,144
1c007270:	8082                	ret

1c007272 <pi_fs_write_async>:
1c007272:	415c                	lw	a5,4(a0)
1c007274:	0187a303          	lw	t1,24(a5)
1c007278:	8302                	jr	t1

1c00727a <pi_fs_write>:
1c00727a:	7175                	addi	sp,sp,-144
1c00727c:	4785                	li	a5,1
1c00727e:	868a                	mv	a3,sp
1c007280:	c706                	sw	ra,140(sp)
1c007282:	c522                	sw	s0,136(sp)
1c007284:	cc3e                	sw	a5,24(sp)
1c007286:	d43e                	sw	a5,40(sp)
1c007288:	c202                	sw	zero,4(sp)
1c00728a:	00010a23          	sb	zero,20(sp)
1c00728e:	37d5                	jal	1c007272 <pi_fs_write_async>
1c007290:	842a                	mv	s0,a0
1c007292:	0848                	addi	a0,sp,20
1c007294:	3725                	jal	1c0071bc <pi_task_wait_on.isra.3>
1c007296:	8522                	mv	a0,s0
1c007298:	40ba                	lw	ra,140(sp)
1c00729a:	442a                	lw	s0,136(sp)
1c00729c:	6149                	addi	sp,sp,144
1c00729e:	8082                	ret

1c0072a0 <pi_fs_copy_async>:
1c0072a0:	00452803          	lw	a6,4(a0)
1c0072a4:	02082303          	lw	t1,32(a6)
1c0072a8:	8302                	jr	t1

1c0072aa <pi_fs_seek>:

int32_t pi_fs_seek(pi_fs_file_t *file, unsigned int offset)
{
  return file->api->seek(file, offset);
1c0072aa:	415c                	lw	a5,4(a0)
1c0072ac:	01c7a303          	lw	t1,28(a5)
1c0072b0:	8302                	jr	t1

1c0072b2 <pi_flash_read_async>:
}

static inline void pi_flash_read_async(struct pi_device *device, uint32_t pi_flash_addr, void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->read_async(device, pi_flash_addr, data, size, task);
1c0072b2:	411c                	lw	a5,0(a0)
1c0072b4:	00c7a303          	lw	t1,12(a5)
1c0072b8:	8302                	jr	t1

1c0072ba <__pi_read_fs_write>:
    return block_size;
}

static int32_t __pi_read_fs_write(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *task)
{
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c0072ba:	411c                	lw	a5,0(a0)
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c0072bc:	01852803          	lw	a6,24(a0)
{
1c0072c0:	8736                	mv	a4,a3
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c0072c2:	4794                	lw	a3,8(a5)
    unsigned int addr = file->addr + file->offset;
1c0072c4:	495c                	lw	a5,20(a0)
{
1c0072c6:	88ae                	mv	a7,a1
1c0072c8:	1141                	addi	sp,sp,-16
    unsigned int addr = file->addr + file->offset;
1c0072ca:	010785b3          	add	a1,a5,a6
    if(file->offset + size > file->fs_file.size)
1c0072ce:	00c52803          	lw	a6,12(a0)
{
1c0072d2:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c0072d4:	00c78333          	add	t1,a5,a2
1c0072d8:	00687463          	bleu	t1,a6,1c0072e0 <__pi_read_fs_write+0x26>
    {
        real_size = file->fs_file.size - file->offset;
1c0072dc:	40f80633          	sub	a2,a6,a5
    }
    file->offset += real_size;
1c0072e0:	97b2                	add	a5,a5,a2
1c0072e2:	c95c                	sw	a5,20(a0)
    
    pi_flash_program_async(fs->flash, addr, (void *) buffer, real_size, task);
1c0072e4:	4288                	lw	a0,0(a3)
}

static inline void pi_flash_program_async(struct pi_device *device, uint32_t pi_flash_addr, const void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->program_async(device, pi_flash_addr, data, size, task);
1c0072e6:	86b2                	mv	a3,a2
1c0072e8:	8646                	mv	a2,a7
1c0072ea:	411c                	lw	a5,0(a0)
1c0072ec:	4b9c                	lw	a5,16(a5)
1c0072ee:	9782                	jalr	a5
    
    return 0;
}
1c0072f0:	40b2                	lw	ra,12(sp)
1c0072f2:	4501                	li	a0,0
1c0072f4:	0141                	addi	sp,sp,16
1c0072f6:	8082                	ret

1c0072f8 <__pi_read_fs_seek>:
static int32_t __pi_read_fs_seek(pi_fs_file_t *_file, unsigned int offset)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    //printf("[FS] File seek (file: %p, offset: 0x%x)\n", file, offset);
    
    if(offset < file->fs_file.size)
1c0072f8:	455c                	lw	a5,12(a0)
1c0072fa:	00f5f563          	bleu	a5,a1,1c007304 <__pi_read_fs_seek+0xc>
    {
        file->offset = offset;
1c0072fe:	c94c                	sw	a1,20(a0)
        return 0;
1c007300:	4501                	li	a0,0
1c007302:	8082                	ret
    }
    return -1;
1c007304:	557d                	li	a0,-1
}
1c007306:	8082                	ret

1c007308 <__pi_read_fs_direct_read_async>:
}

static int32_t __pi_read_fs_direct_read_async(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *event)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c007308:	411c                	lw	a5,0(a0)
{
1c00730a:	1141                	addi	sp,sp,-16
1c00730c:	c422                	sw	s0,8(sp)
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00730e:	0087a803          	lw	a6,8(a5)
{
1c007312:	8432                	mv	s0,a2
    // Mask interrupt to update file current position and get information
    //int irq = pi_irq_disable();
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c007314:	495c                	lw	a5,20(a0)
1c007316:	4d10                	lw	a2,24(a0)
{
1c007318:	88ae                	mv	a7,a1
1c00731a:	8736                	mv	a4,a3
    unsigned int addr = file->addr + file->offset;
1c00731c:	00c785b3          	add	a1,a5,a2
    if(file->offset + size > file->fs_file.size)
1c007320:	4550                	lw	a2,12(a0)
{
1c007322:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c007324:	008786b3          	add	a3,a5,s0
1c007328:	00d67463          	bleu	a3,a2,1c007330 <__pi_read_fs_direct_read_async+0x28>
    {
        real_size = file->fs_file.size - file->offset;
1c00732c:	40f60433          	sub	s0,a2,a5
    }
    file->offset += real_size;
1c007330:	97a2                	add	a5,a5,s0
1c007332:	c95c                	sw	a5,20(a0)
    
    //pi_irq_restore(irq);
    
    pi_flash_read_async(fs->flash, addr, (void *) buffer, real_size, event);
1c007334:	00082503          	lw	a0,0(a6)
1c007338:	86a2                	mv	a3,s0
1c00733a:	8646                	mv	a2,a7
1c00733c:	3f9d                	jal	1c0072b2 <pi_flash_read_async>
    
    return real_size;
}
1c00733e:	8522                	mv	a0,s0
1c007340:	40b2                	lw	ra,12(sp)
1c007342:	4422                	lw	s0,8(sp)
1c007344:	0141                	addi	sp,sp,16
1c007346:	8082                	ret

1c007348 <__pi_read_fs_copy_async>:


static int32_t
__pi_read_fs_copy_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc,
                        pi_task_t *task)
{
1c007348:	882a                	mv	a6,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00734a:	4108                	lw	a0,0(a0)
    return pi_flash_copy_async(fs->flash, file->addr + index, buffer, size, ext2loc, task);
1c00734c:	01882803          	lw	a6,24(a6)
1c007350:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_async(device, pi_flash_addr, buffer, size, ext2loc, task);
1c007352:	95c2                	add	a1,a1,a6
1c007354:	4108                	lw	a0,0(a0)
1c007356:	00052883          	lw	a7,0(a0)
1c00735a:	0288a303          	lw	t1,40(a7)
1c00735e:	8302                	jr	t1

1c007360 <__pi_read_fs_copy_2d_async>:
}

static int32_t
__pi_read_fs_copy_2d_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, uint32_t stride,
                           uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c007360:	832a                	mv	t1,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c007362:	4108                	lw	a0,0(a0)
    return pi_flash_copy_2d_async(fs->flash, file->addr + index, buffer, size, stride, length, ext2loc, task);
1c007364:	01832e03          	lw	t3,24(t1)
1c007368:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_2d_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, task);
1c00736a:	95f2                	add	a1,a1,t3
1c00736c:	4108                	lw	a0,0(a0)
1c00736e:	00052303          	lw	t1,0(a0)
1c007372:	02c32303          	lw	t1,44(t1)
1c007376:	8302                	jr	t1

1c007378 <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007378:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c00737c:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c007380:	00052023          	sw	zero,0(a0)
1c007384:	01c00713          	li	a4,28
  if (sched->first) {
1c007388:	c619                	beqz	a2,1c007396 <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c00738a:	435c                	lw	a5,4(a4)
1c00738c:	c388                	sw	a0,0(a5)
  sched->last = event;
1c00738e:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c007390:	30069073          	csrw	mstatus,a3
}
1c007394:	8082                	ret
    sched->first = event;
1c007396:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00739a:	bfd5                	j	1c00738e <rt_event_enqueue+0x16>

1c00739c <__pi_fs_free>:
    if(fs != NULL)
1c00739c:	c91d                	beqz	a0,1c0073d2 <__pi_fs_free+0x36>
{
1c00739e:	1141                	addi	sp,sp,-16
1c0073a0:	c422                	sw	s0,8(sp)
1c0073a2:	842a                	mv	s0,a0
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c0073a4:	09c52503          	lw	a0,156(a0)
{
1c0073a8:	c606                	sw	ra,12(sp)
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c0073aa:	c511                	beqz	a0,1c0073b6 <__pi_fs_free+0x1a>
1c0073ac:	09842783          	lw	a5,152(s0)
1c0073b0:	438c                	lw	a1,0(a5)
1c0073b2:	5fb020ef          	jal	ra,1c00a1ac <pi_l2_free>
        if(fs->pi_fs_l2) pmsis_l2_malloc_free(fs->pi_fs_l2, sizeof(pi_fs_l2_t));
1c0073b6:	09842503          	lw	a0,152(s0)
1c0073ba:	c501                	beqz	a0,1c0073c2 <__pi_fs_free+0x26>
1c0073bc:	45a1                	li	a1,8
1c0073be:	5ef020ef          	jal	ra,1c00a1ac <pi_l2_free>
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c0073c2:	8522                	mv	a0,s0
}
1c0073c4:	4422                	lw	s0,8(sp)
1c0073c6:	40b2                	lw	ra,12(sp)
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c0073c8:	1b800593          	li	a1,440
}
1c0073cc:	0141                	addi	sp,sp,16
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c0073ce:	5df0206f          	j	1c00a1ac <pi_l2_free>
1c0073d2:	8082                	ret

1c0073d4 <__pi_read_fs_unmount>:
    __pi_fs_free(fs);
1c0073d4:	4508                	lw	a0,8(a0)
1c0073d6:	b7d9                	j	1c00739c <__pi_fs_free>

1c0073d8 <__pi_read_fs_open>:
{
1c0073d8:	1101                	addi	sp,sp,-32
1c0073da:	ca26                	sw	s1,20(sp)
1c0073dc:	c452                	sw	s4,8(sp)
1c0073de:	c256                	sw	s5,4(sp)
1c0073e0:	ce06                	sw	ra,28(sp)
1c0073e2:	cc22                	sw	s0,24(sp)
1c0073e4:	c84a                	sw	s2,16(sp)
1c0073e6:	c64e                	sw	s3,12(sp)
1c0073e8:	c05a                	sw	s6,0(sp)
1c0073ea:	8a2a                	mv	s4,a0
1c0073ec:	8aae                	mv	s5,a1
    pi_read_fs_t *fs = (pi_read_fs_t *) device->data;
1c0073ee:	4504                	lw	s1,8(a0)
    if(flags == PI_FS_FLAGS_WRITE)
1c0073f0:	08163f63          	p.bneimm	a2,1,1c00748e <__pi_read_fs_open+0xb6>
        if(fs->last_created_file)
1c0073f4:	12c4a783          	lw	a5,300(s1)
1c0073f8:	c399                	beqz	a5,1c0073fe <__pi_read_fs_open+0x26>
    return NULL;
1c0073fa:	4501                	li	a0,0
1c0073fc:	a8bd                	j	1c00747a <__pi_read_fs_open+0xa2>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c0073fe:	0c000513          	li	a0,192
1c007402:	59d020ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c007406:	842a                	mv	s0,a0
        if(file == NULL) return NULL;
1c007408:	d96d                	beqz	a0,1c0073fa <__pi_read_fs_open+0x22>
        int str_len = strlen(file_name);
1c00740a:	8556                	mv	a0,s5
1c00740c:	37f040ef          	jal	ra,1c00bf8a <strlen>
        int header_size = ((str_len + 7) & ~0x7) + 12;
1c007410:	00750913          	addi	s2,a0,7
1c007414:	c4093933          	p.bclr	s2,s2,2,0
1c007418:	0931                	addi	s2,s2,12
        int str_len = strlen(file_name);
1c00741a:	89aa                	mv	s3,a0
        uint8_t *header = pmsis_l2_malloc(header_size);
1c00741c:	854a                	mv	a0,s2
1c00741e:	581020ef          	jal	ra,1c00a19e <pi_l2_malloc>
        if(header == NULL)
1c007422:	e519                	bnez	a0,1c007430 <__pi_read_fs_open+0x58>
    pmsis_l2_malloc_free(file, sizeof(pi_read_fs_file_t));
1c007424:	0c000593          	li	a1,192
1c007428:	8522                	mv	a0,s0
1c00742a:	583020ef          	jal	ra,1c00a1ac <pi_l2_free>
1c00742e:	b7f1                	j	1c0073fa <__pi_read_fs_open+0x22>
        file->header = header;
1c007430:	0aa42a23          	sw	a0,180(s0)
        file->header_size = header_size;
1c007434:	0b242c23          	sw	s2,184(s0)
        memcpy(&file->header[12], file_name, str_len);
1c007438:	864e                	mv	a2,s3
1c00743a:	85d6                	mv	a1,s5
1c00743c:	0531                	addi	a0,a0,12
1c00743e:	373040ef          	jal	ra,1c00bfb0 <memcpy>
        *(uint32_t *) &file->header[8] = str_len;
1c007442:	0b442783          	lw	a5,180(s0)
1c007446:	0137a423          	sw	s3,8(a5)
        file->addr = fs->free_flash_area + header_size;
1c00744a:	1284a783          	lw	a5,296(s1)
        file->fs_file.size = 0;
1c00744e:	00042623          	sw	zero,12(s0)
        file->offset = 0;
1c007452:	00042a23          	sw	zero,20(s0)
        file->addr = fs->free_flash_area + header_size;
1c007456:	993e                	add	s2,s2,a5
        file->cache_addr = -1;
1c007458:	57fd                	li	a5,-1
        file->addr = fs->free_flash_area + header_size;
1c00745a:	01242c23          	sw	s2,24(s0)
        file->cache_addr = -1;
1c00745e:	0af42823          	sw	a5,176(s0)
        fs->last_created_file = file;
1c007462:	1284a623          	sw	s0,300(s1)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c007466:	000a2783          	lw	a5,0(s4)
    file->fs_file.fs_data = &fs->fs_data;
1c00746a:	13048493          	addi	s1,s1,304
    file->fs_file.data = file;
1c00746e:	c400                	sw	s0,8(s0)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c007470:	c05c                	sw	a5,4(s0)
    file->fs_file.fs = device;
1c007472:	01442023          	sw	s4,0(s0)
    file->fs_file.fs_data = &fs->fs_data;
1c007476:	c804                	sw	s1,16(s0)
    return &file->fs_file;
1c007478:	8522                	mv	a0,s0
}
1c00747a:	40f2                	lw	ra,28(sp)
1c00747c:	4462                	lw	s0,24(sp)
1c00747e:	44d2                	lw	s1,20(sp)
1c007480:	4942                	lw	s2,16(sp)
1c007482:	49b2                	lw	s3,12(sp)
1c007484:	4a22                	lw	s4,8(sp)
1c007486:	4a92                	lw	s5,4(sp)
1c007488:	4b02                	lw	s6,0(sp)
1c00748a:	6105                	addi	sp,sp,32
1c00748c:	8082                	ret
        unsigned int *pi_fs_info = fs->pi_fs_info;
1c00748e:	09c4a783          	lw	a5,156(s1)
        for (i = 0; i < nb_comps; i++)
1c007492:	4981                	li	s3,0
        pi_fs_desc_t *desc = NULL;
1c007494:	4901                	li	s2,0
        int nb_comps = *pi_fs_info++;
1c007496:	0007ab03          	lw	s6,0(a5)
1c00749a:	00478413          	addi	s0,a5,4
        for (i = 0; i < nb_comps; i++)
1c00749e:	0569c163          	blt	s3,s6,1c0074e0 <__pi_read_fs_open+0x108>
        if(i == nb_comps) goto error;
1c0074a2:	f5698ce3          	beq	s3,s6,1c0073fa <__pi_read_fs_open+0x22>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c0074a6:	0c000513          	li	a0,192
1c0074aa:	4f5020ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c0074ae:	842a                	mv	s0,a0
        if(file == NULL) goto error;
1c0074b0:	d529                	beqz	a0,1c0073fa <__pi_read_fs_open+0x22>
        file->cache = pmsis_l2_malloc(READ_FS_THRESHOLD_BLOCK_FULL);
1c0074b2:	08800513          	li	a0,136
1c0074b6:	4e9020ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c0074ba:	0aa42623          	sw	a0,172(s0)
        if(file->cache == NULL) goto error1;
1c0074be:	d13d                	beqz	a0,1c007424 <__pi_read_fs_open+0x4c>
        file->fs_file.size = desc->size;
1c0074c0:	00492783          	lw	a5,4(s2)
        file->addr = desc->addr + fs->partition_offset;
1c0074c4:	4498                	lw	a4,8(s1)
        file->header = NULL;
1c0074c6:	0a042a23          	sw	zero,180(s0)
        file->fs_file.size = desc->size;
1c0074ca:	c45c                	sw	a5,12(s0)
        file->addr = desc->addr + fs->partition_offset;
1c0074cc:	00092783          	lw	a5,0(s2)
        file->offset = 0;
1c0074d0:	00042a23          	sw	zero,20(s0)
        file->addr = desc->addr + fs->partition_offset;
1c0074d4:	97ba                	add	a5,a5,a4
1c0074d6:	cc1c                	sw	a5,24(s0)
        file->cache_addr = -1;
1c0074d8:	57fd                	li	a5,-1
1c0074da:	0af42823          	sw	a5,176(s0)
1c0074de:	b761                	j	1c007466 <__pi_read_fs_open+0x8e>
            if(strcmp(desc->name, file_name) == 0) break;
1c0074e0:	85d6                	mv	a1,s5
1c0074e2:	00c40513          	addi	a0,s0,12
1c0074e6:	271040ef          	jal	ra,1c00bf56 <strcmp>
1c0074ea:	c901                	beqz	a0,1c0074fa <__pi_read_fs_open+0x122>
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c0074ec:	441c                	lw	a5,8(s0)
        for (i = 0; i < nb_comps; i++)
1c0074ee:	8922                	mv	s2,s0
1c0074f0:	0985                	addi	s3,s3,1
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c0074f2:	97a2                	add	a5,a5,s0
1c0074f4:	00c78413          	addi	s0,a5,12
1c0074f8:	b75d                	j	1c00749e <__pi_read_fs_open+0xc6>
1c0074fa:	8922                	mv	s2,s0
1c0074fc:	b76d                	j	1c0074a6 <__pi_read_fs_open+0xce>

1c0074fe <__pi_fs_mount_step>:
{
1c0074fe:	7179                	addi	sp,sp,-48
1c007500:	d226                	sw	s1,36(sp)
    switch (fs->mount_step)
1c007502:	09052483          	lw	s1,144(a0)
{
1c007506:	d422                	sw	s0,40(sp)
1c007508:	d606                	sw	ra,44(sp)
1c00750a:	d04a                	sw	s2,32(sp)
    const pi_partition_table_t partition_table = NULL;
1c00750c:	ce02                	sw	zero,28(sp)
{
1c00750e:	842a                	mv	s0,a0
    switch (fs->mount_step)
1c007510:	0834a463          	p.beqimm	s1,3,1c007598 <__pi_fs_mount_step+0x9a>
1c007514:	0c44a963          	p.beqimm	s1,4,1c0075e6 <__pi_fs_mount_step+0xe8>
1c007518:	0614ba63          	p.bneimm	s1,1,1c00758c <__pi_fs_mount_step+0x8e>
            rc = pi_partition_table_load(fs->flash, &partition_table);
1c00751c:	4108                	lw	a0,0(a0)
1c00751e:	086c                	addi	a1,sp,28
1c007520:	338010ef          	jal	ra,1c008858 <pi_partition_table_load>
            if(rc != PI_OK) goto error;
1c007524:	ed09                	bnez	a0,1c00753e <__pi_fs_mount_step+0x40>
            readfs_partition = pi_partition_find_first(partition_table, PI_PARTITION_TYPE_DATA,
1c007526:	4054                	lw	a3,4(s0)
1c007528:	4572                	lw	a0,28(sp)
1c00752a:	08100613          	li	a2,129
1c00752e:	4585                	li	a1,1
1c007530:	32c010ef          	jal	ra,1c00885c <pi_partition_find_first>
1c007534:	892a                	mv	s2,a0
            if(readfs_partition == NULL)
1c007536:	e901                	bnez	a0,1c007546 <__pi_fs_mount_step+0x48>
                pi_partition_table_free(partition_table);
1c007538:	4572                	lw	a0,28(sp)
1c00753a:	31c010ef          	jal	ra,1c008856 <pi_partition_table_free>
    fs->error = -1;
1c00753e:	57fd                	li	a5,-1
1c007540:	12f42223          	sw	a5,292(s0)
1c007544:	a0c9                	j	1c007606 <__pi_fs_mount_step+0x108>
            fs->partition_offset = pi_partition_get_flash_offset(readfs_partition);
1c007546:	306010ef          	jal	ra,1c00884c <pi_partition_get_flash_offset>

/// @cond IMPLEM

static inline pi_err_t pi_partition_close(const pi_partition_t *partition)
{
    pi_l2_free((pi_partition_t *) partition, sizeof(pi_partition_t));
1c00754a:	02800593          	li	a1,40
1c00754e:	c408                	sw	a0,8(s0)
1c007550:	854a                	mv	a0,s2
1c007552:	45b020ef          	jal	ra,1c00a1ac <pi_l2_free>
            pi_partition_table_free(partition_table);
1c007556:	4572                	lw	a0,28(sp)
1c007558:	2fe010ef          	jal	ra,1c008856 <pi_partition_table_free>
            fs->mount_step++;
1c00755c:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c007560:	4008                	lw	a0,0(s0)
1c007562:	440c                	lw	a1,8(s0)
            fs->mount_step++;
1c007564:	0789                	addi	a5,a5,2
1c007566:	08f42823          	sw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c00756a:	09842603          	lw	a2,152(s0)


struct pi_task *pi_task_callback(struct pi_task *task, void (*callback)(void*), void *arg)
{
  task->id = PI_TASK_CALLBACK_ID;
  task->arg[0] = (uint32_t)callback;
1c00756e:	1c0077b7          	lui	a5,0x1c007
1c007572:	4fe78793          	addi	a5,a5,1278 # 1c0074fe <__pi_fs_mount_step>
  task->id = PI_TASK_CALLBACK_ID;
1c007576:	02042223          	sw	zero,36(s0)
  task->arg[0] = (uint32_t)callback;
1c00757a:	c81c                	sw	a5,16(s0)
  task->arg[1] = (uint32_t)arg;
1c00757c:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c00757e:	d844                	sw	s1,52(s0)
  task->done = 0;
1c007580:	02040023          	sb	zero,32(s0)
1c007584:	00c40713          	addi	a4,s0,12
1c007588:	46a1                	li	a3,8
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c00758a:	3325                	jal	1c0072b2 <pi_flash_read_async>
}
1c00758c:	50b2                	lw	ra,44(sp)
1c00758e:	5422                	lw	s0,40(sp)
1c007590:	5492                	lw	s1,36(sp)
1c007592:	5902                	lw	s2,32(sp)
1c007594:	6145                	addi	sp,sp,48
1c007596:	8082                	ret
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c007598:	09852783          	lw	a5,152(a0)
            int pi_fs_offset = fs->partition_offset;
1c00759c:	4504                	lw	s1,8(a0)
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c00759e:	4394                	lw	a3,0(a5)
1c0075a0:	069d                	addi	a3,a3,7
1c0075a2:	c406b6b3          	p.bclr	a3,a3,2,0
            fs->pi_fs_info = pmsis_l2_malloc(pi_fs_size);
1c0075a6:	8536                	mv	a0,a3
1c0075a8:	c636                	sw	a3,12(sp)
1c0075aa:	3f5020ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c0075ae:	08a42e23          	sw	a0,156(s0)
1c0075b2:	862a                	mv	a2,a0
            if(fs->pi_fs_info == NULL)
1c0075b4:	46b2                	lw	a3,12(sp)
1c0075b6:	d541                	beqz	a0,1c00753e <__pi_fs_mount_step+0x40>
            fs->mount_step++;
1c0075b8:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c0075bc:	4008                	lw	a0,0(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c0075be:	02042223          	sw	zero,36(s0)
            fs->mount_step++;
1c0075c2:	0785                	addi	a5,a5,1
1c0075c4:	08f42823          	sw	a5,144(s0)
  task->arg[0] = (uint32_t)callback;
1c0075c8:	1c0077b7          	lui	a5,0x1c007
1c0075cc:	4fe78793          	addi	a5,a5,1278 # 1c0074fe <__pi_fs_mount_step>
1c0075d0:	c81c                	sw	a5,16(s0)
  task->implem.keep = 1;
1c0075d2:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c0075d4:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c0075d6:	d85c                	sw	a5,52(s0)
1c0075d8:	02040023          	sb	zero,32(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c0075dc:	00c40713          	addi	a4,s0,12
1c0075e0:	00848593          	addi	a1,s1,8
1c0075e4:	b75d                	j	1c00758a <__pi_fs_mount_step+0x8c>
            unsigned int *pi_fs_info = fs->pi_fs_info;
1c0075e6:	09c52703          	lw	a4,156(a0)
            for (i = 0; i < nb_comps; i++)
1c0075ea:	4681                	li	a3,0
            int nb_comps = *pi_fs_info++;
1c0075ec:	00470793          	addi	a5,a4,4
1c0075f0:	430c                	lw	a1,0(a4)
            pi_fs_desc_t *desc = NULL;
1c0075f2:	4701                	li	a4,0
            for (i = 0; i < nb_comps; i++)
1c0075f4:	00b6cd63          	blt	a3,a1,1c00760e <__pi_fs_mount_step+0x110>
            if(desc == NULL)
1c0075f8:	e315                	bnez	a4,1c00761c <__pi_fs_mount_step+0x11e>
                fs->free_flash_area = desc->addr + desc->size;
1c0075fa:	12f42423          	sw	a5,296(s0)
            fs->last_created_file = NULL;
1c0075fe:	12042623          	sw	zero,300(s0)
            fs->error = 0;
1c007602:	12042223          	sw	zero,292(s0)
  rt_event_enqueue(task);
1c007606:	08c42503          	lw	a0,140(s0)
1c00760a:	33bd                	jal	1c007378 <rt_event_enqueue>
1c00760c:	b741                	j	1c00758c <__pi_fs_mount_step+0x8e>
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c00760e:	4790                	lw	a2,8(a5)
            for (i = 0; i < nb_comps; i++)
1c007610:	873e                	mv	a4,a5
1c007612:	0685                	addi	a3,a3,1
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c007614:	963e                	add	a2,a2,a5
1c007616:	00c60793          	addi	a5,a2,12
1c00761a:	bfe9                	j	1c0075f4 <__pi_fs_mount_step+0xf6>
                fs->free_flash_area = desc->addr + desc->size;
1c00761c:	431c                	lw	a5,0(a4)
1c00761e:	4358                	lw	a4,4(a4)
1c007620:	97ba                	add	a5,a5,a4
1c007622:	bfe1                	j	1c0075fa <__pi_fs_mount_step+0xfc>

1c007624 <__pi_read_fs_close>:
    if(file->header == NULL)
1c007624:	0b452603          	lw	a2,180(a0)
{
1c007628:	1141                	addi	sp,sp,-16
1c00762a:	c422                	sw	s0,8(sp)
1c00762c:	c606                	sw	ra,12(sp)
1c00762e:	842a                	mv	s0,a0
    if(file->header == NULL)
1c007630:	ee19                	bnez	a2,1c00764e <__pi_read_fs_close+0x2a>
        pmsis_l2_malloc_free(file->cache, READ_FS_THRESHOLD_BLOCK_FULL);
1c007632:	0ac52503          	lw	a0,172(a0)
1c007636:	08800593          	li	a1,136
        pi_l2_free((void *) file->header, file->header_size);
1c00763a:	373020ef          	jal	ra,1c00a1ac <pi_l2_free>
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c00763e:	8522                	mv	a0,s0
}
1c007640:	4422                	lw	s0,8(sp)
1c007642:	40b2                	lw	ra,12(sp)
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c007644:	0c000593          	li	a1,192
}
1c007648:	0141                	addi	sp,sp,16
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c00764a:	3630206f          	j	1c00a1ac <pi_l2_free>
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00764e:	411c                	lw	a5,0(a0)
        *(uint32_t *) &file->header[0] = file->addr;
1c007650:	4d0c                	lw	a1,24(a0)
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c007652:	4558                	lw	a4,12(a0)
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c007654:	479c                	lw	a5,8(a5)
  api->program(device, pi_flash_addr, data, size);
1c007656:	0b842683          	lw	a3,184(s0)
        *(uint32_t *) &file->header[0] = file->addr;
1c00765a:	c20c                	sw	a1,0(a2)
        pi_flash_program(fs->flash, file->addr - file->header_size, (void *) file->header, file->header_size);
1c00765c:	4388                	lw	a0,0(a5)
1c00765e:	8d95                	sub	a1,a1,a3
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c007660:	c258                	sw	a4,4(a2)
1c007662:	411c                	lw	a5,0(a0)
1c007664:	5bdc                	lw	a5,52(a5)
1c007666:	9782                	jalr	a5
        pi_l2_free((void *) file->header, file->header_size);
1c007668:	0b842583          	lw	a1,184(s0)
1c00766c:	0b442503          	lw	a0,180(s0)
1c007670:	b7e9                	j	1c00763a <__pi_read_fs_close+0x16>

1c007672 <__pi_read_fs_mount>:
{
1c007672:	7175                	addi	sp,sp,-144
1c007674:	c326                	sw	s1,132(sp)
1c007676:	c14a                	sw	s2,128(sp)
1c007678:	84aa                	mv	s1,a0
    struct pi_fs_conf *conf = (struct pi_fs_conf *) device->config;
1c00767a:	00452903          	lw	s2,4(a0)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c00767e:	1b800513          	li	a0,440
{
1c007682:	c522                	sw	s0,136(sp)
1c007684:	c706                	sw	ra,140(sp)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c007686:	319020ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c00768a:	842a                	mv	s0,a0
    if(fs == NULL) goto error;
1c00768c:	e911                	bnez	a0,1c0076a0 <__pi_read_fs_mount+0x2e>
    __pi_fs_free(fs);
1c00768e:	8522                	mv	a0,s0
1c007690:	3331                	jal	1c00739c <__pi_fs_free>
    return -1;
1c007692:	557d                	li	a0,-1
}
1c007694:	40ba                	lw	ra,140(sp)
1c007696:	442a                	lw	s0,136(sp)
1c007698:	449a                	lw	s1,132(sp)
1c00769a:	490a                	lw	s2,128(sp)
1c00769c:	6149                	addi	sp,sp,144
1c00769e:	8082                	ret
    fs->flash = conf->flash;
1c0076a0:	00492783          	lw	a5,4(s2)
    fs->pi_fs_l2 = NULL;
1c0076a4:	08052c23          	sw	zero,152(a0)
    fs->pi_fs_info = NULL;
1c0076a8:	08052e23          	sw	zero,156(a0)
    fs->flash = conf->flash;
1c0076ac:	c11c                	sw	a5,0(a0)
    fs->fs_data.cluster_reqs_first = NULL;
1c0076ae:	12052823          	sw	zero,304(a0)
    fs->pi_fs_l2 = pmsis_l2_malloc(sizeof(pi_fs_l2_t));
1c0076b2:	4521                	li	a0,8
1c0076b4:	2eb020ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c0076b8:	08a42c23          	sw	a0,152(s0)
    if(fs->pi_fs_l2 == NULL) goto error;
1c0076bc:	d969                	beqz	a0,1c00768e <__pi_read_fs_mount+0x1c>
    fs->mount_step = 1;
1c0076be:	4785                	li	a5,1
1c0076c0:	08f42823          	sw	a5,144(s0)
  task->id = PI_TASK_NONE_ID;
1c0076c4:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0076c6:	d43e                	sw	a5,40(sp)
1c0076c8:	00010a23          	sb	zero,20(sp)
    fs->pending_event = pi_task_block(&task);
1c0076cc:	00010793          	mv	a5,sp
1c0076d0:	08f42623          	sw	a5,140(s0)
    fs->partition_name = conf->partition_name;
1c0076d4:	00892783          	lw	a5,8(s2)
  task->arg[0] = (uint32_t)0;
1c0076d8:	c202                	sw	zero,4(sp)
    fs->pi_fs_info = NULL;
1c0076da:	08042e23          	sw	zero,156(s0)
    fs->partition_name = conf->partition_name;
1c0076de:	c05c                	sw	a5,4(s0)
    device->data = (void *) fs;
1c0076e0:	c480                	sw	s0,8(s1)
    __pi_fs_mount_step((void *) fs);
1c0076e2:	8522                	mv	a0,s0
1c0076e4:	3d29                	jal	1c0074fe <__pi_fs_mount_step>
  while(!task->done)
1c0076e6:	01410783          	lb	a5,20(sp)
1c0076ea:	c791                	beqz	a5,1c0076f6 <__pi_read_fs_mount+0x84>
    if(fs->error)
1c0076ec:	12442783          	lw	a5,292(s0)
1c0076f0:	ffd9                	bnez	a5,1c00768e <__pi_read_fs_mount+0x1c>
    return 0;
1c0076f2:	4501                	li	a0,0
1c0076f4:	b745                	j	1c007694 <__pi_read_fs_mount+0x22>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0076f6:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0076fa:	4585                	li	a1,1
1c0076fc:	01c00513          	li	a0,28
1c007700:	7f2020ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c007704:	30091073          	csrw	mstatus,s2
1c007708:	bff9                	j	1c0076e6 <__pi_read_fs_mount+0x74>

1c00770a <__pi_fs_read_cached>:
{
1c00770a:	88ae                	mv	a7,a1
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c00770c:	0b052583          	lw	a1,176(a0)
{
1c007710:	1141                	addi	sp,sp,-16
1c007712:	c226                	sw	s1,4(sp)
1c007714:	c606                	sw	ra,12(sp)
1c007716:	c422                	sw	s0,8(sp)
1c007718:	84ba                	mv	s1,a4
1c00771a:	0ac52803          	lw	a6,172(a0)
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c00771e:	00b66f63          	bltu	a2,a1,1c00773c <__pi_fs_read_cached+0x32>
    if(size > READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7)) size = READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7);
1c007722:	f8363733          	p.bclr	a4,a2,28,3
1c007726:	08800413          	li	s0,136
1c00772a:	8c19                	sub	s0,s0,a4
1c00772c:	04d45433          	p.minu	s0,s0,a3
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c007730:	008606b3          	add	a3,a2,s0
1c007734:	08858713          	addi	a4,a1,136 # ffff8088 <pulp__FC+0xffff8089>
1c007738:	02d77a63          	bleu	a3,a4,1c00776c <__pi_fs_read_cached+0x62>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00773c:	4118                	lw	a4,0(a0)
        file->cache_addr = addr & ~0x7;
1c00773e:	c40635b3          	p.bclr	a1,a2,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c007742:	08800693          	li	a3,136
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c007746:	00872883          	lw	a7,8(a4)
        file->cache_addr = addr & ~0x7;
1c00774a:	0ab52823          	sw	a1,176(a0)
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c00774e:	873e                	mv	a4,a5
1c007750:	0008a503          	lw	a0,0(a7)
1c007754:	8642                	mv	a2,a6
        return 0;
1c007756:	4401                	li	s0,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c007758:	b5bff0ef          	jal	ra,1c0072b2 <pi_flash_read_async>
        *pending = 1;
1c00775c:	4785                	li	a5,1
1c00775e:	c09c                	sw	a5,0(s1)
}
1c007760:	8522                	mv	a0,s0
1c007762:	40b2                	lw	ra,12(sp)
1c007764:	4422                	lw	s0,8(sp)
1c007766:	4492                	lw	s1,4(sp)
1c007768:	0141                	addi	sp,sp,16
1c00776a:	8082                	ret
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c00776c:	40b605b3          	sub	a1,a2,a1
1c007770:	95c2                	add	a1,a1,a6
1c007772:	8622                	mv	a2,s0
1c007774:	8546                	mv	a0,a7
1c007776:	03b040ef          	jal	ra,1c00bfb0 <memcpy>
    return __pi_fs_read_from_cache(file, buffer, addr, size);
1c00777a:	b7dd                	j	1c007760 <__pi_fs_read_cached+0x56>

1c00777c <__pi_fs_read>:
{
1c00777c:	7179                	addi	sp,sp,-48
1c00777e:	d422                	sw	s0,40(sp)
1c007780:	d226                	sw	s1,36(sp)
1c007782:	d04a                	sw	s2,32(sp)
1c007784:	ca56                	sw	s5,20(sp)
1c007786:	c85a                	sw	s6,16(sp)
1c007788:	d606                	sw	ra,44(sp)
1c00778a:	8b3e                	mv	s6,a5
1c00778c:	ce4e                	sw	s3,28(sp)
1c00778e:	cc52                	sw	s4,24(sp)
1c007790:	c65e                	sw	s7,12(sp)
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c007792:	47c1                	li	a5,16
{
1c007794:	892e                	mv	s2,a1
1c007796:	8432                	mv	s0,a2
1c007798:	84b6                	mv	s1,a3
1c00779a:	8aba                	mv	s5,a4
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c00779c:	06d7d063          	ble	a3,a5,1c0077fc <__pi_fs_read+0x80>
1c0077a0:	00b647b3          	xor	a5,a2,a1
1c0077a4:	f837b7b3          	p.bclr	a5,a5,28,3
1c0077a8:	ebb1                	bnez	a5,1c0077fc <__pi_fs_read+0x80>
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c0077aa:	08800793          	li	a5,136
1c0077ae:	06d7d763          	ble	a3,a5,1c00781c <__pi_fs_read+0xa0>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0077b2:	411c                	lw	a5,0(a0)
1c0077b4:	0087ab83          	lw	s7,8(a5)
    int prefix_size = addr & 0x7;
1c0077b8:	f83437b3          	p.bclr	a5,s0,28,3
    if(prefix_size)
1c0077bc:	c395                	beqz	a5,1c0077e0 <__pi_fs_read+0x64>
        prefix_size = 4 - prefix_size;
1c0077be:	4991                	li	s3,4
1c0077c0:	40f989b3          	sub	s3,s3,a5
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c0077c4:	8756                	mv	a4,s5
1c0077c6:	87da                	mv	a5,s6
1c0077c8:	86ce                	mv	a3,s3
1c0077ca:	8622                	mv	a2,s0
1c0077cc:	85ca                	mv	a1,s2
1c0077ce:	3f35                	jal	1c00770a <__pi_fs_read_cached>
        if(*pending) return read_size;
1c0077d0:	000aa783          	lw	a5,0(s5)
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c0077d4:	8a2a                	mv	s4,a0
        if(*pending) return read_size;
1c0077d6:	e7bd                	bnez	a5,1c007844 <__pi_fs_read+0xc8>
        addr += prefix_size;
1c0077d8:	944e                	add	s0,s0,s3
        buffer += prefix_size;
1c0077da:	994e                	add	s2,s2,s3
        size -= prefix_size;
1c0077dc:	413484b3          	sub	s1,s1,s3
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c0077e0:	000ba503          	lw	a0,0(s7) # 10000 <__L1Cl>
    int block_size = size & ~0x7;
1c0077e4:	c404ba33          	p.bclr	s4,s1,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c0077e8:	875a                	mv	a4,s6
1c0077ea:	86d2                	mv	a3,s4
1c0077ec:	864a                	mv	a2,s2
1c0077ee:	85a2                	mv	a1,s0
1c0077f0:	ac3ff0ef          	jal	ra,1c0072b2 <pi_flash_read_async>
    *pending = 1;
1c0077f4:	4785                	li	a5,1
1c0077f6:	00faa023          	sw	a5,0(s5)
    return block_size;
1c0077fa:	a0a9                	j	1c007844 <__pi_fs_read+0xc8>
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c0077fc:	8622                	mv	a2,s0
}
1c0077fe:	5422                	lw	s0,40(sp)
1c007800:	50b2                	lw	ra,44(sp)
1c007802:	49f2                	lw	s3,28(sp)
1c007804:	4a62                	lw	s4,24(sp)
1c007806:	4bb2                	lw	s7,12(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c007808:	87da                	mv	a5,s6
1c00780a:	8756                	mv	a4,s5
}
1c00780c:	4b42                	lw	s6,16(sp)
1c00780e:	4ad2                	lw	s5,20(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c007810:	86a6                	mv	a3,s1
1c007812:	85ca                	mv	a1,s2
}
1c007814:	5492                	lw	s1,36(sp)
1c007816:	5902                	lw	s2,32(sp)
1c007818:	6145                	addi	sp,sp,48
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c00781a:	bdc5                	j	1c00770a <__pi_fs_read_cached>
       addr >= file->cache_addr &&
1c00781c:	0b052583          	lw	a1,176(a0)
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c007820:	f8b669e3          	bltu	a2,a1,1c0077b2 <__pi_fs_read+0x36>
       addr + size < file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c007824:	00c687b3          	add	a5,a3,a2
1c007828:	08858713          	addi	a4,a1,136
       addr >= file->cache_addr &&
1c00782c:	f8e7f3e3          	bleu	a4,a5,1c0077b2 <__pi_fs_read+0x36>
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c007830:	40b60433          	sub	s0,a2,a1
1c007834:	0ac52583          	lw	a1,172(a0)
1c007838:	8636                	mv	a2,a3
1c00783a:	854a                	mv	a0,s2
1c00783c:	95a2                	add	a1,a1,s0
1c00783e:	772040ef          	jal	ra,1c00bfb0 <memcpy>
        return __pi_fs_read_from_cache(file, buffer, addr, size);
1c007842:	8a26                	mv	s4,s1
}
1c007844:	50b2                	lw	ra,44(sp)
1c007846:	5422                	lw	s0,40(sp)
1c007848:	8552                	mv	a0,s4
1c00784a:	5492                	lw	s1,36(sp)
1c00784c:	5902                	lw	s2,32(sp)
1c00784e:	49f2                	lw	s3,28(sp)
1c007850:	4a62                	lw	s4,24(sp)
1c007852:	4ad2                	lw	s5,20(sp)
1c007854:	4b42                	lw	s6,16(sp)
1c007856:	4bb2                	lw	s7,12(sp)
1c007858:	6145                	addi	sp,sp,48
1c00785a:	8082                	ret

1c00785c <__pi_read_fs_try_read>:
    if(file->pending_size == 0)
1c00785c:	0a852683          	lw	a3,168(a0)
{
1c007860:	7179                	addi	sp,sp,-48
1c007862:	d422                	sw	s0,40(sp)
1c007864:	d606                	sw	ra,44(sp)
1c007866:	d226                	sw	s1,36(sp)
1c007868:	d04a                	sw	s2,32(sp)
1c00786a:	ce4e                	sw	s3,28(sp)
    int pending = 0;
1c00786c:	c602                	sw	zero,12(sp)
{
1c00786e:	842a                	mv	s0,a0
    if(file->pending_size == 0)
1c007870:	ee99                	bnez	a3,1c00788e <__pi_read_fs_try_read+0x32>
            file->pending_event->implem.data[0] = file->first_read_size;
1c007872:	501c                	lw	a5,32(s0)
1c007874:	0bc42703          	lw	a4,188(s0)
1c007878:	df98                	sw	a4,56(a5)
  rt_event_enqueue(task);
1c00787a:	5008                	lw	a0,32(s0)
1c00787c:	afdff0ef          	jal	ra,1c007378 <rt_event_enqueue>
}
1c007880:	50b2                	lw	ra,44(sp)
1c007882:	5422                	lw	s0,40(sp)
1c007884:	5492                	lw	s1,36(sp)
1c007886:	5902                	lw	s2,32(sp)
1c007888:	49f2                	lw	s3,28(sp)
1c00788a:	6145                	addi	sp,sp,48
1c00788c:	8082                	ret
  task->arg[0] = (uint32_t)callback;
1c00788e:	1c0084b7          	lui	s1,0x1c008
1c007892:	85c48493          	addi	s1,s1,-1956 # 1c00785c <__pi_read_fs_try_read>
  task->id = PI_TASK_CALLBACK_ID;
1c007896:	02052e23          	sw	zero,60(a0)
  task->arg[0] = (uint32_t)callback;
1c00789a:	d504                	sw	s1,40(a0)
    int size = __pi_fs_read(
1c00789c:	4d50                	lw	a2,28(a0)
1c00789e:	0a452583          	lw	a1,164(a0)
  task->arg[1] = (uint32_t)arg;
1c0078a2:	d448                	sw	a0,44(s0)
            pi_task_callback(&file->step_event, __pi_read_fs_try_read, (void *) file)
1c0078a4:	02450913          	addi	s2,a0,36
  task->implem.keep = 1;
1c0078a8:	4985                	li	s3,1
    int size = __pi_fs_read(
1c0078aa:	87ca                	mv	a5,s2
1c0078ac:	05352623          	sw	s3,76(a0)
  task->done = 0;
1c0078b0:	02050c23          	sb	zero,56(a0)
1c0078b4:	0078                	addi	a4,sp,12
1c0078b6:	35d9                	jal	1c00777c <__pi_fs_read>
    file->pending_addr += size;
1c0078b8:	4c5c                	lw	a5,28(s0)
1c0078ba:	97aa                	add	a5,a5,a0
1c0078bc:	cc5c                	sw	a5,28(s0)
    file->pending_buffer += size;
1c0078be:	0a442783          	lw	a5,164(s0)
1c0078c2:	97aa                	add	a5,a5,a0
1c0078c4:	0af42223          	sw	a5,164(s0)
    file->pending_size -= size;
1c0078c8:	0a842783          	lw	a5,168(s0)
1c0078cc:	40a78533          	sub	a0,a5,a0
    if(!pending)
1c0078d0:	47b2                	lw	a5,12(sp)
    file->pending_size -= size;
1c0078d2:	0aa42423          	sw	a0,168(s0)
    if(!pending)
1c0078d6:	f7cd                	bnez	a5,1c007880 <__pi_read_fs_try_read+0x24>
        if(file->pending_size == 0)
1c0078d8:	dd49                	beqz	a0,1c007872 <__pi_read_fs_try_read+0x16>
  task->id = PI_TASK_CALLBACK_ID;
1c0078da:	02042e23          	sw	zero,60(s0)
  task->arg[0] = (uint32_t)callback;
1c0078de:	d404                	sw	s1,40(s0)
  task->arg[1] = (uint32_t)arg;
1c0078e0:	d440                	sw	s0,44(s0)
  task->implem.keep = 1;
1c0078e2:	05342623          	sw	s3,76(s0)
1c0078e6:	02040c23          	sb	zero,56(s0)
  rt_event_enqueue(task);
1c0078ea:	854a                	mv	a0,s2
1c0078ec:	bf41                	j	1c00787c <__pi_read_fs_try_read+0x20>

1c0078ee <__pi_read_fs_read_async>:
    if(file->offset + size > file->fs_file.size)
1c0078ee:	495c                	lw	a5,20(a0)
1c0078f0:	4558                	lw	a4,12(a0)
{
1c0078f2:	1101                	addi	sp,sp,-32
1c0078f4:	ce06                	sw	ra,28(sp)
    if(file->offset + size > file->fs_file.size)
1c0078f6:	00c78833          	add	a6,a5,a2
1c0078fa:	01077463          	bleu	a6,a4,1c007902 <__pi_read_fs_read_async+0x14>
        real_size = file->fs_file.size - file->offset;
1c0078fe:	40f70633          	sub	a2,a4,a5
    file->first_read_size = real_size;
1c007902:	0ac52e23          	sw	a2,188(a0)
1c007906:	00068a23          	sb	zero,20(a3)
    file->pending_addr = file->addr + file->offset;
1c00790a:	495c                	lw	a5,20(a0)
1c00790c:	4d18                	lw	a4,24(a0)
    file->pending_size = real_size;
1c00790e:	0ac52423          	sw	a2,168(a0)
    file->pending_event = event;
1c007912:	d114                	sw	a3,32(a0)
    file->pending_addr = file->addr + file->offset;
1c007914:	973e                	add	a4,a4,a5
    file->offset += real_size;
1c007916:	97b2                	add	a5,a5,a2
    file->pending_buffer = (unsigned int) buffer;
1c007918:	0ab52223          	sw	a1,164(a0)
    file->pending_addr = file->addr + file->offset;
1c00791c:	cd58                	sw	a4,28(a0)
    file->offset += real_size;
1c00791e:	c95c                	sw	a5,20(a0)
    __pi_read_fs_try_read((void *) file);
1c007920:	c632                	sw	a2,12(sp)
1c007922:	3f2d                	jal	1c00785c <__pi_read_fs_try_read>
}
1c007924:	4632                	lw	a2,12(sp)
1c007926:	40f2                	lw	ra,28(sp)
1c007928:	8532                	mv	a0,a2
1c00792a:	6105                	addi	sp,sp,32
1c00792c:	8082                	ret

1c00792e <__pi_host_fs_mount>:
  int fd;
} pi_host_fs_file_t;

static int32_t __pi_host_fs_mount(struct pi_device *device)
{
  bsp_fs_data.cluster_reqs_first = NULL;
1c00792e:	1c00e7b7          	lui	a5,0x1c00e
1c007932:	fa07a023          	sw	zero,-96(a5) # 1c00dfa0 <bsp_fs_data>
  return 0;
}
1c007936:	4501                	li	a0,0
1c007938:	8082                	ret

1c00793a <__pi_host_fs_unmount>:

static void __pi_host_fs_unmount(struct pi_device *device)
{
}
1c00793a:	8082                	ret

1c00793c <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00793c:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c007940:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c007944:	00052023          	sw	zero,0(a0)
1c007948:	01c00713          	li	a4,28
  if (sched->first) {
1c00794c:	c619                	beqz	a2,1c00795a <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c00794e:	435c                	lw	a5,4(a4)
1c007950:	c388                	sw	a0,0(a5)
  sched->last = event;
1c007952:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c007954:	30069073          	csrw	mstatus,a3
}
1c007958:	8082                	ret
    sched->first = event;
1c00795a:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00795e:	bfd5                	j	1c007952 <rt_event_enqueue+0x16>

1c007960 <__pi_host_fs_seek>:
}

static int32_t __pi_host_fs_seek(pi_fs_file_t *arg, unsigned int offset)
{
  pi_host_fs_file_t *file = (pi_host_fs_file_t *)arg;
  return semihost_seek(file->fd, offset);
1c007960:	4948                	lw	a0,20(a0)
1c007962:	4bf0106f          	j	1c009620 <semihost_seek>

1c007966 <__pi_host_fs_copy_2d_async>:
  else
    return __pi_host_fs_write_async(arg, buffer, size, task);
}

static int32_t __pi_host_fs_copy_2d_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c007966:	7179                	addi	sp,sp,-48
1c007968:	d422                	sw	s0,40(sp)
1c00796a:	d226                	sw	s1,36(sp)
1c00796c:	d04a                	sw	s2,32(sp)
1c00796e:	ce4e                	sw	s3,28(sp)
1c007970:	cc52                	sw	s4,24(sp)
1c007972:	ca56                	sw	s5,20(sp)
1c007974:	c85a                	sw	s6,16(sp)
1c007976:	c65e                	sw	s7,12(sp)
1c007978:	c462                	sw	s8,8(sp)
1c00797a:	d606                	sw	ra,44(sp)
1c00797c:	89aa                	mv	s3,a0
1c00797e:	8a2e                	mv	s4,a1
1c007980:	84b2                	mv	s1,a2
1c007982:	8b36                	mv	s6,a3
1c007984:	8bba                	mv	s7,a4
1c007986:	843e                	mv	s0,a5
1c007988:	8c42                	mv	s8,a6
1c00798a:	8ac6                	mv	s5,a7
  unsigned int chunk;
  for (chunk=0; chunk<size; chunk+=length)
1c00798c:	4901                	li	s2,0
1c00798e:	03696163          	bltu	s2,s6,1c0079b0 <__pi_host_fs_copy_2d_async+0x4a>
1c007992:	8556                	mv	a0,s5
1c007994:	3765                	jal	1c00793c <rt_event_enqueue>

    buffer = ((char *)buffer) + length;
    index += stride;
  }
  pi_task_push(task);
  return 0;
1c007996:	4501                	li	a0,0

error:
  pi_task_push(task);
  return -1;
}
1c007998:	50b2                	lw	ra,44(sp)
1c00799a:	5422                	lw	s0,40(sp)
1c00799c:	5492                	lw	s1,36(sp)
1c00799e:	5902                	lw	s2,32(sp)
1c0079a0:	49f2                	lw	s3,28(sp)
1c0079a2:	4a62                	lw	s4,24(sp)
1c0079a4:	4ad2                	lw	s5,20(sp)
1c0079a6:	4b42                	lw	s6,16(sp)
1c0079a8:	4bb2                	lw	s7,12(sp)
1c0079aa:	4c22                	lw	s8,8(sp)
1c0079ac:	6145                	addi	sp,sp,48
1c0079ae:	8082                	ret
    if (__pi_host_fs_seek(file, index))
1c0079b0:	85d2                	mv	a1,s4
1c0079b2:	854e                	mv	a0,s3
1c0079b4:	05645433          	p.minu	s0,s0,s6
1c0079b8:	3765                	jal	1c007960 <__pi_host_fs_seek>
1c0079ba:	e10d                	bnez	a0,1c0079dc <__pi_host_fs_copy_2d_async+0x76>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c0079bc:	8622                	mv	a2,s0
1c0079be:	85a6                	mv	a1,s1
1c0079c0:	854e                	mv	a0,s3
    if (ext2loc)
1c0079c2:	000c0a63          	beqz	s8,1c0079d6 <__pi_host_fs_copy_2d_async+0x70>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c0079c6:	887ff0ef          	jal	ra,1c00724c <pi_fs_read>
1c0079ca:	00851963          	bne	a0,s0,1c0079dc <__pi_host_fs_copy_2d_async+0x76>
    buffer = ((char *)buffer) + length;
1c0079ce:	94a2                	add	s1,s1,s0
    index += stride;
1c0079d0:	9a5e                	add	s4,s4,s7
  for (chunk=0; chunk<size; chunk+=length)
1c0079d2:	9922                	add	s2,s2,s0
1c0079d4:	bf6d                	j	1c00798e <__pi_host_fs_copy_2d_async+0x28>
      if (pi_fs_write(file, buffer, length) != (int)length)
1c0079d6:	8a5ff0ef          	jal	ra,1c00727a <pi_fs_write>
1c0079da:	bfc5                	j	1c0079ca <__pi_host_fs_copy_2d_async+0x64>
1c0079dc:	8556                	mv	a0,s5
1c0079de:	3fb9                	jal	1c00793c <rt_event_enqueue>
  return -1;
1c0079e0:	557d                	li	a0,-1
1c0079e2:	bf5d                	j	1c007998 <__pi_host_fs_copy_2d_async+0x32>

1c0079e4 <__pi_host_fs_write_async>:
  int result = size - semihost_write(file->fd, buffer, size);
1c0079e4:	4948                	lw	a0,20(a0)
{
1c0079e6:	1101                	addi	sp,sp,-32
1c0079e8:	ce06                	sw	ra,28(sp)
1c0079ea:	cc22                	sw	s0,24(sp)
1c0079ec:	ca26                	sw	s1,20(sp)
  int result = size - semihost_write(file->fd, buffer, size);
1c0079ee:	c636                	sw	a3,12(sp)
{
1c0079f0:	84b2                	mv	s1,a2
  int result = size - semihost_write(file->fd, buffer, size);
1c0079f2:	411010ef          	jal	ra,1c009602 <semihost_write>
1c0079f6:	46b2                	lw	a3,12(sp)
1c0079f8:	842a                	mv	s0,a0
1c0079fa:	8536                	mv	a0,a3
1c0079fc:	3781                	jal	1c00793c <rt_event_enqueue>
}
1c0079fe:	40848533          	sub	a0,s1,s0
1c007a02:	40f2                	lw	ra,28(sp)
1c007a04:	4462                	lw	s0,24(sp)
1c007a06:	44d2                	lw	s1,20(sp)
1c007a08:	6105                	addi	sp,sp,32
1c007a0a:	8082                	ret

1c007a0c <__pi_host_fs_read_async>:
  int result = size - semihost_read(file->fd, buffer, size);
1c007a0c:	4948                	lw	a0,20(a0)
{
1c007a0e:	1101                	addi	sp,sp,-32
1c007a10:	ce06                	sw	ra,28(sp)
1c007a12:	cc22                	sw	s0,24(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c007a14:	c636                	sw	a3,12(sp)
{
1c007a16:	8432                	mv	s0,a2
  int result = size - semihost_read(file->fd, buffer, size);
1c007a18:	3cd010ef          	jal	ra,1c0095e4 <semihost_read>
  task->implem.data[0] = result;
1c007a1c:	46b2                	lw	a3,12(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c007a1e:	8c09                	sub	s0,s0,a0
  task->implem.data[0] = result;
1c007a20:	de80                	sw	s0,56(a3)
1c007a22:	8536                	mv	a0,a3
1c007a24:	3f21                	jal	1c00793c <rt_event_enqueue>
}
1c007a26:	8522                	mv	a0,s0
1c007a28:	40f2                	lw	ra,28(sp)
1c007a2a:	4462                	lw	s0,24(sp)
1c007a2c:	6105                	addi	sp,sp,32
1c007a2e:	8082                	ret

1c007a30 <__pi_host_fs_copy_async>:
{
1c007a30:	1101                	addi	sp,sp,-32
1c007a32:	cc22                	sw	s0,24(sp)
1c007a34:	ca26                	sw	s1,20(sp)
  if (__pi_host_fs_seek(arg, index))
1c007a36:	c636                	sw	a3,12(sp)
{
1c007a38:	84b2                	mv	s1,a2
  if (__pi_host_fs_seek(arg, index))
1c007a3a:	c43a                	sw	a4,8(sp)
{
1c007a3c:	ce06                	sw	ra,28(sp)
1c007a3e:	842a                	mv	s0,a0
  if (__pi_host_fs_seek(arg, index))
1c007a40:	c23e                	sw	a5,4(sp)
1c007a42:	3f39                	jal	1c007960 <__pi_host_fs_seek>
1c007a44:	4632                	lw	a2,12(sp)
1c007a46:	4692                	lw	a3,4(sp)
1c007a48:	4722                	lw	a4,8(sp)
1c007a4a:	ed11                	bnez	a0,1c007a66 <__pi_host_fs_copy_async+0x36>
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c007a4c:	85a6                	mv	a1,s1
1c007a4e:	8522                	mv	a0,s0
  if (ext2loc)
1c007a50:	c711                	beqz	a4,1c007a5c <__pi_host_fs_copy_async+0x2c>
}
1c007a52:	4462                	lw	s0,24(sp)
1c007a54:	40f2                	lw	ra,28(sp)
1c007a56:	44d2                	lw	s1,20(sp)
1c007a58:	6105                	addi	sp,sp,32
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c007a5a:	bf4d                	j	1c007a0c <__pi_host_fs_read_async>
}
1c007a5c:	4462                	lw	s0,24(sp)
1c007a5e:	40f2                	lw	ra,28(sp)
1c007a60:	44d2                	lw	s1,20(sp)
1c007a62:	6105                	addi	sp,sp,32
    return __pi_host_fs_write_async(arg, buffer, size, task);
1c007a64:	b741                	j	1c0079e4 <__pi_host_fs_write_async>
}
1c007a66:	40f2                	lw	ra,28(sp)
1c007a68:	4462                	lw	s0,24(sp)
1c007a6a:	44d2                	lw	s1,20(sp)
1c007a6c:	557d                	li	a0,-1
1c007a6e:	6105                	addi	sp,sp,32
1c007a70:	8082                	ret

1c007a72 <__pi_host_fs_direct_read_async>:
1c007a72:	bf69                	j	1c007a0c <__pi_host_fs_read_async>

1c007a74 <__pi_host_fs_close>:
{
1c007a74:	1141                	addi	sp,sp,-16
1c007a76:	c422                	sw	s0,8(sp)
1c007a78:	842a                	mv	s0,a0
  semihost_close(file->fd);
1c007a7a:	4948                	lw	a0,20(a0)
{
1c007a7c:	c606                	sw	ra,12(sp)
  semihost_close(file->fd);
1c007a7e:	35f010ef          	jal	ra,1c0095dc <semihost_close>
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c007a82:	8522                	mv	a0,s0
}
1c007a84:	4422                	lw	s0,8(sp)
1c007a86:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c007a88:	45e1                	li	a1,24
}
1c007a8a:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c007a8c:	7200206f          	j	1c00a1ac <pi_l2_free>

1c007a90 <__pi_host_fs_open>:
{
1c007a90:	1101                	addi	sp,sp,-32
1c007a92:	ca26                	sw	s1,20(sp)
1c007a94:	84aa                	mv	s1,a0
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c007a96:	4561                	li	a0,24
{
1c007a98:	c84a                	sw	s2,16(sp)
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c007a9a:	c632                	sw	a2,12(sp)
{
1c007a9c:	ce06                	sw	ra,28(sp)
1c007a9e:	cc22                	sw	s0,24(sp)
1c007aa0:	892e                	mv	s2,a1
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c007aa2:	6fc020ef          	jal	ra,1c00a19e <pi_l2_malloc>
  if (file == NULL) goto error;
1c007aa6:	4632                	lw	a2,12(sp)
1c007aa8:	e909                	bnez	a0,1c007aba <__pi_host_fs_open+0x2a>
  return NULL;
1c007aaa:	4401                	li	s0,0
}
1c007aac:	8522                	mv	a0,s0
1c007aae:	40f2                	lw	ra,28(sp)
1c007ab0:	4462                	lw	s0,24(sp)
1c007ab2:	44d2                	lw	s1,20(sp)
1c007ab4:	4942                	lw	s2,16(sp)
1c007ab6:	6105                	addi	sp,sp,32
1c007ab8:	8082                	ret
  file->header.fs = device;
1c007aba:	c104                	sw	s1,0(a0)
1c007abc:	842a                	mv	s0,a0
  file->fd = semihost_open(file_name, flags == PI_FS_FLAGS_WRITE ? 6 : flags == PI_FS_FLAGS_APPEND ? 8 : 0);
1c007abe:	4599                	li	a1,6
1c007ac0:	00162663          	p.beqimm	a2,1,1c007acc <__pi_host_fs_open+0x3c>
1c007ac4:	45a1                	li	a1,8
1c007ac6:	00262363          	p.beqimm	a2,2,1c007acc <__pi_host_fs_open+0x3c>
1c007aca:	4581                	li	a1,0
1c007acc:	854a                	mv	a0,s2
1c007ace:	2e5010ef          	jal	ra,1c0095b2 <semihost_open>
1c007ad2:	c848                	sw	a0,20(s0)
  if (file->fd == -1)
1c007ad4:	fdf52be3          	p.beqimm	a0,-1,1c007aaa <__pi_host_fs_open+0x1a>
  file->header.api = (pi_fs_api_t *)device->api;
1c007ad8:	409c                	lw	a5,0(s1)
  file->header.data = file;
1c007ada:	c400                	sw	s0,8(s0)
  file->header.fs = device;
1c007adc:	c004                	sw	s1,0(s0)
  file->header.api = (pi_fs_api_t *)device->api;
1c007ade:	c05c                	sw	a5,4(s0)
  file->header.fs_data = &bsp_fs_data;
1c007ae0:	1c00e7b7          	lui	a5,0x1c00e
1c007ae4:	fa078793          	addi	a5,a5,-96 # 1c00dfa0 <bsp_fs_data>
1c007ae8:	c81c                	sw	a5,16(s0)
  return (pi_fs_file_t *)file;
1c007aea:	b7c9                	j	1c007aac <__pi_host_fs_open+0x1c>

1c007aec <__rt_event_enqueue>:
  if (sched->first) {
1c007aec:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c007af0:	00052023          	sw	zero,0(a0)
1c007af4:	01c00713          	li	a4,28
  if (sched->first) {
1c007af8:	c689                	beqz	a3,1c007b02 <__rt_event_enqueue+0x16>
    sched->last->next = event;
1c007afa:	435c                	lw	a5,4(a4)
1c007afc:	c388                	sw	a0,0(a5)
  sched->last = event;
1c007afe:	c348                	sw	a0,4(a4)
}
1c007b00:	8082                	ret
    sched->first = event;
1c007b02:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c007b06:	bfe5                	j	1c007afe <__rt_event_enqueue+0x12>

1c007b08 <hyperflash_ioctl>:



static int32_t hyperflash_ioctl(struct pi_device *device, uint32_t cmd, void *arg)
{
  switch (cmd)
1c007b08:	e589                	bnez	a1,1c007b12 <hyperflash_ioctl+0xa>
  {
    case PI_FLASH_IOCTL_INFO:
    {
      struct pi_flash_info *flash_info = (struct pi_flash_info *)arg;
      flash_info->sector_size = 1<<18;
1c007b0a:	000407b7          	lui	a5,0x40
1c007b0e:	c21c                	sw	a5,0(a2)
      // TODO find a way to know what is on the flash, as they may be a boot binary
      flash_info->flash_start = flash_info->sector_size;
1c007b10:	c25c                	sw	a5,4(a2)
    }
  }
  return 0;
}
1c007b12:	4501                	li	a0,0
1c007b14:	8082                	ret

1c007b16 <hyperflash_stall_task>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007b16:	30047373          	csrrci	t1,mstatus,8

    restore_irq(irq);
    return 1;
  }
#else
  if (hyperflash->pending_task != NULL)
1c007b1a:	01852e03          	lw	t3,24(a0)
1c007b1e:	020e0763          	beqz	t3,1c007b4c <hyperflash_stall_task+0x36>
  {
    task->implem.data[0] = id;
1c007b22:	dd90                	sw	a2,56(a1)
    task->implem.data[1] = arg0;
1c007b24:	ddd4                	sw	a3,60(a1)
    task->implem.data[2] = arg1;
1c007b26:	c1b8                	sw	a4,64(a1)
    task->implem.data[3] = arg2;
1c007b28:	c1fc                	sw	a5,68(a1)
    task->implem.data[4] = arg3;
1c007b2a:	0505a423          	sw	a6,72(a1)
    task->implem.data[5] = arg4;
1c007b2e:	0515a623          	sw	a7,76(a1)

    if (hyperflash->waiting_first)
1c007b32:	491c                	lw	a5,16(a0)
1c007b34:	cb91                	beqz	a5,1c007b48 <hyperflash_stall_task+0x32>
      hyperflash->waiting_last->implem.next = task;
1c007b36:	495c                	lw	a5,20(a0)
1c007b38:	cfcc                	sw	a1,28(a5)
    else
      hyperflash->waiting_first = task;

    hyperflash->waiting_last = task;
1c007b3a:	c94c                	sw	a1,20(a0)
    task->implem.next = NULL;
1c007b3c:	0005ae23          	sw	zero,28(a1)
  __builtin_pulp_spr_write(reg, val);
1c007b40:	30031073          	csrw	mstatus,t1

    restore_irq(irq);
    return 1;
1c007b44:	4505                	li	a0,1
1c007b46:	8082                	ret
      hyperflash->waiting_first = task;
1c007b48:	c90c                	sw	a1,16(a0)
1c007b4a:	bfc5                	j	1c007b3a <hyperflash_stall_task+0x24>
  }
#endif  /* PMSIS_DRIVERS */

  hyperflash->pending_task = task;
1c007b4c:	cd0c                	sw	a1,24(a0)
1c007b4e:	30031073          	csrw	mstatus,t1

  restore_irq(irq);
  return 0;
1c007b52:	4501                	li	a0,0
}
1c007b54:	8082                	ret

1c007b56 <hyperflash_read_2d_async>:
{
1c007b56:	1101                	addi	sp,sp,-32
1c007b58:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c007b5a:	4500                	lw	s0,8(a0)
{
1c007b5c:	ca26                	sw	s1,20(sp)
1c007b5e:	84ae                	mv	s1,a1
1c007b60:	c84a                	sw	s2,16(sp)
1c007b62:	c64e                	sw	s3,12(sp)
1c007b64:	c452                	sw	s4,8(sp)
1c007b66:	c256                	sw	s5,4(sp)
1c007b68:	c05a                	sw	s6,0(sp)
1c007b6a:	8932                	mv	s2,a2
1c007b6c:	8b2a                	mv	s6,a0
1c007b6e:	89b6                	mv	s3,a3
1c007b70:	8a3a                	mv	s4,a4
1c007b72:	8abe                	mv	s5,a5
1c007b74:	85c2                	mv	a1,a6
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c007b76:	88be                	mv	a7,a5
1c007b78:	883a                	mv	a6,a4
1c007b7a:	87b6                	mv	a5,a3
1c007b7c:	8732                	mv	a4,a2
1c007b7e:	86a6                	mv	a3,s1
1c007b80:	4619                	li	a2,6
1c007b82:	8522                	mv	a0,s0
{
1c007b84:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c007b86:	3f41                	jal	1c007b16 <hyperflash_stall_task>
1c007b88:	e129                	bnez	a0,1c007bca <hyperflash_read_2d_async+0x74>
  task->arg[0] = (uint32_t)callback;
1c007b8a:	1c0087b7          	lui	a5,0x1c008
1c007b8e:	dce78793          	addi	a5,a5,-562 # 1c007dce <hyperflash_handle_pending_task>
  task->done = 0;
1c007b92:	02040e23          	sb	zero,60(s0)
1c007b96:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c007b98:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c007b9a:	03642823          	sw	s6,48(s0)
  task->implem.keep = 1;
1c007b9e:	c83c                	sw	a5,80(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c007ba0:	04042023          	sw	zero,64(s0)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c007ba4:	02840813          	addi	a6,s0,40
1c007ba8:	8522                	mv	a0,s0
}
1c007baa:	4462                	lw	s0,24(sp)
1c007bac:	40f2                	lw	ra,28(sp)
1c007bae:	4b02                	lw	s6,0(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c007bb0:	87d6                	mv	a5,s5
1c007bb2:	8752                	mv	a4,s4
}
1c007bb4:	4a92                	lw	s5,4(sp)
1c007bb6:	4a22                	lw	s4,8(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c007bb8:	86ce                	mv	a3,s3
1c007bba:	864a                	mv	a2,s2
}
1c007bbc:	49b2                	lw	s3,12(sp)
1c007bbe:	4942                	lw	s2,16(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c007bc0:	85a6                	mv	a1,s1
}
1c007bc2:	44d2                	lw	s1,20(sp)
1c007bc4:	6105                	addi	sp,sp,32
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c007bc6:	5290306f          	j	1c00b8ee <pi_hyper_read_2d_async>
}
1c007bca:	40f2                	lw	ra,28(sp)
1c007bcc:	4462                	lw	s0,24(sp)
1c007bce:	44d2                	lw	s1,20(sp)
1c007bd0:	4942                	lw	s2,16(sp)
1c007bd2:	49b2                	lw	s3,12(sp)
1c007bd4:	4a22                	lw	s4,8(sp)
1c007bd6:	4a92                	lw	s5,4(sp)
1c007bd8:	4b02                	lw	s6,0(sp)
1c007bda:	6105                	addi	sp,sp,32
1c007bdc:	8082                	ret

1c007bde <hyperflash_copy_2d_async>:



static int hyperflash_copy_2d_async(struct pi_device *device, uint32_t flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  if (!ext2loc)
1c007bde:	00080a63          	beqz	a6,1c007bf2 <hyperflash_copy_2d_async+0x14>
{
1c007be2:	1141                	addi	sp,sp,-16
1c007be4:	8846                	mv	a6,a7
1c007be6:	c606                	sw	ra,12(sp)
    return -1;

  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c007be8:	37bd                	jal	1c007b56 <hyperflash_read_2d_async>

  return 0;
}
1c007bea:	40b2                	lw	ra,12(sp)
  return 0;
1c007bec:	4501                	li	a0,0
}
1c007bee:	0141                	addi	sp,sp,16
1c007bf0:	8082                	ret
    return -1;
1c007bf2:	557d                	li	a0,-1
}
1c007bf4:	8082                	ret

1c007bf6 <hyperflash_set_reg_exec>:
  hyperflash->udma_buffer[0] = value;
1c007bf6:	00c51623          	sh	a2,12(a0)
  pi_hyper_write(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 2);
1c007bfa:	4689                	li	a3,2
1c007bfc:	00c50613          	addi	a2,a0,12
1c007c00:	1470306f          	j	1c00b546 <pi_hyper_write>

1c007c04 <hyperflash_erase_sector_async>:
{
1c007c04:	1101                	addi	sp,sp,-32
1c007c06:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c007c08:	4500                	lw	s0,8(a0)
{
1c007c0a:	c64e                	sw	s3,12(sp)
1c007c0c:	89ae                	mv	s3,a1
1c007c0e:	c84a                	sw	s2,16(sp)
1c007c10:	85b2                	mv	a1,a2
1c007c12:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c007c14:	4881                	li	a7,0
1c007c16:	4801                	li	a6,0
1c007c18:	4781                	li	a5,0
1c007c1a:	4701                	li	a4,0
1c007c1c:	86ce                	mv	a3,s3
1c007c1e:	4609                	li	a2,2
1c007c20:	8522                	mv	a0,s0
{
1c007c22:	ce06                	sw	ra,28(sp)
1c007c24:	ca26                	sw	s1,20(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c007c26:	3dc5                	jal	1c007b16 <hyperflash_stall_task>
1c007c28:	ed3d                	bnez	a0,1c007ca6 <hyperflash_erase_sector_async+0xa2>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c007c2a:	6485                	lui	s1,0x1
1c007c2c:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c007c30:	8522                	mv	a0,s0
1c007c32:	0aa00613          	li	a2,170
1c007c36:	37c1                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c007c38:	8522                	mv	a0,s0
1c007c3a:	05500613          	li	a2,85
1c007c3e:	55400593          	li	a1,1364
1c007c42:	3f55                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c007c44:	aaa48593          	addi	a1,s1,-1366
1c007c48:	8522                	mv	a0,s0
1c007c4a:	08000613          	li	a2,128
1c007c4e:	3765                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c007c50:	aaa48593          	addi	a1,s1,-1366
1c007c54:	8522                	mv	a0,s0
1c007c56:	0aa00613          	li	a2,170
1c007c5a:	3f71                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c007c5c:	8522                	mv	a0,s0
1c007c5e:	05500613          	li	a2,85
1c007c62:	55400593          	li	a1,1364
1c007c66:	3f41                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, addr, 0x30);
1c007c68:	85ce                	mv	a1,s3
1c007c6a:	8522                	mv	a0,s0
1c007c6c:	03000613          	li	a2,48
1c007c70:	3759                	jal	1c007bf6 <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c007c72:	1c0087b7          	lui	a5,0x1c008
1c007c76:	3e678793          	addi	a5,a5,998 # 1c0083e6 <hyperflash_check_erase>
1c007c7a:	02040e23          	sb	zero,60(s0)
1c007c7e:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c007c80:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c007c82:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c007c86:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c007c8a:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c007c8c:	02840513          	addi	a0,s0,40
}
1c007c90:	4462                	lw	s0,24(sp)
1c007c92:	40f2                	lw	ra,28(sp)
1c007c94:	44d2                	lw	s1,20(sp)
1c007c96:	4942                	lw	s2,16(sp)
1c007c98:	49b2                	lw	s3,12(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c007c9a:	6589                	lui	a1,0x2
1c007c9c:	71058593          	addi	a1,a1,1808 # 2710 <__rt_stack_size+0x1f10>
}
1c007ca0:	6105                	addi	sp,sp,32
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c007ca2:	30e0206f          	j	1c009fb0 <pi_task_push_delayed_us>
}
1c007ca6:	40f2                	lw	ra,28(sp)
1c007ca8:	4462                	lw	s0,24(sp)
1c007caa:	44d2                	lw	s1,20(sp)
1c007cac:	4942                	lw	s2,16(sp)
1c007cae:	49b2                	lw	s3,12(sp)
1c007cb0:	6105                	addi	sp,sp,32
1c007cb2:	8082                	ret

1c007cb4 <hyperflash_erase_chip_async>:
{
1c007cb4:	1141                	addi	sp,sp,-16
1c007cb6:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c007cb8:	4500                	lw	s0,8(a0)
{
1c007cba:	c04a                	sw	s2,0(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c007cbc:	4881                	li	a7,0
{
1c007cbe:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c007cc0:	4801                	li	a6,0
1c007cc2:	4781                	li	a5,0
1c007cc4:	4701                	li	a4,0
1c007cc6:	4681                	li	a3,0
1c007cc8:	4605                	li	a2,1
1c007cca:	8522                	mv	a0,s0
{
1c007ccc:	c606                	sw	ra,12(sp)
1c007cce:	c226                	sw	s1,4(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c007cd0:	3599                	jal	1c007b16 <hyperflash_stall_task>
1c007cd2:	ed35                	bnez	a0,1c007d4e <hyperflash_erase_chip_async+0x9a>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c007cd4:	6485                	lui	s1,0x1
1c007cd6:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c007cda:	8522                	mv	a0,s0
1c007cdc:	0aa00613          	li	a2,170
1c007ce0:	3f19                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c007ce2:	8522                	mv	a0,s0
1c007ce4:	05500613          	li	a2,85
1c007ce8:	55400593          	li	a1,1364
1c007cec:	3729                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c007cee:	aaa48593          	addi	a1,s1,-1366
1c007cf2:	8522                	mv	a0,s0
1c007cf4:	08000613          	li	a2,128
1c007cf8:	3dfd                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c007cfa:	aaa48593          	addi	a1,s1,-1366
1c007cfe:	8522                	mv	a0,s0
1c007d00:	0aa00613          	li	a2,170
1c007d04:	3dcd                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c007d06:	8522                	mv	a0,s0
1c007d08:	05500613          	li	a2,85
1c007d0c:	55400593          	li	a1,1364
1c007d10:	35dd                	jal	1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x10);
1c007d12:	aaa48593          	addi	a1,s1,-1366
1c007d16:	8522                	mv	a0,s0
1c007d18:	4641                	li	a2,16
1c007d1a:	3df1                	jal	1c007bf6 <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c007d1c:	1c0087b7          	lui	a5,0x1c008
1c007d20:	3e678793          	addi	a5,a5,998 # 1c0083e6 <hyperflash_check_erase>
1c007d24:	02040e23          	sb	zero,60(s0)
1c007d28:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c007d2a:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c007d2c:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c007d30:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c007d34:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c007d36:	02840513          	addi	a0,s0,40
}
1c007d3a:	4422                	lw	s0,8(sp)
1c007d3c:	40b2                	lw	ra,12(sp)
1c007d3e:	4492                	lw	s1,4(sp)
1c007d40:	4902                	lw	s2,0(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c007d42:	65e1                	lui	a1,0x18
1c007d44:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c007d48:	0141                	addi	sp,sp,16
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c007d4a:	2660206f          	j	1c009fb0 <pi_task_push_delayed_us>
}
1c007d4e:	40b2                	lw	ra,12(sp)
1c007d50:	4422                	lw	s0,8(sp)
1c007d52:	4492                	lw	s1,4(sp)
1c007d54:	4902                	lw	s2,0(sp)
1c007d56:	0141                	addi	sp,sp,16
1c007d58:	8082                	ret

1c007d5a <hyperflash_read_async>:
{
1c007d5a:	1101                	addi	sp,sp,-32
1c007d5c:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c007d5e:	4500                	lw	s0,8(a0)
{
1c007d60:	ca26                	sw	s1,20(sp)
1c007d62:	84ae                	mv	s1,a1
1c007d64:	c84a                	sw	s2,16(sp)
1c007d66:	c64e                	sw	s3,12(sp)
1c007d68:	c452                	sw	s4,8(sp)
1c007d6a:	8932                	mv	s2,a2
1c007d6c:	8a2a                	mv	s4,a0
1c007d6e:	89b6                	mv	s3,a3
1c007d70:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c007d72:	87b6                	mv	a5,a3
1c007d74:	8732                	mv	a4,a2
1c007d76:	4881                	li	a7,0
1c007d78:	4801                	li	a6,0
1c007d7a:	86a6                	mv	a3,s1
1c007d7c:	4615                	li	a2,5
1c007d7e:	8522                	mv	a0,s0
{
1c007d80:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c007d82:	3b51                	jal	1c007b16 <hyperflash_stall_task>
1c007d84:	ed0d                	bnez	a0,1c007dbe <hyperflash_read_async+0x64>
  task->arg[0] = (uint32_t)callback;
1c007d86:	1c0087b7          	lui	a5,0x1c008
1c007d8a:	dce78793          	addi	a5,a5,-562 # 1c007dce <hyperflash_handle_pending_task>
1c007d8e:	02040e23          	sb	zero,60(s0)
1c007d92:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c007d94:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c007d96:	03442823          	sw	s4,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c007d9a:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c007d9e:	c83c                	sw	a5,80(s0)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c007da0:	02840713          	addi	a4,s0,40
1c007da4:	8522                	mv	a0,s0
}
1c007da6:	4462                	lw	s0,24(sp)
1c007da8:	40f2                	lw	ra,28(sp)
1c007daa:	4a22                	lw	s4,8(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c007dac:	86ce                	mv	a3,s3
1c007dae:	864a                	mv	a2,s2
}
1c007db0:	49b2                	lw	s3,12(sp)
1c007db2:	4942                	lw	s2,16(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c007db4:	85a6                	mv	a1,s1
}
1c007db6:	44d2                	lw	s1,20(sp)
1c007db8:	6105                	addi	sp,sp,32
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c007dba:	73c0306f          	j	1c00b4f6 <pi_hyper_read_async>
}
1c007dbe:	40f2                	lw	ra,28(sp)
1c007dc0:	4462                	lw	s0,24(sp)
1c007dc2:	44d2                	lw	s1,20(sp)
1c007dc4:	4942                	lw	s2,16(sp)
1c007dc6:	49b2                	lw	s3,12(sp)
1c007dc8:	4a22                	lw	s4,8(sp)
1c007dca:	6105                	addi	sp,sp,32
1c007dcc:	8082                	ret

1c007dce <hyperflash_handle_pending_task>:
{
1c007dce:	1101                	addi	sp,sp,-32
1c007dd0:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c007dd2:	4504                	lw	s1,8(a0)
{
1c007dd4:	cc22                	sw	s0,24(sp)
1c007dd6:	842a                	mv	s0,a0
1c007dd8:	ce06                	sw	ra,28(sp)
1c007dda:	c84a                	sw	s2,16(sp)
1c007ddc:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007dde:	30047973          	csrrci	s2,mstatus,8
  pi_task_enqueue(hyperflash->pending_task);
1c007de2:	4c88                	lw	a0,24(s1)
1c007de4:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c007de8:	d05ff0ef          	jal	ra,1c007aec <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c007dec:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->waiting_first;
1c007df0:	4898                	lw	a4,16(s1)
  hyperflash->pending_task = NULL;
1c007df2:	0004ac23          	sw	zero,24(s1)
  if (task)
1c007df6:	c319                	beqz	a4,1c007dfc <hyperflash_handle_pending_task+0x2e>
    hyperflash->waiting_first = task->implem.next;
1c007df8:	4f5c                	lw	a5,28(a4)
1c007dfa:	c89c                	sw	a5,16(s1)
1c007dfc:	30091073          	csrw	mstatus,s2
  if (task)
1c007e00:	c361                	beqz	a4,1c007ec0 <hyperflash_handle_pending_task+0xf2>
    if (task->implem.data[0] == STALL_TASK_PROGRAM)
1c007e02:	5f1c                	lw	a5,56(a4)
1c007e04:	ef81                	bnez	a5,1c007e1c <hyperflash_handle_pending_task+0x4e>
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c007e06:	8522                	mv	a0,s0
}
1c007e08:	4462                	lw	s0,24(sp)
1c007e0a:	40f2                	lw	ra,28(sp)
1c007e0c:	44d2                	lw	s1,20(sp)
1c007e0e:	4942                	lw	s2,16(sp)
1c007e10:	49b2                	lw	s3,12(sp)
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c007e12:	4374                	lw	a3,68(a4)
1c007e14:	4330                	lw	a2,64(a4)
1c007e16:	5f4c                	lw	a1,60(a4)
}
1c007e18:	6105                	addi	sp,sp,32
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c007e1a:	ac19                	j	1c008030 <hyperflash_program_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_CHIP)
1c007e1c:	0017bb63          	p.bneimm	a5,1,1c007e32 <hyperflash_handle_pending_task+0x64>
      hyperflash_erase_chip_async(device, task);
1c007e20:	8522                	mv	a0,s0
}
1c007e22:	4462                	lw	s0,24(sp)
1c007e24:	40f2                	lw	ra,28(sp)
1c007e26:	44d2                	lw	s1,20(sp)
1c007e28:	4942                	lw	s2,16(sp)
1c007e2a:	49b2                	lw	s3,12(sp)
      hyperflash_erase_chip_async(device, task);
1c007e2c:	85ba                	mv	a1,a4
}
1c007e2e:	6105                	addi	sp,sp,32
      hyperflash_erase_chip_async(device, task);
1c007e30:	b551                	j	1c007cb4 <hyperflash_erase_chip_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_SECTOR)
1c007e32:	0027bc63          	p.bneimm	a5,2,1c007e4a <hyperflash_handle_pending_task+0x7c>
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c007e36:	8522                	mv	a0,s0
}
1c007e38:	4462                	lw	s0,24(sp)
1c007e3a:	40f2                	lw	ra,28(sp)
1c007e3c:	44d2                	lw	s1,20(sp)
1c007e3e:	4942                	lw	s2,16(sp)
1c007e40:	49b2                	lw	s3,12(sp)
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c007e42:	5f4c                	lw	a1,60(a4)
1c007e44:	863a                	mv	a2,a4
}
1c007e46:	6105                	addi	sp,sp,32
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c007e48:	bb75                	j	1c007c04 <hyperflash_erase_sector_async>
    else if (task->implem.data[0] == STALL_TASK_REG_SET)
1c007e4a:	0037bd63          	p.bneimm	a5,3,1c007e64 <hyperflash_handle_pending_task+0x96>
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c007e4e:	8522                	mv	a0,s0
}
1c007e50:	4462                	lw	s0,24(sp)
1c007e52:	40f2                	lw	ra,28(sp)
1c007e54:	44d2                	lw	s1,20(sp)
1c007e56:	4942                	lw	s2,16(sp)
1c007e58:	49b2                	lw	s3,12(sp)
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c007e5a:	4330                	lw	a2,64(a4)
1c007e5c:	5f4c                	lw	a1,60(a4)
1c007e5e:	86ba                	mv	a3,a4
}
1c007e60:	6105                	addi	sp,sp,32
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c007e62:	a0e9                	j	1c007f2c <hyperflash_reg_set_async>
    else if (task->implem.data[0] == STALL_TASK_REG_GET)
1c007e64:	0047bd63          	p.bneimm	a5,4,1c007e7e <hyperflash_handle_pending_task+0xb0>
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c007e68:	8522                	mv	a0,s0
}
1c007e6a:	4462                	lw	s0,24(sp)
1c007e6c:	40f2                	lw	ra,28(sp)
1c007e6e:	44d2                	lw	s1,20(sp)
1c007e70:	4942                	lw	s2,16(sp)
1c007e72:	49b2                	lw	s3,12(sp)
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c007e74:	4330                	lw	a2,64(a4)
1c007e76:	5f4c                	lw	a1,60(a4)
1c007e78:	86ba                	mv	a3,a4
}
1c007e7a:	6105                	addi	sp,sp,32
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c007e7c:	a889                	j	1c007ece <hyperflash_reg_get_async>
    else if (task->implem.data[0] == STALL_TASK_READ)
1c007e7e:	0057bd63          	p.bneimm	a5,5,1c007e98 <hyperflash_handle_pending_task+0xca>
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c007e82:	8522                	mv	a0,s0
}
1c007e84:	4462                	lw	s0,24(sp)
1c007e86:	40f2                	lw	ra,28(sp)
1c007e88:	44d2                	lw	s1,20(sp)
1c007e8a:	4942                	lw	s2,16(sp)
1c007e8c:	49b2                	lw	s3,12(sp)
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c007e8e:	4374                	lw	a3,68(a4)
1c007e90:	4330                	lw	a2,64(a4)
1c007e92:	5f4c                	lw	a1,60(a4)
}
1c007e94:	6105                	addi	sp,sp,32
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c007e96:	b5d1                	j	1c007d5a <hyperflash_read_async>
    else if (task->implem.data[0] == STALL_TASK_READ_2D)
1c007e98:	0267b463          	p.bneimm	a5,6,1c007ec0 <hyperflash_handle_pending_task+0xf2>
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c007e9c:	883a                	mv	a6,a4
1c007e9e:	8522                	mv	a0,s0
}
1c007ea0:	4462                	lw	s0,24(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c007ea2:	477c                	lw	a5,76(a4)
}
1c007ea4:	40f2                	lw	ra,28(sp)
1c007ea6:	44d2                	lw	s1,20(sp)
1c007ea8:	4942                	lw	s2,16(sp)
1c007eaa:	49b2                	lw	s3,12(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c007eac:	4738                	lw	a4,72(a4)
1c007eae:	04482683          	lw	a3,68(a6)
1c007eb2:	04082603          	lw	a2,64(a6)
1c007eb6:	03c82583          	lw	a1,60(a6)
}
1c007eba:	6105                	addi	sp,sp,32
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c007ebc:	c9bff06f          	j	1c007b56 <hyperflash_read_2d_async>
}
1c007ec0:	40f2                	lw	ra,28(sp)
1c007ec2:	4462                	lw	s0,24(sp)
1c007ec4:	44d2                	lw	s1,20(sp)
1c007ec6:	4942                	lw	s2,16(sp)
1c007ec8:	49b2                	lw	s3,12(sp)
1c007eca:	6105                	addi	sp,sp,32
1c007ecc:	8082                	ret

1c007ece <hyperflash_reg_get_async>:
{
1c007ece:	1101                	addi	sp,sp,-32
1c007ed0:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c007ed2:	4500                	lw	s0,8(a0)
{
1c007ed4:	c64e                	sw	s3,12(sp)
1c007ed6:	89ae                	mv	s3,a1
1c007ed8:	ca26                	sw	s1,20(sp)
1c007eda:	c84a                	sw	s2,16(sp)
1c007edc:	84aa                	mv	s1,a0
1c007ede:	8932                	mv	s2,a2
1c007ee0:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c007ee2:	8732                	mv	a4,a2
1c007ee4:	4881                	li	a7,0
1c007ee6:	4801                	li	a6,0
1c007ee8:	4781                	li	a5,0
1c007eea:	86ce                	mv	a3,s3
1c007eec:	4611                	li	a2,4
1c007eee:	8522                	mv	a0,s0
{
1c007ef0:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c007ef2:	c25ff0ef          	jal	ra,1c007b16 <hyperflash_stall_task>
1c007ef6:	e505                	bnez	a0,1c007f1e <hyperflash_reg_get_async+0x50>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c007ef8:	8522                	mv	a0,s0
1c007efa:	00c40613          	addi	a2,s0,12
1c007efe:	85ce                	mv	a1,s3
1c007f00:	4691                	li	a3,4
1c007f02:	60a030ef          	jal	ra,1c00b50c <pi_hyper_read>
  return hyperflash->udma_buffer[0];
1c007f06:	00c45783          	lhu	a5,12(s0)
}
1c007f0a:	4462                	lw	s0,24(sp)
1c007f0c:	40f2                	lw	ra,28(sp)
  *(uint16_t *)value = hyperflash_get_reg_exec(hyperflash, addr);
1c007f0e:	00f91023          	sh	a5,0(s2)
}
1c007f12:	49b2                	lw	s3,12(sp)
1c007f14:	4942                	lw	s2,16(sp)
  hyperflash_handle_pending_task(device);
1c007f16:	8526                	mv	a0,s1
}
1c007f18:	44d2                	lw	s1,20(sp)
1c007f1a:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c007f1c:	bd4d                	j	1c007dce <hyperflash_handle_pending_task>
}
1c007f1e:	40f2                	lw	ra,28(sp)
1c007f20:	4462                	lw	s0,24(sp)
1c007f22:	44d2                	lw	s1,20(sp)
1c007f24:	4942                	lw	s2,16(sp)
1c007f26:	49b2                	lw	s3,12(sp)
1c007f28:	6105                	addi	sp,sp,32
1c007f2a:	8082                	ret

1c007f2c <hyperflash_reg_set_async>:
{
1c007f2c:	1101                	addi	sp,sp,-32
1c007f2e:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c007f30:	4504                	lw	s1,8(a0)
{
1c007f32:	c84a                	sw	s2,16(sp)
1c007f34:	892e                	mv	s2,a1
1c007f36:	cc22                	sw	s0,24(sp)
1c007f38:	c64e                	sw	s3,12(sp)
1c007f3a:	842a                	mv	s0,a0
1c007f3c:	89b2                	mv	s3,a2
1c007f3e:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c007f40:	8732                	mv	a4,a2
1c007f42:	4881                	li	a7,0
1c007f44:	4801                	li	a6,0
1c007f46:	4781                	li	a5,0
1c007f48:	86ca                	mv	a3,s2
1c007f4a:	460d                	li	a2,3
1c007f4c:	8526                	mv	a0,s1
{
1c007f4e:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c007f50:	bc7ff0ef          	jal	ra,1c007b16 <hyperflash_stall_task>
1c007f54:	ed19                	bnez	a0,1c007f72 <hyperflash_reg_set_async+0x46>
  hyperflash_set_reg_exec(hyperflash, addr, *(uint16_t *)value);
1c007f56:	0009d603          	lhu	a2,0(s3)
1c007f5a:	8526                	mv	a0,s1
1c007f5c:	85ca                	mv	a1,s2
1c007f5e:	c99ff0ef          	jal	ra,1c007bf6 <hyperflash_set_reg_exec>
  hyperflash_handle_pending_task(device);
1c007f62:	8522                	mv	a0,s0
}
1c007f64:	4462                	lw	s0,24(sp)
1c007f66:	40f2                	lw	ra,28(sp)
1c007f68:	44d2                	lw	s1,20(sp)
1c007f6a:	4942                	lw	s2,16(sp)
1c007f6c:	49b2                	lw	s3,12(sp)
1c007f6e:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c007f70:	bdb9                	j	1c007dce <hyperflash_handle_pending_task>
}
1c007f72:	40f2                	lw	ra,28(sp)
1c007f74:	4462                	lw	s0,24(sp)
1c007f76:	44d2                	lw	s1,20(sp)
1c007f78:	4942                	lw	s2,16(sp)
1c007f7a:	49b2                	lw	s3,12(sp)
1c007f7c:	6105                	addi	sp,sp,32
1c007f7e:	8082                	ret

1c007f80 <hyperflash_program_resume>:
{
1c007f80:	1101                	addi	sp,sp,-32
1c007f82:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c007f84:	4500                	lw	s0,8(a0)
{
1c007f86:	ce06                	sw	ra,28(sp)
1c007f88:	ca26                	sw	s1,20(sp)
  if (hyperflash->pending_size == 0)
1c007f8a:	13042683          	lw	a3,304(s0)
{
1c007f8e:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_size == 0)
1c007f90:	e699                	bnez	a3,1c007f9e <hyperflash_program_resume+0x1e>
}
1c007f92:	4462                	lw	s0,24(sp)
1c007f94:	40f2                	lw	ra,28(sp)
1c007f96:	44d2                	lw	s1,20(sp)
1c007f98:	4942                	lw	s2,16(sp)
1c007f9a:	6105                	addi	sp,sp,32
    hyperflash_handle_pending_task(device);
1c007f9c:	bd0d                	j	1c007dce <hyperflash_handle_pending_task>
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c007f9e:	12842783          	lw	a5,296(s0)
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c007fa2:	6905                	lui	s2,0x1
1c007fa4:	84aa                	mv	s1,a0
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c007fa6:	ec97b733          	p.bclr	a4,a5,22,9
1c007faa:	20000793          	li	a5,512
1c007fae:	8f99                	sub	a5,a5,a4
1c007fb0:	04f6d6b3          	p.minu	a3,a3,a5
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c007fb4:	aaa90593          	addi	a1,s2,-1366 # aaa <__rt_stack_size+0x2aa>
1c007fb8:	8522                	mv	a0,s0
1c007fba:	0aa00613          	li	a2,170
1c007fbe:	c636                	sw	a3,12(sp)
1c007fc0:	c37ff0ef          	jal	ra,1c007bf6 <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c007fc4:	8522                	mv	a0,s0
1c007fc6:	05500613          	li	a2,85
1c007fca:	55400593          	li	a1,1364
1c007fce:	c29ff0ef          	jal	ra,1c007bf6 <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xA0);
1c007fd2:	aaa90593          	addi	a1,s2,-1366
1c007fd6:	8522                	mv	a0,s0
1c007fd8:	0a000613          	li	a2,160
1c007fdc:	c1bff0ef          	jal	ra,1c007bf6 <hyperflash_set_reg_exec>
    hyperflash->pending_hyper_addr += iter_size;
1c007fe0:	46b2                	lw	a3,12(sp)
    uint32_t hyper_addr = hyperflash->pending_hyper_addr;
1c007fe2:	12842583          	lw	a1,296(s0)
    uint32_t data = hyperflash->pending_data;
1c007fe6:	12c42603          	lw	a2,300(s0)
  task->done = 0;
1c007fea:	02040e23          	sb	zero,60(s0)
    hyperflash->pending_hyper_addr += iter_size;
1c007fee:	00d587b3          	add	a5,a1,a3
1c007ff2:	12f42423          	sw	a5,296(s0)
    hyperflash->pending_data += iter_size;
1c007ff6:	00d607b3          	add	a5,a2,a3
1c007ffa:	12f42623          	sw	a5,300(s0)
    hyperflash->pending_size -= iter_size;
1c007ffe:	13042783          	lw	a5,304(s0)
  task->arg[1] = (uint32_t)arg;
1c008002:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c008004:	04042023          	sw	zero,64(s0)
1c008008:	8f95                	sub	a5,a5,a3
1c00800a:	12f42823          	sw	a5,304(s0)
  task->arg[0] = (uint32_t)callback;
1c00800e:	1c0087b7          	lui	a5,0x1c008
1c008012:	43878793          	addi	a5,a5,1080 # 1c008438 <hyperflash_check_program>
1c008016:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c008018:	4785                	li	a5,1
1c00801a:	c83c                	sw	a5,80(s0)
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c00801c:	02840713          	addi	a4,s0,40
1c008020:	8522                	mv	a0,s0
}
1c008022:	4462                	lw	s0,24(sp)
1c008024:	40f2                	lw	ra,28(sp)
1c008026:	44d2                	lw	s1,20(sp)
1c008028:	4942                	lw	s2,16(sp)
1c00802a:	6105                	addi	sp,sp,32
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c00802c:	5020306f          	j	1c00b52e <pi_hyper_write_async>

1c008030 <hyperflash_program_async>:
{
1c008030:	1101                	addi	sp,sp,-32
1c008032:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008034:	4500                	lw	s0,8(a0)
{
1c008036:	c452                	sw	s4,8(sp)
1c008038:	8a2e                	mv	s4,a1
1c00803a:	ca26                	sw	s1,20(sp)
1c00803c:	c84a                	sw	s2,16(sp)
1c00803e:	c64e                	sw	s3,12(sp)
1c008040:	84aa                	mv	s1,a0
1c008042:	89b2                	mv	s3,a2
1c008044:	8936                	mv	s2,a3
1c008046:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c008048:	87b6                	mv	a5,a3
1c00804a:	8732                	mv	a4,a2
1c00804c:	4881                	li	a7,0
1c00804e:	4801                	li	a6,0
1c008050:	86d2                	mv	a3,s4
1c008052:	4601                	li	a2,0
1c008054:	8522                	mv	a0,s0
{
1c008056:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c008058:	abfff0ef          	jal	ra,1c007b16 <hyperflash_stall_task>
1c00805c:	e105                	bnez	a0,1c00807c <hyperflash_program_async+0x4c>
  hyperflash->pending_hyper_addr = hyper_addr;
1c00805e:	13442423          	sw	s4,296(s0)
  hyperflash->pending_data = (uint32_t)data;
1c008062:	13342623          	sw	s3,300(s0)
  hyperflash->pending_size = size;
1c008066:	13242823          	sw	s2,304(s0)
}
1c00806a:	4462                	lw	s0,24(sp)
1c00806c:	40f2                	lw	ra,28(sp)
1c00806e:	4942                	lw	s2,16(sp)
1c008070:	49b2                	lw	s3,12(sp)
1c008072:	4a22                	lw	s4,8(sp)
  hyperflash_program_resume(device);
1c008074:	8526                	mv	a0,s1
}
1c008076:	44d2                	lw	s1,20(sp)
1c008078:	6105                	addi	sp,sp,32
  hyperflash_program_resume(device);
1c00807a:	b719                	j	1c007f80 <hyperflash_program_resume>
}
1c00807c:	40f2                	lw	ra,28(sp)
1c00807e:	4462                	lw	s0,24(sp)
1c008080:	44d2                	lw	s1,20(sp)
1c008082:	4942                	lw	s2,16(sp)
1c008084:	49b2                	lw	s3,12(sp)
1c008086:	4a22                	lw	s4,8(sp)
1c008088:	6105                	addi	sp,sp,32
1c00808a:	8082                	ret

1c00808c <hyperflash_copy_async>:
{
1c00808c:	1141                	addi	sp,sp,-16
1c00808e:	c606                	sw	ra,12(sp)
  if (!ext2loc)
1c008090:	e719                	bnez	a4,1c00809e <hyperflash_copy_async+0x12>
    hyperflash_program_async(device, flash_addr, buffer, size, task);
1c008092:	873e                	mv	a4,a5
1c008094:	3f71                	jal	1c008030 <hyperflash_program_async>
}
1c008096:	40b2                	lw	ra,12(sp)
1c008098:	4501                	li	a0,0
1c00809a:	0141                	addi	sp,sp,16
1c00809c:	8082                	ret
    hyperflash_read_async(device, flash_addr, buffer, size, task);
1c00809e:	873e                	mv	a4,a5
1c0080a0:	cbbff0ef          	jal	ra,1c007d5a <hyperflash_read_async>
1c0080a4:	bfcd                	j	1c008096 <hyperflash_copy_async+0xa>

1c0080a6 <hyperflash_close>:
{
1c0080a6:	1141                	addi	sp,sp,-16
1c0080a8:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0080aa:	4500                	lw	s0,8(a0)
{
1c0080ac:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperflash->hyper_device);
1c0080ae:	8522                	mv	a0,s0
1c0080b0:	2b0030ef          	jal	ra,1c00b360 <pi_hyper_close>
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c0080b4:	8522                	mv	a0,s0
}
1c0080b6:	4422                	lw	s0,8(sp)
1c0080b8:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c0080ba:	13c00593          	li	a1,316
}
1c0080be:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c0080c0:	0ec0206f          	j	1c00a1ac <pi_l2_free>

1c0080c4 <hyperflash_open>:
{
1c0080c4:	7179                	addi	sp,sp,-48
1c0080c6:	d226                	sw	s1,36(sp)
1c0080c8:	d04a                	sw	s2,32(sp)
1c0080ca:	84aa                	mv	s1,a0
  struct pi_hyperflash_conf *conf = (struct pi_hyperflash_conf *)device->config;
1c0080cc:	00452903          	lw	s2,4(a0)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c0080d0:	13c00513          	li	a0,316
{
1c0080d4:	d606                	sw	ra,44(sp)
1c0080d6:	d422                	sw	s0,40(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c0080d8:	0c6020ef          	jal	ra,1c00a19e <pi_l2_malloc>
  if (hyperflash == NULL)
1c0080dc:	c935                	beqz	a0,1c008150 <hyperflash_open+0x8c>
  device->data = (void *)hyperflash;
1c0080de:	c488                	sw	a0,8(s1)
1c0080e0:	842a                	mv	s0,a0
  if (bsp_hyperflash_open(conf))
1c0080e2:	854a                	mv	a0,s2
1c0080e4:	5c8010ef          	jal	ra,1c0096ac <bsp_hyperflash_open>
1c0080e8:	84aa                	mv	s1,a0
1c0080ea:	ed21                	bnez	a0,1c008142 <hyperflash_open+0x7e>
  struct pi_hyper_conf hyper_conf = {0};
1c0080ec:	4671                	li	a2,28
1c0080ee:	4581                	li	a1,0
1c0080f0:	0048                	addi	a0,sp,4
1c0080f2:	6af030ef          	jal	ra,1c00bfa0 <memset>
  pi_hyper_conf_init(&hyper_conf);
1c0080f6:	0048                	addi	a0,sp,4
1c0080f8:	0f8030ef          	jal	ra,1c00b1f0 <pi_hyper_conf_init>
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c0080fc:	00492783          	lw	a5,4(s2)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c008100:	8522                	mv	a0,s0
1c008102:	004c                	addi	a1,sp,4
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c008104:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c008108:	00892783          	lw	a5,8(s2)
  hyper_conf.type = PI_HYPER_TYPE_FLASH;
1c00810c:	c802                	sw	zero,16(sp)
  hyper_conf.cs = conf->hyper_cs;
1c00810e:	c63e                	sw	a5,12(sp)
  hyper_conf.xip_en = conf->xip_en;
1c008110:	00c92783          	lw	a5,12(s2)
1c008114:	00f104a3          	sb	a5,9(sp)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c008118:	75a010ef          	jal	ra,1c009872 <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperflash->hyper_device);
1c00811c:	8522                	mv	a0,s0
1c00811e:	0e2030ef          	jal	ra,1c00b200 <pi_hyper_open>
  if (error)
1c008122:	e105                	bnez	a0,1c008142 <hyperflash_open+0x7e>
  hyperflash->pending_task = NULL;
1c008124:	00042c23          	sw	zero,24(s0)
  hyperflash->waiting_first = NULL;
1c008128:	00042823          	sw	zero,16(s0)
  hyperflash->erase_task = NULL;
1c00812c:	02042223          	sw	zero,36(s0)
  hyperflash->erase_waiting_first = NULL;
1c008130:	00042e23          	sw	zero,28(s0)
}
1c008134:	50b2                	lw	ra,44(sp)
1c008136:	5422                	lw	s0,40(sp)
1c008138:	8526                	mv	a0,s1
1c00813a:	5902                	lw	s2,32(sp)
1c00813c:	5492                	lw	s1,36(sp)
1c00813e:	6145                	addi	sp,sp,48
1c008140:	8082                	ret
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c008142:	13c00593          	li	a1,316
1c008146:	8522                	mv	a0,s0
1c008148:	064020ef          	jal	ra,1c00a1ac <pi_l2_free>
  return -2;
1c00814c:	54f9                	li	s1,-2
1c00814e:	b7dd                	j	1c008134 <hyperflash_open+0x70>
    return -1;
1c008150:	54fd                	li	s1,-1
1c008152:	b7cd                	j	1c008134 <hyperflash_open+0x70>

1c008154 <pi_task_wait_on.isra.3>:
static inline void pi_task_wait_on(struct pi_task *task)
1c008154:	1141                	addi	sp,sp,-16
1c008156:	c422                	sw	s0,8(sp)
1c008158:	c226                	sw	s1,4(sp)
1c00815a:	c606                	sw	ra,12(sp)
1c00815c:	c04a                	sw	s2,0(sp)
1c00815e:	842a                	mv	s0,a0
  while(!task->done)
1c008160:	00040783          	lb	a5,0(s0)
1c008164:	c799                	beqz	a5,1c008172 <pi_task_wait_on.isra.3+0x1e>
}
1c008166:	40b2                	lw	ra,12(sp)
1c008168:	4422                	lw	s0,8(sp)
1c00816a:	4492                	lw	s1,4(sp)
1c00816c:	4902                	lw	s2,0(sp)
1c00816e:	0141                	addi	sp,sp,16
1c008170:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008172:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c008176:	4585                	li	a1,1
1c008178:	01c00513          	li	a0,28
1c00817c:	577010ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c008180:	30091073          	csrw	mstatus,s2
1c008184:	bff1                	j	1c008160 <pi_task_wait_on.isra.3+0xc>

1c008186 <hyperflash_copy_2d>:
  pi_task_wait_on(&task);
  return 0;
}

static inline int hyperflash_copy_2d(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc)
{
1c008186:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c008188:	4885                	li	a7,1
1c00818a:	c706                	sw	ra,140(sp)
1c00818c:	cc46                	sw	a7,24(sp)
  task->arg[0] = (uint32_t)0;
1c00818e:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c008190:	d446                	sw	a7,40(sp)
  task->done = 0;
1c008192:	00010a23          	sb	zero,20(sp)
  if (!ext2loc)
1c008196:	00080b63          	beqz	a6,1c0081ac <hyperflash_copy_2d+0x26>
  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c00819a:	880a                	mv	a6,sp
1c00819c:	9bbff0ef          	jal	ra,1c007b56 <hyperflash_read_2d_async>
  pi_task_t task;
  pi_task_block(&task);
  if (hyperflash_copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, &task))
    return -1;
  pi_task_wait_on(&task);
1c0081a0:	0848                	addi	a0,sp,20
1c0081a2:	3f4d                	jal	1c008154 <pi_task_wait_on.isra.3>
  return 0;
1c0081a4:	4501                	li	a0,0
}
1c0081a6:	40ba                	lw	ra,140(sp)
1c0081a8:	6149                	addi	sp,sp,144
1c0081aa:	8082                	ret
    return -1;
1c0081ac:	557d                	li	a0,-1
1c0081ae:	bfe5                	j	1c0081a6 <hyperflash_copy_2d+0x20>

1c0081b0 <hyperflash_erase_sector>:
{
1c0081b0:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c0081b2:	4785                	li	a5,1
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c0081b4:	860a                	mv	a2,sp
{
1c0081b6:	c706                	sw	ra,140(sp)
1c0081b8:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0081ba:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c0081bc:	c202                	sw	zero,4(sp)
1c0081be:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c0081c2:	a43ff0ef          	jal	ra,1c007c04 <hyperflash_erase_sector_async>
  pi_task_wait_on(&task);
1c0081c6:	0848                	addi	a0,sp,20
1c0081c8:	3771                	jal	1c008154 <pi_task_wait_on.isra.3>
}
1c0081ca:	40ba                	lw	ra,140(sp)
1c0081cc:	4501                	li	a0,0
1c0081ce:	6149                	addi	sp,sp,144
1c0081d0:	8082                	ret

1c0081d2 <hyperflash_erase_chip>:
{
1c0081d2:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c0081d4:	4785                	li	a5,1
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c0081d6:	858a                	mv	a1,sp
{
1c0081d8:	c706                	sw	ra,140(sp)
1c0081da:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0081dc:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c0081de:	c202                	sw	zero,4(sp)
1c0081e0:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c0081e4:	ad1ff0ef          	jal	ra,1c007cb4 <hyperflash_erase_chip_async>
  pi_task_wait_on(&task);
1c0081e8:	0848                	addi	a0,sp,20
1c0081ea:	37ad                	jal	1c008154 <pi_task_wait_on.isra.3>
}
1c0081ec:	40ba                	lw	ra,140(sp)
1c0081ee:	4501                	li	a0,0
1c0081f0:	6149                	addi	sp,sp,144
1c0081f2:	8082                	ret

1c0081f4 <hyperflash_read>:
{
1c0081f4:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c0081f6:	4785                	li	a5,1
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c0081f8:	870a                	mv	a4,sp
{
1c0081fa:	c706                	sw	ra,140(sp)
1c0081fc:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0081fe:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c008200:	c202                	sw	zero,4(sp)
1c008202:	00010a23          	sb	zero,20(sp)
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c008206:	b55ff0ef          	jal	ra,1c007d5a <hyperflash_read_async>
  pi_task_wait_on(&task);
1c00820a:	0848                	addi	a0,sp,20
1c00820c:	37a1                	jal	1c008154 <pi_task_wait_on.isra.3>
}
1c00820e:	40ba                	lw	ra,140(sp)
1c008210:	4501                	li	a0,0
1c008212:	6149                	addi	sp,sp,144
1c008214:	8082                	ret

1c008216 <hyperflash_reg_get>:
{
1c008216:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c008218:	4785                	li	a5,1
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00821a:	868a                	mv	a3,sp
{
1c00821c:	c706                	sw	ra,140(sp)
1c00821e:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008220:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c008222:	c202                	sw	zero,4(sp)
1c008224:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c008228:	ca7ff0ef          	jal	ra,1c007ece <hyperflash_reg_get_async>
  pi_task_wait_on(&task);
1c00822c:	0848                	addi	a0,sp,20
1c00822e:	371d                	jal	1c008154 <pi_task_wait_on.isra.3>
}
1c008230:	40ba                	lw	ra,140(sp)
1c008232:	4501                	li	a0,0
1c008234:	6149                	addi	sp,sp,144
1c008236:	8082                	ret

1c008238 <hyperflash_reg_set>:
{
1c008238:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00823a:	4785                	li	a5,1
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00823c:	868a                	mv	a3,sp
{
1c00823e:	c706                	sw	ra,140(sp)
1c008240:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008242:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c008244:	c202                	sw	zero,4(sp)
1c008246:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00824a:	ce3ff0ef          	jal	ra,1c007f2c <hyperflash_reg_set_async>
  pi_task_wait_on(&task);
1c00824e:	0848                	addi	a0,sp,20
1c008250:	3711                	jal	1c008154 <pi_task_wait_on.isra.3>
}
1c008252:	40ba                	lw	ra,140(sp)
1c008254:	4501                	li	a0,0
1c008256:	6149                	addi	sp,sp,144
1c008258:	8082                	ret

1c00825a <hyperflash_program>:
{
1c00825a:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00825c:	4785                	li	a5,1
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00825e:	870a                	mv	a4,sp
{
1c008260:	c706                	sw	ra,140(sp)
1c008262:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008264:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c008266:	c202                	sw	zero,4(sp)
1c008268:	00010a23          	sb	zero,20(sp)
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00826c:	dc5ff0ef          	jal	ra,1c008030 <hyperflash_program_async>
  pi_task_wait_on(&task);
1c008270:	0848                	addi	a0,sp,20
1c008272:	35cd                	jal	1c008154 <pi_task_wait_on.isra.3>
}
1c008274:	40ba                	lw	ra,140(sp)
1c008276:	4501                	li	a0,0
1c008278:	6149                	addi	sp,sp,144
1c00827a:	8082                	ret

1c00827c <hyperflash_copy>:
{
1c00827c:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00827e:	4785                	li	a5,1
1c008280:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008282:	d43e                	sw	a5,40(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c008284:	878a                	mv	a5,sp
{
1c008286:	c522                	sw	s0,136(sp)
1c008288:	c706                	sw	ra,140(sp)
  task->arg[0] = (uint32_t)0;
1c00828a:	c202                	sw	zero,4(sp)
1c00828c:	00010a23          	sb	zero,20(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c008290:	dfdff0ef          	jal	ra,1c00808c <hyperflash_copy_async>
    return -1;
1c008294:	547d                	li	s0,-1
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c008296:	e501                	bnez	a0,1c00829e <hyperflash_copy+0x22>
1c008298:	842a                	mv	s0,a0
  pi_task_wait_on(&task);
1c00829a:	0848                	addi	a0,sp,20
1c00829c:	3d65                	jal	1c008154 <pi_task_wait_on.isra.3>
}
1c00829e:	8522                	mv	a0,s0
1c0082a0:	40ba                	lw	ra,140(sp)
1c0082a2:	442a                	lw	s0,136(sp)
1c0082a4:	6149                	addi	sp,sp,144
1c0082a6:	8082                	ret

1c0082a8 <hyperflash_erase_resume>:
{
1c0082a8:	1101                	addi	sp,sp,-32
1c0082aa:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0082ac:	4500                	lw	s0,8(a0)
{
1c0082ae:	ca26                	sw	s1,20(sp)
1c0082b0:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_erase_size == 0)
1c0082b2:	13842483          	lw	s1,312(s0)
{
1c0082b6:	ce06                	sw	ra,28(sp)
1c0082b8:	c64e                	sw	s3,12(sp)
1c0082ba:	892a                	mv	s2,a0
  if (hyperflash->pending_erase_size == 0)
1c0082bc:	ec8d                	bnez	s1,1c0082f6 <hyperflash_erase_resume+0x4e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0082be:	300474f3          	csrrci	s1,mstatus,8
  pi_task_enqueue(hyperflash->erase_task);
1c0082c2:	5048                	lw	a0,36(s0)
1c0082c4:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c0082c8:	825ff0ef          	jal	ra,1c007aec <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c0082cc:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->erase_waiting_first;
1c0082d0:	4c54                	lw	a3,28(s0)
  hyperflash->erase_task = NULL;
1c0082d2:	02042223          	sw	zero,36(s0)
  if (task)
1c0082d6:	c299                	beqz	a3,1c0082dc <hyperflash_erase_resume+0x34>
    hyperflash->erase_waiting_first = task->implem.next;
1c0082d8:	4edc                	lw	a5,28(a3)
1c0082da:	cc5c                	sw	a5,28(s0)
1c0082dc:	30049073          	csrw	mstatus,s1
  if (task)
1c0082e0:	c2b5                	beqz	a3,1c008344 <hyperflash_erase_resume+0x9c>
}
1c0082e2:	4462                	lw	s0,24(sp)
1c0082e4:	40f2                	lw	ra,28(sp)
1c0082e6:	44d2                	lw	s1,20(sp)
1c0082e8:	49b2                	lw	s3,12(sp)
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c0082ea:	42b0                	lw	a2,64(a3)
1c0082ec:	5ecc                	lw	a1,60(a3)
1c0082ee:	854a                	mv	a0,s2
}
1c0082f0:	4942                	lw	s2,16(sp)
1c0082f2:	6105                	addi	sp,sp,32
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c0082f4:	a8b9                	j	1c008352 <hyperflash_erase_async>
    unsigned int iter_size = SECTOR_SIZE - (hyperflash->pending_erase_hyper_addr & (SECTOR_SIZE - 1));
1c0082f6:	13442583          	lw	a1,308(s0)
1c0082fa:	000407b7          	lui	a5,0x40
  task->id = PI_TASK_CALLBACK_ID;
1c0082fe:	0c042023          	sw	zero,192(s0)
1c008302:	db25b733          	p.bclr	a4,a1,13,18
1c008306:	8f99                	sub	a5,a5,a4
1c008308:	04f4d4b3          	p.minu	s1,s1,a5
  task->arg[0] = (uint32_t)callback;
1c00830c:	1c0087b7          	lui	a5,0x1c008
1c008310:	2a878793          	addi	a5,a5,680 # 1c0082a8 <hyperflash_erase_resume>
1c008314:	0af42623          	sw	a5,172(s0)
  task->implem.keep = 1;
1c008318:	4785                	li	a5,1
1c00831a:	0cf42823          	sw	a5,208(s0)
  task->arg[1] = (uint32_t)arg;
1c00831e:	0aa42823          	sw	a0,176(s0)
  task->done = 0;
1c008322:	0a040e23          	sb	zero,188(s0)
    hyperflash_erase_sector_async(device, hyper_addr, pi_task_callback(&hyperflash->task2, hyperflash_erase_resume, device));
1c008326:	0a840613          	addi	a2,s0,168
1c00832a:	8dbff0ef          	jal	ra,1c007c04 <hyperflash_erase_sector_async>
    hyperflash->pending_erase_hyper_addr += iter_size;
1c00832e:	13442783          	lw	a5,308(s0)
1c008332:	97a6                	add	a5,a5,s1
1c008334:	12f42a23          	sw	a5,308(s0)
    hyperflash->pending_erase_size -= iter_size;
1c008338:	13842783          	lw	a5,312(s0)
1c00833c:	409784b3          	sub	s1,a5,s1
1c008340:	12942c23          	sw	s1,312(s0)
}
1c008344:	40f2                	lw	ra,28(sp)
1c008346:	4462                	lw	s0,24(sp)
1c008348:	44d2                	lw	s1,20(sp)
1c00834a:	4942                	lw	s2,16(sp)
1c00834c:	49b2                	lw	s3,12(sp)
1c00834e:	6105                	addi	sp,sp,32
1c008350:	8082                	ret

1c008352 <hyperflash_erase_async>:
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008352:	451c                	lw	a5,8(a0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008354:	30047773          	csrrci	a4,mstatus,8
  if (hyperflash->erase_task != NULL)
1c008358:	0247a803          	lw	a6,36(a5)
1c00835c:	02080463          	beqz	a6,1c008384 <hyperflash_erase_async+0x32>
    task->implem.data[0] = id;
1c008360:	450d                	li	a0,3
1c008362:	de88                	sw	a0,56(a3)
    task->implem.data[1] = arg0;
1c008364:	decc                	sw	a1,60(a3)
    task->implem.data[2] = arg1;
1c008366:	c2b0                	sw	a2,64(a3)
    task->implem.data[3] = arg2;
1c008368:	0406a223          	sw	zero,68(a3)
    if (hyperflash->erase_waiting_first)
1c00836c:	4fd0                	lw	a2,28(a5)
1c00836e:	ca09                	beqz	a2,1c008380 <hyperflash_erase_async+0x2e>
      hyperflash->erase_waiting_last->implem.next = task;
1c008370:	5390                	lw	a2,32(a5)
1c008372:	ce54                	sw	a3,28(a2)
    hyperflash->erase_waiting_last = task;
1c008374:	d394                	sw	a3,32(a5)
    task->implem.next = NULL;
1c008376:	0006ae23          	sw	zero,28(a3)
  __builtin_pulp_spr_write(reg, val);
1c00837a:	30071073          	csrw	mstatus,a4
}
1c00837e:	8082                	ret
      hyperflash->erase_waiting_first = task;
1c008380:	cfd4                	sw	a3,28(a5)
1c008382:	bfcd                	j	1c008374 <hyperflash_erase_async+0x22>
  hyperflash->erase_task = task;
1c008384:	d3d4                	sw	a3,36(a5)
1c008386:	30071073          	csrw	mstatus,a4
  hyperflash->pending_erase_hyper_addr = addr;
1c00838a:	12b7aa23          	sw	a1,308(a5)
  hyperflash->pending_erase_size = size;
1c00838e:	12c7ac23          	sw	a2,312(a5)
  hyperflash_erase_resume(device);
1c008392:	bf19                	j	1c0082a8 <hyperflash_erase_resume>

1c008394 <hyperflash_erase>:
{
1c008394:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c008396:	4785                	li	a5,1
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c008398:	868a                	mv	a3,sp
{
1c00839a:	c706                	sw	ra,140(sp)
1c00839c:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00839e:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c0083a0:	c202                	sw	zero,4(sp)
1c0083a2:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c0083a6:	3775                	jal	1c008352 <hyperflash_erase_async>
  pi_task_wait_on(&task);
1c0083a8:	0848                	addi	a0,sp,20
1c0083aa:	dabff0ef          	jal	ra,1c008154 <pi_task_wait_on.isra.3>
}
1c0083ae:	40ba                	lw	ra,140(sp)
1c0083b0:	4501                	li	a0,0
1c0083b2:	6149                	addi	sp,sp,144
1c0083b4:	8082                	ret

1c0083b6 <hyperflash_get_status_reg>:
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c0083b6:	6585                	lui	a1,0x1
{
1c0083b8:	1141                	addi	sp,sp,-16
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c0083ba:	07000613          	li	a2,112
1c0083be:	aaa58593          	addi	a1,a1,-1366 # aaa <__rt_stack_size+0x2aa>
{
1c0083c2:	c606                	sw	ra,12(sp)
1c0083c4:	c422                	sw	s0,8(sp)
1c0083c6:	842a                	mv	s0,a0
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c0083c8:	82fff0ef          	jal	ra,1c007bf6 <hyperflash_set_reg_exec>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c0083cc:	8522                	mv	a0,s0
1c0083ce:	00c40613          	addi	a2,s0,12
1c0083d2:	4691                	li	a3,4
1c0083d4:	4581                	li	a1,0
1c0083d6:	136030ef          	jal	ra,1c00b50c <pi_hyper_read>
}
1c0083da:	00c45503          	lhu	a0,12(s0)
1c0083de:	40b2                	lw	ra,12(sp)
1c0083e0:	4422                	lw	s0,8(sp)
1c0083e2:	0141                	addi	sp,sp,16
1c0083e4:	8082                	ret

1c0083e6 <hyperflash_check_erase>:
{
1c0083e6:	1141                	addi	sp,sp,-16
1c0083e8:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0083ea:	4500                	lw	s0,8(a0)
{
1c0083ec:	c226                	sw	s1,4(sp)
1c0083ee:	84aa                	mv	s1,a0
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c0083f0:	8522                	mv	a0,s0
{
1c0083f2:	c606                	sw	ra,12(sp)
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c0083f4:	37c9                	jal	1c0083b6 <hyperflash_get_status_reg>
  if (((reg_status >> 7) & 1) == 0)
1c0083f6:	c0751533          	p.extractu	a0,a0,0,7
1c0083fa:	e905                	bnez	a0,1c00842a <hyperflash_check_erase+0x44>
  task->arg[0] = (uint32_t)callback;
1c0083fc:	1c0087b7          	lui	a5,0x1c008
1c008400:	3e678793          	addi	a5,a5,998 # 1c0083e6 <hyperflash_check_erase>
1c008404:	02040e23          	sb	zero,60(s0)
1c008408:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00840a:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00840c:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00840e:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c008412:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c008414:	02840513          	addi	a0,s0,40
}
1c008418:	4422                	lw	s0,8(sp)
1c00841a:	40b2                	lw	ra,12(sp)
1c00841c:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00841e:	65e1                	lui	a1,0x18
1c008420:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c008424:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c008426:	38b0106f          	j	1c009fb0 <pi_task_push_delayed_us>
}
1c00842a:	4422                	lw	s0,8(sp)
1c00842c:	40b2                	lw	ra,12(sp)
    hyperflash_handle_pending_task(device);
1c00842e:	8526                	mv	a0,s1
}
1c008430:	4492                	lw	s1,4(sp)
1c008432:	0141                	addi	sp,sp,16
    hyperflash_handle_pending_task(device);
1c008434:	99bff06f          	j	1c007dce <hyperflash_handle_pending_task>

1c008438 <hyperflash_check_program>:
{
1c008438:	1141                	addi	sp,sp,-16
1c00843a:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00843c:	4500                	lw	s0,8(a0)
{
1c00843e:	c226                	sw	s1,4(sp)
1c008440:	84aa                	mv	s1,a0
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c008442:	8522                	mv	a0,s0
{
1c008444:	c606                	sw	ra,12(sp)
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c008446:	3f85                	jal	1c0083b6 <hyperflash_get_status_reg>
1c008448:	08057513          	andi	a0,a0,128
1c00844c:	e51d                	bnez	a0,1c00847a <hyperflash_check_program+0x42>
  task->arg[0] = (uint32_t)callback;
1c00844e:	1c0087b7          	lui	a5,0x1c008
1c008452:	43878793          	addi	a5,a5,1080 # 1c008438 <hyperflash_check_program>
1c008456:	02040e23          	sb	zero,60(s0)
1c00845a:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00845c:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00845e:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c008460:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c008464:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c008466:	02840513          	addi	a0,s0,40
}
1c00846a:	4422                	lw	s0,8(sp)
1c00846c:	40b2                	lw	ra,12(sp)
1c00846e:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c008470:	0fa00593          	li	a1,250
}
1c008474:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c008476:	33b0106f          	j	1c009fb0 <pi_task_push_delayed_us>
}
1c00847a:	4422                	lw	s0,8(sp)
1c00847c:	40b2                	lw	ra,12(sp)
    hyperflash_program_resume(device);
1c00847e:	8526                	mv	a0,s1
}
1c008480:	4492                	lw	s1,4(sp)
1c008482:	0141                	addi	sp,sp,16
    hyperflash_program_resume(device);
1c008484:	afdff06f          	j	1c007f80 <hyperflash_program_resume>

1c008488 <pi_hyperflash_conf_init>:
};



void pi_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
1c008488:	1141                	addi	sp,sp,-16
  conf->flash.api = &hyperflash_api;
1c00848a:	1c00e7b7          	lui	a5,0x1c00e
{
1c00848e:	c606                	sw	ra,12(sp)
1c008490:	c422                	sw	s0,8(sp)
  conf->flash.api = &hyperflash_api;
1c008492:	d1878793          	addi	a5,a5,-744 # 1c00dd18 <hyperflash_api>
1c008496:	c11c                	sw	a5,0(a0)
{
1c008498:	842a                	mv	s0,a0
  bsp_hyperflash_conf_init(conf);
1c00849a:	208010ef          	jal	ra,1c0096a2 <bsp_hyperflash_conf_init>
  __flash_conf_init(&conf->flash);
1c00849e:	8522                	mv	a0,s0
1c0084a0:	d1bfe0ef          	jal	ra,1c0071ba <__flash_conf_init>
  conf->xip_en = 0;
}
1c0084a4:	40b2                	lw	ra,12(sp)
  conf->xip_en = 0;
1c0084a6:	00042623          	sw	zero,12(s0)
}
1c0084aa:	4422                	lw	s0,8(sp)
1c0084ac:	0141                	addi	sp,sp,16
1c0084ae:	8082                	ret

1c0084b0 <hyperram_alloc>:

int hyperram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
  void *chunk;
  hyperram_t *hyperram = (hyperram_t *)device->data;
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c0084b0:	4508                	lw	a0,8(a0)
{
1c0084b2:	1101                	addi	sp,sp,-32
1c0084b4:	cc22                	sw	s0,24(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c0084b6:	0531                	addi	a0,a0,12
{
1c0084b8:	842e                	mv	s0,a1
1c0084ba:	85b2                	mv	a1,a2
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c0084bc:	0070                	addi	a2,sp,12
{
1c0084be:	ce06                	sw	ra,28(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c0084c0:	244d                	jal	1c008762 <extern_alloc>
  *addr = (uint32_t)chunk;
1c0084c2:	47b2                	lw	a5,12(sp)
  return err;
}
1c0084c4:	40f2                	lw	ra,28(sp)
  *addr = (uint32_t)chunk;
1c0084c6:	c01c                	sw	a5,0(s0)
}
1c0084c8:	4462                	lw	s0,24(sp)
1c0084ca:	6105                	addi	sp,sp,32
1c0084cc:	8082                	ret

1c0084ce <hyperram_free>:


int hyperram_free(struct pi_device *device, uint32_t addr, uint32_t size)
{
  hyperram_t *hyperram = (hyperram_t *)device->data;
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c0084ce:	4508                	lw	a0,8(a0)
{
1c0084d0:	87b2                	mv	a5,a2
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c0084d2:	862e                	mv	a2,a1
1c0084d4:	0531                	addi	a0,a0,12
1c0084d6:	85be                	mv	a1,a5
1c0084d8:	a4e5                	j	1c0087c0 <extern_free>

1c0084da <hyperram_copy_2d_async>:
{
1c0084da:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c0084dc:	00080563          	beqz	a6,1c0084e6 <hyperram_copy_2d_async+0xc>
    pi_hyper_read_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c0084e0:	8846                	mv	a6,a7
1c0084e2:	40c0306f          	j	1c00b8ee <pi_hyper_read_2d_async>
    pi_hyper_write_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c0084e6:	8846                	mv	a6,a7
1c0084e8:	41e0306f          	j	1c00b906 <pi_hyper_write_2d_async>

1c0084ec <hyperram_copy_async>:
{
1c0084ec:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c0084ee:	c701                	beqz	a4,1c0084f6 <hyperram_copy_async+0xa>
    pi_hyper_read_async(&hyperram->hyper_device, addr, data, size, task);
1c0084f0:	873e                	mv	a4,a5
1c0084f2:	0040306f          	j	1c00b4f6 <pi_hyper_read_async>
    pi_hyper_write_async(&hyperram->hyper_device, addr, data, size, task);
1c0084f6:	873e                	mv	a4,a5
1c0084f8:	0360306f          	j	1c00b52e <pi_hyper_write_async>

1c0084fc <hyperram_close>:
{
1c0084fc:	1141                	addi	sp,sp,-16
1c0084fe:	c422                	sw	s0,8(sp)
  hyperram_t *hyperram = (hyperram_t *)device->data;
1c008500:	4500                	lw	s0,8(a0)
{
1c008502:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperram->hyper_device);
1c008504:	8522                	mv	a0,s0
1c008506:	65b020ef          	jal	ra,1c00b360 <pi_hyper_close>
  extern_alloc_deinit(&hyperram->alloc);
1c00850a:	00c40513          	addi	a0,s0,12
1c00850e:	24b1                	jal	1c00875a <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c008510:	8522                	mv	a0,s0
}
1c008512:	4422                	lw	s0,8(sp)
1c008514:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c008516:	45c1                	li	a1,16
}
1c008518:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c00851a:	4930106f          	j	1c00a1ac <pi_l2_free>

1c00851e <hyperram_open>:
{
1c00851e:	7139                	addi	sp,sp,-64
1c008520:	dc22                	sw	s0,56(sp)
1c008522:	d84a                	sw	s2,48(sp)
  struct pi_hyperram_conf *conf = (struct pi_hyperram_conf *)device->config;
1c008524:	4140                	lw	s0,4(a0)
{
1c008526:	892a                	mv	s2,a0
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c008528:	4541                	li	a0,16
{
1c00852a:	de06                	sw	ra,60(sp)
1c00852c:	da26                	sw	s1,52(sp)
1c00852e:	d64e                	sw	s3,44(sp)
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c008530:	46f010ef          	jal	ra,1c00a19e <pi_l2_malloc>
  if (hyperram == NULL)
1c008534:	c141                	beqz	a0,1c0085b4 <hyperram_open+0x96>
  if (conf->reserve_addr_0)
1c008536:	501c                	lw	a5,32(s0)
  device->data = (void *)hyperram;
1c008538:	00a92423          	sw	a0,8(s2)
1c00853c:	84aa                	mv	s1,a0
  int size = conf->ram_size;
1c00853e:	4c10                	lw	a2,24(s0)
  uint32_t start_addr = 0;
1c008540:	4581                	li	a1,0
  if (conf->reserve_addr_0)
1c008542:	c399                	beqz	a5,1c008548 <hyperram_open+0x2a>
    size -= 4;
1c008544:	1671                	addi	a2,a2,-4
    start_addr = 4;
1c008546:	4591                	li	a1,4
  if (extern_alloc_init(&hyperram->alloc, (void *)start_addr, size))
1c008548:	00c48993          	addi	s3,s1,12
1c00854c:	854e                	mv	a0,s3
1c00854e:	2a6d                	jal	1c008708 <extern_alloc_init>
1c008550:	e901                	bnez	a0,1c008560 <hyperram_open+0x42>
  if (bsp_hyperram_open(conf))
1c008552:	8522                	mv	a0,s0
1c008554:	13e010ef          	jal	ra,1c009692 <bsp_hyperram_open>
1c008558:	892a                	mv	s2,a0
1c00855a:	c909                	beqz	a0,1c00856c <hyperram_open+0x4e>
  extern_alloc_deinit(&hyperram->alloc);
1c00855c:	854e                	mv	a0,s3
1c00855e:	2af5                	jal	1c00875a <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c008560:	45c1                	li	a1,16
1c008562:	8526                	mv	a0,s1
1c008564:	449010ef          	jal	ra,1c00a1ac <pi_l2_free>
  return -2;
1c008568:	5979                	li	s2,-2
1c00856a:	a82d                	j	1c0085a4 <hyperram_open+0x86>
  pi_hyper_conf_init(&hyper_conf);
1c00856c:	0048                	addi	a0,sp,4
1c00856e:	483020ef          	jal	ra,1c00b1f0 <pi_hyper_conf_init>
  hyper_conf.burst_length = 4000;
1c008572:	6785                	lui	a5,0x1
1c008574:	fa078793          	addi	a5,a5,-96 # fa0 <__rt_stack_size+0x7a0>
1c008578:	cc3e                	sw	a5,24(sp)
  hyper_conf.id = conf->hyper_itf;
1c00857a:	405c                	lw	a5,4(s0)
1c00857c:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c008580:	441c                	lw	a5,8(s0)
1c008582:	c63e                	sw	a5,12(sp)
  hyper_conf.type = PI_HYPER_TYPE_RAM;
1c008584:	4785                	li	a5,1
1c008586:	c83e                	sw	a5,16(sp)
  hyper_conf.xip_en = conf->xip_en;
1c008588:	481c                	lw	a5,16(s0)
1c00858a:	00f104a3          	sb	a5,9(sp)
  if (conf->baudrate)
1c00858e:	4c5c                	lw	a5,28(s0)
1c008590:	c391                	beqz	a5,1c008594 <hyperram_open+0x76>
      hyper_conf.baudrate = conf->baudrate;
1c008592:	ca3e                	sw	a5,20(sp)
  pi_open_from_conf(&hyperram->hyper_device, &hyper_conf);
1c008594:	8526                	mv	a0,s1
1c008596:	004c                	addi	a1,sp,4
1c008598:	2da010ef          	jal	ra,1c009872 <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperram->hyper_device);
1c00859c:	8526                	mv	a0,s1
1c00859e:	463020ef          	jal	ra,1c00b200 <pi_hyper_open>
  if (error)
1c0085a2:	fd4d                	bnez	a0,1c00855c <hyperram_open+0x3e>
}
1c0085a4:	50f2                	lw	ra,60(sp)
1c0085a6:	5462                	lw	s0,56(sp)
1c0085a8:	854a                	mv	a0,s2
1c0085aa:	54d2                	lw	s1,52(sp)
1c0085ac:	5942                	lw	s2,48(sp)
1c0085ae:	59b2                	lw	s3,44(sp)
1c0085b0:	6121                	addi	sp,sp,64
1c0085b2:	8082                	ret
      return -1;
1c0085b4:	597d                	li	s2,-1
1c0085b6:	b7fd                	j	1c0085a4 <hyperram_open+0x86>

1c0085b8 <pi_hyperram_conf_init>:
};


void pi_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram.api = &hyperram_api;
1c0085b8:	1c00e737          	lui	a4,0x1c00e
1c0085bc:	d6c70713          	addi	a4,a4,-660 # 1c00dd6c <hyperram_api>
1c0085c0:	c118                	sw	a4,0(a0)
  conf->baudrate = 0;
  conf->xip_en = 0;
  conf->reserve_addr_0 = 1;
1c0085c2:	4705                	li	a4,1
  conf->baudrate = 0;
1c0085c4:	00052e23          	sw	zero,28(a0)
  conf->xip_en = 0;
1c0085c8:	00052823          	sw	zero,16(a0)
  conf->reserve_addr_0 = 1;
1c0085cc:	d118                	sw	a4,32(a0)
  bsp_hyperram_conf_init(conf);
1c0085ce:	0ac0106f          	j	1c00967a <bsp_hyperram_conf_init>

1c0085d2 <__pi_ram_cluster_req>:
}


void __pi_ram_conf_init(struct pi_ram_conf *conf)
{
}
1c0085d2:	832a                	mv	t1,a0
1c0085d4:	09f34783          	lbu	a5,159(t1)
1c0085d8:	1c008e37          	lui	t3,0x1c008
1c0085dc:	4108                	lw	a0,0(a0)
1c0085de:	00832583          	lw	a1,8(t1)
1c0085e2:	00432603          	lw	a2,4(t1)
1c0085e6:	00c32683          	lw	a3,12(t1)
1c0085ea:	09e34803          	lbu	a6,158(t1)
1c0085ee:	01830893          	addi	a7,t1,24
1c0085f2:	642e0e13          	addi	t3,t3,1602 # 1c008642 <__pi_ram_cluster_req_done>
1c0085f6:	c78d                	beqz	a5,1c008620 <__pi_ram_cluster_req+0x4e>
1c0085f8:	01c32e23          	sw	t3,28(t1)
1c0085fc:	02030623          	sb	zero,44(t1)
1c008600:	4e05                	li	t3,1
1c008602:	01032703          	lw	a4,16(t1)
1c008606:	01432783          	lw	a5,20(t1)
1c00860a:	02032823          	sw	zero,48(t1)
1c00860e:	02632023          	sw	t1,32(t1)
1c008612:	05c32023          	sw	t3,64(t1)
1c008616:	00052303          	lw	t1,0(a0)
1c00861a:	00c32303          	lw	t1,12(t1)
1c00861e:	8302                	jr	t1
1c008620:	4785                	li	a5,1
1c008622:	02030623          	sb	zero,44(t1)
1c008626:	04f32023          	sw	a5,64(t1)
1c00862a:	411c                	lw	a5,0(a0)
1c00862c:	02032823          	sw	zero,48(t1)
1c008630:	01c32e23          	sw	t3,28(t1)
1c008634:	02632023          	sw	t1,32(t1)
1c008638:	0087a303          	lw	t1,8(a5)
1c00863c:	8742                	mv	a4,a6
1c00863e:	87c6                	mv	a5,a7
1c008640:	8302                	jr	t1

1c008642 <__pi_ram_cluster_req_done>:
1c008642:	09d54783          	lbu	a5,157(a0)
1c008646:	4705                	li	a4,1
1c008648:	08e50e23          	sb	a4,156(a0)
1c00864c:	04078793          	addi	a5,a5,64
1c008650:	00201737          	lui	a4,0x201
1c008654:	07da                	slli	a5,a5,0x16
1c008656:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00865a:	0007e723          	p.sw	zero,a4(a5)
1c00865e:	8082                	ret

1c008660 <pi_ram_open>:
1c008660:	415c                	lw	a5,4(a0)
1c008662:	439c                	lw	a5,0(a5)
1c008664:	0007a303          	lw	t1,0(a5)
1c008668:	c11c                	sw	a5,0(a0)
1c00866a:	8302                	jr	t1

1c00866c <pi_cl_ram_copy>:
                 uint32_t pi_ram_addr, void *addr, uint32_t size, int ext2loc, pi_cl_ram_req_t *req)
{
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
1c00866c:	c7d4                	sw	a3,12(a5)
    req->cid = pi_cluster_id();
    req->done = 0;
    req->ext2loc = ext2loc;
1c00866e:	08e78f23          	sb	a4,158(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c008672:	014026f3          	csrr	a3,uhartid
  task->arg[0] = (uint32_t)callback;
1c008676:	1c008737          	lui	a4,0x1c008
  return (hart_id >> 5) & 0x3f;
1c00867a:	8695                	srai	a3,a3,0x5
1c00867c:	5d270713          	addi	a4,a4,1490 # 1c0085d2 <__pi_ram_cluster_req>
1c008680:	f266b6b3          	p.bclr	a3,a3,25,6
1c008684:	cfd8                	sw	a4,28(a5)
  task->implem.keep = 1;
1c008686:	4705                	li	a4,1
    req->device = device;
1c008688:	c388                	sw	a0,0(a5)
    req->addr = addr;
1c00868a:	c3d0                	sw	a2,4(a5)
    req->pi_ram_addr = pi_ram_addr;
1c00868c:	c78c                	sw	a1,8(a5)
    req->cid = pi_cluster_id();
1c00868e:	08d78ea3          	sb	a3,157(a5)
    req->done = 0;
1c008692:	08078e23          	sb	zero,156(a5)
    req->is_2d = 0;
1c008696:	08078fa3          	sb	zero,159(a5)
  task->id = PI_TASK_CALLBACK_ID;
1c00869a:	0207a823          	sw	zero,48(a5)
  task->arg[1] = (uint32_t)arg;
1c00869e:	d39c                	sw	a5,32(a5)
  task->implem.keep = 1;
1c0086a0:	c3b8                	sw	a4,64(a5)
1c0086a2:	02078623          	sb	zero,44(a5)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c0086a6:	01878513          	addi	a0,a5,24
1c0086aa:	1090106f          	j	1c009fb2 <pi_cl_send_task_to_fc>

1c0086ae <pi_cl_ram_copy_2d>:
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
    req->stride = stride;
    req->length = length;
1c0086ae:	00f8aa23          	sw	a5,20(a7)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0086b2:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0086b6:	8795                	srai	a5,a5,0x5
1c0086b8:	f267b7b3          	p.bclr	a5,a5,25,6
    req->cid = pi_cluster_id();
1c0086bc:	08f88ea3          	sb	a5,157(a7)
    req->done = 0;
    req->ext2loc = ext2loc;
    req->is_2d = 1;
1c0086c0:	4785                	li	a5,1
1c0086c2:	08f88fa3          	sb	a5,159(a7)
  task->arg[0] = (uint32_t)callback;
1c0086c6:	1c0087b7          	lui	a5,0x1c008
1c0086ca:	5d278793          	addi	a5,a5,1490 # 1c0085d2 <__pi_ram_cluster_req>
1c0086ce:	00f8ae23          	sw	a5,28(a7)
  task->implem.keep = 1;
1c0086d2:	4785                	li	a5,1
    req->device = device;
1c0086d4:	00a8a023          	sw	a0,0(a7)
    req->addr = addr;
1c0086d8:	00c8a223          	sw	a2,4(a7)
    req->pi_ram_addr = pi_ram_addr;
1c0086dc:	00b8a423          	sw	a1,8(a7)
    req->size = size;
1c0086e0:	00d8a623          	sw	a3,12(a7)
    req->stride = stride;
1c0086e4:	00e8a823          	sw	a4,16(a7)
    req->done = 0;
1c0086e8:	08088e23          	sb	zero,156(a7)
    req->ext2loc = ext2loc;
1c0086ec:	09088f23          	sb	a6,158(a7)
  task->id = PI_TASK_CALLBACK_ID;
1c0086f0:	0208a823          	sw	zero,48(a7)
  task->arg[1] = (uint32_t)arg;
1c0086f4:	0318a023          	sw	a7,32(a7)
  task->implem.keep = 1;
1c0086f8:	04f8a023          	sw	a5,64(a7)
1c0086fc:	02088623          	sb	zero,44(a7)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c008700:	01888513          	addi	a0,a7,24
1c008704:	0af0106f          	j	1c009fb2 <pi_cl_send_task_to_fc>

1c008708 <extern_alloc_init>:
  }
  printf("=============================================\n");
}

int extern_alloc_init(extern_alloc_t *a, void *addr, int size)
{
1c008708:	1101                	addi	sp,sp,-32
1c00870a:	ca26                	sw	s1,20(sp)
1c00870c:	ce06                	sw	ra,28(sp)
1c00870e:	cc22                	sw	s0,24(sp)
1c008710:	84aa                	mv	s1,a0
  if (size)
1c008712:	ce1d                	beqz	a2,1c008750 <extern_alloc_init+0x48>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c008714:	4531                	li	a0,12
  {
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c008716:	00758413          	addi	s0,a1,7
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c00871a:	c62e                	sw	a1,12(sp)
1c00871c:	c432                	sw	a2,8(sp)
1c00871e:	281010ef          	jal	ra,1c00a19e <pi_l2_malloc>
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c008722:	c4043433          	p.bclr	s0,s0,2,0
    alloc_chunk_extern_t *chunk = __alloc_chunk();
    if (chunk == NULL) return -1;
1c008726:	45b2                	lw	a1,12(sp)
1c008728:	4622                	lw	a2,8(sp)
1c00872a:	c515                	beqz	a0,1c008756 <extern_alloc_init+0x4e>
    size = size - (staaddr - (unsigned int)addr);
1c00872c:	95b2                	add	a1,a1,a2
1c00872e:	8d81                	sub	a1,a1,s0
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c008730:	4601                	li	a2,0
    if (size > 0) {
1c008732:	00b05963          	blez	a1,1c008744 <extern_alloc_init+0x3c>
      a->first_free = chunk;
1c008736:	c088                	sw	a0,0(s1)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c008738:	c405b5b3          	p.bclr	a1,a1,2,0
1c00873c:	c10c                	sw	a1,0(a0)
      chunk->next = NULL;
1c00873e:	00052223          	sw	zero,4(a0)
      chunk->addr = staaddr;
1c008742:	c500                	sw	s0,8(a0)
}
1c008744:	40f2                	lw	ra,28(sp)
1c008746:	4462                	lw	s0,24(sp)
1c008748:	44d2                	lw	s1,20(sp)
1c00874a:	8532                	mv	a0,a2
1c00874c:	6105                	addi	sp,sp,32
1c00874e:	8082                	ret
    a->first_free = NULL;
1c008750:	00052023          	sw	zero,0(a0)
1c008754:	bfc5                	j	1c008744 <extern_alloc_init+0x3c>
    if (chunk == NULL) return -1;
1c008756:	567d                	li	a2,-1
1c008758:	b7f5                	j	1c008744 <extern_alloc_init+0x3c>

1c00875a <extern_alloc_deinit>:
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00875a:	4108                	lw	a0,0(a0)
1c00875c:	45b1                	li	a1,12
1c00875e:	24f0106f          	j	1c00a1ac <pi_l2_free>

1c008762 <extern_alloc>:



int extern_alloc(extern_alloc_t *a, int size, void **chunk)
{
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c008762:	411c                	lw	a5,0(a0)

  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c008764:	059d                	addi	a1,a1,7
1c008766:	c405b5b3          	p.bclr	a1,a1,2,0
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c00876a:	4681                	li	a3,0

  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c00876c:	c7b1                	beqz	a5,1c0087b8 <extern_alloc+0x56>
1c00876e:	4398                	lw	a4,0(a5)
1c008770:	02b74863          	blt	a4,a1,1c0087a0 <extern_alloc+0x3e>
{
1c008774:	1141                	addi	sp,sp,-16
1c008776:	c226                	sw	s1,4(sp)
1c008778:	c606                	sw	ra,12(sp)
1c00877a:	c422                	sw	s0,8(sp)
1c00877c:	4784                	lw	s1,8(a5)

  if (pt) {
    if (pt->size == size) {
1c00877e:	02b71663          	bne	a4,a1,1c0087aa <extern_alloc+0x48>
1c008782:	43d8                	lw	a4,4(a5)
      // Special case where the whole block disappears
      // This special case is interesting to support when we allocate aligned pages, to limit fragmentation
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c008784:	c28d                	beqz	a3,1c0087a6 <extern_alloc+0x44>
1c008786:	c2d8                	sw	a4,4(a3)
1c008788:	8432                	mv	s0,a2
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00878a:	45b1                	li	a1,12
1c00878c:	853e                	mv	a0,a5
1c00878e:	21f010ef          	jal	ra,1c00a1ac <pi_l2_free>
      void *addr = (void *)pt->addr;
      __free_chunk(pt);
      *chunk = addr;
1c008792:	c004                	sw	s1,0(s0)
  } else {
    //warning("Not enough memory to allocate\n");
    *chunk = (void *)0xffffffff;
    return -1;
  }
}
1c008794:	40b2                	lw	ra,12(sp)
1c008796:	4422                	lw	s0,8(sp)
1c008798:	4492                	lw	s1,4(sp)
      return 0;
1c00879a:	4501                	li	a0,0
}
1c00879c:	0141                	addi	sp,sp,16
1c00879e:	8082                	ret
  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c0087a0:	86be                	mv	a3,a5
1c0087a2:	43dc                	lw	a5,4(a5)
1c0087a4:	b7e1                	j	1c00876c <extern_alloc+0xa>
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c0087a6:	c118                	sw	a4,0(a0)
1c0087a8:	b7c5                	j	1c008788 <extern_alloc+0x26>
      pt->size = pt->size - size;
1c0087aa:	40b706b3          	sub	a3,a4,a1
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c0087ae:	9726                	add	a4,a4,s1
      pt->size = pt->size - size;
1c0087b0:	c394                	sw	a3,0(a5)
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c0087b2:	8f0d                	sub	a4,a4,a1
      *chunk = result;
1c0087b4:	c218                	sw	a4,0(a2)
1c0087b6:	bff9                	j	1c008794 <extern_alloc+0x32>
    *chunk = (void *)0xffffffff;
1c0087b8:	57fd                	li	a5,-1
1c0087ba:	c21c                	sw	a5,0(a2)
    return -1;
1c0087bc:	557d                	li	a0,-1
}
1c0087be:	8082                	ret

1c0087c0 <extern_free>:
  return 0;
}

int __attribute__((noinline)) extern_free(extern_alloc_t *a, int size, void *addr)

{
1c0087c0:	7179                	addi	sp,sp,-48
1c0087c2:	d422                	sw	s0,40(sp)
  alloc_chunk_extern_t *chunk;
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c0087c4:	4100                	lw	s0,0(a0)
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c0087c6:	059d                	addi	a1,a1,7
{
1c0087c8:	d226                	sw	s1,36(sp)
1c0087ca:	d04a                	sw	s2,32(sp)
1c0087cc:	ce4e                	sw	s3,28(sp)
1c0087ce:	d606                	sw	ra,44(sp)
1c0087d0:	89aa                	mv	s3,a0
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c0087d2:	c405b933          	p.bclr	s2,a1,2,0
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c0087d6:	4481                	li	s1,0

  while (next && next->addr < (unsigned int)addr) {
1c0087d8:	c439                	beqz	s0,1c008826 <extern_free+0x66>
1c0087da:	441c                	lw	a5,8(s0)
1c0087dc:	04c7e263          	bltu	a5,a2,1c008820 <extern_free+0x60>
    prev = next; next = next->next; 
  }

  if (next && ((char *)addr + size) == (char *)next->addr) {
1c0087e0:	01260733          	add	a4,a2,s2
1c0087e4:	04f71163          	bne	a4,a5,1c008826 <extern_free+0x66>
    /* Coalesce with next */
    next->size = size + next->size;
1c0087e8:	400c                	lw	a1,0(s0)
    next->addr = (unsigned int)addr;
1c0087ea:	c410                	sw	a2,8(s0)
    next->size = size + next->size;
1c0087ec:	992e                	add	s2,s2,a1
1c0087ee:	01242023          	sw	s2,0(s0)
    chunk->size = size;
    chunk->next = next;
    chunk->addr = (unsigned int)addr;
  }

  if (prev) {
1c0087f2:	c8b1                	beqz	s1,1c008846 <extern_free+0x86>
    if (((char *)prev->addr + prev->size) == (char *)addr) {
1c0087f4:	4094                	lw	a3,0(s1)
1c0087f6:	4498                	lw	a4,8(s1)
1c0087f8:	9736                	add	a4,a4,a3
1c0087fa:	04e61463          	bne	a2,a4,1c008842 <extern_free+0x82>
      /* Coalesce with previous */
      prev->size += chunk->size;
1c0087fe:	401c                	lw	a5,0(s0)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c008800:	45b1                	li	a1,12
1c008802:	8522                	mv	a0,s0
      prev->size += chunk->size;
1c008804:	97b6                	add	a5,a5,a3
1c008806:	c09c                	sw	a5,0(s1)
      prev->next = chunk->next;
1c008808:	405c                	lw	a5,4(s0)
1c00880a:	c0dc                	sw	a5,4(s1)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00880c:	1a1010ef          	jal	ra,1c00a1ac <pi_l2_free>
    }
  } else {
    a->first_free = chunk;
  }

  return 0;
1c008810:	4501                	li	a0,0
}
1c008812:	50b2                	lw	ra,44(sp)
1c008814:	5422                	lw	s0,40(sp)
1c008816:	5492                	lw	s1,36(sp)
1c008818:	5902                	lw	s2,32(sp)
1c00881a:	49f2                	lw	s3,28(sp)
1c00881c:	6145                	addi	sp,sp,48
1c00881e:	8082                	ret
    prev = next; next = next->next; 
1c008820:	84a2                	mv	s1,s0
1c008822:	4040                	lw	s0,4(s0)
1c008824:	bf55                	j	1c0087d8 <extern_free+0x18>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c008826:	4531                	li	a0,12
1c008828:	c632                	sw	a2,12(sp)
1c00882a:	175010ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c00882e:	87aa                	mv	a5,a0
    if (chunk == NULL) return -1;
1c008830:	4632                	lw	a2,12(sp)
1c008832:	557d                	li	a0,-1
1c008834:	dff9                	beqz	a5,1c008812 <extern_free+0x52>
    chunk->next = next;
1c008836:	c3c0                	sw	s0,4(a5)
    chunk->size = size;
1c008838:	0127a023          	sw	s2,0(a5)
    chunk->addr = (unsigned int)addr;
1c00883c:	c790                	sw	a2,8(a5)
1c00883e:	843e                	mv	s0,a5
1c008840:	bf4d                	j	1c0087f2 <extern_free+0x32>
      prev->next = chunk;
1c008842:	c0c0                	sw	s0,4(s1)
1c008844:	b7f1                	j	1c008810 <extern_free+0x50>
    a->first_free = chunk;
1c008846:	0089a023          	sw	s0,0(s3)
1c00884a:	b7d9                	j	1c008810 <extern_free+0x50>

1c00884c <pi_partition_get_flash_offset>:
        return 0;
}

uint32_t pi_partition_get_flash_offset(const pi_partition_t *partition)
{
    if(partition)
1c00884c:	c119                	beqz	a0,1c008852 <pi_partition_get_flash_offset+0x6>
        return partition->offset;
1c00884e:	4548                	lw	a0,12(a0)
1c008850:	8082                	ret
    else
        return UINT32_MAX;
1c008852:	557d                	li	a0,-1
}
1c008854:	8082                	ret

1c008856 <pi_partition_table_free>:

void pi_partition_table_free(pi_partition_table_t table)
{
    flash_partition_table_free((flash_partition_table_t *) table);
1c008856:	aaf1                	j	1c008a32 <flash_partition_table_free>

1c008858 <pi_partition_table_load>:

pi_err_t pi_partition_table_load(pi_device_t *flash, const pi_partition_table_t *table)
{
    pi_err_t rc;
    
    rc = flash_partition_table_load(flash, (const flash_partition_table_t **) table, NULL);
1c008858:	4601                	li	a2,0
1c00885a:	a8d1                	j	1c00892e <flash_partition_table_load>

1c00885c <pi_partition_find_first>:

const pi_partition_t *
pi_partition_find_first(const pi_partition_table_t table, const pi_partition_type_t type,
                        const pi_partition_subtype_t subtype,
                        const char *label)
{
1c00885c:	1141                	addi	sp,sp,-16
1c00885e:	c226                	sw	s1,4(sp)
1c008860:	c606                	sw	ra,12(sp)
1c008862:	c422                	sw	s0,8(sp)
1c008864:	84aa                	mv	s1,a0
    pi_partition_t *partition;
    const flash_partition_info_t *info;
    
    info = flash_partition_find_first((const flash_partition_table_t *) table, type, subtype, label);
1c008866:	2ac5                	jal	1c008a56 <flash_partition_find_first>
    if(info == NULL)
1c008868:	c539                	beqz	a0,1c0088b6 <pi_partition_find_first+0x5a>
1c00886a:	842a                	mv	s0,a0
        return NULL;
    
    partition = pi_l2_malloc(sizeof(pi_partition_t));
1c00886c:	02800513          	li	a0,40
1c008870:	12f010ef          	jal	ra,1c00a19e <pi_l2_malloc>
    partition->type = info->type;
1c008874:	00244783          	lbu	a5,2(s0)
    partition->subtype = info->subtype;
    partition->size = info->pos.size;
    partition->offset = info->pos.offset;
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c008878:	4098                	lw	a4,0(s1)
    partition->type = info->type;
1c00887a:	c15c                	sw	a5,4(a0)
    partition->subtype = info->subtype;
1c00887c:	00344783          	lbu	a5,3(s0)
1c008880:	c51c                	sw	a5,8(a0)
    partition->size = info->pos.size;
1c008882:	441c                	lw	a5,8(s0)
1c008884:	c91c                	sw	a5,16(a0)
    partition->offset = info->pos.offset;
1c008886:	405c                	lw	a5,4(s0)
1c008888:	c55c                	sw	a5,12(a0)
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c00888a:	87aa                	mv	a5,a0
1c00888c:	00e7aa2b          	p.sw	a4,20(a5!)
    memcpy(partition->label, info->label, 16);
1c008890:	4458                	lw	a4,12(s0)
1c008892:	c398                	sw	a4,0(a5)
1c008894:	481c                	lw	a5,16(s0)
1c008896:	cd1c                	sw	a5,24(a0)
1c008898:	485c                	lw	a5,20(s0)
1c00889a:	cd5c                	sw	a5,28(a0)
1c00889c:	4c1c                	lw	a5,24(s0)
    partition->label[16] = 0;
1c00889e:	02050223          	sb	zero,36(a0)
    partition->encrypted = false;
1c0088a2:	020502a3          	sb	zero,37(a0)
    memcpy(partition->label, info->label, 16);
1c0088a6:	d11c                	sw	a5,32(a0)
    partition->read_only = false;
1c0088a8:	02050323          	sb	zero,38(a0)
    
    return (const pi_partition_t *) partition;
}
1c0088ac:	40b2                	lw	ra,12(sp)
1c0088ae:	4422                	lw	s0,8(sp)
1c0088b0:	4492                	lw	s1,4(sp)
1c0088b2:	0141                	addi	sp,sp,16
1c0088b4:	8082                	ret
        return NULL;
1c0088b6:	4501                	li	a0,0
1c0088b8:	bfd5                	j	1c0088ac <pi_partition_find_first+0x50>

1c0088ba <flash_partition_table_verify>:

pi_err_t flash_partition_table_verify(const flash_partition_table_t *table)
{
    const flash_partition_info_t *part;
    const flash_partition_table_header_t *header = &table->header;
    const flash_partition_info_t *partition_table = table->partitions;
1c0088ba:	514c                	lw	a1,36(a0)
    MD5_CTX context;
    uint8_t digest[16];

    // Check magic number for each partition
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c0088bc:	00754683          	lbu	a3,7(a0)
1c0088c0:	4781                	li	a5,0
1c0088c2:	872e                	mv	a4,a1
    {
        part = partition_table + num_parts;
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c0088c4:	1ba00613          	li	a2,442
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c0088c8:	04f69663          	bne	a3,a5,1c008914 <flash_partition_table_verify+0x5a>
        {
            return PI_ERR_INVALID_STATE;
        }
    }

    if (header->crc_flags)
1c0088cc:	00854783          	lbu	a5,8(a0)
1c0088d0:	cfa9                	beqz	a5,1c00892a <flash_partition_table_verify+0x70>
{
1c0088d2:	7155                	addi	sp,sp,-208
1c0088d4:	c5a2                	sw	s0,200(sp)
1c0088d6:	842a                	mv	s0,a0
    {
        MD5_Init(&context);
1c0088d8:	1028                	addi	a0,sp,40
{
1c0088da:	c786                	sw	ra,204(sp)
        MD5_Init(&context);
1c0088dc:	c62e                	sw	a1,12(sp)
1c0088de:	2bb000ef          	jal	ra,1c009398 <MD5_Init>
        MD5_Update(&context, (unsigned char *) partition_table,
                   header->nbr_of_entries * sizeof(flash_partition_info_t));
1c0088e2:	00744603          	lbu	a2,7(s0)
        MD5_Update(&context, (unsigned char *) partition_table,
1c0088e6:	45b2                	lw	a1,12(sp)
1c0088e8:	1028                	addi	a0,sp,40
1c0088ea:	0616                	slli	a2,a2,0x5
1c0088ec:	2df000ef          	jal	ra,1c0093ca <MD5_Update>
        MD5_Final(digest, &context);
1c0088f0:	102c                	addi	a1,sp,40
1c0088f2:	0828                	addi	a0,sp,24
1c0088f4:	373000ef          	jal	ra,1c009466 <MD5_Final>

        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c0088f8:	4641                	li	a2,16
1c0088fa:	082c                	addi	a1,sp,24
1c0088fc:	01440513          	addi	a0,s0,20
1c008900:	66a030ef          	jal	ra,1c00bf6a <strncmp>
        {
            return PI_ERR_INVALID_CRC;
1c008904:	47a1                	li	a5,8
        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c008906:	e111                	bnez	a0,1c00890a <flash_partition_table_verify+0x50>
        }
    }

    return PI_OK;
1c008908:	4781                	li	a5,0
}
1c00890a:	40be                	lw	ra,204(sp)
1c00890c:	442e                	lw	s0,200(sp)
1c00890e:	853e                	mv	a0,a5
1c008910:	6169                	addi	sp,sp,208
1c008912:	8082                	ret
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c008914:	0207580b          	p.lhu	a6,32(a4!)
1c008918:	00c81663          	bne	a6,a2,1c008924 <flash_partition_table_verify+0x6a>
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00891c:	0785                	addi	a5,a5,1
1c00891e:	0ff7f793          	andi	a5,a5,255
1c008922:	b75d                	j	1c0088c8 <flash_partition_table_verify+0xe>
            return PI_ERR_INVALID_STATE;
1c008924:	478d                	li	a5,3
}
1c008926:	853e                	mv	a0,a5
1c008928:	8082                	ret
    return PI_OK;
1c00892a:	4781                	li	a5,0
1c00892c:	bfed                	j	1c008926 <flash_partition_table_verify+0x6c>

1c00892e <flash_partition_table_load>:

pi_err_t flash_partition_table_load(pi_device_t *flash, const flash_partition_table_t **partition_table,
                                    uint8_t *nbr_of_entries)
{
1c00892e:	1101                	addi	sp,sp,-32
1c008930:	ca26                	sw	s1,20(sp)
1c008932:	ce06                	sw	ra,28(sp)
1c008934:	cc22                	sw	s0,24(sp)
1c008936:	c84a                	sw	s2,16(sp)
1c008938:	c64e                	sw	s3,12(sp)
1c00893a:	c452                	sw	s4,8(sp)
1c00893c:	c256                	sw	s5,4(sp)
    flash_partition_info_t *partitions = NULL;

    if(partition_table == NULL)
    {
        PARTITION_TRACE_ERR("Table argument is NULL");
        return PI_ERR_INVALID_ARG;
1c00893e:	4489                	li	s1,2
    if(partition_table == NULL)
1c008940:	c9e1                	beqz	a1,1c008a10 <flash_partition_table_load+0xe2>
1c008942:	892a                	mv	s2,a0
    }

// Alloc table containing header
    table = pi_l2_malloc(sizeof(*table));
1c008944:	02800513          	li	a0,40
1c008948:	89b2                	mv	s3,a2
1c00894a:	8aae                	mv	s5,a1
1c00894c:	053010ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c008950:	842a                	mv	s0,a0
    if(table == NULL)
    {
        PARTITION_TRACE_ERR("Unable to allocate partition table in L2.");
        rc = PI_ERR_L2_NO_MEM;
1c008952:	20100493          	li	s1,513
    if(table == NULL)
1c008956:	cd4d                	beqz	a0,1c008a10 <flash_partition_table_load+0xe2>
        goto mount_error;
    }

    table_offset_l2 = pi_l2_malloc(sizeof(*table_offset_l2));
1c008958:	4511                	li	a0,4
1c00895a:	045010ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c00895e:	84aa                	mv	s1,a0
    if(table_offset_l2 == NULL)
1c008960:	c171                	beqz	a0,1c008a24 <flash_partition_table_load+0xf6>
  api->read(device, pi_flash_addr, data, size);
1c008962:	00092783          	lw	a5,0(s2)
1c008966:	862a                	mv	a2,a0
1c008968:	4581                	li	a1,0
1c00896a:	5b9c                	lw	a5,48(a5)
1c00896c:	4691                	li	a3,4
1c00896e:	854a                	mv	a0,s2
1c008970:	9782                	jalr	a5
        rc = PI_ERR_L2_NO_MEM;
        goto mount_error;
    }

    pi_flash_read(flash, 0, table_offset_l2, 4);
    if(*table_offset_l2 == 0)
1c008972:	0004aa03          	lw	s4,0(s1)

    return PI_OK;

    mount_error:
    if(table_offset_l2)
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c008976:	4591                	li	a1,4
1c008978:	8526                	mv	a0,s1
    if(*table_offset_l2 == 0)
1c00897a:	0a0a0863          	beqz	s4,1c008a2a <flash_partition_table_load+0xfc>
    pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00897e:	02f010ef          	jal	ra,1c00a1ac <pi_l2_free>
1c008982:	00092783          	lw	a5,0(s2)
1c008986:	02000693          	li	a3,32
1c00898a:	00440613          	addi	a2,s0,4
1c00898e:	5b9c                	lw	a5,48(a5)
1c008990:	85d2                	mv	a1,s4
1c008992:	854a                	mv	a0,s2
1c008994:	9782                	jalr	a5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c008996:	00445703          	lhu	a4,4(s0)
1c00899a:	2ba00793          	li	a5,698
        rc = PI_ERR_NOT_FOUND;
1c00899e:	4495                	li	s1,5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c0089a0:	04f71763          	bne	a4,a5,1c0089ee <flash_partition_table_load+0xc0>
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c0089a4:	00644783          	lbu	a5,6(s0)
        rc = PI_ERR_INVALID_VERSION;
1c0089a8:	44a5                	li	s1,9
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c0089aa:	0417b263          	p.bneimm	a5,1,1c0089ee <flash_partition_table_load+0xc0>
    table->partitions = pi_l2_malloc(sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c0089ae:	00744503          	lbu	a0,7(s0)
1c0089b2:	0516                	slli	a0,a0,0x5
1c0089b4:	7ea010ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c0089b8:	d048                	sw	a0,36(s0)
1c0089ba:	862a                	mv	a2,a0
    if(table->partitions == NULL)
1c0089bc:	c525                	beqz	a0,1c008a24 <flash_partition_table_load+0xf6>
1c0089be:	00092783          	lw	a5,0(s2)
                  sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c0089c2:	00744683          	lbu	a3,7(s0)
1c0089c6:	020a0593          	addi	a1,s4,32
1c0089ca:	5b9c                	lw	a5,48(a5)
1c0089cc:	0696                	slli	a3,a3,0x5
1c0089ce:	854a                	mv	a0,s2
1c0089d0:	9782                	jalr	a5
    if(table->header.crc_flags)
1c0089d2:	00844783          	lbu	a5,8(s0)
1c0089d6:	c395                	beqz	a5,1c0089fa <flash_partition_table_load+0xcc>
        rc = flash_partition_table_verify(table);
1c0089d8:	8522                	mv	a0,s0
1c0089da:	ee1ff0ef          	jal	ra,1c0088ba <flash_partition_table_verify>
1c0089de:	84aa                	mv	s1,a0
        if(rc != PI_OK)
1c0089e0:	cd09                	beqz	a0,1c0089fa <flash_partition_table_load+0xcc>
            pi_l2_free(table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c0089e2:	00744583          	lbu	a1,7(s0)
1c0089e6:	5048                	lw	a0,36(s0)
1c0089e8:	0596                	slli	a1,a1,0x5
1c0089ea:	7c2010ef          	jal	ra,1c00a1ac <pi_l2_free>
    if(table)
        pi_l2_free(table, sizeof(*table));
1c0089ee:	02800593          	li	a1,40
1c0089f2:	8522                	mv	a0,s0
1c0089f4:	7b8010ef          	jal	ra,1c00a1ac <pi_l2_free>
1c0089f8:	a821                	j	1c008a10 <flash_partition_table_load+0xe2>
    table->flash = flash;
1c0089fa:	01242023          	sw	s2,0(s0)
    *partition_table = table;
1c0089fe:	008aa023          	sw	s0,0(s5)
    return PI_OK;
1c008a02:	4481                	li	s1,0
    if(nbr_of_entries)
1c008a04:	00098663          	beqz	s3,1c008a10 <flash_partition_table_load+0xe2>
        *nbr_of_entries = table->header.nbr_of_entries;
1c008a08:	00744783          	lbu	a5,7(s0)
1c008a0c:	00f98023          	sb	a5,0(s3)
    return rc;
}
1c008a10:	40f2                	lw	ra,28(sp)
1c008a12:	4462                	lw	s0,24(sp)
1c008a14:	8526                	mv	a0,s1
1c008a16:	4942                	lw	s2,16(sp)
1c008a18:	44d2                	lw	s1,20(sp)
1c008a1a:	49b2                	lw	s3,12(sp)
1c008a1c:	4a22                	lw	s4,8(sp)
1c008a1e:	4a92                	lw	s5,4(sp)
1c008a20:	6105                	addi	sp,sp,32
1c008a22:	8082                	ret
        rc = PI_ERR_L2_NO_MEM;
1c008a24:	20100493          	li	s1,513
1c008a28:	b7d9                	j	1c0089ee <flash_partition_table_load+0xc0>
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c008a2a:	782010ef          	jal	ra,1c00a1ac <pi_l2_free>
        rc = PI_ERR_NOT_FOUND;
1c008a2e:	4495                	li	s1,5
1c008a30:	bf7d                	j	1c0089ee <flash_partition_table_load+0xc0>

1c008a32 <flash_partition_table_free>:

void flash_partition_table_free(const flash_partition_table_t *table)
{
1c008a32:	1141                	addi	sp,sp,-16
1c008a34:	c422                	sw	s0,8(sp)
1c008a36:	c606                	sw	ra,12(sp)
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c008a38:	00754583          	lbu	a1,7(a0)
{
1c008a3c:	842a                	mv	s0,a0
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c008a3e:	5148                	lw	a0,36(a0)
1c008a40:	0596                	slli	a1,a1,0x5
1c008a42:	76a010ef          	jal	ra,1c00a1ac <pi_l2_free>
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c008a46:	8522                	mv	a0,s0
}
1c008a48:	4422                	lw	s0,8(sp)
1c008a4a:	40b2                	lw	ra,12(sp)
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c008a4c:	02800593          	li	a1,40
}
1c008a50:	0141                	addi	sp,sp,16
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c008a52:	75a0106f          	j	1c00a1ac <pi_l2_free>

1c008a56 <flash_partition_find_first>:


const flash_partition_info_t *flash_partition_find_first(const flash_partition_table_t *table, pi_partition_type_t type,
                                                         pi_partition_subtype_t subtype, const char *label)
{
1c008a56:	7179                	addi	sp,sp,-48
1c008a58:	d226                	sw	s1,36(sp)
1c008a5a:	d04a                	sw	s2,32(sp)
1c008a5c:	cc52                	sw	s4,24(sp)
1c008a5e:	ca56                	sw	s5,20(sp)
1c008a60:	d606                	sw	ra,44(sp)
1c008a62:	d422                	sw	s0,40(sp)
1c008a64:	ce4e                	sw	s3,28(sp)
    const flash_partition_info_t *part = NULL;

    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c008a66:	00754983          	lbu	s3,7(a0)
{
1c008a6a:	892a                	mv	s2,a0
1c008a6c:	8a2e                	mv	s4,a1
1c008a6e:	8ab2                	mv	s5,a2
    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c008a70:	4481                	li	s1,0
1c008a72:	0ff4f793          	andi	a5,s1,255
1c008a76:	0137ed63          	bltu	a5,s3,1c008a90 <flash_partition_find_first+0x3a>
        if(label == NULL)
            return part;
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
            return part;
    }
    return NULL;
1c008a7a:	4401                	li	s0,0
}
1c008a7c:	8522                	mv	a0,s0
1c008a7e:	50b2                	lw	ra,44(sp)
1c008a80:	5422                	lw	s0,40(sp)
1c008a82:	5492                	lw	s1,36(sp)
1c008a84:	5902                	lw	s2,32(sp)
1c008a86:	49f2                	lw	s3,28(sp)
1c008a88:	4a62                	lw	s4,24(sp)
1c008a8a:	4ad2                	lw	s5,20(sp)
1c008a8c:	6145                	addi	sp,sp,48
1c008a8e:	8082                	ret
        part = table->partitions + i;
1c008a90:	02492783          	lw	a5,36(s2)
1c008a94:	00549413          	slli	s0,s1,0x5
1c008a98:	943e                	add	s0,s0,a5
        if(part->type != type || part->subtype != subtype)
1c008a9a:	00244783          	lbu	a5,2(s0)
1c008a9e:	03479063          	bne	a5,s4,1c008abe <flash_partition_find_first+0x68>
1c008aa2:	00344783          	lbu	a5,3(s0)
1c008aa6:	01579c63          	bne	a5,s5,1c008abe <flash_partition_find_first+0x68>
        if(label == NULL)
1c008aaa:	dae9                	beqz	a3,1c008a7c <flash_partition_find_first+0x26>
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
1c008aac:	8536                	mv	a0,a3
1c008aae:	4641                	li	a2,16
1c008ab0:	00c40593          	addi	a1,s0,12
1c008ab4:	c636                	sw	a3,12(sp)
1c008ab6:	4b4030ef          	jal	ra,1c00bf6a <strncmp>
1c008aba:	46b2                	lw	a3,12(sp)
1c008abc:	d161                	beqz	a0,1c008a7c <flash_partition_find_first+0x26>
1c008abe:	0485                	addi	s1,s1,1
1c008ac0:	bf4d                	j	1c008a72 <flash_partition_find_first+0x1c>

1c008ac2 <body>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c008ac2:	715d                	addi	sp,sp,-80
	MD5_u32plus a, b, c, d;
	MD5_u32plus saved_a, saved_b, saved_c, saved_d;

	ptr = (const unsigned char *)data;

	a = ctx->a;
1c008ac4:	00852283          	lw	t0,8(a0)
1c008ac8:	fc060613          	addi	a2,a2,-64
{
1c008acc:	de52                	sw	s4,60(sp)
1c008ace:	dc56                	sw	s5,56(sp)
1c008ad0:	8219                	srli	a2,a2,0x6
	b = ctx->b;
1c008ad2:	00c52803          	lw	a6,12(a0)
	c = ctx->c;
1c008ad6:	01052a03          	lw	s4,16(a0)
	d = ctx->d;
1c008ada:	01452a83          	lw	s5,20(a0)
1c008ade:	0605                	addi	a2,a2,1
{
1c008ae0:	c6a2                	sw	s0,76(sp)
1c008ae2:	c4a6                	sw	s1,72(sp)
1c008ae4:	c2ca                	sw	s2,68(sp)
1c008ae6:	c0ce                	sw	s3,64(sp)
1c008ae8:	da5a                	sw	s6,52(sp)
1c008aea:	d85e                	sw	s7,48(sp)
1c008aec:	d662                	sw	s8,44(sp)
1c008aee:	d466                	sw	s9,40(sp)
1c008af0:	d26a                	sw	s10,36(sp)
1c008af2:	d06e                	sw	s11,32(sp)
1c008af4:	87aa                	mv	a5,a0
	a = ctx->a;
1c008af6:	cc16                	sw	t0,24(sp)
1c008af8:	ce32                	sw	a2,28(sp)
1c008afa:	4362                	lw	t1,24(sp)
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c008afc:	0005a983          	lw	s3,0(a1)
1c008b00:	d76aa537          	lui	a0,0xd76aa
1c008b04:	47850513          	addi	a0,a0,1144 # d76aa478 <pulp__FC+0xd76aa479>
1c008b08:	00a30733          	add	a4,t1,a0
1c008b0c:	013706b3          	add	a3,a4,s3
1c008b10:	015a4733          	xor	a4,s4,s5
1c008b14:	01077733          	and	a4,a4,a6
1c008b18:	0537ac23          	sw	s3,88(a5)
1c008b1c:	01574733          	xor	a4,a4,s5
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c008b20:	41d0                	lw	a2,4(a1)
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c008b22:	9736                	add	a4,a4,a3
1c008b24:	e8c7b6b7          	lui	a3,0xe8c7b
1c008b28:	4365                	li	t1,25
1c008b2a:	75668693          	addi	a3,a3,1878 # e8c7b756 <pulp__FC+0xe8c7b757>
1c008b2e:	00da8e33          	add	t3,s5,a3
1c008b32:	08675733          	p.ror	a4,a4,t1
1c008b36:	9742                	add	a4,a4,a6
1c008b38:	00ce06b3          	add	a3,t3,a2
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c008b3c:	01484e33          	xor	t3,a6,s4
1c008b40:	cff0                	sw	a2,92(a5)
1c008b42:	00ee7e33          	and	t3,t3,a4
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c008b46:	0085a883          	lw	a7,8(a1)
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c008b4a:	014e4e33          	xor	t3,t3,s4
1c008b4e:	24207bb7          	lui	s7,0x24207
1c008b52:	4d51                	li	s10,20
1c008b54:	9e36                	add	t3,t3,a3
1c008b56:	0dbb8b93          	addi	s7,s7,219 # 242070db <__l2_end+0x81f8e07>
1c008b5a:	017a0533          	add	a0,s4,s7
1c008b5e:	09ae5e33          	p.ror	t3,t3,s10
1c008b62:	9e3a                	add	t3,t3,a4
1c008b64:	011506b3          	add	a3,a0,a7
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c008b68:	00e84533          	xor	a0,a6,a4
1c008b6c:	0717a023          	sw	a7,96(a5)
1c008b70:	01c57533          	and	a0,a0,t3
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c008b74:	00c5a283          	lw	t0,12(a1)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c008b78:	01054533          	xor	a0,a0,a6
1c008b7c:	c1bddc37          	lui	s8,0xc1bdd
1c008b80:	4cbd                	li	s9,15
1c008b82:	9536                	add	a0,a0,a3
1c008b84:	eeec0c13          	addi	s8,s8,-274 # c1bdceee <pulp__FC+0xc1bdceef>
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c008b88:	c432                	sw	a2,8(sp)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c008b8a:	09955533          	p.ror	a0,a0,s9
1c008b8e:	01880633          	add	a2,a6,s8
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c008b92:	0657a223          	sw	t0,100(a5)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c008b96:	9572                	add	a0,a0,t3
1c008b98:	005606b3          	add	a3,a2,t0
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c008b9c:	01c74633          	xor	a2,a4,t3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c008ba0:	0105ad83          	lw	s11,16(a1)
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c008ba4:	8e69                	and	a2,a2,a0
1c008ba6:	8e39                	xor	a2,a2,a4
1c008ba8:	f57c1eb7          	lui	t4,0xf57c1
1c008bac:	4c29                	li	s8,10
1c008bae:	9636                	add	a2,a2,a3
1c008bb0:	fafe8e93          	addi	t4,t4,-81 # f57c0faf <pulp__FC+0xf57c0fb0>
1c008bb4:	01dd86b3          	add	a3,s11,t4
1c008bb8:	09865633          	p.ror	a2,a2,s8
1c008bbc:	962a                	add	a2,a2,a0
1c008bbe:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c008bc0:	00ae46b3          	xor	a3,t3,a0
1c008bc4:	07b7a423          	sw	s11,104(a5)
1c008bc8:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c008bca:	49c0                	lw	s0,20(a1)
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c008bcc:	01c6c6b3          	xor	a3,a3,t3
1c008bd0:	9736                	add	a4,a4,a3
1c008bd2:	4787c6b7          	lui	a3,0x4787c
1c008bd6:	62a68693          	addi	a3,a3,1578 # 4787c62a <__l2_end+0x2b86e356>
1c008bda:	00d40fb3          	add	t6,s0,a3
1c008bde:	08675733          	p.ror	a4,a4,t1
1c008be2:	9732                	add	a4,a4,a2
1c008be4:	9e7e                	add	t3,t3,t6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c008be6:	00c54fb3          	xor	t6,a0,a2
1c008bea:	00efffb3          	and	t6,t6,a4
1c008bee:	d7e0                	sw	s0,108(a5)
1c008bf0:	00afcfb3          	xor	t6,t6,a0
1c008bf4:	9ff2                	add	t6,t6,t3
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c008bf6:	0185ae03          	lw	t3,24(a1)
1c008bfa:	a8304bb7          	lui	s7,0xa8304
1c008bfe:	613b8b93          	addi	s7,s7,1555 # a8304613 <pulp__FC+0xa8304614>
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c008c02:	c646                	sw	a7,12(sp)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c008c04:	09afdfb3          	p.ror	t6,t6,s10
1c008c08:	017e08b3          	add	a7,t3,s7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c008c0c:	07c7a823          	sw	t3,112(a5)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c008c10:	9fba                	add	t6,t6,a4
1c008c12:	9546                	add	a0,a0,a7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c008c14:	00e648b3          	xor	a7,a2,a4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c008c18:	01c5a903          	lw	s2,28(a1)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c008c1c:	01f8f8b3          	and	a7,a7,t6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c008c20:	c86e                	sw	s11,16(sp)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c008c22:	00c8c8b3          	xor	a7,a7,a2
1c008c26:	fd469db7          	lui	s11,0xfd469
1c008c2a:	98aa                	add	a7,a7,a0
1c008c2c:	501d8d93          	addi	s11,s11,1281 # fd469501 <pulp__FC+0xfd469502>
1c008c30:	01b906b3          	add	a3,s2,s11
1c008c34:	0998d8b3          	p.ror	a7,a7,s9
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c008c38:	0727aa23          	sw	s2,116(a5)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c008c3c:	98fe                	add	a7,a7,t6
1c008c3e:	9636                	add	a2,a2,a3
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c008c40:	01f746b3          	xor	a3,a4,t6
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c008c44:	0205af03          	lw	t5,32(a1)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c008c48:	0116f6b3          	and	a3,a3,a7
1c008c4c:	8eb9                	xor	a3,a3,a4
1c008c4e:	6980aeb7          	lui	t4,0x6980a
1c008c52:	9636                	add	a2,a2,a3
1c008c54:	8d8e8e93          	addi	t4,t4,-1832 # 698098d8 <__l2_end+0x4d7fb604>
1c008c58:	01df06b3          	add	a3,t5,t4
1c008c5c:	09865633          	p.ror	a2,a2,s8
1c008c60:	9646                	add	a2,a2,a7
1c008c62:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c008c64:	011fc6b3          	xor	a3,t6,a7
1c008c68:	07e7ac23          	sw	t5,120(a5)
1c008c6c:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c008c6e:	51c8                	lw	a0,36(a1)
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c008c70:	01f6c6b3          	xor	a3,a3,t6
1c008c74:	96ba                	add	a3,a3,a4
1c008c76:	8b44f737          	lui	a4,0x8b44f
1c008c7a:	7af70713          	addi	a4,a4,1967 # 8b44f7af <pulp__FC+0x8b44f7b0>
1c008c7e:	00e504b3          	add	s1,a0,a4
1c008c82:	0866d6b3          	p.ror	a3,a3,t1
1c008c86:	96b2                	add	a3,a3,a2
1c008c88:	9fa6                	add	t6,t6,s1
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c008c8a:	00c8c4b3          	xor	s1,a7,a2
1c008c8e:	8cf5                	and	s1,s1,a3
1c008c90:	dfe8                	sw	a0,124(a5)
1c008c92:	0114c4b3          	xor	s1,s1,a7
1c008c96:	94fe                	add	s1,s1,t6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c008c98:	0285af83          	lw	t6,40(a1)
1c008c9c:	7bd9                	lui	s7,0xffff6
1c008c9e:	bb1b8b93          	addi	s7,s7,-1103 # ffff5bb1 <pulp__FC+0xffff5bb2>
1c008ca2:	017f8eb3          	add	t4,t6,s7
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c008ca6:	09a4d4b3          	p.ror	s1,s1,s10
1c008caa:	94b6                	add	s1,s1,a3
1c008cac:	98f6                	add	a7,a7,t4
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c008cae:	00d64eb3          	xor	t4,a2,a3
1c008cb2:	009efeb3          	and	t4,t4,s1
1c008cb6:	09f7a023          	sw	t6,128(a5)
1c008cba:	00ceceb3          	xor	t4,t4,a2
1c008cbe:	9ec6                	add	t4,t4,a7
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c008cc0:	02c5a883          	lw	a7,44(a1)
1c008cc4:	895cddb7          	lui	s11,0x895cd
1c008cc8:	7bed8d93          	addi	s11,s11,1982 # 895cd7be <pulp__FC+0x895cd7bf>
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c008ccc:	ca2a                	sw	a0,20(sp)
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c008cce:	099edeb3          	p.ror	t4,t4,s9
1c008cd2:	01b88533          	add	a0,a7,s11
1c008cd6:	9ea6                	add	t4,t4,s1
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c008cd8:	0917a223          	sw	a7,132(a5)
1c008cdc:	962a                	add	a2,a2,a0
1c008cde:	0096c533          	xor	a0,a3,s1
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c008ce2:	0305a383          	lw	t2,48(a1)
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c008ce6:	01d57533          	and	a0,a0,t4
1c008cea:	8d35                	xor	a0,a0,a3
1c008cec:	6b901737          	lui	a4,0x6b901
1c008cf0:	9532                	add	a0,a0,a2
1c008cf2:	12270713          	addi	a4,a4,290 # 6b901122 <__l2_end+0x4f8f2e4e>
1c008cf6:	00e38633          	add	a2,t2,a4
1c008cfa:	09855533          	p.ror	a0,a0,s8
1c008cfe:	9576                	add	a0,a0,t4
1c008d00:	96b2                	add	a3,a3,a2
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c008d02:	01d4c633          	xor	a2,s1,t4
1c008d06:	8e69                	and	a2,a2,a0
1c008d08:	8e25                	xor	a2,a2,s1
1c008d0a:	0877a423          	sw	t2,136(a5)
1c008d0e:	96b2                	add	a3,a3,a2
1c008d10:	0866d6b3          	p.ror	a3,a3,t1
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c008d14:	0345a303          	lw	t1,52(a1)
1c008d18:	fd987db7          	lui	s11,0xfd987
1c008d1c:	193d8d93          	addi	s11,s11,403 # fd987193 <pulp__FC+0xfd987194>
1c008d20:	01b30bb3          	add	s7,t1,s11
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c008d24:	00d50733          	add	a4,a0,a3
1c008d28:	94de                	add	s1,s1,s7
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c008d2a:	00aecbb3          	xor	s7,t4,a0
1c008d2e:	00ebfbb3          	and	s7,s7,a4
1c008d32:	01dbcbb3          	xor	s7,s7,t4
1c008d36:	94de                	add	s1,s1,s7
1c008d38:	0867a623          	sw	t1,140(a5)
1c008d3c:	09a4dbb3          	p.ror	s7,s1,s10
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c008d40:	5d84                	lw	s1,56(a1)
1c008d42:	a6794637          	lui	a2,0xa6794
1c008d46:	38e60613          	addi	a2,a2,910 # a679438e <pulp__FC+0xa679438f>
1c008d4a:	00c48b33          	add	s6,s1,a2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c008d4e:	9bba                	add	s7,s7,a4
1c008d50:	9eda                	add	t4,t4,s6
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c008d52:	00e54b33          	xor	s6,a0,a4
1c008d56:	017b7b33          	and	s6,s6,s7
1c008d5a:	00ab4b33          	xor	s6,s6,a0
1c008d5e:	0897a823          	sw	s1,144(a5)
1c008d62:	9eda                	add	t4,t4,s6
1c008d64:	099edb33          	p.ror	s6,t4,s9
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c008d68:	03c5ae83          	lw	t4,60(a1)
1c008d6c:	49b416b7          	lui	a3,0x49b41
1c008d70:	82168693          	addi	a3,a3,-2015 # 49b40821 <__l2_end+0x2db3254d>
1c008d74:	00de8633          	add	a2,t4,a3
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c008d78:	9b5e                	add	s6,s6,s7
1c008d7a:	9532                	add	a0,a0,a2
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c008d7c:	01774633          	xor	a2,a4,s7
1c008d80:	01667633          	and	a2,a2,s6
1c008d84:	8e39                	xor	a2,a2,a4
1c008d86:	9532                	add	a0,a0,a2
1c008d88:	09855633          	p.ror	a2,a0,s8
1c008d8c:	4c22                	lw	s8,8(sp)
1c008d8e:	f61e2d37          	lui	s10,0xf61e2
1c008d92:	562d0d13          	addi	s10,s10,1378 # f61e2562 <pulp__FC+0xf61e2563>
1c008d96:	965a                	add	a2,a2,s6
1c008d98:	01ac06b3          	add	a3,s8,s10
1c008d9c:	9736                	add	a4,a4,a3

/* Round 2 */
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
1c008d9e:	00cb46b3          	xor	a3,s6,a2
1c008da2:	0176f6b3          	and	a3,a3,s7
1c008da6:	0166c6b3          	xor	a3,a3,s6
1c008daa:	4ded                	li	s11,27
1c008dac:	96ba                	add	a3,a3,a4
1c008dae:	c040b537          	lui	a0,0xc040b
1c008db2:	09b6d6b3          	p.ror	a3,a3,s11
1c008db6:	34050513          	addi	a0,a0,832 # c040b340 <pulp__FC+0xc040b341>
1c008dba:	96b2                	add	a3,a3,a2
1c008dbc:	00ae0733          	add	a4,t3,a0
1c008dc0:	9bba                	add	s7,s7,a4
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
1c008dc2:	00d64733          	xor	a4,a2,a3
1c008dc6:	01677733          	and	a4,a4,s6
1c008dca:	8f31                	xor	a4,a4,a2
1c008dcc:	4d5d                	li	s10,23
1c008dce:	975e                	add	a4,a4,s7
1c008dd0:	265e6bb7          	lui	s7,0x265e6
1c008dd4:	09a75733          	p.ror	a4,a4,s10
1c008dd8:	a51b8b93          	addi	s7,s7,-1455 # 265e5a51 <__l2_end+0xa5d777d>
1c008ddc:	9736                	add	a4,a4,a3
1c008dde:	01788533          	add	a0,a7,s7
1c008de2:	955a                	add	a0,a0,s6
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
1c008de4:	00e6cb33          	xor	s6,a3,a4
1c008de8:	00cb7b33          	and	s6,s6,a2
1c008dec:	00db4b33          	xor	s6,s6,a3
1c008df0:	4cc9                	li	s9,18
1c008df2:	9b2a                	add	s6,s6,a0
1c008df4:	e9b6cc37          	lui	s8,0xe9b6c
1c008df8:	099b5b33          	p.ror	s6,s6,s9
1c008dfc:	7aac0c13          	addi	s8,s8,1962 # e9b6c7aa <pulp__FC+0xe9b6c7ab>
1c008e00:	9b3a                	add	s6,s6,a4
1c008e02:	01898533          	add	a0,s3,s8
1c008e06:	962a                	add	a2,a2,a0
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
1c008e08:	01674533          	xor	a0,a4,s6
1c008e0c:	8d75                	and	a0,a0,a3
1c008e0e:	8d39                	xor	a0,a0,a4
1c008e10:	4c31                	li	s8,12
1c008e12:	9532                	add	a0,a0,a2
1c008e14:	d62f1bb7          	lui	s7,0xd62f1
1c008e18:	09855533          	p.ror	a0,a0,s8
1c008e1c:	05db8b93          	addi	s7,s7,93 # d62f105d <pulp__FC+0xd62f105e>
1c008e20:	955a                	add	a0,a0,s6
1c008e22:	01740633          	add	a2,s0,s7
1c008e26:	96b2                	add	a3,a3,a2
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
1c008e28:	00ab4633          	xor	a2,s6,a0
1c008e2c:	8e79                	and	a2,a2,a4
1c008e2e:	01664633          	xor	a2,a2,s6
1c008e32:	96b2                	add	a3,a3,a2
1c008e34:	02441bb7          	lui	s7,0x2441
1c008e38:	09b6d6b3          	p.ror	a3,a3,s11
1c008e3c:	453b8b93          	addi	s7,s7,1107 # 2441453 <__L2+0x23c1453>
1c008e40:	96aa                	add	a3,a3,a0
1c008e42:	017f8633          	add	a2,t6,s7
1c008e46:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
1c008e48:	00d54633          	xor	a2,a0,a3
1c008e4c:	01667633          	and	a2,a2,s6
1c008e50:	8e29                	xor	a2,a2,a0
1c008e52:	9732                	add	a4,a4,a2
1c008e54:	d8a1ebb7          	lui	s7,0xd8a1e
1c008e58:	09a75733          	p.ror	a4,a4,s10
1c008e5c:	681b8b93          	addi	s7,s7,1665 # d8a1e681 <pulp__FC+0xd8a1e682>
1c008e60:	9736                	add	a4,a4,a3
1c008e62:	017e8633          	add	a2,t4,s7
1c008e66:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
1c008e68:	00e6c633          	xor	a2,a3,a4
1c008e6c:	8e69                	and	a2,a2,a0
1c008e6e:	8e35                	xor	a2,a2,a3
1c008e70:	4bc2                	lw	s7,16(sp)
1c008e72:	9b32                	add	s6,s6,a2
1c008e74:	e7d40637          	lui	a2,0xe7d40
1c008e78:	099b5b33          	p.ror	s6,s6,s9
1c008e7c:	bc860613          	addi	a2,a2,-1080 # e7d3fbc8 <pulp__FC+0xe7d3fbc9>
1c008e80:	9b3a                	add	s6,s6,a4
1c008e82:	965e                	add	a2,a2,s7
1c008e84:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
1c008e86:	01674633          	xor	a2,a4,s6
1c008e8a:	8e75                	and	a2,a2,a3
1c008e8c:	8e39                	xor	a2,a2,a4
1c008e8e:	9532                	add	a0,a0,a2
1c008e90:	4652                	lw	a2,20(sp)
1c008e92:	21e1dbb7          	lui	s7,0x21e1d
1c008e96:	09855533          	p.ror	a0,a0,s8
1c008e9a:	de6b8b93          	addi	s7,s7,-538 # 21e1cde6 <__l2_end+0x5e0eb12>
1c008e9e:	955a                	add	a0,a0,s6
1c008ea0:	9bb2                	add	s7,s7,a2
1c008ea2:	96de                	add	a3,a3,s7
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
1c008ea4:	00ab4bb3          	xor	s7,s6,a0
1c008ea8:	00ebfbb3          	and	s7,s7,a4
1c008eac:	016bcbb3          	xor	s7,s7,s6
1c008eb0:	9bb6                	add	s7,s7,a3
1c008eb2:	c3370637          	lui	a2,0xc3370
1c008eb6:	09bbdbb3          	p.ror	s7,s7,s11
1c008eba:	7d660613          	addi	a2,a2,2006 # c33707d6 <pulp__FC+0xc33707d7>
1c008ebe:	9baa                	add	s7,s7,a0
1c008ec0:	9626                	add	a2,a2,s1
1c008ec2:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
1c008ec4:	01754633          	xor	a2,a0,s7
1c008ec8:	01667633          	and	a2,a2,s6
1c008ecc:	8e29                	xor	a2,a2,a0
1c008ece:	963a                	add	a2,a2,a4
1c008ed0:	f4d51737          	lui	a4,0xf4d51
1c008ed4:	09a65633          	p.ror	a2,a2,s10
1c008ed8:	d8770713          	addi	a4,a4,-633 # f4d50d87 <pulp__FC+0xf4d50d88>
1c008edc:	965e                	add	a2,a2,s7
1c008ede:	9716                	add	a4,a4,t0
1c008ee0:	9b3a                	add	s6,s6,a4
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
1c008ee2:	00cbc733          	xor	a4,s7,a2
1c008ee6:	8f69                	and	a4,a4,a0
1c008ee8:	01774733          	xor	a4,a4,s7
1c008eec:	9b3a                	add	s6,s6,a4
1c008eee:	455a1737          	lui	a4,0x455a1
1c008ef2:	099b5b33          	p.ror	s6,s6,s9
1c008ef6:	4ed70713          	addi	a4,a4,1261 # 455a14ed <__l2_end+0x29593219>
1c008efa:	9b32                	add	s6,s6,a2
1c008efc:	977a                	add	a4,a4,t5
1c008efe:	953a                	add	a0,a0,a4
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
1c008f00:	01664733          	xor	a4,a2,s6
1c008f04:	01777733          	and	a4,a4,s7
1c008f08:	8f31                	xor	a4,a4,a2
1c008f0a:	953a                	add	a0,a0,a4
1c008f0c:	a9e3f6b7          	lui	a3,0xa9e3f
1c008f10:	09855533          	p.ror	a0,a0,s8
1c008f14:	90568693          	addi	a3,a3,-1787 # a9e3e905 <pulp__FC+0xa9e3e906>
1c008f18:	955a                	add	a0,a0,s6
1c008f1a:	969a                	add	a3,a3,t1
1c008f1c:	9bb6                	add	s7,s7,a3
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
1c008f1e:	00ab46b3          	xor	a3,s6,a0
1c008f22:	8ef1                	and	a3,a3,a2
1c008f24:	0166c6b3          	xor	a3,a3,s6
1c008f28:	9bb6                	add	s7,s7,a3
1c008f2a:	09bbd6b3          	p.ror	a3,s7,s11
1c008f2e:	4bb2                	lw	s7,12(sp)
1c008f30:	fcefa737          	lui	a4,0xfcefa
1c008f34:	3f870713          	addi	a4,a4,1016 # fcefa3f8 <pulp__FC+0xfcefa3f9>
1c008f38:	96aa                	add	a3,a3,a0
1c008f3a:	975e                	add	a4,a4,s7
1c008f3c:	963a                	add	a2,a2,a4
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
1c008f3e:	00d54733          	xor	a4,a0,a3
1c008f42:	01677733          	and	a4,a4,s6
1c008f46:	8f29                	xor	a4,a4,a0
1c008f48:	963a                	add	a2,a2,a4
1c008f4a:	09a65733          	p.ror	a4,a2,s10
1c008f4e:	676f0637          	lui	a2,0x676f0
1c008f52:	2d960613          	addi	a2,a2,729 # 676f02d9 <__l2_end+0x4b6e2005>
1c008f56:	9736                	add	a4,a4,a3
1c008f58:	964a                	add	a2,a2,s2
1c008f5a:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
1c008f5c:	00e6c633          	xor	a2,a3,a4
1c008f60:	8e69                	and	a2,a2,a0
1c008f62:	8e35                	xor	a2,a2,a3
1c008f64:	9b32                	add	s6,s6,a2
1c008f66:	8d2a5637          	lui	a2,0x8d2a5
1c008f6a:	099b5b33          	p.ror	s6,s6,s9
1c008f6e:	c8a60613          	addi	a2,a2,-886 # 8d2a4c8a <pulp__FC+0x8d2a4c8b>
1c008f72:	9b3a                	add	s6,s6,a4
1c008f74:	961e                	add	a2,a2,t2
1c008f76:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
1c008f78:	01674633          	xor	a2,a4,s6
1c008f7c:	8e75                	and	a2,a2,a3
1c008f7e:	8e39                	xor	a2,a2,a4
1c008f80:	9532                	add	a0,a0,a2
1c008f82:	09855533          	p.ror	a0,a0,s8
1c008f86:	fffa4637          	lui	a2,0xfffa4
1c008f8a:	955a                	add	a0,a0,s6
1c008f8c:	94260613          	addi	a2,a2,-1726 # fffa3942 <pulp__FC+0xfffa3943>

/* Round 3 */
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
1c008f90:	00ab4bb3          	xor	s7,s6,a0
1c008f94:	9622                	add	a2,a2,s0
1c008f96:	96b2                	add	a3,a3,a2
1c008f98:	00ebc633          	xor	a2,s7,a4
1c008f9c:	4cf1                	li	s9,28
1c008f9e:	96b2                	add	a3,a3,a2
1c008fa0:	8771f637          	lui	a2,0x8771f
1c008fa4:	0996d6b3          	p.ror	a3,a3,s9
1c008fa8:	68160613          	addi	a2,a2,1665 # 8771f681 <pulp__FC+0x8771f682>
1c008fac:	96aa                	add	a3,a3,a0
1c008fae:	967a                	add	a2,a2,t5
1c008fb0:	9732                	add	a4,a4,a2
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
1c008fb2:	00dbc633          	xor	a2,s7,a3
1c008fb6:	4c55                	li	s8,21
1c008fb8:	963a                	add	a2,a2,a4
1c008fba:	09865633          	p.ror	a2,a2,s8
1c008fbe:	6d9d6737          	lui	a4,0x6d9d6
1c008fc2:	9636                	add	a2,a2,a3
1c008fc4:	12270713          	addi	a4,a4,290 # 6d9d6122 <__l2_end+0x519c7e4e>
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
1c008fc8:	00c6cd33          	xor	s10,a3,a2
1c008fcc:	9746                	add	a4,a4,a7
1c008fce:	975a                	add	a4,a4,s6
1c008fd0:	00ad4b33          	xor	s6,s10,a0
1c008fd4:	4bc1                	li	s7,16
1c008fd6:	975a                	add	a4,a4,s6
1c008fd8:	fde54b37          	lui	s6,0xfde54
1c008fdc:	09775733          	p.ror	a4,a4,s7
1c008fe0:	80cb0b13          	addi	s6,s6,-2036 # fde5380c <pulp__FC+0xfde5380d>
1c008fe4:	9732                	add	a4,a4,a2
1c008fe6:	9b26                	add	s6,s6,s1
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
1c008fe8:	00ed4d33          	xor	s10,s10,a4
1c008fec:	955a                	add	a0,a0,s6
1c008fee:	956a                	add	a0,a0,s10
1c008ff0:	4b25                	li	s6,9
1c008ff2:	09655533          	p.ror	a0,a0,s6
1c008ff6:	953a                	add	a0,a0,a4
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c008ff8:	00a74d33          	xor	s10,a4,a0
1c008ffc:	4da2                	lw	s11,8(sp)
1c008ffe:	c06a                	sw	s10,0(sp)
1c009000:	a4befd37          	lui	s10,0xa4bef
1c009004:	a44d0d13          	addi	s10,s10,-1468 # a4beea44 <pulp__FC+0xa4beea45>
1c009008:	9dea                	add	s11,s11,s10
1c00900a:	96ee                	add	a3,a3,s11
1c00900c:	4d82                	lw	s11,0(sp)
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00900e:	09d7aa23          	sw	t4,148(a5)
		a += saved_a;
		b += saved_b;
		c += saved_c;
		d += saved_d;

		ptr += 64;
1c009012:	04058593          	addi	a1,a1,64
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c009016:	00cdcd33          	xor	s10,s11,a2
1c00901a:	96ea                	add	a3,a3,s10
1c00901c:	4d42                	lw	s10,16(sp)
1c00901e:	4bdeddb7          	lui	s11,0x4bded
1c009022:	fa9d8d93          	addi	s11,s11,-87 # 4bdecfa9 <__l2_end+0x2fddecd5>
1c009026:	9d6e                	add	s10,s10,s11
1c009028:	966a                	add	a2,a2,s10
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00902a:	4d02                	lw	s10,0(sp)
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00902c:	0996d6b3          	p.ror	a3,a3,s9
1c009030:	96aa                	add	a3,a3,a0
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c009032:	00dd4db3          	xor	s11,s10,a3
1c009036:	966e                	add	a2,a2,s11
1c009038:	09865633          	p.ror	a2,a2,s8
1c00903c:	f6bb5db7          	lui	s11,0xf6bb5
1c009040:	9636                	add	a2,a2,a3
1c009042:	b60d8d93          	addi	s11,s11,-1184 # f6bb4b60 <pulp__FC+0xf6bb4b61>
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
1c009046:	00c6cd33          	xor	s10,a3,a2
1c00904a:	9dca                	add	s11,s11,s2
1c00904c:	976e                	add	a4,a4,s11
1c00904e:	00ad4db3          	xor	s11,s10,a0
1c009052:	976e                	add	a4,a4,s11
1c009054:	bebfcdb7          	lui	s11,0xbebfc
1c009058:	09775733          	p.ror	a4,a4,s7
1c00905c:	c70d8d93          	addi	s11,s11,-912 # bebfbc70 <pulp__FC+0xbebfbc71>
1c009060:	9732                	add	a4,a4,a2
1c009062:	9dfe                	add	s11,s11,t6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
1c009064:	00ed4d33          	xor	s10,s10,a4
1c009068:	956e                	add	a0,a0,s11
1c00906a:	956a                	add	a0,a0,s10
1c00906c:	09655533          	p.ror	a0,a0,s6
1c009070:	289b8d37          	lui	s10,0x289b8
1c009074:	953a                	add	a0,a0,a4
1c009076:	ec6d0d13          	addi	s10,s10,-314 # 289b7ec6 <__l2_end+0xc9a9bf2>
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
1c00907a:	00a74db3          	xor	s11,a4,a0
1c00907e:	9d1a                	add	s10,s10,t1
1c009080:	96ea                	add	a3,a3,s10
1c009082:	00cdcd33          	xor	s10,s11,a2
1c009086:	9d36                	add	s10,s10,a3
1c009088:	eaa126b7          	lui	a3,0xeaa12
1c00908c:	099d5d33          	p.ror	s10,s10,s9
1c009090:	7fa68693          	addi	a3,a3,2042 # eaa127fa <pulp__FC+0xeaa127fb>
1c009094:	9d2a                	add	s10,s10,a0
1c009096:	96ce                	add	a3,a3,s3
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
1c009098:	01adcdb3          	xor	s11,s11,s10
1c00909c:	9636                	add	a2,a2,a3
1c00909e:	966e                	add	a2,a2,s11
1c0090a0:	09865633          	p.ror	a2,a2,s8
1c0090a4:	d4ef3db7          	lui	s11,0xd4ef3
1c0090a8:	966a                	add	a2,a2,s10
1c0090aa:	085d8d93          	addi	s11,s11,133 # d4ef3085 <pulp__FC+0xd4ef3086>
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
1c0090ae:	00cd46b3          	xor	a3,s10,a2
1c0090b2:	9d96                	add	s11,s11,t0
1c0090b4:	976e                	add	a4,a4,s11
1c0090b6:	00a6cdb3          	xor	s11,a3,a0
1c0090ba:	9dba                	add	s11,s11,a4
1c0090bc:	04882737          	lui	a4,0x4882
1c0090c0:	097dddb3          	p.ror	s11,s11,s7
1c0090c4:	d0570713          	addi	a4,a4,-763 # 4881d05 <__L2+0x4801d05>
1c0090c8:	9db2                	add	s11,s11,a2
1c0090ca:	9772                	add	a4,a4,t3
1c0090cc:	953a                	add	a0,a0,a4
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
1c0090ce:	01b6c6b3          	xor	a3,a3,s11
1c0090d2:	96aa                	add	a3,a3,a0
1c0090d4:	0966d6b3          	p.ror	a3,a3,s6
1c0090d8:	96ee                	add	a3,a3,s11
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
1c0090da:	00ddc533          	xor	a0,s11,a3
1c0090de:	4752                	lw	a4,20(sp)
1c0090e0:	c02a                	sw	a0,0(sp)
1c0090e2:	d9d4d537          	lui	a0,0xd9d4d
1c0090e6:	03950513          	addi	a0,a0,57 # d9d4d039 <pulp__FC+0xd9d4d03a>
1c0090ea:	972a                	add	a4,a4,a0
1c0090ec:	9d3a                	add	s10,s10,a4
1c0090ee:	4702                	lw	a4,0(sp)
1c0090f0:	00c74533          	xor	a0,a4,a2
1c0090f4:	9d2a                	add	s10,s10,a0
1c0090f6:	e6dba537          	lui	a0,0xe6dba
1c0090fa:	099d5cb3          	p.ror	s9,s10,s9
1c0090fe:	9e550513          	addi	a0,a0,-1563 # e6db99e5 <pulp__FC+0xe6db99e6>
1c009102:	9cb6                	add	s9,s9,a3
1c009104:	951e                	add	a0,a0,t2
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
1c009106:	01974733          	xor	a4,a4,s9
1c00910a:	962a                	add	a2,a2,a0
1c00910c:	963a                	add	a2,a2,a4
1c00910e:	09865c33          	p.ror	s8,a2,s8
1c009112:	1fa28737          	lui	a4,0x1fa28
1c009116:	9c66                	add	s8,s8,s9
1c009118:	cf870713          	addi	a4,a4,-776 # 1fa27cf8 <__l2_end+0x3a19a24>
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
1c00911c:	018ccd33          	xor	s10,s9,s8
1c009120:	9776                	add	a4,a4,t4
1c009122:	9dba                	add	s11,s11,a4
1c009124:	00dd4733          	xor	a4,s10,a3
1c009128:	9dba                	add	s11,s11,a4
1c00912a:	097ddbb3          	p.ror	s7,s11,s7
1c00912e:	4db2                	lw	s11,12(sp)
1c009130:	c4ac5737          	lui	a4,0xc4ac5
1c009134:	66570713          	addi	a4,a4,1637 # c4ac5665 <pulp__FC+0xc4ac5666>
1c009138:	9be2                	add	s7,s7,s8
1c00913a:	976e                	add	a4,a4,s11
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
1c00913c:	017d4d33          	xor	s10,s10,s7
1c009140:	96ba                	add	a3,a3,a4
1c009142:	f4292737          	lui	a4,0xf4292
1c009146:	96ea                	add	a3,a3,s10
1c009148:	24470713          	addi	a4,a4,580 # f4292244 <pulp__FC+0xf4292245>
1c00914c:	0966db33          	p.ror	s6,a3,s6
1c009150:	99ba                	add	s3,s3,a4
1c009152:	9b5e                	add	s6,s6,s7
1c009154:	99e6                	add	s3,s3,s9
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
1c009156:	fffc4c93          	not	s9,s8
1c00915a:	016cecb3          	or	s9,s9,s6
1c00915e:	017cccb3          	xor	s9,s9,s7
1c009162:	432b0737          	lui	a4,0x432b0
1c009166:	4669                	li	a2,26
1c009168:	f9770713          	addi	a4,a4,-105 # 432aff97 <__l2_end+0x272a1cc3>
1c00916c:	9cce                	add	s9,s9,s3
1c00916e:	08ccdcb3          	p.ror	s9,s9,a2
1c009172:	993a                	add	s2,s2,a4
1c009174:	9cda                	add	s9,s9,s6
1c009176:	9962                	add	s2,s2,s8
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
1c009178:	fffbcc13          	not	s8,s7
1c00917c:	019c6c33          	or	s8,s8,s9
1c009180:	016c4c33          	xor	s8,s8,s6
1c009184:	ab942737          	lui	a4,0xab942
1c009188:	4559                	li	a0,22
1c00918a:	9c4a                	add	s8,s8,s2
1c00918c:	3a770713          	addi	a4,a4,935 # ab9423a7 <pulp__FC+0xab9423a8>
1c009190:	08ac5c33          	p.ror	s8,s8,a0
1c009194:	94ba                	add	s1,s1,a4
1c009196:	9c66                	add	s8,s8,s9
1c009198:	94de                	add	s1,s1,s7
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
1c00919a:	fffb4b93          	not	s7,s6
1c00919e:	018bebb3          	or	s7,s7,s8
1c0091a2:	019bcbb3          	xor	s7,s7,s9
1c0091a6:	fc93a737          	lui	a4,0xfc93a
1c0091aa:	4945                	li	s2,17
1c0091ac:	9ba6                	add	s7,s7,s1
1c0091ae:	03970713          	addi	a4,a4,57 # fc93a039 <pulp__FC+0xfc93a03a>
1c0091b2:	9722                	add	a4,a4,s0
1c0091b4:	092bdbb3          	p.ror	s7,s7,s2
1c0091b8:	9be2                	add	s7,s7,s8
1c0091ba:	9b3a                	add	s6,s6,a4
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
1c0091bc:	fffcc713          	not	a4,s9
1c0091c0:	01776733          	or	a4,a4,s7
1c0091c4:	01874733          	xor	a4,a4,s8
1c0091c8:	46ad                	li	a3,11
1c0091ca:	975a                	add	a4,a4,s6
1c0091cc:	08d75733          	p.ror	a4,a4,a3
1c0091d0:	655b6437          	lui	s0,0x655b6
1c0091d4:	975e                	add	a4,a4,s7
1c0091d6:	9c340413          	addi	s0,s0,-1597 # 655b59c3 <__l2_end+0x495a76ef>
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
1c0091da:	fffc4493          	not	s1,s8
1c0091de:	93a2                	add	t2,t2,s0
1c0091e0:	8cd9                	or	s1,s1,a4
1c0091e2:	9c9e                	add	s9,s9,t2
1c0091e4:	0174c4b3          	xor	s1,s1,s7
1c0091e8:	9ca6                	add	s9,s9,s1
1c0091ea:	08ccdcb3          	p.ror	s9,s9,a2
1c0091ee:	8f0cd3b7          	lui	t2,0x8f0cd
1c0091f2:	9cba                	add	s9,s9,a4
1c0091f4:	c9238393          	addi	t2,t2,-878 # 8f0ccc92 <pulp__FC+0x8f0ccc93>
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
1c0091f8:	fffbc413          	not	s0,s7
1c0091fc:	929e                	add	t0,t0,t2
1c0091fe:	01946433          	or	s0,s0,s9
1c009202:	9c16                	add	s8,s8,t0
1c009204:	8c39                	xor	s0,s0,a4
1c009206:	9c22                	add	s8,s8,s0
1c009208:	08ac5c33          	p.ror	s8,s8,a0
1c00920c:	ffeff2b7          	lui	t0,0xffeff
1c009210:	9c66                	add	s8,s8,s9
1c009212:	47d28293          	addi	t0,t0,1149 # ffeff47d <pulp__FC+0xffeff47e>
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
1c009216:	fff74393          	not	t2,a4
1c00921a:	9f96                	add	t6,t6,t0
1c00921c:	0183e3b3          	or	t2,t2,s8
1c009220:	9bfe                	add	s7,s7,t6
1c009222:	0193c3b3          	xor	t2,t2,s9
1c009226:	42a2                	lw	t0,8(sp)
1c009228:	9b9e                	add	s7,s7,t2
1c00922a:	85846fb7          	lui	t6,0x85846
1c00922e:	092bdbb3          	p.ror	s7,s7,s2
1c009232:	dd1f8f93          	addi	t6,t6,-559 # 85845dd1 <pulp__FC+0x85845dd2>
1c009236:	9be2                	add	s7,s7,s8
1c009238:	9f96                	add	t6,t6,t0
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
1c00923a:	fffcc293          	not	t0,s9
1c00923e:	0172e2b3          	or	t0,t0,s7
1c009242:	0182c2b3          	xor	t0,t0,s8
1c009246:	977e                	add	a4,a4,t6
1c009248:	9716                	add	a4,a4,t0
1c00924a:	08d75733          	p.ror	a4,a4,a3
1c00924e:	6fa88fb7          	lui	t6,0x6fa88
1c009252:	975e                	add	a4,a4,s7
1c009254:	e4ff8f93          	addi	t6,t6,-433 # 6fa87e4f <__l2_end+0x53a79b7b>
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
1c009258:	fffc4293          	not	t0,s8
1c00925c:	9f7e                	add	t5,t5,t6
1c00925e:	00e2e2b3          	or	t0,t0,a4
1c009262:	9cfa                	add	s9,s9,t5
1c009264:	0172c2b3          	xor	t0,t0,s7
1c009268:	9c96                	add	s9,s9,t0
1c00926a:	08ccdcb3          	p.ror	s9,s9,a2
1c00926e:	fe2cef37          	lui	t5,0xfe2ce
1c009272:	9cba                	add	s9,s9,a4
1c009274:	6e0f0f13          	addi	t5,t5,1760 # fe2ce6e0 <pulp__FC+0xfe2ce6e1>
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
1c009278:	fffbcf93          	not	t6,s7
1c00927c:	9efa                	add	t4,t4,t5
1c00927e:	019fefb3          	or	t6,t6,s9
1c009282:	9c76                	add	s8,s8,t4
1c009284:	00efcfb3          	xor	t6,t6,a4
1c009288:	9c7e                	add	s8,s8,t6
1c00928a:	08ac5c33          	p.ror	s8,s8,a0
1c00928e:	a3014eb7          	lui	t4,0xa3014
1c009292:	9c66                	add	s8,s8,s9
1c009294:	314e8e93          	addi	t4,t4,788 # a3014314 <pulp__FC+0xa3014315>
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
1c009298:	fff74f13          	not	t5,a4
1c00929c:	9e76                	add	t3,t3,t4
1c00929e:	018f6f33          	or	t5,t5,s8
1c0092a2:	9bf2                	add	s7,s7,t3
1c0092a4:	019f4f33          	xor	t5,t5,s9
1c0092a8:	9bfa                	add	s7,s7,t5
1c0092aa:	092bdbb3          	p.ror	s7,s7,s2
1c0092ae:	4e081e37          	lui	t3,0x4e081
1c0092b2:	9be2                	add	s7,s7,s8
1c0092b4:	1a1e0e13          	addi	t3,t3,417 # 4e0811a1 <__l2_end+0x32072ecd>
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
1c0092b8:	fffcce93          	not	t4,s9
1c0092bc:	9372                	add	t1,t1,t3
1c0092be:	017eeeb3          	or	t4,t4,s7
1c0092c2:	018eceb3          	xor	t4,t4,s8
1c0092c6:	971a                	add	a4,a4,t1
1c0092c8:	9776                	add	a4,a4,t4
1c0092ca:	4d42                	lw	s10,16(sp)
1c0092cc:	08d75733          	p.ror	a4,a4,a3
1c0092d0:	f7538337          	lui	t1,0xf7538
1c0092d4:	975e                	add	a4,a4,s7
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
1c0092d6:	fffc4e13          	not	t3,s8
1c0092da:	e8230313          	addi	t1,t1,-382 # f7537e82 <pulp__FC+0xf7537e83>
1c0092de:	936a                	add	t1,t1,s10
1c0092e0:	00ee6e33          	or	t3,t3,a4
1c0092e4:	017e4e33          	xor	t3,t3,s7
1c0092e8:	9c9a                	add	s9,s9,t1
1c0092ea:	9cf2                	add	s9,s9,t3
1c0092ec:	08ccd633          	p.ror	a2,s9,a2
1c0092f0:	bd3af337          	lui	t1,0xbd3af
1c0092f4:	963a                	add	a2,a2,a4
1c0092f6:	23530313          	addi	t1,t1,565 # bd3af235 <pulp__FC+0xbd3af236>
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
1c0092fa:	fffbce13          	not	t3,s7
1c0092fe:	989a                	add	a7,a7,t1
1c009300:	00ce6e33          	or	t3,t3,a2
1c009304:	00ee4e33          	xor	t3,t3,a4
1c009308:	9c46                	add	s8,s8,a7
1c00930a:	9c72                	add	s8,s8,t3
1c00930c:	08ac5533          	p.ror	a0,s8,a0
1c009310:	2ad7d8b7          	lui	a7,0x2ad7d
1c009314:	9532                	add	a0,a0,a2
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
1c009316:	fff74313          	not	t1,a4
1c00931a:	2bb88893          	addi	a7,a7,699 # 2ad7d2bb <__l2_end+0xed6efe7>
1c00931e:	98ee                	add	a7,a7,s11
1c009320:	00a36333          	or	t1,t1,a0
1c009324:	9bc6                	add	s7,s7,a7
1c009326:	00c34333          	xor	t1,t1,a2
1c00932a:	9b9a                	add	s7,s7,t1
1c00932c:	4dd2                	lw	s11,20(sp)
1c00932e:	092bd933          	p.ror	s2,s7,s2
1c009332:	eb86d8b7          	lui	a7,0xeb86d
1c009336:	992a                	add	s2,s2,a0
1c009338:	39188893          	addi	a7,a7,913 # eb86d391 <pulp__FC+0xeb86d392>
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00933c:	fff64313          	not	t1,a2
		a += saved_a;
1c009340:	4e62                	lw	t3,24(sp)
	} while (size -= 64);
1c009342:	4ef2                	lw	t4,28(sp)
1c009344:	98ee                	add	a7,a7,s11
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c009346:	01236333          	or	t1,t1,s2
1c00934a:	9746                	add	a4,a4,a7
1c00934c:	00a34333          	xor	t1,t1,a0
1c009350:	971a                	add	a4,a4,t1
1c009352:	08d75733          	p.ror	a4,a4,a3
		a += saved_a;
1c009356:	9e32                	add	t3,t3,a2
	} while (size -= 64);
1c009358:	1efd                	addi	t4,t4,-1
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00935a:	974a                	add	a4,a4,s2
		a += saved_a;
1c00935c:	cc72                	sw	t3,24(sp)
	} while (size -= 64);
1c00935e:	ce76                	sw	t4,28(sp)
		b += saved_b;
1c009360:	983a                	add	a6,a6,a4
		c += saved_c;
1c009362:	9a4a                	add	s4,s4,s2
		d += saved_d;
1c009364:	9aaa                	add	s5,s5,a0
	} while (size -= 64);
1c009366:	f80e9a63          	bnez	t4,1c008afa <body+0x38>
	ctx->b = b;
	ctx->c = c;
	ctx->d = d;

	return ptr;
}
1c00936a:	4436                	lw	s0,76(sp)
	ctx->c = c;
1c00936c:	0147a823          	sw	s4,16(a5)
	ctx->d = d;
1c009370:	0157aa23          	sw	s5,20(a5)
	ctx->a = a;
1c009374:	01c7a423          	sw	t3,8(a5)
	ctx->b = b;
1c009378:	0107a623          	sw	a6,12(a5)
}
1c00937c:	44a6                	lw	s1,72(sp)
1c00937e:	4916                	lw	s2,68(sp)
1c009380:	4986                	lw	s3,64(sp)
1c009382:	5a72                	lw	s4,60(sp)
1c009384:	5ae2                	lw	s5,56(sp)
1c009386:	5b52                	lw	s6,52(sp)
1c009388:	5bc2                	lw	s7,48(sp)
1c00938a:	5c32                	lw	s8,44(sp)
1c00938c:	5ca2                	lw	s9,40(sp)
1c00938e:	5d12                	lw	s10,36(sp)
1c009390:	5d82                	lw	s11,32(sp)
1c009392:	852e                	mv	a0,a1
1c009394:	6161                	addi	sp,sp,80
1c009396:	8082                	ret

1c009398 <MD5_Init>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
1c009398:	674527b7          	lui	a5,0x67452
1c00939c:	30178793          	addi	a5,a5,769 # 67452301 <__l2_end+0x4b44402d>
1c0093a0:	c51c                	sw	a5,8(a0)
	ctx->b = 0xefcdab89;
1c0093a2:	efcdb7b7          	lui	a5,0xefcdb
1c0093a6:	b8978793          	addi	a5,a5,-1143 # efcdab89 <pulp__FC+0xefcdab8a>
1c0093aa:	c55c                	sw	a5,12(a0)
	ctx->c = 0x98badcfe;
1c0093ac:	98bae7b7          	lui	a5,0x98bae
1c0093b0:	cfe78793          	addi	a5,a5,-770 # 98badcfe <pulp__FC+0x98badcff>
1c0093b4:	c91c                	sw	a5,16(a0)
	ctx->d = 0x10325476;
1c0093b6:	103257b7          	lui	a5,0x10325
1c0093ba:	47678793          	addi	a5,a5,1142 # 10325476 <__l1_end+0x325432>
1c0093be:	c95c                	sw	a5,20(a0)

	ctx->lo = 0;
1c0093c0:	00052023          	sw	zero,0(a0)
	ctx->hi = 0;
1c0093c4:	00052223          	sw	zero,4(a0)
}
1c0093c8:	8082                	ret

1c0093ca <MD5_Update>:

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c0093ca:	1101                	addi	sp,sp,-32
1c0093cc:	cc22                	sw	s0,24(sp)
1c0093ce:	842a                	mv	s0,a0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
1c0093d0:	4108                	lw	a0,0(a0)
{
1c0093d2:	ca26                	sw	s1,20(sp)
1c0093d4:	c84a                	sw	s2,16(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c0093d6:	00c507b3          	add	a5,a0,a2
{
1c0093da:	ce06                	sw	ra,28(sp)
1c0093dc:	c64e                	sw	s3,12(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c0093de:	c5d7b7b3          	p.bclr	a5,a5,2,29
1c0093e2:	c01c                	sw	a5,0(s0)
{
1c0093e4:	892e                	mv	s2,a1
1c0093e6:	84b2                	mv	s1,a2
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c0093e8:	00a7f563          	bleu	a0,a5,1c0093f2 <MD5_Update+0x28>
		ctx->hi++;
1c0093ec:	405c                	lw	a5,4(s0)
1c0093ee:	0785                	addi	a5,a5,1
1c0093f0:	c05c                	sw	a5,4(s0)
	ctx->hi += size >> 29;
1c0093f2:	4058                	lw	a4,4(s0)
1c0093f4:	01d4d793          	srli	a5,s1,0x1d

	used = saved_lo & 0x3f;
1c0093f8:	f2653533          	p.bclr	a0,a0,25,6
	ctx->hi += size >> 29;
1c0093fc:	97ba                	add	a5,a5,a4
1c0093fe:	c05c                	sw	a5,4(s0)

	if (used) {
1c009400:	c129                	beqz	a0,1c009442 <MD5_Update+0x78>
		available = 64 - used;
1c009402:	04000993          	li	s3,64
1c009406:	40a989b3          	sub	s3,s3,a0
1c00940a:	0561                	addi	a0,a0,24
1c00940c:	9522                	add	a0,a0,s0

		if (size < available) {
1c00940e:	0134fc63          	bleu	s3,s1,1c009426 <MD5_Update+0x5c>
			memcpy(&ctx->buffer[used], data, size);
1c009412:	8626                	mv	a2,s1
1c009414:	85ca                	mv	a1,s2
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
1c009416:	4462                	lw	s0,24(sp)
1c009418:	40f2                	lw	ra,28(sp)
1c00941a:	44d2                	lw	s1,20(sp)
1c00941c:	4942                	lw	s2,16(sp)
1c00941e:	49b2                	lw	s3,12(sp)
1c009420:	6105                	addi	sp,sp,32
	memcpy(ctx->buffer, data, size);
1c009422:	38f0206f          	j	1c00bfb0 <memcpy>
		memcpy(&ctx->buffer[used], data, available);
1c009426:	85ca                	mv	a1,s2
1c009428:	864e                	mv	a2,s3
1c00942a:	387020ef          	jal	ra,1c00bfb0 <memcpy>
		body(ctx, ctx->buffer, 64);
1c00942e:	04000613          	li	a2,64
1c009432:	01840593          	addi	a1,s0,24
1c009436:	8522                	mv	a0,s0
		data = (const unsigned char *)data + available;
1c009438:	994e                	add	s2,s2,s3
		size -= available;
1c00943a:	413484b3          	sub	s1,s1,s3
		body(ctx, ctx->buffer, 64);
1c00943e:	e84ff0ef          	jal	ra,1c008ac2 <body>
	if (size >= 64) {
1c009442:	03f00793          	li	a5,63
1c009446:	0097fb63          	bleu	s1,a5,1c00945c <MD5_Update+0x92>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
1c00944a:	ca04b633          	p.bclr	a2,s1,5,0
1c00944e:	85ca                	mv	a1,s2
1c009450:	8522                	mv	a0,s0
1c009452:	e70ff0ef          	jal	ra,1c008ac2 <body>
1c009456:	892a                	mv	s2,a0
		size &= 0x3f;
1c009458:	f264b4b3          	p.bclr	s1,s1,25,6
	memcpy(ctx->buffer, data, size);
1c00945c:	8626                	mv	a2,s1
1c00945e:	85ca                	mv	a1,s2
1c009460:	01840513          	addi	a0,s0,24
1c009464:	bf4d                	j	1c009416 <MD5_Update+0x4c>

1c009466 <MD5_Final>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
1c009466:	1141                	addi	sp,sp,-16
1c009468:	c226                	sw	s1,4(sp)
1c00946a:	84aa                	mv	s1,a0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
1c00946c:	4188                	lw	a0,0(a1)
{
1c00946e:	c422                	sw	s0,8(sp)
1c009470:	c04a                	sw	s2,0(sp)
	used = ctx->lo & 0x3f;
1c009472:	f2653533          	p.bclr	a0,a0,25,6

	ctx->buffer[used++] = 0x80;
1c009476:	00a58733          	add	a4,a1,a0
{
1c00947a:	c606                	sw	ra,12(sp)
	ctx->buffer[used++] = 0x80;
1c00947c:	00150793          	addi	a5,a0,1
1c009480:	f8000693          	li	a3,-128

	available = 64 - used;
1c009484:	04000613          	li	a2,64
	ctx->buffer[used++] = 0x80;
1c009488:	00d70c23          	sb	a3,24(a4)
	available = 64 - used;
1c00948c:	8e1d                	sub	a2,a2,a5

	if (available < 8) {
1c00948e:	471d                	li	a4,7
{
1c009490:	842e                	mv	s0,a1
1c009492:	01858913          	addi	s2,a1,24
	if (available < 8) {
1c009496:	02c76063          	bltu	a4,a2,1c0094b6 <MD5_Final+0x50>
		memset(&ctx->buffer[used], 0, available);
1c00949a:	0565                	addi	a0,a0,25
1c00949c:	4581                	li	a1,0
1c00949e:	9522                	add	a0,a0,s0
1c0094a0:	301020ef          	jal	ra,1c00bfa0 <memset>
		body(ctx, ctx->buffer, 64);
1c0094a4:	04000613          	li	a2,64
1c0094a8:	85ca                	mv	a1,s2
1c0094aa:	8522                	mv	a0,s0
1c0094ac:	e16ff0ef          	jal	ra,1c008ac2 <body>
		used = 0;
		available = 64;
1c0094b0:	04000613          	li	a2,64
		used = 0;
1c0094b4:	4781                	li	a5,0
	}

	memset(&ctx->buffer[used], 0, available - 8);
1c0094b6:	01878513          	addi	a0,a5,24
1c0094ba:	1661                	addi	a2,a2,-8
1c0094bc:	4581                	li	a1,0
1c0094be:	9522                	add	a0,a0,s0
1c0094c0:	2e1020ef          	jal	ra,1c00bfa0 <memset>

	ctx->lo <<= 3;
1c0094c4:	401c                	lw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
	OUT(&ctx->buffer[60], ctx->hi)

	body(ctx, ctx->buffer, 64);
1c0094c6:	85ca                	mv	a1,s2
1c0094c8:	04000613          	li	a2,64
	ctx->lo <<= 3;
1c0094cc:	078e                	slli	a5,a5,0x3
	OUT(&ctx->buffer[56], ctx->lo)
1c0094ce:	873e                	mv	a4,a5
1c0094d0:	04e40823          	sb	a4,80(s0)
1c0094d4:	0087d713          	srli	a4,a5,0x8
	ctx->lo <<= 3;
1c0094d8:	c01c                	sw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c0094da:	04e408a3          	sb	a4,81(s0)
1c0094de:	0107d713          	srli	a4,a5,0x10
1c0094e2:	83e1                	srli	a5,a5,0x18
1c0094e4:	04f409a3          	sb	a5,83(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c0094e8:	405c                	lw	a5,4(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c0094ea:	04e40923          	sb	a4,82(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c0094ee:	873e                	mv	a4,a5
1c0094f0:	04e40a23          	sb	a4,84(s0)
1c0094f4:	0087d713          	srli	a4,a5,0x8
1c0094f8:	04e40aa3          	sb	a4,85(s0)
1c0094fc:	0107d713          	srli	a4,a5,0x10
1c009500:	83e1                	srli	a5,a5,0x18
1c009502:	04f40ba3          	sb	a5,87(s0)
1c009506:	04e40b23          	sb	a4,86(s0)
	body(ctx, ctx->buffer, 64);
1c00950a:	8522                	mv	a0,s0
1c00950c:	db6ff0ef          	jal	ra,1c008ac2 <body>

	OUT(&result[0], ctx->a)
1c009510:	441c                	lw	a5,8(s0)
	OUT(&result[4], ctx->b)
	OUT(&result[8], ctx->c)
	OUT(&result[12], ctx->d)

	memset(ctx, 0, sizeof(*ctx));
1c009512:	8522                	mv	a0,s0
1c009514:	09800613          	li	a2,152
	OUT(&result[0], ctx->a)
1c009518:	00f48023          	sb	a5,0(s1)
1c00951c:	441c                	lw	a5,8(s0)
	memset(ctx, 0, sizeof(*ctx));
1c00951e:	4581                	li	a1,0
	OUT(&result[0], ctx->a)
1c009520:	83a1                	srli	a5,a5,0x8
1c009522:	00f480a3          	sb	a5,1(s1)
1c009526:	00a45783          	lhu	a5,10(s0)
1c00952a:	00f48123          	sb	a5,2(s1)
1c00952e:	00b44783          	lbu	a5,11(s0)
1c009532:	00f481a3          	sb	a5,3(s1)
	OUT(&result[4], ctx->b)
1c009536:	445c                	lw	a5,12(s0)
1c009538:	00f48223          	sb	a5,4(s1)
1c00953c:	445c                	lw	a5,12(s0)
1c00953e:	83a1                	srli	a5,a5,0x8
1c009540:	00f482a3          	sb	a5,5(s1)
1c009544:	00e45783          	lhu	a5,14(s0)
1c009548:	00f48323          	sb	a5,6(s1)
1c00954c:	00f44783          	lbu	a5,15(s0)
1c009550:	00f483a3          	sb	a5,7(s1)
	OUT(&result[8], ctx->c)
1c009554:	481c                	lw	a5,16(s0)
1c009556:	00f48423          	sb	a5,8(s1)
1c00955a:	481c                	lw	a5,16(s0)
1c00955c:	83a1                	srli	a5,a5,0x8
1c00955e:	00f484a3          	sb	a5,9(s1)
1c009562:	01245783          	lhu	a5,18(s0)
1c009566:	00f48523          	sb	a5,10(s1)
1c00956a:	01344783          	lbu	a5,19(s0)
1c00956e:	00f485a3          	sb	a5,11(s1)
	OUT(&result[12], ctx->d)
1c009572:	485c                	lw	a5,20(s0)
1c009574:	00f48623          	sb	a5,12(s1)
1c009578:	485c                	lw	a5,20(s0)
1c00957a:	83a1                	srli	a5,a5,0x8
1c00957c:	00f486a3          	sb	a5,13(s1)
1c009580:	01645783          	lhu	a5,22(s0)
1c009584:	00f48723          	sb	a5,14(s1)
1c009588:	01744783          	lbu	a5,23(s0)
1c00958c:	00f487a3          	sb	a5,15(s1)
}
1c009590:	40b2                	lw	ra,12(sp)
1c009592:	4422                	lw	s0,8(sp)
1c009594:	4492                	lw	s1,4(sp)
1c009596:	4902                	lw	s2,0(sp)
1c009598:	0141                	addi	sp,sp,16
	memset(ctx, 0, sizeof(*ctx));
1c00959a:	2070206f          	j	1c00bfa0 <memset>

1c00959e <__internal_semihost>:
    return __internal_semihost(SEMIHOSTING_SYS_SEEK, (long) args);
}

int semihost_flen(int fd)
{
    return __internal_semihost(SEMIHOSTING_SYS_FLEN, (long) fd);
1c00959e:	01f01013          	slli	zero,zero,0x1f
1c0095a2:	00100073          	ebreak
1c0095a6:	40705013          	srai	zero,zero,0x7
1c0095aa:	8082                	ret

1c0095ac <semihost_write0>:
1c0095ac:	85aa                	mv	a1,a0
1c0095ae:	4511                	li	a0,4
1c0095b0:	b7fd                	j	1c00959e <__internal_semihost>

1c0095b2 <semihost_open>:
1c0095b2:	7139                	addi	sp,sp,-64
1c0095b4:	de06                	sw	ra,60(sp)
1c0095b6:	dc22                	sw	s0,56(sp)
1c0095b8:	c62e                	sw	a1,12(sp)
1c0095ba:	842a                	mv	s0,a0
1c0095bc:	1cf020ef          	jal	ra,1c00bf8a <strlen>
1c0095c0:	45b2                	lw	a1,12(sp)
1c0095c2:	083c                	addi	a5,sp,24
1c0095c4:	c380                	sw	s0,0(a5)
1c0095c6:	087c                	addi	a5,sp,28
1c0095c8:	c38c                	sw	a1,0(a5)
1c0095ca:	101c                	addi	a5,sp,32
1c0095cc:	c388                	sw	a0,0(a5)
1c0095ce:	082c                	addi	a1,sp,24
1c0095d0:	4505                	li	a0,1
1c0095d2:	37f1                	jal	1c00959e <__internal_semihost>
1c0095d4:	50f2                	lw	ra,60(sp)
1c0095d6:	5462                	lw	s0,56(sp)
1c0095d8:	6121                	addi	sp,sp,64
1c0095da:	8082                	ret

1c0095dc <semihost_close>:
1c0095dc:	85aa                	mv	a1,a0
1c0095de:	4509                	li	a0,2
1c0095e0:	fbfff06f          	j	1c00959e <__internal_semihost>

1c0095e4 <semihost_read>:
1c0095e4:	7179                	addi	sp,sp,-48
1c0095e6:	d606                	sw	ra,44(sp)
1c0095e8:	003c                	addi	a5,sp,8
1c0095ea:	c388                	sw	a0,0(a5)
1c0095ec:	007c                	addi	a5,sp,12
1c0095ee:	c38c                	sw	a1,0(a5)
1c0095f0:	4519                	li	a0,6
1c0095f2:	081c                	addi	a5,sp,16
1c0095f4:	002c                	addi	a1,sp,8
1c0095f6:	c390                	sw	a2,0(a5)
1c0095f8:	fa7ff0ef          	jal	ra,1c00959e <__internal_semihost>
1c0095fc:	50b2                	lw	ra,44(sp)
1c0095fe:	6145                	addi	sp,sp,48
1c009600:	8082                	ret

1c009602 <semihost_write>:
1c009602:	7179                	addi	sp,sp,-48
1c009604:	d606                	sw	ra,44(sp)
1c009606:	003c                	addi	a5,sp,8
1c009608:	c388                	sw	a0,0(a5)
1c00960a:	007c                	addi	a5,sp,12
1c00960c:	c38c                	sw	a1,0(a5)
1c00960e:	4515                	li	a0,5
1c009610:	081c                	addi	a5,sp,16
1c009612:	002c                	addi	a1,sp,8
1c009614:	c390                	sw	a2,0(a5)
1c009616:	f89ff0ef          	jal	ra,1c00959e <__internal_semihost>
1c00961a:	50b2                	lw	ra,44(sp)
1c00961c:	6145                	addi	sp,sp,48
1c00961e:	8082                	ret

1c009620 <semihost_seek>:
1c009620:	1101                	addi	sp,sp,-32
1c009622:	c42a                	sw	a0,8(sp)
1c009624:	c62e                	sw	a1,12(sp)
1c009626:	4529                	li	a0,10
1c009628:	002c                	addi	a1,sp,8
1c00962a:	ce06                	sw	ra,28(sp)
1c00962c:	f73ff0ef          	jal	ra,1c00959e <__internal_semihost>
1c009630:	40f2                	lw	ra,28(sp)
1c009632:	6105                	addi	sp,sp,32
1c009634:	8082                	ret

1c009636 <semihost_exit>:
}

int semihost_exit(int code)
{
    return __internal_semihost(SEMIHOSTING_SYS_EXIT, (long) code);
1c009636:	85aa                	mv	a1,a0
1c009638:	4561                	li	a0,24
1c00963a:	f65ff06f          	j	1c00959e <__internal_semihost>

1c00963e <__bsp_init_pads>:

static int __bsp_init_pads_done = 0;

static void __bsp_init_pads()
{
  if (!__bsp_init_pads_done)
1c00963e:	1c00e7b7          	lui	a5,0x1c00e
1c009642:	20478793          	addi	a5,a5,516 # 1c00e204 <__bsp_init_pads_done>
1c009646:	4398                	lw	a4,0(a5)
1c009648:	eb05                	bnez	a4,1c009678 <__bsp_init_pads+0x3a>
{
1c00964a:	1101                	addi	sp,sp,-32
1c00964c:	ce06                	sw	ra,28(sp)
  {
    __bsp_init_pads_done = 1;
1c00964e:	4705                	li	a4,1
1c009650:	c398                	sw	a4,0(a5)
    uint32_t pads_value[] = {0x00055500, 0x0f000000, 0x003fffff, 0x00000000};
1c009652:	000557b7          	lui	a5,0x55
1c009656:	50078793          	addi	a5,a5,1280 # 55500 <__L1Cl+0x45500>
1c00965a:	c03e                	sw	a5,0(sp)
1c00965c:	0f0007b7          	lui	a5,0xf000
1c009660:	c23e                	sw	a5,4(sp)
1c009662:	004007b7          	lui	a5,0x400
1c009666:	17fd                	addi	a5,a5,-1
    pi_pad_init(pads_value);
1c009668:	850a                	mv	a0,sp
    uint32_t pads_value[] = {0x00055500, 0x0f000000, 0x003fffff, 0x00000000};
1c00966a:	c43e                	sw	a5,8(sp)
1c00966c:	c602                	sw	zero,12(sp)
    pi_pad_init(pads_value);
1c00966e:	2a3010ef          	jal	ra,1c00b110 <pi_pad_init>
  }
}
1c009672:	40f2                	lw	ra,28(sp)
1c009674:	6105                	addi	sp,sp,32
1c009676:	8082                	ret
1c009678:	8082                	ret

1c00967a <bsp_hyperram_conf_init>:

void bsp_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram_start = CONFIG_HYPERRAM_START;
  conf->ram_size = CONFIG_HYPERRAM_SIZE;
1c00967a:	008007b7          	lui	a5,0x800
  conf->ram_start = CONFIG_HYPERRAM_START;
1c00967e:	00052a23          	sw	zero,20(a0)
  conf->ram_size = CONFIG_HYPERRAM_SIZE;
1c009682:	cd1c                	sw	a5,24(a0)
  conf->skip_pads_config = 0;
1c009684:	00050623          	sb	zero,12(a0)
  conf->hyper_itf = CONFIG_HYPERRAM_HYPER_ITF;
1c009688:	00052223          	sw	zero,4(a0)
  conf->hyper_cs = CONFIG_HYPERRAM_HYPER_CS;
1c00968c:	00052423          	sw	zero,8(a0)
}
1c009690:	8082                	ret

1c009692 <bsp_hyperram_open>:
1c009692:	1141                	addi	sp,sp,-16
1c009694:	c606                	sw	ra,12(sp)
1c009696:	fa9ff0ef          	jal	ra,1c00963e <__bsp_init_pads>
1c00969a:	40b2                	lw	ra,12(sp)
1c00969c:	4501                	li	a0,0
1c00969e:	0141                	addi	sp,sp,16
1c0096a0:	8082                	ret

1c0096a2 <bsp_hyperflash_conf_init>:


void bsp_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c0096a2:	4785                	li	a5,1
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
1c0096a4:	00052223          	sw	zero,4(a0)
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c0096a8:	c51c                	sw	a5,8(a0)
}
1c0096aa:	8082                	ret

1c0096ac <bsp_hyperflash_open>:
1c0096ac:	1141                	addi	sp,sp,-16
1c0096ae:	c606                	sw	ra,12(sp)
1c0096b0:	f8fff0ef          	jal	ra,1c00963e <__bsp_init_pads>
1c0096b4:	40b2                	lw	ra,12(sp)
1c0096b6:	4501                	li	a0,0
1c0096b8:	0141                	addi	sp,sp,16
1c0096ba:	8082                	ret

1c0096bc <cluster_start>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0096bc:	002047b7          	lui	a5,0x204
1c0096c0:	00070737          	lui	a4,0x70
1c0096c4:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0096c8:	0ff00713          	li	a4,255
1c0096cc:	002046b7          	lui	a3,0x204
1c0096d0:	08e6a223          	sw	a4,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0096d4:	20078793          	addi	a5,a5,512
1c0096d8:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0096dc:	00e7a623          	sw	a4,12(a5)
    __rt_team_config(rt_nb_active_pe());
  }

#endif

}
1c0096e0:	8082                	ret

1c0096e2 <__rt_init>:
{
1c0096e2:	1101                	addi	sp,sp,-32
static inline void hal_pmu_bypass_set(unsigned int Value) {
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
}

static inline unsigned int hal_pmu_bypass_get() {
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET);
1c0096e4:	1a104737          	lui	a4,0x1a104
1c0096e8:	ce06                	sw	ra,28(sp)
1c0096ea:	cc22                	sw	s0,24(sp)
1c0096ec:	ca26                	sw	s1,20(sp)
1c0096ee:	07072783          	lw	a5,112(a4) # 1a104070 <__l1_end+0xa10402c>
  hal_pmu_bypass_set (ARCHI_REG_FIELD_SET (hal_pmu_bypass_get (), 1, 11, 1) );
1c0096f2:	c0b7c7b3          	p.bset	a5,a5,0,11
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c0096f6:	06f72823          	sw	a5,112(a4)
  __rt_bridge_set_available();
1c0096fa:	2b49                	jal	1c009c8c <__rt_bridge_set_available>
  cpu_stack_check_enable((int)__rt_fc_stack, (int)__rt_fc_stack + __rt_fc_stack_size);
1c0096fc:	1b0007b7          	lui	a5,0x1b000
1c009700:	39878793          	addi	a5,a5,920 # 1b000398 <__rt_fc_stack>
 * Stack checking
 */

static inline void cpu_stack_check_enable(unsigned int base, unsigned int end)
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c009704:	7d005073          	csrwi	0x7d0,0
  asm volatile ("csrw  0x7D1, %0" :: "r" (base));
1c009708:	7d179073          	csrw	0x7d1,a5
1c00970c:	1c00e737          	lui	a4,0x1c00e
1c009710:	e8c72703          	lw	a4,-372(a4) # 1c00de8c <__rt_fc_stack_size>
1c009714:	97ba                	add	a5,a5,a4
  asm volatile ("csrw  0x7D2, %0" :: "r" (end));
1c009716:	7d279073          	csrw	0x7d2,a5
  asm volatile ("csrwi 0x7D0, 1" :: );
1c00971a:	7d00d073          	csrwi	0x7d0,1
  __rt_irq_init();
1c00971e:	2add                	jal	1c009914 <__rt_irq_init>

#include "archi/pulp.h"
#include "archi/soc_eu/soc_eu_v1.h"

static inline void soc_eu_eventMask_set(unsigned int reg, unsigned int value) {
  ARCHI_WRITE(ARCHI_SOC_EU_ADDR, reg, value);
1c009720:	54fd                	li	s1,-1
1c009722:	1a1067b7          	lui	a5,0x1a106
1c009726:	0097a223          	sw	s1,4(a5) # 1a106004 <__l1_end+0xa105fc0>
1c00972a:	0097a423          	sw	s1,8(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_SOC_EVT, __rt_fc_socevents_handler);
1c00972e:	1c0005b7          	lui	a1,0x1c000
1c009732:	3f458593          	addi	a1,a1,1012 # 1c0003f4 <__rt_fc_socevents_handler>
1c009736:	456d                	li	a0,27
1c009738:	2a3d                	jal	1c009876 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00973a:	080007b7          	lui	a5,0x8000
1c00973e:	00204737          	lui	a4,0x204
1c009742:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009746:	00f72423          	sw	a5,8(a4)
  __rt_pmu_init();
1c00974a:	2a2010ef          	jal	ra,1c00a9ec <__rt_pmu_init>
  __rt_freq_init();
1c00974e:	6ed000ef          	jal	ra,1c00a63a <__rt_freq_init>
1c009752:	002017b7          	lui	a5,0x201
1c009756:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
}

static inline void icache_enable(unsigned int base)
{
  pulp_write32(base, 0xFFFFFFFF);
1c00975a:	c384                	sw	s1,0(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00975c:	01402473          	csrr	s0,uhartid
1c009760:	1c00d4b7          	lui	s1,0x1c00d
  return (hart_id >> 5) & 0x3f;
1c009764:	8415                	srai	s0,s0,0x5
  __rt_utils_init();
1c009766:	24ed                	jal	1c009a50 <__rt_utils_init>
1c009768:	f2643433          	p.bclr	s0,s0,25,6
  __rt_allocs_init();
1c00976c:	1af000ef          	jal	ra,1c00a11a <__rt_allocs_init>
1c009770:	3bc48493          	addi	s1,s1,956 # 1c00d3bc <ctor_list+0x4>
  __rt_event_sched_init();
1c009774:	029000ef          	jal	ra,1c009f9c <__rt_event_sched_init>
  __rt_padframe_init();
1c009778:	20a020ef          	jal	ra,1c00b982 <__rt_padframe_init>
  for(fpp = ctor_list+1;  *fpp != 0;  ++fpp) {
1c00977c:	0044a78b          	p.lw	a5,4(s1!)
1c009780:	ebad                	bnez	a5,1c0097f2 <__rt_init+0x110>
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
1c009782:	300467f3          	csrrsi	a5,mstatus,8
  if (__rt_cbsys_exec(RT_CBSYS_START)) goto error;
1c009786:	4501                	li	a0,0
1c009788:	2c61                	jal	1c009a20 <__rt_cbsys_exec>
1c00978a:	e539                	bnez	a0,1c0097d8 <__rt_init+0xf6>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00978c:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c009790:	8795                	srai	a5,a5,0x5
1c009792:	f267b7b3          	p.bclr	a5,a5,25,6
        exit(retval);
      }
    }
    else
      return cluster_master_start(NULL);
  } else if (!rt_is_fc()) {
1c009796:	02000713          	li	a4,32
1c00979a:	0ae78363          	beq	a5,a4,1c009840 <__rt_init+0x15e>
    rt_cluster_mount(1, cid, 0, NULL);
1c00979e:	4681                	li	a3,0
1c0097a0:	4601                	li	a2,0
1c0097a2:	4581                	li	a1,0
1c0097a4:	4505                	li	a0,1
  if (rt_cluster_id() != cid)
1c0097a6:	cba1                	beqz	a5,1c0097f6 <__rt_init+0x114>
    rt_cluster_mount(1, cid, 0, NULL);
1c0097a8:	794010ef          	jal	ra,1c00af3c <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*rt_nb_active_pe());
1c0097ac:	6591                	lui	a1,0x4
1c0097ae:	4509                	li	a0,2
1c0097b0:	0bf000ef          	jal	ra,1c00a06e <rt_alloc>
1c0097b4:	872a                	mv	a4,a0
    if (stacks == NULL) return -1;
1c0097b6:	c10d                	beqz	a0,1c0097d8 <__rt_init+0xf6>
    if (rt_cluster_call(NULL, cid, cluster_start, NULL, stacks, 0x800, 0x800, rt_nb_active_pe(), event)) return -1;
1c0097b8:	6805                	lui	a6,0x1
1c0097ba:	80080813          	addi	a6,a6,-2048 # 800 <__rt_stack_size>
1c0097be:	1c009637          	lui	a2,0x1c009
1c0097c2:	c002                	sw	zero,0(sp)
1c0097c4:	48a1                	li	a7,8
1c0097c6:	87c2                	mv	a5,a6
1c0097c8:	4681                	li	a3,0
1c0097ca:	6bc60613          	addi	a2,a2,1724 # 1c0096bc <cluster_start>
1c0097ce:	4581                	li	a1,0
1c0097d0:	4501                	li	a0,0
1c0097d2:	6da010ef          	jal	ra,1c00aeac <rt_cluster_call>
1c0097d6:	c52d                	beqz	a0,1c009840 <__rt_init+0x15e>
  rt_fatal("There was an error during runtime initialization\n");
1c0097d8:	1c00e537          	lui	a0,0x1c00e
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0097dc:	01402673          	csrr	a2,uhartid
1c0097e0:	85a2                	mv	a1,s0
1c0097e2:	f4563633          	p.bclr	a2,a2,26,5
1c0097e6:	a1450513          	addi	a0,a0,-1516 # 1c00da14 <IntegerExpLUT+0x18>
1c0097ea:	2f3020ef          	jal	ra,1c00c2dc <printf>
1c0097ee:	273020ef          	jal	ra,1c00c260 <abort>
    (**fpp)();
1c0097f2:	9782                	jalr	a5
1c0097f4:	b761                	j	1c00977c <__rt_init+0x9a>
    rt_cluster_mount(1, cid, 0, NULL);
1c0097f6:	746010ef          	jal	ra,1c00af3c <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*(rt_nb_active_pe()-1));
1c0097fa:	6591                	lui	a1,0x4
1c0097fc:	80058593          	addi	a1,a1,-2048 # 3800 <__rt_stack_size+0x3000>
1c009800:	4509                	li	a0,2
1c009802:	06d000ef          	jal	ra,1c00a06e <rt_alloc>
    if (stacks == NULL) return -1;
1c009806:	d969                	beqz	a0,1c0097d8 <__rt_init+0xf6>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009808:	00204737          	lui	a4,0x204
1c00980c:	0ff00793          	li	a5,255
1c009810:	08f72223          	sw	a5,132(a4) # 204084 <__L2+0x184084>
    eu_dispatch_push((unsigned int)__rt_set_slave_stack | 1);
1c009814:	1c00d7b7          	lui	a5,0x1c00d
1c009818:	30078793          	addi	a5,a5,768 # 1c00d300 <__rt_set_slave_stack>
1c00981c:	c007c7b3          	p.bset	a5,a5,0,0
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c009820:	08f72023          	sw	a5,128(a4)
1c009824:	6785                	lui	a5,0x1
1c009826:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00982a:	08f72023          	sw	a5,128(a4)
1c00982e:	08a72023          	sw	a0,128(a4)
}
1c009832:	4462                	lw	s0,24(sp)
1c009834:	40f2                	lw	ra,28(sp)
1c009836:	44d2                	lw	s1,20(sp)
    cluster_start(NULL);
1c009838:	4501                	li	a0,0
}
1c00983a:	6105                	addi	sp,sp,32
    cluster_start(NULL);
1c00983c:	e81ff06f          	j	1c0096bc <cluster_start>
}
1c009840:	40f2                	lw	ra,28(sp)
1c009842:	4462                	lw	s0,24(sp)
1c009844:	44d2                	lw	s1,20(sp)
1c009846:	6105                	addi	sp,sp,32
1c009848:	8082                	ret

1c00984a <__rt_deinit>:
{
1c00984a:	1141                	addi	sp,sp,-16
1c00984c:	c606                	sw	ra,12(sp)
1c00984e:	c422                	sw	s0,8(sp)
}

static inline void cpu_stack_check_disable()
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c009850:	7d005073          	csrwi	0x7d0,0
  __rt_cbsys_exec(RT_CBSYS_STOP);
1c009854:	4505                	li	a0,1
1c009856:	1c00d437          	lui	s0,0x1c00d
1c00985a:	22d9                	jal	1c009a20 <__rt_cbsys_exec>
1c00985c:	3fc40413          	addi	s0,s0,1020 # 1c00d3fc <dtor_list+0x4>
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c009860:	0044278b          	p.lw	a5,4(s0!)
1c009864:	e789                	bnez	a5,1c00986e <__rt_deinit+0x24>
}
1c009866:	40b2                	lw	ra,12(sp)
1c009868:	4422                	lw	s0,8(sp)
1c00986a:	0141                	addi	sp,sp,16
1c00986c:	8082                	ret
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c00986e:	9782                	jalr	a5
1c009870:	bfc5                	j	1c009860 <__rt_deinit+0x16>

1c009872 <pi_open_from_conf>:
#endif


void pi_open_from_conf(struct pi_device *device, void *conf)
{
  device->config = conf;
1c009872:	c14c                	sw	a1,4(a0)
}
1c009874:	8082                	ret

1c009876 <rt_irq_set_handler>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009876:	014027f3          	csrr	a5,uhartid
  return hal_spr_read(0x305) & ~1;
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
  return ARCHI_L2_ADDR;
#else
  if (rt_is_fc()) {
1c00987a:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00987e:	ca5797b3          	p.extractu	a5,a5,5,5
1c009882:	02e79c63          	bne	a5,a4,1c0098ba <rt_irq_set_handler+0x44>
#if defined(ARCHI_CORE_HAS_SECURITY) && !defined(ARCHI_CORE_HAS_1_10)
    return __builtin_pulp_spr_read(SR_MTVEC);
1c009886:	30502773          	csrr	a4,mtvec
  irq -= 16;
#endif

  unsigned int base = __rt_get_fc_vector_base();

  unsigned int jmpAddr = base + 0x4 * irq;
1c00988a:	050a                	slli	a0,a0,0x2
  unsigned int S = ((unsigned int) ItHandler - (ItBaseAddr+ItIndex*4));
1c00988c:	8d89                	sub	a1,a1,a0
1c00988e:	8d99                	sub	a1,a1,a4
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 20),  1, 31);
1c009890:	c14586b3          	p.extract	a3,a1,0,20
1c009894:	06f00793          	li	a5,111
1c009898:	c1f6a7b3          	p.insert	a5,a3,0,31
  R = __BITINSERT(R, __BITEXTRACT(S, 10,  1), 10, 21);
1c00989c:	d21586b3          	p.extract	a3,a1,9,1
1c0098a0:	d356a7b3          	p.insert	a5,a3,9,21
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 11),  1, 20);
1c0098a4:	c0b586b3          	p.extract	a3,a1,0,11
1c0098a8:	c146a7b3          	p.insert	a5,a3,0,20
  R = __BITINSERT(R, __BITEXTRACT(S,  8, 12),  8, 12);
1c0098ac:	cec585b3          	p.extract	a1,a1,7,12
1c0098b0:	cec5a7b3          	p.insert	a5,a1,7,12

  *(volatile unsigned int *)jmpAddr = __rt_get_itvec(base, irq, (unsigned int)handler);
1c0098b4:	00f56723          	p.sw	a5,a4(a0)

#if defined(PLP_FC_HAS_ICACHE)
  flush_all_icache_banks_common(plp_icache_fc_base());
#endif

}
1c0098b8:	8082                	ret
static inline void plp_ctrl_core_bootaddr_set_remote(int cid, int core, unsigned int bootAddr) {
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
}

static inline unsigned int plp_ctrl_bootaddr_get() {
  return pulp_read32(ARCHI_CLUSTER_CTRL_ADDR + 0x40);
1c0098ba:	002007b7          	lui	a5,0x200
1c0098be:	43b8                	lw	a4,64(a5)
1c0098c0:	b7e9                	j	1c00988a <rt_irq_set_handler+0x14>

1c0098c2 <illegal_insn_handler_c>:
#include <stdlib.h>

void __attribute__((weak)) illegal_insn_handler_c()
{

}
1c0098c2:	8082                	ret

1c0098c4 <__rt_handle_illegal_instr>:


extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config;
extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config_trace;

static inline unsigned int rt_debug_config() { return __rt_debug_config; }
1c0098c4:	1b0017b7          	lui	a5,0x1b001

static inline unsigned int rt_debug_config_trace() { return __rt_debug_config_trace; }

static inline int rt_debug_config_warnings() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WARNING_BIT, 1);
1c0098c8:	b9c7a703          	lw	a4,-1124(a5) # 1b000b9c <__rt_debug_config>

void __rt_handle_illegal_instr()
{
1c0098cc:	1141                	addi	sp,sp,-16
1c0098ce:	c422                	sw	s0,8(sp)
1c0098d0:	c606                	sw	ra,12(sp)
1c0098d2:	fc173733          	p.bclr	a4,a4,30,1
1c0098d6:	843e                	mv	s0,a5
#ifdef __riscv__
  unsigned int mepc = hal_mepc_read();
  rt_warning("Reached illegal instruction (PC: 0x%x, opcode: 0x%x\n", mepc, *(int *)mepc);
1c0098d8:	c315                	beqz	a4,1c0098fc <__rt_handle_illegal_instr+0x38>
1c0098da:	341026f3          	csrr	a3,mepc
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0098de:	01402673          	csrr	a2,uhartid
1c0098e2:	1c00e537          	lui	a0,0x1c00e
1c0098e6:	4298                	lw	a4,0(a3)
  return (hart_id >> 5) & 0x3f;
1c0098e8:	40565593          	srai	a1,a2,0x5
1c0098ec:	f265b5b3          	p.bclr	a1,a1,25,6
1c0098f0:	f4563633          	p.bclr	a2,a2,26,5
1c0098f4:	a6c50513          	addi	a0,a0,-1428 # 1c00da6c <IntegerExpLUT+0x70>
1c0098f8:	1e5020ef          	jal	ra,1c00c2dc <printf>
}

static inline int rt_debug_config_werror() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WERROR_BIT, 1);
1c0098fc:	b9c42783          	lw	a5,-1124(s0)
1c009900:	c01797b3          	p.extractu	a5,a5,0,1
1c009904:	c399                	beqz	a5,1c00990a <__rt_handle_illegal_instr+0x46>
1c009906:	15b020ef          	jal	ra,1c00c260 <abort>
  illegal_insn_handler_c();
#endif
}
1c00990a:	4422                	lw	s0,8(sp)
1c00990c:	40b2                	lw	ra,12(sp)
1c00990e:	0141                	addi	sp,sp,16
  illegal_insn_handler_c();
1c009910:	fb3ff06f          	j	1c0098c2 <illegal_insn_handler_c>

1c009914 <__rt_irq_init>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_IRQ_AND, irqMask);
1c009914:	57fd                	li	a5,-1
1c009916:	00204737          	lui	a4,0x204
1c00991a:	00f72823          	sw	a5,16(a4) # 204010 <__L2+0x184010>
  else eu_irq_maskClr(mask);
#elif defined(ITC_VERSION)
  hal_itc_enable_clr(mask);
#elif defined(EU_VERSION)
  eu_irq_maskClr(mask);
  if (hal_is_fc()) eu_evt_maskClr(mask);
1c00991e:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009922:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c009926:	ca5797b3          	p.extractu	a5,a5,5,5
1c00992a:	00e79763          	bne	a5,a4,1c009938 <__rt_irq_init+0x24>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00992e:	57fd                	li	a5,-1
1c009930:	00204737          	lui	a4,0x204
1c009934:	00f72223          	sw	a5,4(a4) # 204004 <__L2+0x184004>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009938:	014027f3          	csrr	a5,uhartid
#if defined(ARCHI_CORE_RISCV_ITC)
  hal_spr_write(0x305, base);
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
#else
  if (rt_is_fc()) {
1c00993c:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c009940:	ca5797b3          	p.extractu	a5,a5,5,5
1c009944:	00e79963          	bne	a5,a4,1c009956 <__rt_irq_init+0x42>
#if defined(ARCHI_CORE_HAS_SECURITY)
    __builtin_pulp_spr_write(SR_MTVEC, base);
1c009948:	1c0007b7          	lui	a5,0x1c000
1c00994c:	00078793          	mv	a5,a5
1c009950:	30579073          	csrw	mtvec,a5
1c009954:	8082                	ret
  pulp_write32(ARCHI_CLUSTER_CTRL_ADDR + 0x40, bootAddr);
1c009956:	1c0007b7          	lui	a5,0x1c000
1c00995a:	00200737          	lui	a4,0x200
1c00995e:	00078793          	mv	a5,a5
1c009962:	c33c                	sw	a5,64(a4)
  rt_irq_mask_clr(-1);

  // As the FC code may not be at the beginning of the L2, set the
  // vector base to get proper interrupt handlers
  __rt_set_fc_vector_base((int)rt_irq_vector_base());
}
1c009964:	8082                	ret

1c009966 <__rt_fc_cluster_lock_req>:
      rt_free(RT_ALLOC_FC_RET_DATA, (void *)cbsys, sizeof(rt_cbsys_t));     
      return;
    }

    prev = cbsys;
    cbsys = cbsys->next;
1c009966:	300476f3          	csrrci	a3,mstatus,8
1c00996a:	08a54703          	lbu	a4,138(a0)
1c00996e:	411c                	lw	a5,0(a0)
1c009970:	c321                	beqz	a4,1c0099b0 <__rt_fc_cluster_lock_req+0x4a>
1c009972:	4398                	lw	a4,0(a5)
1c009974:	cf09                	beqz	a4,1c00998e <__rt_fc_cluster_lock_req+0x28>
1c009976:	43d8                	lw	a4,4(a5)
1c009978:	cb09                	beqz	a4,1c00998a <__rt_fc_cluster_lock_req+0x24>
1c00997a:	4798                	lw	a4,8(a5)
1c00997c:	c348                	sw	a0,4(a4)
1c00997e:	c788                	sw	a0,8(a5)
1c009980:	00052223          	sw	zero,4(a0)
1c009984:	30069073          	csrw	mstatus,a3
1c009988:	8082                	ret
1c00998a:	c3c8                	sw	a0,4(a5)
1c00998c:	bfcd                	j	1c00997e <__rt_fc_cluster_lock_req+0x18>
1c00998e:	4705                	li	a4,1
1c009990:	08e50423          	sb	a4,136(a0)
1c009994:	4705                	li	a4,1
1c009996:	c398                	sw	a4,0(a5)
1c009998:	08954783          	lbu	a5,137(a0)
1c00999c:	00201737          	lui	a4,0x201
1c0099a0:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0099a4:	04078793          	addi	a5,a5,64 # 1c000040 <__irq_vector_base+0x40>
1c0099a8:	07da                	slli	a5,a5,0x16
1c0099aa:	0007e723          	p.sw	zero,a4(a5)
1c0099ae:	bfd9                	j	1c009984 <__rt_fc_cluster_lock_req+0x1e>
1c0099b0:	43d8                	lw	a4,4(a5)
1c0099b2:	e719                	bnez	a4,1c0099c0 <__rt_fc_cluster_lock_req+0x5a>
1c0099b4:	0007a023          	sw	zero,0(a5)
1c0099b8:	4785                	li	a5,1
1c0099ba:	08f50423          	sb	a5,136(a0)
1c0099be:	bfe9                	j	1c009998 <__rt_fc_cluster_lock_req+0x32>
1c0099c0:	4350                	lw	a2,4(a4)
1c0099c2:	c3d0                	sw	a2,4(a5)
1c0099c4:	4785                	li	a5,1
1c0099c6:	08f70423          	sb	a5,136(a4)
1c0099ca:	08974783          	lbu	a5,137(a4)
1c0099ce:	00201737          	lui	a4,0x201
1c0099d2:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0099d6:	04078793          	addi	a5,a5,64
1c0099da:	07da                	slli	a5,a5,0x16
1c0099dc:	0007e723          	p.sw	zero,a4(a5)
1c0099e0:	bfe1                	j	1c0099b8 <__rt_fc_cluster_lock_req+0x52>

1c0099e2 <__rt_cbsys_add>:
  }
}

int __rt_cbsys_add(__rt_cbsys_e cbsys_id, int (*cb)(void *), void *cb_arg)
{
1c0099e2:	1101                	addi	sp,sp,-32
1c0099e4:	cc22                	sw	s0,24(sp)
1c0099e6:	ca26                	sw	s1,20(sp)
1c0099e8:	842a                	mv	s0,a0
1c0099ea:	84ae                	mv	s1,a1
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c0099ec:	4501                	li	a0,0
1c0099ee:	45b1                	li	a1,12
1c0099f0:	c632                	sw	a2,12(sp)
{
1c0099f2:	ce06                	sw	ra,28(sp)
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c0099f4:	2dad                	jal	1c00a06e <rt_alloc>
  if (cbsys == NULL) return -1;
1c0099f6:	4632                	lw	a2,12(sp)
1c0099f8:	c115                	beqz	a0,1c009a1c <__rt_cbsys_add+0x3a>

  cbsys->callback = cb;
  cbsys->arg = cb_arg;
  cbsys->next = cbsys_first[cbsys_id];
1c0099fa:	1b0017b7          	lui	a5,0x1b001
1c0099fe:	040a                	slli	s0,s0,0x2
1c009a00:	ba078793          	addi	a5,a5,-1120 # 1b000ba0 <cbsys_first>
1c009a04:	97a2                	add	a5,a5,s0
1c009a06:	4398                	lw	a4,0(a5)
  cbsys->callback = cb;
1c009a08:	c104                	sw	s1,0(a0)
  cbsys->arg = cb_arg;
1c009a0a:	c150                	sw	a2,4(a0)
  cbsys->next = cbsys_first[cbsys_id];
1c009a0c:	c518                	sw	a4,8(a0)
  cbsys_first[cbsys_id] = cbsys;
1c009a0e:	c388                	sw	a0,0(a5)

  return 0;
1c009a10:	4501                	li	a0,0
}
1c009a12:	40f2                	lw	ra,28(sp)
1c009a14:	4462                	lw	s0,24(sp)
1c009a16:	44d2                	lw	s1,20(sp)
1c009a18:	6105                	addi	sp,sp,32
1c009a1a:	8082                	ret
  if (cbsys == NULL) return -1;
1c009a1c:	557d                	li	a0,-1
1c009a1e:	bfd5                	j	1c009a12 <__rt_cbsys_add+0x30>

1c009a20 <__rt_cbsys_exec>:


int __rt_cbsys_exec(__rt_cbsys_e cbsys_id)
{
1c009a20:	1141                	addi	sp,sp,-16
1c009a22:	c422                	sw	s0,8(sp)
  rt_cbsys_t *cbsys = cbsys_first[cbsys_id];
1c009a24:	1b001437          	lui	s0,0x1b001
1c009a28:	050a                	slli	a0,a0,0x2
1c009a2a:	ba040413          	addi	s0,s0,-1120 # 1b000ba0 <cbsys_first>
1c009a2e:	20a47403          	p.lw	s0,a0(s0)
{
1c009a32:	c606                	sw	ra,12(sp)
  while (cbsys)
1c009a34:	e411                	bnez	s0,1c009a40 <__rt_cbsys_exec+0x20>
  {
    if (cbsys->callback(cbsys->arg)) return -1;
    cbsys = cbsys->next;
  }

  return 0;
1c009a36:	4501                	li	a0,0
}
1c009a38:	40b2                	lw	ra,12(sp)
1c009a3a:	4422                	lw	s0,8(sp)
1c009a3c:	0141                	addi	sp,sp,16
1c009a3e:	8082                	ret
    if (cbsys->callback(cbsys->arg)) return -1;
1c009a40:	401c                	lw	a5,0(s0)
1c009a42:	4048                	lw	a0,4(s0)
1c009a44:	9782                	jalr	a5
1c009a46:	e119                	bnez	a0,1c009a4c <__rt_cbsys_exec+0x2c>
    cbsys = cbsys->next;
1c009a48:	4400                	lw	s0,8(s0)
1c009a4a:	b7ed                	j	1c009a34 <__rt_cbsys_exec+0x14>
    if (cbsys->callback(cbsys->arg)) return -1;
1c009a4c:	557d                	li	a0,-1
1c009a4e:	b7ed                	j	1c009a38 <__rt_cbsys_exec+0x18>

1c009a50 <__rt_utils_init>:

RT_FC_BOOT_CODE void __rt_utils_init()
{
  for (int i=0; i<RT_CBSYS_NB; i++)
  {
    cbsys_first[i] = NULL;
1c009a50:	1b0017b7          	lui	a5,0x1b001
1c009a54:	ba078793          	addi	a5,a5,-1120 # 1b000ba0 <cbsys_first>
1c009a58:	0007a023          	sw	zero,0(a5)
1c009a5c:	0007a223          	sw	zero,4(a5)
1c009a60:	0007a423          	sw	zero,8(a5)
1c009a64:	0007a623          	sw	zero,12(a5)
1c009a68:	0007a823          	sw	zero,16(a5)
1c009a6c:	0007aa23          	sw	zero,20(a5)
  }
}
1c009a70:	8082                	ret

1c009a72 <__rt_fc_lock>:

void __rt_fc_lock(rt_fc_lock_t *lock)
{
1c009a72:	1141                	addi	sp,sp,-16
1c009a74:	c422                	sw	s0,8(sp)
1c009a76:	842a                	mv	s0,a0
1c009a78:	c606                	sw	ra,12(sp)
1c009a7a:	c226                	sw	s1,4(sp)
1c009a7c:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009a7e:	300474f3          	csrrci	s1,mstatus,8
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  while(lock->locked)
1c009a82:	401c                	lw	a5,0(s0)
1c009a84:	eb99                	bnez	a5,1c009a9a <__rt_fc_lock+0x28>
  {
    //lock->fc_wait = __rt_thread_current;
    __rt_event_execute(rt_event_internal_sched(), 1);
  }
  lock->locked = 1;
1c009a86:	4785                	li	a5,1
1c009a88:	c01c                	sw	a5,0(s0)
  __builtin_pulp_spr_write(reg, val);
1c009a8a:	30049073          	csrw	mstatus,s1
  while (rt_tas_lock_32((uint32_t)&lock->lock) == -1)
  {

  }
#endif
}
1c009a8e:	40b2                	lw	ra,12(sp)
1c009a90:	4422                	lw	s0,8(sp)
1c009a92:	4492                	lw	s1,4(sp)
1c009a94:	4902                	lw	s2,0(sp)
1c009a96:	0141                	addi	sp,sp,16
1c009a98:	8082                	ret
    __rt_event_execute(rt_event_internal_sched(), 1);
1c009a9a:	4585                	li	a1,1
1c009a9c:	01c00513          	li	a0,28
1c009aa0:	2989                	jal	1c009ef2 <__rt_event_execute>
1c009aa2:	b7c5                	j	1c009a82 <__rt_fc_lock+0x10>

1c009aa4 <__rt_fc_unlock>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009aa4:	300476f3          	csrrci	a3,mstatus,8

static int __rt_fc_unlock_to_cluster(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_CLUSTER)
  if (lock->waiting) {
1c009aa8:	415c                	lw	a5,4(a0)
1c009aaa:	e791                	bnez	a5,1c009ab6 <__rt_fc_unlock+0x12>
{
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  if (!__rt_fc_unlock_to_cluster(lock))
  {
    lock->locked = 0;    
1c009aac:	00052023          	sw	zero,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c009ab0:	30069073          	csrw	mstatus,a3
  }
  rt_irq_restore(irq);
#else
  rt_tas_unlock_32((uint32_t)&lock->lock, 0);
#endif
}
1c009ab4:	8082                	ret
    lock->waiting = req->next;
1c009ab6:	43d8                	lw	a4,4(a5)
1c009ab8:	c158                	sw	a4,4(a0)
    req->done = 1;
1c009aba:	4705                	li	a4,1
1c009abc:	08e78423          	sb	a4,136(a5)
    __rt_cluster_notif_req_done(req->cid);
1c009ac0:	0897c783          	lbu	a5,137(a5)
  pulp_write32(evtAddr, coreSet);
1c009ac4:	00201737          	lui	a4,0x201
1c009ac8:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c009acc:	04078793          	addi	a5,a5,64
1c009ad0:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c009ad2:	0007e723          	p.sw	zero,a4(a5)
1c009ad6:	bfe9                	j	1c009ab0 <__rt_fc_unlock+0xc>

1c009ad8 <__rt_fc_cluster_lock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009ad8:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c009adc:	8795                	srai	a5,a5,0x5
1c009ade:	f267b7b3          	p.bclr	a5,a5,25,6
#if defined(ARCHI_HAS_FC)

void __rt_fc_cluster_lock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c009ae2:	08f584a3          	sb	a5,137(a1)
  req->done = 0;
  req->req_lock = 1;
1c009ae6:	4785                	li	a5,1
1c009ae8:	08f58523          	sb	a5,138(a1)
  event->arg[0] = (uintptr_t)callback;
1c009aec:	1c00a7b7          	lui	a5,0x1c00a
1c009af0:	96678793          	addi	a5,a5,-1690 # 1c009966 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c009af4:	c188                	sw	a0,0(a1)
  req->done = 0;
1c009af6:	08058423          	sb	zero,136(a1)
  event->implem.pending = 0;
1c009afa:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c009afe:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c009b02:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c009b04:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c009b06:	05a1                	addi	a1,a1,8

// This function will push an event from cluster to FC and the event callback
// will be executed directly from within the interrupt handler
static inline void __rt_cluster_push_fc_irq_event(rt_event_t *event)
{
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)event) | 0x1));
1c009b08:	c005c533          	p.bset	a0,a1,0,0
1c009b0c:	2b80106f          	j	1c00adc4 <__rt_cluster_push_fc_event>

1c009b10 <__rt_fc_cluster_unlock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009b10:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c009b14:	8795                	srai	a5,a5,0x5
1c009b16:	f267b7b3          	p.bclr	a5,a5,25,6
}

void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c009b1a:	08f584a3          	sb	a5,137(a1)
  event->arg[0] = (uintptr_t)callback;
1c009b1e:	1c00a7b7          	lui	a5,0x1c00a
1c009b22:	96678793          	addi	a5,a5,-1690 # 1c009966 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c009b26:	c188                	sw	a0,0(a1)
  req->done = 0;
1c009b28:	08058423          	sb	zero,136(a1)
  req->req_lock = 0;
1c009b2c:	08058523          	sb	zero,138(a1)
  event->implem.pending = 0;
1c009b30:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c009b34:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c009b38:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c009b3a:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c009b3c:	05a1                	addi	a1,a1,8
1c009b3e:	c005c533          	p.bset	a0,a1,0,0
1c009b42:	2820106f          	j	1c00adc4 <__rt_cluster_push_fc_event>

1c009b46 <__rt_event_enqueue>:

    __rt_wait_event_check(event, call_event);
  }

  rt_irq_restore(irq);
}
1c009b46:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c009b4a:	00052023          	sw	zero,0(a0)
1c009b4e:	01c00713          	li	a4,28
1c009b52:	c689                	beqz	a3,1c009b5c <__rt_event_enqueue+0x16>
1c009b54:	435c                	lw	a5,4(a4)
1c009b56:	c388                	sw	a0,0(a5)
1c009b58:	c348                	sw	a0,4(a4)
1c009b5a:	8082                	ret
1c009b5c:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c009b60:	bfe5                	j	1c009b58 <__rt_event_enqueue+0x12>

1c009b62 <__rt_bridge_check_bridge_req.part.5>:
1c009b62:	1c00e737          	lui	a4,0x1c00e
1c009b66:	dcc70793          	addi	a5,a4,-564 # 1c00ddcc <__hal_debug_struct>
1c009b6a:	0a47a783          	lw	a5,164(a5)
1c009b6e:	dcc70713          	addi	a4,a4,-564
1c009b72:	c789                	beqz	a5,1c009b7c <__rt_bridge_check_bridge_req.part.5+0x1a>
1c009b74:	4f94                	lw	a3,24(a5)
1c009b76:	e681                	bnez	a3,1c009b7e <__rt_bridge_check_bridge_req.part.5+0x1c>
1c009b78:	0af72623          	sw	a5,172(a4)
1c009b7c:	8082                	ret
1c009b7e:	479c                	lw	a5,8(a5)
1c009b80:	bfcd                	j	1c009b72 <__rt_bridge_check_bridge_req.part.5+0x10>

1c009b82 <__rt_bridge_wait>:
1c009b82:	014027f3          	csrr	a5,uhartid
1c009b86:	02000713          	li	a4,32
1c009b8a:	ca5797b3          	p.extractu	a5,a5,5,5
1c009b8e:	02e79c63          	bne	a5,a4,1c009bc6 <__rt_bridge_wait+0x44>
1c009b92:	1141                	addi	sp,sp,-16
1c009b94:	c422                	sw	s0,8(sp)
1c009b96:	1a106437          	lui	s0,0x1a106
1c009b9a:	c606                	sw	ra,12(sp)
1c009b9c:	00442783          	lw	a5,4(s0) # 1a106004 <__l1_end+0xa105fc0>
1c009ba0:	c187b7b3          	p.bclr	a5,a5,0,24
1c009ba4:	00f42223          	sw	a5,4(s0)
1c009ba8:	4585                	li	a1,1
1c009baa:	03800513          	li	a0,56
1c009bae:	18f000ef          	jal	ra,1c00a53c <__rt_periph_wait_event>
1c009bb2:	00442783          	lw	a5,4(s0)
1c009bb6:	c187c7b3          	p.bset	a5,a5,0,24
1c009bba:	00f42223          	sw	a5,4(s0)
1c009bbe:	40b2                	lw	ra,12(sp)
1c009bc0:	4422                	lw	s0,8(sp)
1c009bc2:	0141                	addi	sp,sp,16
1c009bc4:	8082                	ret
1c009bc6:	8082                	ret

1c009bc8 <__rt_bridge_handle_notif>:
1c009bc8:	1141                	addi	sp,sp,-16
1c009bca:	c422                	sw	s0,8(sp)
1c009bcc:	1c00e437          	lui	s0,0x1c00e
1c009bd0:	dcc40793          	addi	a5,s0,-564 # 1c00ddcc <__hal_debug_struct>
1c009bd4:	0a47a783          	lw	a5,164(a5)
1c009bd8:	c606                	sw	ra,12(sp)
1c009bda:	c226                	sw	s1,4(sp)
1c009bdc:	c04a                	sw	s2,0(sp)
1c009bde:	dcc40413          	addi	s0,s0,-564
1c009be2:	c399                	beqz	a5,1c009be8 <__rt_bridge_handle_notif+0x20>
1c009be4:	4bd8                	lw	a4,20(a5)
1c009be6:	e31d                	bnez	a4,1c009c0c <__rt_bridge_handle_notif+0x44>
1c009be8:	0b442783          	lw	a5,180(s0)
1c009bec:	c791                	beqz	a5,1c009bf8 <__rt_bridge_handle_notif+0x30>
1c009bee:	43a8                	lw	a0,64(a5)
1c009bf0:	0a042a23          	sw	zero,180(s0)
1c009bf4:	f53ff0ef          	jal	ra,1c009b46 <__rt_event_enqueue>
1c009bf8:	0ac42783          	lw	a5,172(s0)
1c009bfc:	ef85                	bnez	a5,1c009c34 <__rt_bridge_handle_notif+0x6c>
1c009bfe:	4422                	lw	s0,8(sp)
1c009c00:	40b2                	lw	ra,12(sp)
1c009c02:	4492                	lw	s1,4(sp)
1c009c04:	4902                	lw	s2,0(sp)
1c009c06:	0141                	addi	sp,sp,16
1c009c08:	f5bff06f          	j	1c009b62 <__rt_bridge_check_bridge_req.part.5>
1c009c0c:	4784                	lw	s1,8(a5)
1c009c0e:	4fd8                	lw	a4,28(a5)
1c009c10:	0a942223          	sw	s1,164(s0)
1c009c14:	cb01                	beqz	a4,1c009c24 <__rt_bridge_handle_notif+0x5c>
1c009c16:	0b042703          	lw	a4,176(s0)
1c009c1a:	c798                	sw	a4,8(a5)
1c009c1c:	0af42823          	sw	a5,176(s0)
1c009c20:	87a6                	mv	a5,s1
1c009c22:	b7c1                	j	1c009be2 <__rt_bridge_handle_notif+0x1a>
1c009c24:	43a8                	lw	a0,64(a5)
1c009c26:	30047973          	csrrci	s2,mstatus,8
1c009c2a:	f1dff0ef          	jal	ra,1c009b46 <__rt_event_enqueue>
1c009c2e:	30091073          	csrw	mstatus,s2
1c009c32:	b7fd                	j	1c009c20 <__rt_bridge_handle_notif+0x58>
1c009c34:	40b2                	lw	ra,12(sp)
1c009c36:	4422                	lw	s0,8(sp)
1c009c38:	4492                	lw	s1,4(sp)
1c009c3a:	4902                	lw	s2,0(sp)
1c009c3c:	0141                	addi	sp,sp,16
1c009c3e:	8082                	ret

1c009c40 <__rt_bridge_check_connection>:
1c009c40:	1c00e6b7          	lui	a3,0x1c00e
1c009c44:	dcc68693          	addi	a3,a3,-564 # 1c00ddcc <__hal_debug_struct>
1c009c48:	469c                	lw	a5,8(a3)
1c009c4a:	e3a1                	bnez	a5,1c009c8a <__rt_bridge_check_connection+0x4a>
1c009c4c:	1a1047b7          	lui	a5,0x1a104
1c009c50:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104030>
1c009c54:	4398                	lw	a4,0(a5)
1c009c56:	8325                	srli	a4,a4,0x9
1c009c58:	f8373733          	p.bclr	a4,a4,28,3
1c009c5c:	02773763          	p.bneimm	a4,7,1c009c8a <__rt_bridge_check_connection+0x4a>
1c009c60:	1141                	addi	sp,sp,-16
1c009c62:	c422                	sw	s0,8(sp)
1c009c64:	c606                	sw	ra,12(sp)
1c009c66:	4705                	li	a4,1
1c009c68:	c698                	sw	a4,8(a3)
1c009c6a:	4709                	li	a4,2
1c009c6c:	c398                	sw	a4,0(a5)
1c009c6e:	843e                	mv	s0,a5
1c009c70:	401c                	lw	a5,0(s0)
1c009c72:	83a5                	srli	a5,a5,0x9
1c009c74:	f837b7b3          	p.bclr	a5,a5,28,3
1c009c78:	0077a663          	p.beqimm	a5,7,1c009c84 <__rt_bridge_check_connection+0x44>
1c009c7c:	40b2                	lw	ra,12(sp)
1c009c7e:	4422                	lw	s0,8(sp)
1c009c80:	0141                	addi	sp,sp,16
1c009c82:	8082                	ret
1c009c84:	effff0ef          	jal	ra,1c009b82 <__rt_bridge_wait>
1c009c88:	b7e5                	j	1c009c70 <__rt_bridge_check_connection+0x30>
1c009c8a:	8082                	ret

1c009c8c <__rt_bridge_set_available>:
1c009c8c:	1c00e7b7          	lui	a5,0x1c00e
1c009c90:	dcc78793          	addi	a5,a5,-564 # 1c00ddcc <__hal_debug_struct>
1c009c94:	4798                	lw	a4,8(a5)
1c009c96:	1a1047b7          	lui	a5,0x1a104
1c009c9a:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104030>
1c009c9e:	e701                	bnez	a4,1c009ca6 <__rt_bridge_set_available+0x1a>
1c009ca0:	4721                	li	a4,8
1c009ca2:	c398                	sw	a4,0(a5)
1c009ca4:	8082                	ret
1c009ca6:	4709                	li	a4,2
1c009ca8:	bfed                	j	1c009ca2 <__rt_bridge_set_available+0x16>

1c009caa <__rt_bridge_send_notif>:
1c009caa:	1141                	addi	sp,sp,-16
1c009cac:	c606                	sw	ra,12(sp)
1c009cae:	f93ff0ef          	jal	ra,1c009c40 <__rt_bridge_check_connection>
1c009cb2:	1c00e7b7          	lui	a5,0x1c00e
1c009cb6:	dcc78793          	addi	a5,a5,-564 # 1c00ddcc <__hal_debug_struct>
1c009cba:	479c                	lw	a5,8(a5)
1c009cbc:	c789                	beqz	a5,1c009cc6 <__rt_bridge_send_notif+0x1c>
1c009cbe:	1a1047b7          	lui	a5,0x1a104
1c009cc2:	4719                	li	a4,6
1c009cc4:	dbf8                	sw	a4,116(a5)
1c009cc6:	40b2                	lw	ra,12(sp)
1c009cc8:	0141                	addi	sp,sp,16
1c009cca:	8082                	ret

1c009ccc <__rt_bridge_clear_notif>:
  #endif
  }
}

void __rt_bridge_clear_notif()
{
1c009ccc:	1141                	addi	sp,sp,-16
1c009cce:	c606                	sw	ra,12(sp)
  hal_debug_struct_t *debug_struct = hal_debug_struct_get();

  __rt_bridge_check_connection();
1c009cd0:	f71ff0ef          	jal	ra,1c009c40 <__rt_bridge_check_connection>

  if (debug_struct->bridge.connected)
1c009cd4:	1c00e7b7          	lui	a5,0x1c00e
1c009cd8:	dcc78793          	addi	a5,a5,-564 # 1c00ddcc <__hal_debug_struct>
1c009cdc:	479c                	lw	a5,8(a5)
1c009cde:	c789                	beqz	a5,1c009ce8 <__rt_bridge_clear_notif+0x1c>
  {
    __rt_bridge_set_available();
  }
}
1c009ce0:	40b2                	lw	ra,12(sp)
1c009ce2:	0141                	addi	sp,sp,16
    __rt_bridge_set_available();
1c009ce4:	fa9ff06f          	j	1c009c8c <__rt_bridge_set_available>
}
1c009ce8:	40b2                	lw	ra,12(sp)
1c009cea:	0141                	addi	sp,sp,16
1c009cec:	8082                	ret

1c009cee <__rt_bridge_printf_flush>:
{
1c009cee:	1141                	addi	sp,sp,-16
1c009cf0:	c422                	sw	s0,8(sp)
1c009cf2:	c606                	sw	ra,12(sp)
  if (debug_struct->bridge.connected)
1c009cf4:	1c00e437          	lui	s0,0x1c00e
  __rt_bridge_check_connection();
1c009cf8:	f49ff0ef          	jal	ra,1c009c40 <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c009cfc:	dcc40793          	addi	a5,s0,-564 # 1c00ddcc <__hal_debug_struct>
1c009d00:	479c                	lw	a5,8(a5)
1c009d02:	c39d                	beqz	a5,1c009d28 <__rt_bridge_printf_flush+0x3a>
1c009d04:	dcc40413          	addi	s0,s0,-564
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
}

static inline int hal_debug_is_busy(hal_debug_struct_t *debug_struct)
{
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c009d08:	485c                	lw	a5,20(s0)
    if (hal_debug_is_busy(hal_debug_struct_get()) || !hal_debug_is_empty(hal_debug_struct_get()))
1c009d0a:	e399                	bnez	a5,1c009d10 <__rt_bridge_printf_flush+0x22>
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
1c009d0c:	4c1c                	lw	a5,24(s0)
1c009d0e:	cf89                	beqz	a5,1c009d28 <__rt_bridge_printf_flush+0x3a>
      __rt_bridge_send_notif();
1c009d10:	f9bff0ef          	jal	ra,1c009caa <__rt_bridge_send_notif>
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c009d14:	485c                	lw	a5,20(s0)
      while(hal_debug_is_busy(hal_debug_struct_get()))
1c009d16:	e791                	bnez	a5,1c009d22 <__rt_bridge_printf_flush+0x34>
}
1c009d18:	4422                	lw	s0,8(sp)
1c009d1a:	40b2                	lw	ra,12(sp)
1c009d1c:	0141                	addi	sp,sp,16
      __rt_bridge_clear_notif();
1c009d1e:	fafff06f          	j	1c009ccc <__rt_bridge_clear_notif>
        __rt_bridge_wait();
1c009d22:	e61ff0ef          	jal	ra,1c009b82 <__rt_bridge_wait>
1c009d26:	b7fd                	j	1c009d14 <__rt_bridge_printf_flush+0x26>
}
1c009d28:	40b2                	lw	ra,12(sp)
1c009d2a:	4422                	lw	s0,8(sp)
1c009d2c:	0141                	addi	sp,sp,16
1c009d2e:	8082                	ret

1c009d30 <__rt_bridge_req_shutdown>:
{
1c009d30:	1141                	addi	sp,sp,-16
1c009d32:	c606                	sw	ra,12(sp)
1c009d34:	c422                	sw	s0,8(sp)
  __rt_bridge_check_connection();
1c009d36:	f0bff0ef          	jal	ra,1c009c40 <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c009d3a:	1c00e7b7          	lui	a5,0x1c00e
1c009d3e:	dcc78793          	addi	a5,a5,-564 # 1c00ddcc <__hal_debug_struct>
1c009d42:	479c                	lw	a5,8(a5)
1c009d44:	c7a9                	beqz	a5,1c009d8e <__rt_bridge_req_shutdown+0x5e>




static inline unsigned int apb_soc_jtag_reg_read() {
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c009d46:	1a104437          	lui	s0,0x1a104
    __rt_bridge_printf_flush();
1c009d4a:	fa5ff0ef          	jal	ra,1c009cee <__rt_bridge_printf_flush>
1c009d4e:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c009d52:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c009d54:	83a5                	srli	a5,a5,0x9
1c009d56:	f837b7b3          	p.bclr	a5,a5,28,3
1c009d5a:	0277ae63          	p.beqimm	a5,7,1c009d96 <__rt_bridge_req_shutdown+0x66>
}

static inline void apb_soc_jtag_reg_write(unsigned int value) {
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c009d5e:	4791                	li	a5,4
1c009d60:	c01c                	sw	a5,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c009d62:	1a104437          	lui	s0,0x1a104
1c009d66:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c009d6a:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) != 7)
1c009d6c:	83a5                	srli	a5,a5,0x9
1c009d6e:	f837b7b3          	p.bclr	a5,a5,28,3
1c009d72:	0277b563          	p.bneimm	a5,7,1c009d9c <__rt_bridge_req_shutdown+0x6c>
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c009d76:	00042023          	sw	zero,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c009d7a:	1a104437          	lui	s0,0x1a104
1c009d7e:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c009d82:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c009d84:	83a5                	srli	a5,a5,0x9
1c009d86:	f837b7b3          	p.bclr	a5,a5,28,3
1c009d8a:	0077ac63          	p.beqimm	a5,7,1c009da2 <__rt_bridge_req_shutdown+0x72>
}
1c009d8e:	40b2                	lw	ra,12(sp)
1c009d90:	4422                	lw	s0,8(sp)
1c009d92:	0141                	addi	sp,sp,16
1c009d94:	8082                	ret
      __rt_bridge_wait();
1c009d96:	dedff0ef          	jal	ra,1c009b82 <__rt_bridge_wait>
1c009d9a:	bf65                	j	1c009d52 <__rt_bridge_req_shutdown+0x22>
      __rt_bridge_wait();
1c009d9c:	de7ff0ef          	jal	ra,1c009b82 <__rt_bridge_wait>
1c009da0:	b7e9                	j	1c009d6a <__rt_bridge_req_shutdown+0x3a>
      __rt_bridge_wait();
1c009da2:	de1ff0ef          	jal	ra,1c009b82 <__rt_bridge_wait>
1c009da6:	bff1                	j	1c009d82 <__rt_bridge_req_shutdown+0x52>

1c009da8 <__rt_bridge_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_bridge_init()
{
  hal_bridge_t *bridge = hal_bridge_get();
  
  bridge->first_req = 0;
1c009da8:	1c00e7b7          	lui	a5,0x1c00e
  bridge->notif_req_addr = ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET;
  bridge->notif_req_value = 1<<RT_BRIDGE_ENQUEUE_EVENT;
#else
#if defined(EU_VERSION) && EU_VERSION >= 3
#if defined(ARCHI_HAS_FC)
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c009dac:	1b201737          	lui	a4,0x1b201
  bridge->first_req = 0;
1c009db0:	dcc78793          	addi	a5,a5,-564 # 1c00ddcc <__hal_debug_struct>
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c009db4:	e1070713          	addi	a4,a4,-496 # 1b200e10 <__fc_tcdm_end+0x1ffa40>
1c009db8:	0ae7ac23          	sw	a4,184(a5)
  bridge->notif_req_value = 1;
1c009dbc:	4705                	li	a4,1
  bridge->first_req = 0;
1c009dbe:	0a07a223          	sw	zero,164(a5)
  bridge->first_bridge_req = 0;
1c009dc2:	0a07a623          	sw	zero,172(a5)
  bridge->target_req = 0;
1c009dc6:	0a07aa23          	sw	zero,180(a5)
  bridge->notif_req_value = 1;
1c009dca:	0ae7ae23          	sw	a4,188(a5)
#endif
#endif
#endif

  __rt_bridge_eeprom_handle = NULL;
1c009dce:	00400793          	li	a5,4
1c009dd2:	0007a823          	sw	zero,16(a5)
  __rt_bridge_flash_handle = NULL;
1c009dd6:	0007a023          	sw	zero,0(a5)
}
1c009dda:	8082                	ret

1c009ddc <__rt_event_init>:
{
  __rt_event_execute(sched, 0);
  rt_wait_for_interrupt();
  rt_irq_enable();
  rt_irq_disable();
}
1c009ddc:	1141                	addi	sp,sp,-16
1c009dde:	c422                	sw	s0,8(sp)
1c009de0:	c606                	sw	ra,12(sp)
1c009de2:	842a                	mv	s0,a0
1c009de4:	02052223          	sw	zero,36(a0)
1c009de8:	02052423          	sw	zero,40(a0)
1c009dec:	45c1                	li	a1,16
1c009dee:	4501                	li	a0,0
1c009df0:	2cbd                	jal	1c00a06e <rt_alloc>
1c009df2:	dc68                	sw	a0,124(s0)
1c009df4:	02042a23          	sw	zero,52(s0)
1c009df8:	00042223          	sw	zero,4(s0)
1c009dfc:	40b2                	lw	ra,12(sp)
1c009dfe:	4422                	lw	s0,8(sp)
1c009e00:	0141                	addi	sp,sp,16
1c009e02:	8082                	ret

1c009e04 <__rt_wait_event_prepare_blocking>:
1c009e04:	01800793          	li	a5,24
1c009e08:	4388                	lw	a0,0(a5)
1c009e0a:	4118                	lw	a4,0(a0)
1c009e0c:	02052423          	sw	zero,40(a0)
1c009e10:	00052223          	sw	zero,4(a0)
1c009e14:	c398                	sw	a4,0(a5)
1c009e16:	4785                	li	a5,1
1c009e18:	d15c                	sw	a5,36(a0)
1c009e1a:	8082                	ret

1c009e1c <rt_event_alloc>:
1c009e1c:	1101                	addi	sp,sp,-32
1c009e1e:	c64e                	sw	s3,12(sp)
1c009e20:	89ae                	mv	s3,a1
1c009e22:	ce06                	sw	ra,28(sp)
1c009e24:	cc22                	sw	s0,24(sp)
1c009e26:	ca26                	sw	s1,20(sp)
1c009e28:	c84a                	sw	s2,16(sp)
1c009e2a:	c452                	sw	s4,8(sp)
1c009e2c:	c256                	sw	s5,4(sp)
1c009e2e:	30047a73          	csrrci	s4,mstatus,8
1c009e32:	014027f3          	csrr	a5,uhartid
1c009e36:	8795                	srai	a5,a5,0x5
1c009e38:	f267b7b3          	p.bclr	a5,a5,25,6
1c009e3c:	02000713          	li	a4,32
1c009e40:	00278513          	addi	a0,a5,2
1c009e44:	00e79363          	bne	a5,a4,1c009e4a <rt_event_alloc+0x2e>
1c009e48:	4505                	li	a0,1
1c009e4a:	00799593          	slli	a1,s3,0x7
1c009e4e:	2405                	jal	1c00a06e <rt_alloc>
1c009e50:	842a                	mv	s0,a0
1c009e52:	557d                	li	a0,-1
1c009e54:	c819                	beqz	s0,1c009e6a <rt_event_alloc+0x4e>
1c009e56:	01800493          	li	s1,24
1c009e5a:	4901                	li	s2,0
1c009e5c:	00448a93          	addi	s5,s1,4
1c009e60:	01394e63          	blt	s2,s3,1c009e7c <rt_event_alloc+0x60>
1c009e64:	300a1073          	csrw	mstatus,s4
1c009e68:	4501                	li	a0,0
1c009e6a:	40f2                	lw	ra,28(sp)
1c009e6c:	4462                	lw	s0,24(sp)
1c009e6e:	44d2                	lw	s1,20(sp)
1c009e70:	4942                	lw	s2,16(sp)
1c009e72:	49b2                	lw	s3,12(sp)
1c009e74:	4a22                	lw	s4,8(sp)
1c009e76:	4a92                	lw	s5,4(sp)
1c009e78:	6105                	addi	sp,sp,32
1c009e7a:	8082                	ret
1c009e7c:	8522                	mv	a0,s0
1c009e7e:	85d6                	mv	a1,s5
1c009e80:	f5dff0ef          	jal	ra,1c009ddc <__rt_event_init>
1c009e84:	409c                	lw	a5,0(s1)
1c009e86:	0905                	addi	s2,s2,1
1c009e88:	c01c                	sw	a5,0(s0)
1c009e8a:	c080                	sw	s0,0(s1)
1c009e8c:	08040413          	addi	s0,s0,128
1c009e90:	bfc1                	j	1c009e60 <rt_event_alloc+0x44>

1c009e92 <rt_event_get>:
1c009e92:	30047773          	csrrci	a4,mstatus,8
1c009e96:	01800793          	li	a5,24
1c009e9a:	4388                	lw	a0,0(a5)
1c009e9c:	c509                	beqz	a0,1c009ea6 <rt_event_get+0x14>
1c009e9e:	4114                	lw	a3,0(a0)
1c009ea0:	c14c                	sw	a1,4(a0)
1c009ea2:	c510                	sw	a2,8(a0)
1c009ea4:	c394                	sw	a3,0(a5)
1c009ea6:	30071073          	csrw	mstatus,a4
1c009eaa:	8082                	ret

1c009eac <rt_event_get_blocking>:
1c009eac:	30047773          	csrrci	a4,mstatus,8
1c009eb0:	01800793          	li	a5,24
1c009eb4:	4388                	lw	a0,0(a5)
1c009eb6:	c909                	beqz	a0,1c009ec8 <rt_event_get_blocking+0x1c>
1c009eb8:	4114                	lw	a3,0(a0)
1c009eba:	00052223          	sw	zero,4(a0)
1c009ebe:	00052423          	sw	zero,8(a0)
1c009ec2:	c394                	sw	a3,0(a5)
1c009ec4:	4785                	li	a5,1
1c009ec6:	d15c                	sw	a5,36(a0)
1c009ec8:	30071073          	csrw	mstatus,a4
1c009ecc:	8082                	ret

1c009ece <rt_event_push>:
1c009ece:	30047773          	csrrci	a4,mstatus,8
1c009ed2:	01800693          	li	a3,24
1c009ed6:	42d4                	lw	a3,4(a3)
1c009ed8:	00052023          	sw	zero,0(a0)
1c009edc:	01800793          	li	a5,24
1c009ee0:	e691                	bnez	a3,1c009eec <rt_event_push+0x1e>
1c009ee2:	c3c8                	sw	a0,4(a5)
1c009ee4:	c788                	sw	a0,8(a5)
1c009ee6:	30071073          	csrw	mstatus,a4
1c009eea:	8082                	ret
1c009eec:	4794                	lw	a3,8(a5)
1c009eee:	c288                	sw	a0,0(a3)
1c009ef0:	bfd5                	j	1c009ee4 <rt_event_push+0x16>

1c009ef2 <__rt_event_execute>:
1c009ef2:	1141                	addi	sp,sp,-16
1c009ef4:	c422                	sw	s0,8(sp)
1c009ef6:	01800793          	li	a5,24
1c009efa:	43dc                	lw	a5,4(a5)
1c009efc:	c606                	sw	ra,12(sp)
1c009efe:	c226                	sw	s1,4(sp)
1c009f00:	01800413          	li	s0,24
1c009f04:	ef81                	bnez	a5,1c009f1c <__rt_event_execute+0x2a>
1c009f06:	c1b9                	beqz	a1,1c009f4c <__rt_event_execute+0x5a>
1c009f08:	002047b7          	lui	a5,0x204
1c009f0c:	0387e703          	p.elw	a4,56(a5) # 204038 <__L2+0x184038>
1c009f10:	300467f3          	csrrsi	a5,mstatus,8
1c009f14:	300477f3          	csrrci	a5,mstatus,8
1c009f18:	405c                	lw	a5,4(s0)
1c009f1a:	cb8d                	beqz	a5,1c009f4c <__rt_event_execute+0x5a>
1c009f1c:	4485                	li	s1,1
1c009f1e:	4398                	lw	a4,0(a5)
1c009f20:	5794                	lw	a3,40(a5)
1c009f22:	00978a23          	sb	s1,20(a5)
1c009f26:	c058                	sw	a4,4(s0)
1c009f28:	4788                	lw	a0,8(a5)
1c009f2a:	43d8                	lw	a4,4(a5)
1c009f2c:	e691                	bnez	a3,1c009f38 <__rt_event_execute+0x46>
1c009f2e:	53d4                	lw	a3,36(a5)
1c009f30:	e681                	bnez	a3,1c009f38 <__rt_event_execute+0x46>
1c009f32:	4014                	lw	a3,0(s0)
1c009f34:	c394                	sw	a3,0(a5)
1c009f36:	c01c                	sw	a5,0(s0)
1c009f38:	0207a223          	sw	zero,36(a5)
1c009f3c:	c711                	beqz	a4,1c009f48 <__rt_event_execute+0x56>
1c009f3e:	300467f3          	csrrsi	a5,mstatus,8
1c009f42:	9702                	jalr	a4
1c009f44:	300477f3          	csrrci	a5,mstatus,8
1c009f48:	405c                	lw	a5,4(s0)
1c009f4a:	fbf1                	bnez	a5,1c009f1e <__rt_event_execute+0x2c>
1c009f4c:	40b2                	lw	ra,12(sp)
1c009f4e:	4422                	lw	s0,8(sp)
1c009f50:	4492                	lw	s1,4(sp)
1c009f52:	0141                	addi	sp,sp,16
1c009f54:	8082                	ret

1c009f56 <__rt_wait_event>:
  } while(event);

}

void __rt_wait_event(rt_event_t *event)
{
1c009f56:	1141                	addi	sp,sp,-16
1c009f58:	c422                	sw	s0,8(sp)
1c009f5a:	c606                	sw	ra,12(sp)
1c009f5c:	842a                	mv	s0,a0
  while (event->implem.pending || event->implem.saved_pending) {
1c009f5e:	505c                	lw	a5,36(s0)
1c009f60:	ef81                	bnez	a5,1c009f78 <__rt_wait_event+0x22>
1c009f62:	585c                	lw	a5,52(s0)
1c009f64:	eb91                	bnez	a5,1c009f78 <__rt_wait_event+0x22>
    __rt_event_execute(NULL, 1);
  }

  event->next = __rt_first_free;
1c009f66:	01800793          	li	a5,24
1c009f6a:	4398                	lw	a4,0(a5)
  __rt_first_free = event;
}
1c009f6c:	40b2                	lw	ra,12(sp)
  event->next = __rt_first_free;
1c009f6e:	c018                	sw	a4,0(s0)
  __rt_first_free = event;
1c009f70:	c380                	sw	s0,0(a5)
}
1c009f72:	4422                	lw	s0,8(sp)
1c009f74:	0141                	addi	sp,sp,16
1c009f76:	8082                	ret
    __rt_event_execute(NULL, 1);
1c009f78:	4585                	li	a1,1
1c009f7a:	4501                	li	a0,0
1c009f7c:	f77ff0ef          	jal	ra,1c009ef2 <__rt_event_execute>
1c009f80:	bff9                	j	1c009f5e <__rt_wait_event+0x8>

1c009f82 <rt_event_wait>:

void rt_event_wait(rt_event_t *event)
{
1c009f82:	1141                	addi	sp,sp,-16
1c009f84:	c606                	sw	ra,12(sp)
1c009f86:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009f88:	30047473          	csrrci	s0,mstatus,8
  int irq = rt_irq_disable();
__rt_wait_event(event);
1c009f8c:	fcbff0ef          	jal	ra,1c009f56 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c009f90:	30041073          	csrw	mstatus,s0
  rt_irq_restore(irq);
}
1c009f94:	40b2                	lw	ra,12(sp)
1c009f96:	4422                	lw	s0,8(sp)
1c009f98:	0141                	addi	sp,sp,16
1c009f9a:	8082                	ret

1c009f9c <__rt_event_sched_init>:

void __rt_event_sched_init()
{
  __rt_first_free = NULL;
1c009f9c:	01800513          	li	a0,24
1c009fa0:	00052023          	sw	zero,0(a0)
  sched->first = NULL;
1c009fa4:	00052223          	sw	zero,4(a0)
  rt_event_sched_init(&__rt_sched);
  // Push one event ot the runtime scheduler as some runtime services need
  // one event.
  rt_event_alloc(&__rt_sched, 1);
1c009fa8:	4585                	li	a1,1
1c009faa:	0511                	addi	a0,a0,4
1c009fac:	e71ff06f          	j	1c009e1c <rt_event_alloc>

1c009fb0 <pi_task_push_delayed_us>:
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
  rt_event_push_delayed(task, delay);
1c009fb0:	ac35                	j	1c00a1ec <rt_event_push_delayed>

1c009fb2 <pi_cl_send_task_to_fc>:
}

static inline void __rt_task_init_from_cluster(pi_task_t *task)
{
  task->implem.keep = 1;
1c009fb2:	4785                	li	a5,1
1c009fb4:	d51c                	sw	a5,40(a0)
#ifdef ARCHI_HAS_CLUSTER

void pi_cl_send_task_to_fc(pi_task_t *task)
{
  __rt_task_init_from_cluster(task);
  __rt_cluster_push_fc_event(task);
1c009fb6:	60f0006f          	j	1c00adc4 <__rt_cluster_push_fc_event>

1c009fba <rt_user_alloc_init>:
  rt_alloc_cluster(RT_ALLOC_PERIPH, size, (rt_alloc_req_t *)req);
}

void pi_cl_l2_free(void *chunk, int size, pi_cl_free_req_t *req)
{
  rt_free_cluster(RT_ALLOC_PERIPH, chunk, size, (rt_free_req_t *)req);
1c009fba:	00758793          	addi	a5,a1,7
1c009fbe:	c407b7b3          	p.bclr	a5,a5,2,0
1c009fc2:	40b785b3          	sub	a1,a5,a1
1c009fc6:	c11c                	sw	a5,0(a0)
1c009fc8:	8e0d                	sub	a2,a2,a1
1c009fca:	00c05763          	blez	a2,1c009fd8 <rt_user_alloc_init+0x1e>
1c009fce:	c4063633          	p.bclr	a2,a2,2,0
1c009fd2:	c390                	sw	a2,0(a5)
1c009fd4:	0007a223          	sw	zero,4(a5)
1c009fd8:	8082                	ret

1c009fda <rt_user_alloc>:
1c009fda:	411c                	lw	a5,0(a0)
1c009fdc:	059d                	addi	a1,a1,7
1c009fde:	c405b5b3          	p.bclr	a1,a1,2,0
1c009fe2:	4701                	li	a4,0
1c009fe4:	cb89                	beqz	a5,1c009ff6 <rt_user_alloc+0x1c>
1c009fe6:	4394                	lw	a3,0(a5)
1c009fe8:	43d0                	lw	a2,4(a5)
1c009fea:	00b6c863          	blt	a3,a1,1c009ffa <rt_user_alloc+0x20>
1c009fee:	00b69b63          	bne	a3,a1,1c00a004 <rt_user_alloc+0x2a>
1c009ff2:	c719                	beqz	a4,1c00a000 <rt_user_alloc+0x26>
1c009ff4:	c350                	sw	a2,4(a4)
1c009ff6:	853e                	mv	a0,a5
1c009ff8:	8082                	ret
1c009ffa:	873e                	mv	a4,a5
1c009ffc:	87b2                	mv	a5,a2
1c009ffe:	b7dd                	j	1c009fe4 <rt_user_alloc+0xa>
1c00a000:	c110                	sw	a2,0(a0)
1c00a002:	bfd5                	j	1c009ff6 <rt_user_alloc+0x1c>
1c00a004:	00b78833          	add	a6,a5,a1
1c00a008:	40b685b3          	sub	a1,a3,a1
1c00a00c:	00b82023          	sw	a1,0(a6)
1c00a010:	00c82223          	sw	a2,4(a6)
1c00a014:	c701                	beqz	a4,1c00a01c <rt_user_alloc+0x42>
1c00a016:	01072223          	sw	a6,4(a4)
1c00a01a:	bff1                	j	1c009ff6 <rt_user_alloc+0x1c>
1c00a01c:	01052023          	sw	a6,0(a0)
1c00a020:	bfd9                	j	1c009ff6 <rt_user_alloc+0x1c>

1c00a022 <rt_user_free>:
1c00a022:	411c                	lw	a5,0(a0)
1c00a024:	061d                	addi	a2,a2,7
1c00a026:	c4063633          	p.bclr	a2,a2,2,0
1c00a02a:	4701                	li	a4,0
1c00a02c:	c399                	beqz	a5,1c00a032 <rt_user_free+0x10>
1c00a02e:	02b7e763          	bltu	a5,a1,1c00a05c <rt_user_free+0x3a>
1c00a032:	00c586b3          	add	a3,a1,a2
1c00a036:	02d79663          	bne	a5,a3,1c00a062 <rt_user_free+0x40>
1c00a03a:	4394                	lw	a3,0(a5)
1c00a03c:	43dc                	lw	a5,4(a5)
1c00a03e:	9636                	add	a2,a2,a3
1c00a040:	c190                	sw	a2,0(a1)
1c00a042:	c1dc                	sw	a5,4(a1)
1c00a044:	c31d                	beqz	a4,1c00a06a <rt_user_free+0x48>
1c00a046:	4314                	lw	a3,0(a4)
1c00a048:	00d707b3          	add	a5,a4,a3
1c00a04c:	00f59d63          	bne	a1,a5,1c00a066 <rt_user_free+0x44>
1c00a050:	419c                	lw	a5,0(a1)
1c00a052:	97b6                	add	a5,a5,a3
1c00a054:	c31c                	sw	a5,0(a4)
1c00a056:	41dc                	lw	a5,4(a1)
1c00a058:	c35c                	sw	a5,4(a4)
1c00a05a:	8082                	ret
1c00a05c:	873e                	mv	a4,a5
1c00a05e:	43dc                	lw	a5,4(a5)
1c00a060:	b7f1                	j	1c00a02c <rt_user_free+0xa>
1c00a062:	c190                	sw	a2,0(a1)
1c00a064:	bff9                	j	1c00a042 <rt_user_free+0x20>
1c00a066:	c34c                	sw	a1,4(a4)
1c00a068:	8082                	ret
1c00a06a:	c10c                	sw	a1,0(a0)
1c00a06c:	8082                	ret

1c00a06e <rt_alloc>:
1c00a06e:	4785                	li	a5,1
1c00a070:	00a7fb63          	bleu	a0,a5,1c00a086 <rt_alloc+0x18>
1c00a074:	1c00e7b7          	lui	a5,0x1c00e
1c00a078:	24c7a783          	lw	a5,588(a5) # 1c00e24c <__rt_alloc_l1>
1c00a07c:	1579                	addi	a0,a0,-2
1c00a07e:	050a                	slli	a0,a0,0x2
1c00a080:	953e                	add	a0,a0,a5
1c00a082:	f59ff06f          	j	1c009fda <rt_user_alloc>
1c00a086:	00153763          	p.bneimm	a0,1,1c00a094 <rt_alloc+0x26>
1c00a08a:	1c00e537          	lui	a0,0x1c00e
1c00a08e:	25450513          	addi	a0,a0,596 # 1c00e254 <__rt_alloc_fc_tcdm>
1c00a092:	bfc5                	j	1c00a082 <rt_alloc+0x14>
1c00a094:	1c00e537          	lui	a0,0x1c00e
1c00a098:	25050513          	addi	a0,a0,592 # 1c00e250 <__rt_alloc_l2>
1c00a09c:	b7dd                	j	1c00a082 <rt_alloc+0x14>

1c00a09e <rt_free>:
1c00a09e:	4785                	li	a5,1
1c00a0a0:	00a7fb63          	bleu	a0,a5,1c00a0b6 <rt_free+0x18>
1c00a0a4:	1c00e7b7          	lui	a5,0x1c00e
1c00a0a8:	24c7a783          	lw	a5,588(a5) # 1c00e24c <__rt_alloc_l1>
1c00a0ac:	1579                	addi	a0,a0,-2
1c00a0ae:	050a                	slli	a0,a0,0x2
1c00a0b0:	953e                	add	a0,a0,a5
1c00a0b2:	f71ff06f          	j	1c00a022 <rt_user_free>
1c00a0b6:	c511                	beqz	a0,1c00a0c2 <rt_free+0x24>
1c00a0b8:	1c00e537          	lui	a0,0x1c00e
1c00a0bc:	25450513          	addi	a0,a0,596 # 1c00e254 <__rt_alloc_fc_tcdm>
1c00a0c0:	bfcd                	j	1c00a0b2 <rt_free+0x14>
1c00a0c2:	1c00e537          	lui	a0,0x1c00e
1c00a0c6:	25050513          	addi	a0,a0,592 # 1c00e250 <__rt_alloc_l2>
1c00a0ca:	b7e5                	j	1c00a0b2 <rt_free+0x14>

1c00a0cc <__rt_alloc_init_l1>:
1c00a0cc:	1c00e7b7          	lui	a5,0x1c00e
1c00a0d0:	24c7a703          	lw	a4,588(a5) # 1c00e24c <__rt_alloc_l1>
1c00a0d4:	100007b7          	lui	a5,0x10000
1c00a0d8:	01651593          	slli	a1,a0,0x16
1c00a0dc:	6641                	lui	a2,0x10
1c00a0de:	050a                	slli	a0,a0,0x2
1c00a0e0:	04478793          	addi	a5,a5,68 # 10000044 <__l1_end>
1c00a0e4:	fbc60613          	addi	a2,a2,-68 # ffbc <__l1_heap_size>
1c00a0e8:	95be                	add	a1,a1,a5
1c00a0ea:	953a                	add	a0,a0,a4
1c00a0ec:	ecfff06f          	j	1c009fba <rt_user_alloc_init>

1c00a0f0 <__rt_alloc_init_l1_for_fc>:
1c00a0f0:	100005b7          	lui	a1,0x10000
1c00a0f4:	01651793          	slli	a5,a0,0x16
1c00a0f8:	04458593          	addi	a1,a1,68 # 10000044 <__l1_end>
1c00a0fc:	00b78733          	add	a4,a5,a1
1c00a100:	050a                	slli	a0,a0,0x2
1c00a102:	0791                	addi	a5,a5,4
1c00a104:	6641                	lui	a2,0x10
1c00a106:	1c00e6b7          	lui	a3,0x1c00e
1c00a10a:	fb860613          	addi	a2,a2,-72 # ffb8 <__rt_stack_size+0xf7b8>
1c00a10e:	95be                	add	a1,a1,a5
1c00a110:	953a                	add	a0,a0,a4
1c00a112:	24e6a623          	sw	a4,588(a3) # 1c00e24c <__rt_alloc_l1>
1c00a116:	ea5ff06f          	j	1c009fba <rt_user_alloc_init>

1c00a11a <__rt_allocs_init>:
1c00a11a:	1c00e5b7          	lui	a1,0x1c00e
1c00a11e:	2d458793          	addi	a5,a1,724 # 1c00e2d4 <__l2_end>
1c00a122:	1c080637          	lui	a2,0x1c080
1c00a126:	1c00e537          	lui	a0,0x1c00e
1c00a12a:	1141                	addi	sp,sp,-16
1c00a12c:	8e1d                	sub	a2,a2,a5
1c00a12e:	2d458593          	addi	a1,a1,724
1c00a132:	25050513          	addi	a0,a0,592 # 1c00e250 <__rt_alloc_l2>
1c00a136:	c606                	sw	ra,12(sp)
1c00a138:	c422                	sw	s0,8(sp)
1c00a13a:	e81ff0ef          	jal	ra,1c009fba <rt_user_alloc_init>
1c00a13e:	1b0015b7          	lui	a1,0x1b001
1c00a142:	3d058793          	addi	a5,a1,976 # 1b0013d0 <__fc_tcdm_end>
1c00a146:	1b004637          	lui	a2,0x1b004
1c00a14a:	1c00e437          	lui	s0,0x1c00e
1c00a14e:	8e1d                	sub	a2,a2,a5
1c00a150:	3d058593          	addi	a1,a1,976
1c00a154:	25440513          	addi	a0,s0,596 # 1c00e254 <__rt_alloc_fc_tcdm>
1c00a158:	e63ff0ef          	jal	ra,1c009fba <rt_user_alloc_init>
1c00a15c:	014027f3          	csrr	a5,uhartid
1c00a160:	ca5797b3          	p.extractu	a5,a5,5,5
1c00a164:	e799                	bnez	a5,1c00a172 <__rt_allocs_init+0x58>
1c00a166:	4422                	lw	s0,8(sp)
1c00a168:	40b2                	lw	ra,12(sp)
1c00a16a:	4501                	li	a0,0
1c00a16c:	0141                	addi	sp,sp,16
1c00a16e:	f83ff06f          	j	1c00a0f0 <__rt_alloc_init_l1_for_fc>
1c00a172:	25440513          	addi	a0,s0,596
1c00a176:	4591                	li	a1,4
1c00a178:	e63ff0ef          	jal	ra,1c009fda <rt_user_alloc>
1c00a17c:	40b2                	lw	ra,12(sp)
1c00a17e:	4422                	lw	s0,8(sp)
1c00a180:	1c00e7b7          	lui	a5,0x1c00e
1c00a184:	24a7a623          	sw	a0,588(a5) # 1c00e24c <__rt_alloc_l1>
1c00a188:	0141                	addi	sp,sp,16
1c00a18a:	8082                	ret

1c00a18c <pi_cl_l1_malloc>:
}

void *pi_cl_l1_malloc(struct pi_device *device, uint32_t size)
{
  return rt_alloc(RT_ALLOC_CL_DATA, size);
1c00a18c:	4509                	li	a0,2
1c00a18e:	ee1ff06f          	j	1c00a06e <rt_alloc>

1c00a192 <pi_cl_l1_free>:
  if (flags >= RT_ALLOC_CL_DATA) return rt_user_free(rt_alloc_l1(flags - RT_ALLOC_CL_DATA), _chunk, size);
1c00a192:	1c00e7b7          	lui	a5,0x1c00e
1c00a196:	24c7a503          	lw	a0,588(a5) # 1c00e24c <__rt_alloc_l1>
1c00a19a:	e89ff06f          	j	1c00a022 <rt_user_free>

1c00a19e <pi_l2_malloc>:
    return rt_user_alloc(rt_alloc_l2(), size);
1c00a19e:	85aa                	mv	a1,a0
1c00a1a0:	1c00e537          	lui	a0,0x1c00e
1c00a1a4:	25050513          	addi	a0,a0,592 # 1c00e250 <__rt_alloc_l2>
1c00a1a8:	e33ff06f          	j	1c009fda <rt_user_alloc>

1c00a1ac <pi_l2_free>:
    rt_user_free(rt_alloc_l2(), _chunk, size);
1c00a1ac:	862e                	mv	a2,a1
1c00a1ae:	85aa                	mv	a1,a0
1c00a1b0:	1c00e537          	lui	a0,0x1c00e
1c00a1b4:	25050513          	addi	a0,a0,592 # 1c00e250 <__rt_alloc_l2>
1c00a1b8:	e6bff06f          	j	1c00a022 <rt_user_free>

1c00a1bc <__rt_time_poweroff>:
  rt_event_wait(event);
}

void pi_time_wait_us(int time_us)
{
  rt_time_wait_us(time_us);
1c00a1bc:	002007b7          	lui	a5,0x200
1c00a1c0:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a1c4:	0087a783          	lw	a5,8(a5)
1c00a1c8:	1c00e737          	lui	a4,0x1c00e
1c00a1cc:	20f72423          	sw	a5,520(a4) # 1c00e208 <timer_count>
1c00a1d0:	4501                	li	a0,0
1c00a1d2:	8082                	ret

1c00a1d4 <__rt_time_poweron>:
1c00a1d4:	1c00e7b7          	lui	a5,0x1c00e
1c00a1d8:	2087a703          	lw	a4,520(a5) # 1c00e208 <timer_count>
1c00a1dc:	002007b7          	lui	a5,0x200
1c00a1e0:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a1e4:	00e7a423          	sw	a4,8(a5)
1c00a1e8:	4501                	li	a0,0
1c00a1ea:	8082                	ret

1c00a1ec <rt_event_push_delayed>:
1c00a1ec:	30047373          	csrrci	t1,mstatus,8
1c00a1f0:	1c00e637          	lui	a2,0x1c00e
1c00a1f4:	25862703          	lw	a4,600(a2) # 1c00e258 <first_delayed>
1c00a1f8:	002007b7          	lui	a5,0x200
1c00a1fc:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a200:	0087a783          	lw	a5,8(a5)
1c00a204:	46f9                	li	a3,30
1c00a206:	0405e5b3          	p.max	a1,a1,zero
1c00a20a:	02d5c5b3          	div	a1,a1,a3
1c00a20e:	800006b7          	lui	a3,0x80000
1c00a212:	fff6c693          	not	a3,a3
1c00a216:	00d7f833          	and	a6,a5,a3
1c00a21a:	0585                	addi	a1,a1,1
1c00a21c:	97ae                	add	a5,a5,a1
1c00a21e:	dd1c                	sw	a5,56(a0)
1c00a220:	982e                	add	a6,a6,a1
1c00a222:	4781                	li	a5,0
1c00a224:	c719                	beqz	a4,1c00a232 <rt_event_push_delayed+0x46>
1c00a226:	03872883          	lw	a7,56(a4)
1c00a22a:	00d8f8b3          	and	a7,a7,a3
1c00a22e:	0108e863          	bltu	a7,a6,1c00a23e <rt_event_push_delayed+0x52>
1c00a232:	cb89                	beqz	a5,1c00a244 <rt_event_push_delayed+0x58>
1c00a234:	cfc8                	sw	a0,28(a5)
1c00a236:	cd58                	sw	a4,28(a0)
1c00a238:	30031073          	csrw	mstatus,t1
1c00a23c:	8082                	ret
1c00a23e:	87ba                	mv	a5,a4
1c00a240:	4f58                	lw	a4,28(a4)
1c00a242:	b7cd                	j	1c00a224 <rt_event_push_delayed+0x38>
1c00a244:	002007b7          	lui	a5,0x200
1c00a248:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a24c:	24a62c23          	sw	a0,600(a2)
1c00a250:	cd58                	sw	a4,28(a0)
1c00a252:	0087a703          	lw	a4,8(a5)
1c00a256:	95ba                	add	a1,a1,a4
1c00a258:	00b7a823          	sw	a1,16(a5)
1c00a25c:	08500713          	li	a4,133
1c00a260:	00e7a023          	sw	a4,0(a5)
1c00a264:	bfd1                	j	1c00a238 <rt_event_push_delayed+0x4c>

1c00a266 <rt_time_wait_us>:
1c00a266:	1101                	addi	sp,sp,-32
1c00a268:	85aa                	mv	a1,a0
1c00a26a:	4501                	li	a0,0
1c00a26c:	ce06                	sw	ra,28(sp)
1c00a26e:	cc22                	sw	s0,24(sp)
1c00a270:	c62e                	sw	a1,12(sp)
1c00a272:	c3bff0ef          	jal	ra,1c009eac <rt_event_get_blocking>
1c00a276:	45b2                	lw	a1,12(sp)
1c00a278:	842a                	mv	s0,a0
1c00a27a:	f73ff0ef          	jal	ra,1c00a1ec <rt_event_push_delayed>
1c00a27e:	8522                	mv	a0,s0
1c00a280:	4462                	lw	s0,24(sp)
1c00a282:	40f2                	lw	ra,28(sp)
1c00a284:	6105                	addi	sp,sp,32
1c00a286:	cfdff06f          	j	1c009f82 <rt_event_wait>

1c00a28a <__rt_time_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_time_init()
{
  int err = 0;

  first_delayed = NULL;
1c00a28a:	1c00e7b7          	lui	a5,0x1c00e
1c00a28e:	2407ac23          	sw	zero,600(a5) # 1c00e258 <first_delayed>
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00a292:	002007b7          	lui	a5,0x200
{
1c00a296:	1141                	addi	sp,sp,-16
1c00a298:	08300713          	li	a4,131
1c00a29c:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a2a0:	c606                	sw	ra,12(sp)
1c00a2a2:	c422                	sw	s0,8(sp)
1c00a2a4:	00e7a023          	sw	a4,0(a5)
    TIMER_CFG_LO_RESET(1)  |
    TIMER_CFG_LO_CCFG(1)
  );

#if defined(ARCHI_HAS_FC)
  rt_irq_set_handler(ARCHI_FC_EVT_TIMER0_HI, __rt_timer_handler);
1c00a2a8:	1c00a5b7          	lui	a1,0x1c00a
1c00a2ac:	31658593          	addi	a1,a1,790 # 1c00a316 <__rt_timer_handler>
1c00a2b0:	452d                	li	a0,11
1c00a2b2:	dc4ff0ef          	jal	ra,1c009876 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00a2b6:	6785                	lui	a5,0x1
1c00a2b8:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00a2bc:	00204737          	lui	a4,0x204
1c00a2c0:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a2c4:	00f72423          	sw	a5,8(a4)
#else
  rt_irq_set_handler(ARCHI_EVT_TIMER0_HI, __rt_timer_handler);
  rt_irq_mask_set(1<<ARCHI_EVT_TIMER0_HI);
#endif

  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00a2c8:	1c00a5b7          	lui	a1,0x1c00a
1c00a2cc:	4601                	li	a2,0
1c00a2ce:	1bc58593          	addi	a1,a1,444 # 1c00a1bc <__rt_time_poweroff>
1c00a2d2:	4509                	li	a0,2
1c00a2d4:	f0eff0ef          	jal	ra,1c0099e2 <__rt_cbsys_add>
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00a2d8:	1c00a5b7          	lui	a1,0x1c00a
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00a2dc:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00a2de:	4601                	li	a2,0
1c00a2e0:	1d458593          	addi	a1,a1,468 # 1c00a1d4 <__rt_time_poweron>
1c00a2e4:	450d                	li	a0,3
1c00a2e6:	efcff0ef          	jal	ra,1c0099e2 <__rt_cbsys_add>
1c00a2ea:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize time driver\n");
1c00a2ec:	c10d                	beqz	a0,1c00a30e <__rt_time_init+0x84>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a2ee:	01402673          	csrr	a2,uhartid
1c00a2f2:	1c00e537          	lui	a0,0x1c00e
  return (hart_id >> 5) & 0x3f;
1c00a2f6:	40565593          	srai	a1,a2,0x5
1c00a2fa:	f265b5b3          	p.bclr	a1,a1,25,6
1c00a2fe:	f4563633          	p.bclr	a2,a2,26,5
1c00a302:	ac850513          	addi	a0,a0,-1336 # 1c00dac8 <IntegerExpLUT+0xcc>
1c00a306:	7d7010ef          	jal	ra,1c00c2dc <printf>
1c00a30a:	757010ef          	jal	ra,1c00c260 <abort>
}
1c00a30e:	40b2                	lw	ra,12(sp)
1c00a310:	4422                	lw	s0,8(sp)
1c00a312:	0141                	addi	sp,sp,16
1c00a314:	8082                	ret

1c00a316 <__rt_timer_handler>:
#if defined(__LLVM__)
void __rt_timer_handler()
#else
void __attribute__((interrupt)) __rt_timer_handler()
#endif
{
1c00a316:	7179                	addi	sp,sp,-48
1c00a318:	d032                	sw	a2,32(sp)
  rt_event_t *event = first_delayed;
1c00a31a:	1c00e637          	lui	a2,0x1c00e
{
1c00a31e:	ca3e                	sw	a5,20(sp)
  rt_event_t *event = first_delayed;
1c00a320:	25862783          	lw	a5,600(a2) # 1c00e258 <first_delayed>
{
1c00a324:	ce36                	sw	a3,28(sp)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00a326:	002006b7          	lui	a3,0x200
1c00a32a:	40468693          	addi	a3,a3,1028 # 200404 <__L2+0x180404>
1c00a32e:	d61a                	sw	t1,44(sp)
1c00a330:	d42a                	sw	a0,40(sp)
1c00a332:	d22e                	sw	a1,36(sp)
1c00a334:	cc3a                	sw	a4,24(sp)
1c00a336:	c842                	sw	a6,16(sp)
1c00a338:	c646                	sw	a7,12(sp)
1c00a33a:	c472                	sw	t3,8(sp)
1c00a33c:	c276                	sw	t4,4(sp)
1c00a33e:	0086a683          	lw	a3,8(a3)
1c00a342:	01c00593          	li	a1,28
1c00a346:	01c02503          	lw	a0,28(zero) # 1c <__rt_sched>
1c00a34a:	41cc                	lw	a1,4(a1)

  uint32_t current_time = timer_count_get(timer_base_fc(0, 1));

  // First dequeue and push to their scheduler all events with the same number of
  // ticks as they were waiting for the same time.
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00a34c:	80000337          	lui	t1,0x80000
1c00a350:	4801                	li	a6,0
1c00a352:	4881                	li	a7,0
1c00a354:	01c00e93          	li	t4,28
1c00a358:	ffe34313          	xori	t1,t1,-2
1c00a35c:	e7ad                	bnez	a5,1c00a3c6 <__rt_timer_handler+0xb0>
1c00a35e:	00088463          	beqz	a7,1c00a366 <__rt_timer_handler+0x50>
1c00a362:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00a366:	00080463          	beqz	a6,1c00a36e <__rt_timer_handler+0x58>
1c00a36a:	00bea223          	sw	a1,4(t4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00a36e:	002007b7          	lui	a5,0x200
1c00a372:	08100713          	li	a4,129
1c00a376:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
    event = next;
  }

  // Update the wait list with the next waiting event which has a different number
  // of ticks
  first_delayed = event;
1c00a37a:	24062c23          	sw	zero,600(a2)
1c00a37e:	00e7a023          	sw	a4,0(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_BUFFER_CLEAR, evtMask);
1c00a382:	6785                	lui	a5,0x1
1c00a384:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00a388:	00204737          	lui	a4,0x204
1c00a38c:	02f72423          	sw	a5,40(a4) # 204028 <__L2+0x184028>
    rt_irq_clr(1 << ARCHI_FC_EVT_TIMER0_HI);
#else
    rt_irq_clr(1 << ARCHI_EVT_TIMER0_HI);
#endif
  }
}
1c00a390:	5332                	lw	t1,44(sp)
1c00a392:	5522                	lw	a0,40(sp)
1c00a394:	5592                	lw	a1,36(sp)
1c00a396:	5602                	lw	a2,32(sp)
1c00a398:	46f2                	lw	a3,28(sp)
1c00a39a:	4762                	lw	a4,24(sp)
1c00a39c:	47d2                	lw	a5,20(sp)
1c00a39e:	4842                	lw	a6,16(sp)
1c00a3a0:	48b2                	lw	a7,12(sp)
1c00a3a2:	4e22                	lw	t3,8(sp)
1c00a3a4:	4e92                	lw	t4,4(sp)
1c00a3a6:	6145                	addi	sp,sp,48
1c00a3a8:	30200073          	mret
  event->next = NULL;
1c00a3ac:	0007a023          	sw	zero,0(a5)
    rt_event_t *next = event->implem.next;
1c00a3b0:	01c7ae03          	lw	t3,28(a5)
  if (sched->first == NULL) {
1c00a3b4:	c511                	beqz	a0,1c00a3c0 <__rt_timer_handler+0xaa>
    sched->last->next = event;
1c00a3b6:	c19c                	sw	a5,0(a1)
    event = next;
1c00a3b8:	85be                	mv	a1,a5
1c00a3ba:	4805                	li	a6,1
1c00a3bc:	87f2                	mv	a5,t3
1c00a3be:	bf79                	j	1c00a35c <__rt_timer_handler+0x46>
  if (sched->first == NULL) {
1c00a3c0:	853e                	mv	a0,a5
1c00a3c2:	4885                	li	a7,1
1c00a3c4:	bfd5                	j	1c00a3b8 <__rt_timer_handler+0xa2>
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00a3c6:	0387ae03          	lw	t3,56(a5)
1c00a3ca:	41c68e33          	sub	t3,a3,t3
1c00a3ce:	fdc37fe3          	bleu	t3,t1,1c00a3ac <__rt_timer_handler+0x96>
1c00a3d2:	00088463          	beqz	a7,1c00a3da <__rt_timer_handler+0xc4>
1c00a3d6:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00a3da:	00080463          	beqz	a6,1c00a3e2 <__rt_timer_handler+0xcc>
1c00a3de:	00bea223          	sw	a1,4(t4)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00a3e2:	00200737          	lui	a4,0x200
1c00a3e6:	40470713          	addi	a4,a4,1028 # 200404 <__L2+0x180404>
  first_delayed = event;
1c00a3ea:	24f62c23          	sw	a5,600(a2)
1c00a3ee:	00872603          	lw	a2,8(a4)
      first_delayed->implem.time - current_time
1c00a3f2:	5f9c                	lw	a5,56(a5)
1c00a3f4:	40d786b3          	sub	a3,a5,a3
1c00a3f8:	96b2                	add	a3,a3,a2
static inline void timer_cmp_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_LO_OFFSET, value); }
1c00a3fa:	00d72823          	sw	a3,16(a4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00a3fe:	08500793          	li	a5,133
1c00a402:	00f72023          	sw	a5,0(a4)
}
1c00a406:	b769                	j	1c00a390 <__rt_timer_handler+0x7a>

1c00a408 <rt_periph_copy>:
  }

  __rt_socevents_status[index] &= ~(1<<event);

  rt_irq_restore(irq);
}
1c00a408:	7179                	addi	sp,sp,-48
1c00a40a:	d422                	sw	s0,40(sp)
1c00a40c:	842a                	mv	s0,a0
1c00a40e:	d606                	sw	ra,44(sp)
1c00a410:	d226                	sw	s1,36(sp)
1c00a412:	d04a                	sw	s2,32(sp)
1c00a414:	30047973          	csrrci	s2,mstatus,8
1c00a418:	4015d493          	srai	s1,a1,0x1
1c00a41c:	1a102537          	lui	a0,0x1a102
1c00a420:	049e                	slli	s1,s1,0x7
1c00a422:	94aa                	add	s1,s1,a0
1c00a424:	00459513          	slli	a0,a1,0x4
1c00a428:	8941                	andi	a0,a0,16
1c00a42a:	94aa                	add	s1,s1,a0
1c00a42c:	853e                	mv	a0,a5
1c00a42e:	ef89                	bnez	a5,1c00a448 <rt_periph_copy+0x40>
1c00a430:	ce2e                	sw	a1,28(sp)
1c00a432:	cc32                	sw	a2,24(sp)
1c00a434:	ca36                	sw	a3,20(sp)
1c00a436:	c83a                	sw	a4,16(sp)
1c00a438:	c63e                	sw	a5,12(sp)
1c00a43a:	9cbff0ef          	jal	ra,1c009e04 <__rt_wait_event_prepare_blocking>
1c00a43e:	47b2                	lw	a5,12(sp)
1c00a440:	4742                	lw	a4,16(sp)
1c00a442:	46d2                	lw	a3,20(sp)
1c00a444:	4662                	lw	a2,24(sp)
1c00a446:	45f2                	lw	a1,28(sp)
1c00a448:	e419                	bnez	s0,1c00a456 <rt_periph_copy+0x4e>
1c00a44a:	03850413          	addi	s0,a0,56 # 1a102038 <__l1_end+0xa101ff4>
1c00a44e:	04052223          	sw	zero,68(a0)
1c00a452:	04052a23          	sw	zero,84(a0)
1c00a456:	00c42803          	lw	a6,12(s0)
1c00a45a:	c054                	sw	a3,4(s0)
1c00a45c:	cc08                	sw	a0,24(s0)
1c00a45e:	f6483833          	p.bclr	a6,a6,27,4
1c00a462:	4891                	li	a7,4
1c00a464:	c0474733          	p.bset	a4,a4,0,4
1c00a468:	0908e163          	bltu	a7,a6,1c00a4ea <rt_periph_copy+0xe2>
1c00a46c:	03000893          	li	a7,48
1c00a470:	0596                	slli	a1,a1,0x5
1c00a472:	98ae                	add	a7,a7,a1
1c00a474:	0008a303          	lw	t1,0(a7)
1c00a478:	00042a23          	sw	zero,20(s0)
1c00a47c:	03000813          	li	a6,48
1c00a480:	02031b63          	bnez	t1,1c00a4b6 <rt_periph_copy+0xae>
1c00a484:	0088a023          	sw	s0,0(a7)
1c00a488:	00b808b3          	add	a7,a6,a1
1c00a48c:	0088a303          	lw	t1,8(a7)
1c00a490:	0088a223          	sw	s0,4(a7)
1c00a494:	02031663          	bnez	t1,1c00a4c0 <rt_periph_copy+0xb8>
1c00a498:	00848893          	addi	a7,s1,8
1c00a49c:	0008a883          	lw	a7,0(a7)
1c00a4a0:	0208f893          	andi	a7,a7,32
1c00a4a4:	00089e63          	bnez	a7,1c00a4c0 <rt_periph_copy+0xb8>
1c00a4a8:	00c4a023          	sw	a2,0(s1)
1c00a4ac:	00d4a223          	sw	a3,4(s1)
1c00a4b0:	00e4a423          	sw	a4,8(s1)
1c00a4b4:	a005                	j	1c00a4d4 <rt_periph_copy+0xcc>
1c00a4b6:	0048a883          	lw	a7,4(a7)
1c00a4ba:	0088aa23          	sw	s0,20(a7)
1c00a4be:	b7e9                	j	1c00a488 <rt_periph_copy+0x80>
1c00a4c0:	00042823          	sw	zero,16(s0)
1c00a4c4:	c010                	sw	a2,0(s0)
1c00a4c6:	c054                	sw	a3,4(s0)
1c00a4c8:	c418                	sw	a4,8(s0)
1c00a4ca:	00031563          	bnez	t1,1c00a4d4 <rt_periph_copy+0xcc>
1c00a4ce:	982e                	add	a6,a6,a1
1c00a4d0:	00882423          	sw	s0,8(a6)
1c00a4d4:	e399                	bnez	a5,1c00a4da <rt_periph_copy+0xd2>
1c00a4d6:	a81ff0ef          	jal	ra,1c009f56 <__rt_wait_event>
1c00a4da:	30091073          	csrw	mstatus,s2
1c00a4de:	50b2                	lw	ra,44(sp)
1c00a4e0:	5422                	lw	s0,40(sp)
1c00a4e2:	5492                	lw	s1,36(sp)
1c00a4e4:	5902                	lw	s2,32(sp)
1c00a4e6:	6145                	addi	sp,sp,48
1c00a4e8:	8082                	ret
1c00a4ea:	fe6835e3          	p.bneimm	a6,6,1c00a4d4 <rt_periph_copy+0xcc>
1c00a4ee:	03000893          	li	a7,48
1c00a4f2:	0596                	slli	a1,a1,0x5
1c00a4f4:	98ae                	add	a7,a7,a1
1c00a4f6:	0008a303          	lw	t1,0(a7)
1c00a4fa:	00042a23          	sw	zero,20(s0)
1c00a4fe:	03000813          	li	a6,48
1c00a502:	00031f63          	bnez	t1,1c00a520 <rt_periph_copy+0x118>
1c00a506:	0088a023          	sw	s0,0(a7)
1c00a50a:	95c2                	add	a1,a1,a6
1c00a50c:	c1c0                	sw	s0,4(a1)
1c00a50e:	00031e63          	bnez	t1,1c00a52a <rt_periph_copy+0x122>
1c00a512:	02442803          	lw	a6,36(s0)
1c00a516:	1a1025b7          	lui	a1,0x1a102
1c00a51a:	1b05a023          	sw	a6,416(a1) # 1a1021a0 <__l1_end+0xa10215c>
1c00a51e:	b769                	j	1c00a4a8 <rt_periph_copy+0xa0>
1c00a520:	0048a883          	lw	a7,4(a7)
1c00a524:	0088aa23          	sw	s0,20(a7)
1c00a528:	b7cd                	j	1c00a50a <rt_periph_copy+0x102>
1c00a52a:	c418                	sw	a4,8(s0)
1c00a52c:	4598                	lw	a4,8(a1)
1c00a52e:	c010                	sw	a2,0(s0)
1c00a530:	c054                	sw	a3,4(s0)
1c00a532:	00042823          	sw	zero,16(s0)
1c00a536:	ff59                	bnez	a4,1c00a4d4 <rt_periph_copy+0xcc>
1c00a538:	c580                	sw	s0,8(a1)
1c00a53a:	bf69                	j	1c00a4d4 <rt_periph_copy+0xcc>

1c00a53c <__rt_periph_wait_event>:
1c00a53c:	30047673          	csrrci	a2,mstatus,8
1c00a540:	477d                	li	a4,31
1c00a542:	4781                	li	a5,0
1c00a544:	00a75463          	ble	a0,a4,1c00a54c <__rt_periph_wait_event+0x10>
1c00a548:	1501                	addi	a0,a0,-32
1c00a54a:	4785                	li	a5,1
1c00a54c:	00279713          	slli	a4,a5,0x2
1c00a550:	4685                	li	a3,1
1c00a552:	03000793          	li	a5,48
1c00a556:	00a696b3          	sll	a3,a3,a0
1c00a55a:	97ba                	add	a5,a5,a4
1c00a55c:	00204837          	lui	a6,0x204
1c00a560:	2807a703          	lw	a4,640(a5)
1c00a564:	8f75                	and	a4,a4,a3
1c00a566:	cf19                	beqz	a4,1c00a584 <__rt_periph_wait_event+0x48>
1c00a568:	c999                	beqz	a1,1c00a57e <__rt_periph_wait_event+0x42>
1c00a56a:	2807a683          	lw	a3,640(a5)
1c00a56e:	4705                	li	a4,1
1c00a570:	00a71533          	sll	a0,a4,a0
1c00a574:	fff54513          	not	a0,a0
1c00a578:	8d75                	and	a0,a0,a3
1c00a57a:	28a7a023          	sw	a0,640(a5)
1c00a57e:	30061073          	csrw	mstatus,a2
1c00a582:	8082                	ret
1c00a584:	03886703          	p.elw	a4,56(a6) # 204038 <__L2+0x184038>
1c00a588:	30046773          	csrrsi	a4,mstatus,8
1c00a58c:	30047773          	csrrci	a4,mstatus,8
1c00a590:	bfc1                	j	1c00a560 <__rt_periph_wait_event+0x24>

1c00a592 <__rt_periph_init>:
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
    rt_periph_channel_t *channel = &periph_channels[i];
    channel->first = NULL;
    channel->firstToEnqueue = NULL;
    channel->base = hal_udma_channel_base(i);
    channel->callback = udma_event_handler;
1c00a592:	1c000537          	lui	a0,0x1c000
1c00a596:	03000693          	li	a3,48
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00a59a:	4601                	li	a2,0
1c00a59c:	03000713          	li	a4,48
static inline unsigned int hal_udma_periph_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id);
}

static inline __attribute__((always_inline)) unsigned int hal_udma_channel_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id>>1) + UDMA_CHANNEL_OFFSET(id&1);
1c00a5a0:	1a1028b7          	lui	a7,0x1a102
    channel->callback = udma_event_handler;
1c00a5a4:	2b450513          	addi	a0,a0,692 # 1c0002b4 <udma_event_handler>
1c00a5a8:	014950fb          	lp.setupi	x1,20,1c00a5cc <__rt_periph_init+0x3a>
1c00a5ac:	40165793          	srai	a5,a2,0x1
1c00a5b0:	00461813          	slli	a6,a2,0x4
1c00a5b4:	079e                	slli	a5,a5,0x7
1c00a5b6:	97c6                	add	a5,a5,a7
1c00a5b8:	01087813          	andi	a6,a6,16
1c00a5bc:	97c2                	add	a5,a5,a6
    channel->first = NULL;
1c00a5be:	0006a023          	sw	zero,0(a3)
    channel->firstToEnqueue = NULL;
1c00a5c2:	0006a423          	sw	zero,8(a3)
    channel->base = hal_udma_channel_base(i);
1c00a5c6:	c6dc                	sw	a5,12(a3)
    channel->callback = udma_event_handler;
1c00a5c8:	cec8                	sw	a0,28(a3)
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00a5ca:	0605                	addi	a2,a2,1
1c00a5cc:	02068693          	addi	a3,a3,32
  }
  
  for (int i=0; i<ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT; i++)
  {
    __rt_udma_extra_callback[i] = __rt_soc_evt_no_udma;
1c00a5d0:	1c0006b7          	lui	a3,0x1c000
1c00a5d4:	28870613          	addi	a2,a4,648
1c00a5d8:	45e68693          	addi	a3,a3,1118 # 1c00045e <__rt_soc_evt_no_udma>
1c00a5dc:	00a250fb          	lp.setupi	x1,10,1c00a5e4 <__rt_periph_init+0x52>
1c00a5e0:	00d6222b          	p.sw	a3,4(a2!)
1c00a5e4:	0001                	nop
  }

  __rt_socevents_status[0] = 0;
1c00a5e6:	28072023          	sw	zero,640(a4)
  __rt_socevents_status[1] = 0;
1c00a5ea:	28072223          	sw	zero,644(a4)
}
1c00a5ee:	8082                	ret

1c00a5f0 <rt_freq_set_and_get>:
void rt_freq_wait_convergence(int fll)
{
}

int rt_freq_set_and_get(rt_freq_domain_e domain, unsigned int freq, unsigned int *out_freq)
{
1c00a5f0:	1141                	addi	sp,sp,-16
1c00a5f2:	c226                	sw	s1,4(sp)
1c00a5f4:	84ae                	mv	s1,a1
1c00a5f6:	c606                	sw	ra,12(sp)
1c00a5f8:	c422                	sw	s0,8(sp)
1c00a5fa:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a5fc:	30047973          	csrrci	s2,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00a600:	1c00e437          	lui	s0,0x1c00e
  int irq = rt_irq_disable();
  int err = 0;

  rt_trace(RT_TRACE_FREQ, "Setting domain frequency (domain: %d, freq: %d)\n", domain, freq);

  if (domain == RT_FREQ_DOMAIN_CL)
1c00a604:	00153f63          	p.bneimm	a0,1,1c00a622 <rt_freq_set_and_get+0x32>
  {
    // On cluster side, this is straight forward as the fll is not shared
    __rt_fll_set_freq(__RT_FLL_CL, freq);
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00a608:	25c40413          	addi	s0,s0,604 # 1c00e25c <__rt_freq_domains>
    __rt_fll_set_freq(__RT_FLL_CL, freq);
1c00a60c:	294d                	jal	1c00aabe <__rt_fll_set_freq>
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00a60e:	c044                	sw	s1,4(s0)
  __builtin_pulp_spr_write(reg, val);
1c00a610:	30091073          	csrw	mstatus,s2
  }

  rt_irq_restore(irq);

  return err;
}
1c00a614:	40b2                	lw	ra,12(sp)
1c00a616:	4422                	lw	s0,8(sp)
1c00a618:	4492                	lw	s1,4(sp)
1c00a61a:	4902                	lw	s2,0(sp)
1c00a61c:	4501                	li	a0,0
1c00a61e:	0141                	addi	sp,sp,16
1c00a620:	8082                	ret
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_BEFORE);
1c00a622:	4511                	li	a0,4
1c00a624:	bfcff0ef          	jal	ra,1c009a20 <__rt_cbsys_exec>
    __rt_fll_set_freq(0, freq);
1c00a628:	85a6                	mv	a1,s1
1c00a62a:	4501                	li	a0,0
1c00a62c:	2949                	jal	1c00aabe <__rt_fll_set_freq>
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00a62e:	4515                	li	a0,5
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = freq;
1c00a630:	24942e23          	sw	s1,604(s0)
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00a634:	becff0ef          	jal	ra,1c009a20 <__rt_cbsys_exec>
1c00a638:	bfe1                	j	1c00a610 <rt_freq_set_and_get+0x20>

1c00a63a <__rt_freq_init>:

void __rt_freq_init()
{
1c00a63a:	1141                	addi	sp,sp,-16
1c00a63c:	c422                	sw	s0,8(sp)
1c00a63e:	c606                	sw	ra,12(sp)

  __rt_flls_constructor();
1c00a640:	29b5                	jal	1c00aabc <__rt_flls_constructor>
  return __rt_platform;
1c00a642:	1c00e7b7          	lui	a5,0x1c00e

  // On all chips only FLL 0 is initialized here as it is shared between periph and soc
  // while FLL 1 is used for cluster only and thus is initialized when the cluster is set on.
  if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00a646:	e987a783          	lw	a5,-360(a5) # 1c00de98 <__rt_platform>
1c00a64a:	1c00e437          	lui	s0,0x1c00e
1c00a64e:	0017ae63          	p.beqimm	a5,1,1c00a66a <__rt_freq_init+0x30>
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = __rt_fll_init(__RT_FLL_FC);
1c00a652:	4501                	li	a0,0
1c00a654:	2991                	jal	1c00aaa8 <__rt_fll_init>
1c00a656:	24a42e23          	sw	a0,604(s0) # 1c00e25c <__rt_freq_domains>
  }
  else
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
  }
  __rt_freq_domains[RT_FREQ_DOMAIN_CL] = 0;
1c00a65a:	25c40413          	addi	s0,s0,604
1c00a65e:	00042223          	sw	zero,4(s0)

}
1c00a662:	40b2                	lw	ra,12(sp)
1c00a664:	4422                	lw	s0,8(sp)
1c00a666:	0141                	addi	sp,sp,16
1c00a668:	8082                	ret
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
1c00a66a:	026267b7          	lui	a5,0x2626
1c00a66e:	a0078793          	addi	a5,a5,-1536 # 2625a00 <__L2+0x25a5a00>
1c00a672:	24f42e23          	sw	a5,604(s0)
1c00a676:	b7d5                	j	1c00a65a <__rt_freq_init+0x20>

1c00a678 <SetFllMultDivFactors>:
  if (PMURetentionState.Fields.BootType != COLD_BOOT && PMURetentionState.Fields.ClusterWakeUpState) {
          // ChangePowerSystemState(POWER_SYSTEM_STATE(PMURetentionState.Fields.WakeupState, PMURetentionState.Fields.ClusterWakeUpState), 0);
    __rt_pmu_cluster_power_up(NULL, NULL);
    if (PMU_ClusterIsRunning() && PMURetentionState.Fields.FllClusterRetention) InitOneFll(FLL_CLUSTER, 1);
  }
}
1c00a678:	100517b3          	p.fl1	a5,a0
1c00a67c:	4769                	li	a4,26
1c00a67e:	8f1d                	sub	a4,a4,a5
1c00a680:	4785                	li	a5,1
1c00a682:	04f76733          	p.max	a4,a4,a5
1c00a686:	47a1                	li	a5,8
1c00a688:	04f74733          	p.min	a4,a4,a5
1c00a68c:	fff70693          	addi	a3,a4,-1
1c00a690:	00f55793          	srli	a5,a0,0xf
1c00a694:	00d797b3          	sll	a5,a5,a3
1c00a698:	c19c                	sw	a5,0(a1)
1c00a69a:	07be                	slli	a5,a5,0xf
1c00a69c:	c218                	sw	a4,0(a2)
1c00a69e:	00d7d533          	srl	a0,a5,a3
1c00a6a2:	8082                	ret

1c00a6a4 <soc_eu_fcEventMask_setEvent>:
1c00a6a4:	47fd                	li	a5,31
1c00a6a6:	4721                	li	a4,8
1c00a6a8:	00f50463          	beq	a0,a5,1c00a6b0 <soc_eu_fcEventMask_setEvent+0xc>
1c00a6ac:	1501                	addi	a0,a0,-32
1c00a6ae:	4711                	li	a4,4
1c00a6b0:	1a1066b7          	lui	a3,0x1a106
1c00a6b4:	20e6f603          	p.lw	a2,a4(a3)
1c00a6b8:	4785                	li	a5,1
1c00a6ba:	00a79533          	sll	a0,a5,a0
1c00a6be:	fff54513          	not	a0,a0
1c00a6c2:	8d71                	and	a0,a0,a2
1c00a6c4:	00a6e723          	p.sw	a0,a4(a3)
1c00a6c8:	8082                	ret

1c00a6ca <__rt_pmu_cluster_power_down>:
1c00a6ca:	1c00e7b7          	lui	a5,0x1c00e
1c00a6ce:	e987a783          	lw	a5,-360(a5) # 1c00de98 <__rt_platform>
1c00a6d2:	0817a363          	p.beqimm	a5,1,1c00a758 <__rt_pmu_cluster_power_down+0x8e>
1c00a6d6:	1141                	addi	sp,sp,-16
1c00a6d8:	1a1046b7          	lui	a3,0x1a104
1c00a6dc:	c606                	sw	ra,12(sp)
1c00a6de:	c422                	sw	s0,8(sp)
1c00a6e0:	c226                	sw	s1,4(sp)
1c00a6e2:	c04a                	sw	s2,0(sp)
1c00a6e4:	0706a683          	lw	a3,112(a3) # 1a104070 <__l1_end+0xa10402c>
1c00a6e8:	1c00e737          	lui	a4,0x1c00e
1c00a6ec:	ea870713          	addi	a4,a4,-344 # 1c00dea8 <SystemStateToSCUFastSeq>
1c00a6f0:	00874783          	lbu	a5,8(a4)
1c00a6f4:	8436                	mv	s0,a3
1c00a6f6:	c0079933          	p.extractu	s2,a5,0,0
1c00a6fa:	04193963          	p.bneimm	s2,1,1c00a74c <__rt_pmu_cluster_power_down+0x82>
1c00a6fe:	01069613          	slli	a2,a3,0x10
1c00a702:	04064563          	bltz	a2,1c00a74c <__rt_pmu_cluster_power_down+0x82>
1c00a706:	c007b7b3          	p.bclr	a5,a5,0,0
1c00a70a:	c0a92433          	p.insert	s0,s2,0,10
1c00a70e:	1a1044b7          	lui	s1,0x1a104
1c00a712:	00f70423          	sb	a5,8(a4)
1c00a716:	0684a823          	sw	s0,112(s1) # 1a104070 <__l1_end+0xa10402c>
1c00a71a:	4585                	li	a1,1
1c00a71c:	02300513          	li	a0,35
1c00a720:	e1dff0ef          	jal	ra,1c00a53c <__rt_periph_wait_event>
1c00a724:	4785                	li	a5,1
1c00a726:	00f4a623          	sw	a5,12(s1)
1c00a72a:	c0302433          	p.insert	s0,zero,0,3
1c00a72e:	0684a823          	sw	s0,112(s1)
1c00a732:	c0d92433          	p.insert	s0,s2,0,13
1c00a736:	0684a823          	sw	s0,112(s1)
1c00a73a:	4422                	lw	s0,8(sp)
1c00a73c:	40b2                	lw	ra,12(sp)
1c00a73e:	4492                	lw	s1,4(sp)
1c00a740:	4902                	lw	s2,0(sp)
1c00a742:	4585                	li	a1,1
1c00a744:	457d                	li	a0,31
1c00a746:	0141                	addi	sp,sp,16
1c00a748:	df5ff06f          	j	1c00a53c <__rt_periph_wait_event>
1c00a74c:	40b2                	lw	ra,12(sp)
1c00a74e:	4422                	lw	s0,8(sp)
1c00a750:	4492                	lw	s1,4(sp)
1c00a752:	4902                	lw	s2,0(sp)
1c00a754:	0141                	addi	sp,sp,16
1c00a756:	8082                	ret
1c00a758:	8082                	ret

1c00a75a <SetFllFrequency>:
1c00a75a:	7179                	addi	sp,sp,-48
1c00a75c:	d422                	sw	s0,40(sp)
1c00a75e:	d226                	sw	s1,36(sp)
1c00a760:	1c00e437          	lui	s0,0x1c00e
1c00a764:	84aa                	mv	s1,a0
1c00a766:	d606                	sw	ra,44(sp)
1c00a768:	852e                	mv	a0,a1
1c00a76a:	ea840413          	addi	s0,s0,-344 # 1c00dea8 <SystemStateToSCUFastSeq>
1c00a76e:	0014be63          	p.bneimm	s1,1,1c00a78a <SetFllFrequency+0x30>
1c00a772:	00844783          	lbu	a5,8(s0)
1c00a776:	c0079733          	p.extractu	a4,a5,0,0
1c00a77a:	08172763          	p.beqimm	a4,1,1c00a808 <SetFllFrequency+0xae>
1c00a77e:	4501                	li	a0,0
1c00a780:	50b2                	lw	ra,44(sp)
1c00a782:	5422                	lw	s0,40(sp)
1c00a784:	5492                	lw	s1,36(sp)
1c00a786:	6145                	addi	sp,sp,48
1c00a788:	8082                	ret
1c00a78a:	ce2d                	beqz	a2,1c00a804 <SetFllFrequency+0xaa>
1c00a78c:	00844783          	lbu	a5,8(s0)
1c00a790:	03200713          	li	a4,50
1c00a794:	c21797b3          	p.extractu	a5,a5,1,1
1c00a798:	97a2                	add	a5,a5,s0
1c00a79a:	00a7c783          	lbu	a5,10(a5)
1c00a79e:	00e787db          	p.mac	a5,a5,a4,zero
1c00a7a2:	22678793          	addi	a5,a5,550
1c00a7a6:	ecad                	bnez	s1,1c00a820 <SetFllFrequency+0xc6>
1c00a7a8:	0007a6b7          	lui	a3,0x7a
1c00a7ac:	eb237737          	lui	a4,0xeb237
1c00a7b0:	12068693          	addi	a3,a3,288 # 7a120 <__L1Cl+0x6a120>
1c00a7b4:	c8070713          	addi	a4,a4,-896 # eb236c80 <pulp__FC+0xeb236c81>
1c00a7b8:	42d78733          	p.mac	a4,a5,a3
1c00a7bc:	fcb761e3          	bltu	a4,a1,1c00a77e <SetFllFrequency+0x24>
1c00a7c0:	c62a                	sw	a0,12(sp)
1c00a7c2:	d6eff0ef          	jal	ra,1c009d30 <__rt_bridge_req_shutdown>
1c00a7c6:	4532                	lw	a0,12(sp)
1c00a7c8:	0870                	addi	a2,sp,28
1c00a7ca:	082c                	addi	a1,sp,24
1c00a7cc:	eadff0ef          	jal	ra,1c00a678 <SetFllMultDivFactors>
1c00a7d0:	4762                	lw	a4,24(sp)
1c00a7d2:	800007b7          	lui	a5,0x80000
1c00a7d6:	1a1006b7          	lui	a3,0x1a100
1c00a7da:	de0727b3          	p.insert	a5,a4,15,0
1c00a7de:	4772                	lw	a4,28(sp)
1c00a7e0:	c7a727b3          	p.insert	a5,a4,3,26
1c00a7e4:	00449713          	slli	a4,s1,0x4
1c00a7e8:	0711                	addi	a4,a4,4
1c00a7ea:	00f6e723          	p.sw	a5,a4(a3)
1c00a7ee:	00249793          	slli	a5,s1,0x2
1c00a7f2:	943e                	add	s0,s0,a5
1c00a7f4:	d008                	sw	a0,32(s0)
1c00a7f6:	c808                	sw	a0,16(s0)
1c00a7f8:	f4c1                	bnez	s1,1c00a780 <SetFllFrequency+0x26>
1c00a7fa:	c62a                	sw	a0,12(sp)
1c00a7fc:	c90ff0ef          	jal	ra,1c009c8c <__rt_bridge_set_available>
1c00a800:	4532                	lw	a0,12(sp)
1c00a802:	bfbd                	j	1c00a780 <SetFllFrequency+0x26>
1c00a804:	f0f1                	bnez	s1,1c00a7c8 <SetFllFrequency+0x6e>
1c00a806:	bf6d                	j	1c00a7c0 <SetFllFrequency+0x66>
1c00a808:	d261                	beqz	a2,1c00a7c8 <SetFllFrequency+0x6e>
1c00a80a:	c21797b3          	p.extractu	a5,a5,1,1
1c00a80e:	97a2                	add	a5,a5,s0
1c00a810:	00a7c783          	lbu	a5,10(a5) # 8000000a <pulp__FC+0x8000000b>
1c00a814:	03200713          	li	a4,50
1c00a818:	00e787db          	p.mac	a5,a5,a4,zero
1c00a81c:	22678793          	addi	a5,a5,550
1c00a820:	0006b6b7          	lui	a3,0x6b
1c00a824:	eaf5a737          	lui	a4,0xeaf5a
1c00a828:	6c068693          	addi	a3,a3,1728 # 6b6c0 <__L1Cl+0x5b6c0>
1c00a82c:	5c070713          	addi	a4,a4,1472 # eaf5a5c0 <pulp__FC+0xeaf5a5c1>
1c00a830:	42d78733          	p.mac	a4,a5,a3
1c00a834:	f8a77ae3          	bleu	a0,a4,1c00a7c8 <SetFllFrequency+0x6e>
1c00a838:	b799                	j	1c00a77e <SetFllFrequency+0x24>

1c00a83a <InitOneFll>:
1c00a83a:	7179                	addi	sp,sp,-48
1c00a83c:	00451713          	slli	a4,a0,0x4
1c00a840:	ce4e                	sw	s3,28(sp)
1c00a842:	1a1007b7          	lui	a5,0x1a100
1c00a846:	00470993          	addi	s3,a4,4
1c00a84a:	d606                	sw	ra,44(sp)
1c00a84c:	d422                	sw	s0,40(sp)
1c00a84e:	d226                	sw	s1,36(sp)
1c00a850:	d04a                	sw	s2,32(sp)
1c00a852:	2137f783          	p.lw	a5,s3(a5)
1c00a856:	1c00e437          	lui	s0,0x1c00e
1c00a85a:	ea840413          	addi	s0,s0,-344 # 1c00dea8 <SystemStateToSCUFastSeq>
1c00a85e:	00251913          	slli	s2,a0,0x2
1c00a862:	c585                	beqz	a1,1c00a88a <InitOneFll+0x50>
1c00a864:	c7a79733          	p.extractu	a4,a5,3,26
1c00a868:	1007d7b3          	p.exthz	a5,a5
1c00a86c:	07be                	slli	a5,a5,0xf
1c00a86e:	c701                	beqz	a4,1c00a876 <InitOneFll+0x3c>
1c00a870:	177d                	addi	a4,a4,-1
1c00a872:	00e7d7b3          	srl	a5,a5,a4
1c00a876:	944a                	add	s0,s0,s2
1c00a878:	d01c                	sw	a5,32(s0)
1c00a87a:	c81c                	sw	a5,16(s0)
1c00a87c:	50b2                	lw	ra,44(sp)
1c00a87e:	5422                	lw	s0,40(sp)
1c00a880:	5492                	lw	s1,36(sp)
1c00a882:	5902                	lw	s2,32(sp)
1c00a884:	49f2                	lw	s3,28(sp)
1c00a886:	6145                	addi	sp,sp,48
1c00a888:	8082                	ret
1c00a88a:	0007d363          	bgez	a5,1c00a890 <InitOneFll+0x56>
1c00a88e:	c105                	beqz	a0,1c00a8ae <InitOneFll+0x74>
1c00a890:	810047b7          	lui	a5,0x81004
1c00a894:	1a1006b7          	lui	a3,0x1a100
1c00a898:	00870613          	addi	a2,a4,8
1c00a89c:	10778793          	addi	a5,a5,263 # 81004107 <pulp__FC+0x81004108>
1c00a8a0:	00f6e623          	p.sw	a5,a2(a3)
1c00a8a4:	014c04b7          	lui	s1,0x14c0
1c00a8a8:	0731                	addi	a4,a4,12
1c00a8aa:	0096e723          	p.sw	s1,a4(a3)
1c00a8ae:	02faf537          	lui	a0,0x2faf
1c00a8b2:	0070                	addi	a2,sp,12
1c00a8b4:	002c                	addi	a1,sp,8
1c00a8b6:	08050513          	addi	a0,a0,128 # 2faf080 <__L2+0x2f2f080>
1c00a8ba:	dbfff0ef          	jal	ra,1c00a678 <SetFllMultDivFactors>
1c00a8be:	47a2                	lw	a5,8(sp)
1c00a8c0:	c00004b7          	lui	s1,0xc0000
1c00a8c4:	de07a4b3          	p.insert	s1,a5,15,0
1c00a8c8:	47b2                	lw	a5,12(sp)
1c00a8ca:	c7a7a4b3          	p.insert	s1,a5,3,26
1c00a8ce:	1a1007b7          	lui	a5,0x1a100
1c00a8d2:	0097e9a3          	p.sw	s1,s3(a5)
1c00a8d6:	944a                	add	s0,s0,s2
1c00a8d8:	d008                	sw	a0,32(s0)
1c00a8da:	c808                	sw	a0,16(s0)
1c00a8dc:	b745                	j	1c00a87c <InitOneFll+0x42>

1c00a8de <__rt_pmu_cluster_power_up>:
1c00a8de:	1141                	addi	sp,sp,-16
1c00a8e0:	c226                	sw	s1,4(sp)
1c00a8e2:	1c00e4b7          	lui	s1,0x1c00e
1c00a8e6:	c606                	sw	ra,12(sp)
1c00a8e8:	c422                	sw	s0,8(sp)
1c00a8ea:	c04a                	sw	s2,0(sp)
1c00a8ec:	ea848793          	addi	a5,s1,-344 # 1c00dea8 <SystemStateToSCUFastSeq>
1c00a8f0:	0087c783          	lbu	a5,8(a5) # 1a100008 <__l1_end+0xa0fffc4>
1c00a8f4:	4501                	li	a0,0
1c00a8f6:	c00797b3          	p.extractu	a5,a5,0,0
1c00a8fa:	e785                	bnez	a5,1c00a922 <__rt_pmu_cluster_power_up+0x44>
1c00a8fc:	1c00e7b7          	lui	a5,0x1c00e
1c00a900:	e987a783          	lw	a5,-360(a5) # 1c00de98 <__rt_platform>
1c00a904:	ea848493          	addi	s1,s1,-344
1c00a908:	0217b363          	p.bneimm	a5,1,1c00a92e <__rt_pmu_cluster_power_up+0x50>
1c00a90c:	1a1047b7          	lui	a5,0x1a104
1c00a910:	0007a623          	sw	zero,12(a5) # 1a10400c <__l1_end+0xa103fc8>
1c00a914:	0084c783          	lbu	a5,8(s1)
1c00a918:	4505                	li	a0,1
1c00a91a:	c007c7b3          	p.bset	a5,a5,0,0
1c00a91e:	00f48423          	sb	a5,8(s1)
1c00a922:	40b2                	lw	ra,12(sp)
1c00a924:	4422                	lw	s0,8(sp)
1c00a926:	4492                	lw	s1,4(sp)
1c00a928:	4902                	lw	s2,0(sp)
1c00a92a:	0141                	addi	sp,sp,16
1c00a92c:	8082                	ret
1c00a92e:	1a104437          	lui	s0,0x1a104
1c00a932:	07042403          	lw	s0,112(s0) # 1a104070 <__l1_end+0xa10402c>
1c00a936:	c0a417b3          	p.extractu	a5,s0,0,10
1c00a93a:	ef89                	bnez	a5,1c00a954 <__rt_pmu_cluster_power_up+0x76>
1c00a93c:	4785                	li	a5,1
1c00a93e:	c0a7a433          	p.insert	s0,a5,0,10
1c00a942:	1a1047b7          	lui	a5,0x1a104
1c00a946:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10402c>
1c00a94a:	4585                	li	a1,1
1c00a94c:	02300513          	li	a0,35
1c00a950:	bedff0ef          	jal	ra,1c00a53c <__rt_periph_wait_event>
1c00a954:	4785                	li	a5,1
1c00a956:	c037a433          	p.insert	s0,a5,0,3
1c00a95a:	1a104937          	lui	s2,0x1a104
1c00a95e:	06892823          	sw	s0,112(s2) # 1a104070 <__l1_end+0xa10402c>
1c00a962:	4585                	li	a1,1
1c00a964:	457d                	li	a0,31
1c00a966:	bd7ff0ef          	jal	ra,1c00a53c <__rt_periph_wait_event>
1c00a96a:	00092623          	sw	zero,12(s2)
1c00a96e:	c0d02433          	p.insert	s0,zero,0,13
1c00a972:	06892823          	sw	s0,112(s2)
1c00a976:	c0a02433          	p.insert	s0,zero,0,10
1c00a97a:	06892823          	sw	s0,112(s2)
1c00a97e:	4585                	li	a1,1
1c00a980:	02300513          	li	a0,35
1c00a984:	bb9ff0ef          	jal	ra,1c00a53c <__rt_periph_wait_event>
1c00a988:	01c4c783          	lbu	a5,28(s1)
1c00a98c:	0207f793          	andi	a5,a5,32
1c00a990:	e789                	bnez	a5,1c00a99a <__rt_pmu_cluster_power_up+0xbc>
1c00a992:	4581                	li	a1,0
1c00a994:	4505                	li	a0,1
1c00a996:	ea5ff0ef          	jal	ra,1c00a83a <InitOneFll>
1c00a99a:	c0e44433          	p.bset	s0,s0,0,14
1c00a99e:	1a1047b7          	lui	a5,0x1a104
1c00a9a2:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10402c>
1c00a9a6:	b7bd                	j	1c00a914 <__rt_pmu_cluster_power_up+0x36>

1c00a9a8 <InitFlls>:

  }
}

void  __attribute__ ((noinline)) InitFlls()
{
1c00a9a8:	1141                	addi	sp,sp,-16
1c00a9aa:	c422                	sw	s0,8(sp)
  __rt_bridge_req_shutdown();

  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00a9ac:	1c00e437          	lui	s0,0x1c00e
{
1c00a9b0:	c606                	sw	ra,12(sp)
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00a9b2:	ea840413          	addi	s0,s0,-344 # 1c00dea8 <SystemStateToSCUFastSeq>
  __rt_bridge_req_shutdown();
1c00a9b6:	b7aff0ef          	jal	ra,1c009d30 <__rt_bridge_req_shutdown>
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00a9ba:	01c44583          	lbu	a1,28(s0)
1c00a9be:	4501                	li	a0,0
1c00a9c0:	c04595b3          	p.extractu	a1,a1,0,4
1c00a9c4:	e77ff0ef          	jal	ra,1c00a83a <InitOneFll>
#define PMU_ERROR_CLUSTER_STATE_CHANGE_FAILED   (0x1<<4)

extern void 		   InitPMUDriver();

static inline int 	   PMU_ClusterIsDown()    { return (CLUSTER_STATE(PMUState.State)==CLUSTER_OFF);}
static inline int 	   PMU_ClusterIsRunning() { return (CLUSTER_STATE(PMUState.State)==CLUSTER_ON);}
1c00a9c8:	00844783          	lbu	a5,8(s0)
1c00a9cc:	c00797b3          	p.extractu	a5,a5,0,0
  if (PMU_ClusterIsRunning()) InitOneFll(FLL_CLUSTER, PMURetentionState.Fields.FllClusterRetention);
1c00a9d0:	0017b963          	p.bneimm	a5,1,1c00a9e2 <InitFlls+0x3a>
1c00a9d4:	01c44583          	lbu	a1,28(s0)
1c00a9d8:	4505                	li	a0,1
1c00a9da:	c05595b3          	p.extractu	a1,a1,0,5
1c00a9de:	e5dff0ef          	jal	ra,1c00a83a <InitOneFll>

#ifdef __RT_USE_BRIDGE
  __rt_bridge_set_available();
#endif
}
1c00a9e2:	4422                	lw	s0,8(sp)
1c00a9e4:	40b2                	lw	ra,12(sp)
1c00a9e6:	0141                	addi	sp,sp,16
  __rt_bridge_set_available();
1c00a9e8:	aa4ff06f          	j	1c009c8c <__rt_bridge_set_available>

1c00a9ec <__rt_pmu_init>:
1c00a9ec:	1c00e7b7          	lui	a5,0x1c00e
  if (rt_platform() == ARCHI_PLATFORM_FPGA) {
1c00a9f0:	e987a783          	lw	a5,-360(a5) # 1c00de98 <__rt_platform>
1c00a9f4:	0a17a963          	p.beqimm	a5,1,1c00aaa6 <__rt_pmu_init+0xba>
{
1c00a9f8:	1141                	addi	sp,sp,-16
  __rt_wakeup_use_fast = 0;
1c00a9fa:	1c00e7b7          	lui	a5,0x1c00e
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_DCDC_CONFIG_OFFSET);
1c00a9fe:	1a104637          	lui	a2,0x1a104
{
1c00aa02:	c606                	sw	ra,12(sp)
  __rt_wakeup_use_fast = 0;
1c00aa04:	2607a223          	sw	zero,612(a5) # 1c00e264 <__rt_wakeup_use_fast>
1c00aa08:	10062703          	lw	a4,256(a2) # 1a104100 <__l1_end+0xa1040bc>
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_RETENTION_CONFIG_OFFSET);
1c00aa0c:	10462683          	lw	a3,260(a2)
  PMURetentionState.Raw = GetRetentiveState();
1c00aa10:	1c00e7b7          	lui	a5,0x1c00e
1c00aa14:	ea878793          	addi	a5,a5,-344 # 1c00dea8 <SystemStateToSCUFastSeq>
1c00aa18:	cfd4                	sw	a3,28(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00aa1a:	c2e696b3          	p.extractu	a3,a3,1,14
1c00aa1e:	96be                	add	a3,a3,a5
1c00aa20:	0286c683          	lbu	a3,40(a3) # 1a100028 <__l1_end+0xa0fffe4>
  PMUState.DCDC_Settings[REGU_OFF] = 0;
1c00aa24:	000786a3          	sb	zero,13(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00aa28:	00d78423          	sb	a3,8(a5)
  PMUState.DCDC_Settings[REGU_NV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Nominal*8);
1c00aa2c:	c80716b3          	p.extractu	a3,a4,4,0
1c00aa30:	00d78523          	sb	a3,10(a5)
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00aa34:	c90716b3          	p.extractu	a3,a4,4,16
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00aa38:	c9871733          	p.extractu	a4,a4,4,24
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00aa3c:	00d785a3          	sb	a3,11(a5)
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00aa40:	00e78623          	sb	a4,12(a5)
  Bypass.Raw = GetPMUBypass();
1c00aa44:	07062783          	lw	a5,112(a2)
  Bypass.Fields.Bypass = 1;
1c00aa48:	4705                	li	a4,1
1c00aa4a:	c00727b3          	p.insert	a5,a4,0,0
  Bypass.Fields.BypassClock = 1;
1c00aa4e:	c09727b3          	p.insert	a5,a4,0,9
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00aa52:	06f62823          	sw	a5,112(a2)
  InitFlls();
1c00aa56:	f53ff0ef          	jal	ra,1c00a9a8 <InitFlls>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_CLUSTER_ON_OFF);
1c00aa5a:	457d                	li	a0,31
1c00aa5c:	c49ff0ef          	jal	ra,1c00a6a4 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_MSP);
1c00aa60:	02000513          	li	a0,32
1c00aa64:	c41ff0ef          	jal	ra,1c00a6a4 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_MODE_CHANGED);
1c00aa68:	02100513          	li	a0,33
1c00aa6c:	c39ff0ef          	jal	ra,1c00a6a4 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_OK);
1c00aa70:	02200513          	li	a0,34
1c00aa74:	c31ff0ef          	jal	ra,1c00a6a4 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_DELAYED);
1c00aa78:	02300513          	li	a0,35
1c00aa7c:	c29ff0ef          	jal	ra,1c00a6a4 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_PICL_OK);
1c00aa80:	02400513          	li	a0,36
1c00aa84:	c21ff0ef          	jal	ra,1c00a6a4 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_SCU_OK);
1c00aa88:	02500513          	li	a0,37
1c00aa8c:	c19ff0ef          	jal	ra,1c00a6a4 <soc_eu_fcEventMask_setEvent>
  PMU_Write(DLC_IMR, 0x7);
1c00aa90:	1a1077b7          	lui	a5,0x1a107
1c00aa94:	471d                	li	a4,7
1c00aa96:	00e7a623          	sw	a4,12(a5) # 1a10700c <__l1_end+0xa106fc8>
  PMU_Write(DLC_IFR, (MAESTRO_EVENT_PICL_OK|MAESTRO_EVENT_SCU_OK));
1c00aa9a:	4761                	li	a4,24
1c00aa9c:	00e7a823          	sw	a4,16(a5)
}
1c00aaa0:	40b2                	lw	ra,12(sp)
1c00aaa2:	0141                	addi	sp,sp,16
1c00aaa4:	8082                	ret
1c00aaa6:	8082                	ret

1c00aaa8 <__rt_fll_init>:


unsigned int __rt_fll_init(int fll)
{
  return FllsFrequency[fll];
1c00aaa8:	00251793          	slli	a5,a0,0x2
1c00aaac:	1c00e537          	lui	a0,0x1c00e
1c00aab0:	ea850513          	addi	a0,a0,-344 # 1c00dea8 <SystemStateToSCUFastSeq>
1c00aab4:	953e                	add	a0,a0,a5
}
1c00aab6:	5108                	lw	a0,32(a0)
1c00aab8:	8082                	ret

1c00aaba <__rt_fll_deinit>:

void __rt_fll_deinit(int fll)
{
}
1c00aaba:	8082                	ret

1c00aabc <__rt_flls_constructor>:

void __rt_flls_constructor()
{
}
1c00aabc:	8082                	ret

1c00aabe <__rt_fll_set_freq>:

unsigned int __rt_fll_set_freq(int fll, unsigned int frequency)
{
  return SetFllFrequency(fll, frequency, 0);
1c00aabe:	4601                	li	a2,0
1c00aac0:	c9bff06f          	j	1c00a75a <SetFllFrequency>

1c00aac4 <__rt_init_cluster_data>:
{
#if defined(EU_VERSION) && EU_VERSION >= 3
  eu_evt_maskSet((1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT));
  rt_team_fork(rt_nb_pe(), cluster_pe_start, NULL);
#endif
}
1c00aac4:	04050713          	addi	a4,a0,64
1c00aac8:	00400793          	li	a5,4
1c00aacc:	01671613          	slli	a2,a4,0x16
1c00aad0:	e6c7b7b3          	p.bclr	a5,a5,19,12
1c00aad4:	1c00e6b7          	lui	a3,0x1c00e
1c00aad8:	97b2                	add	a5,a5,a2
1c00aada:	29468693          	addi	a3,a3,660 # 1c00e294 <_bss_end>
1c00aade:	04000713          	li	a4,64
1c00aae2:	8f95                	sub	a5,a5,a3
1c00aae4:	00f685b3          	add	a1,a3,a5
1c00aae8:	02e04963          	bgtz	a4,1c00ab1a <__rt_init_cluster_data+0x56>
1c00aaec:	1c00e7b7          	lui	a5,0x1c00e
1c00aaf0:	02800713          	li	a4,40
1c00aaf4:	26c78793          	addi	a5,a5,620 # 1c00e26c <__rt_fc_cluster_data>
1c00aaf8:	42e507b3          	p.mac	a5,a0,a4
1c00aafc:	00201737          	lui	a4,0x201
1c00ab00:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00ab04:	9732                	add	a4,a4,a2
1c00ab06:	cb98                	sw	a4,16(a5)
1c00ab08:	00400713          	li	a4,4
1c00ab0c:	e6c73733          	p.bclr	a4,a4,19,12
1c00ab10:	9732                	add	a4,a4,a2
1c00ab12:	0007a423          	sw	zero,8(a5)
1c00ab16:	cbd8                	sw	a4,20(a5)
1c00ab18:	8082                	ret
1c00ab1a:	0046a80b          	p.lw	a6,4(a3!)
1c00ab1e:	1771                	addi	a4,a4,-4
1c00ab20:	0105a023          	sw	a6,0(a1)
1c00ab24:	b7c1                	j	1c00aae4 <__rt_init_cluster_data+0x20>

1c00ab26 <__rt_cluster_init>:
1c00ab26:	1c00e537          	lui	a0,0x1c00e
1c00ab2a:	1141                	addi	sp,sp,-16
1c00ab2c:	02800613          	li	a2,40
1c00ab30:	4581                	li	a1,0
1c00ab32:	26c50513          	addi	a0,a0,620 # 1c00e26c <__rt_fc_cluster_data>
1c00ab36:	c606                	sw	ra,12(sp)
1c00ab38:	468010ef          	jal	ra,1c00bfa0 <memset>
1c00ab3c:	1c00d5b7          	lui	a1,0x1c00d
1c00ab40:	32458593          	addi	a1,a1,804 # 1c00d324 <__rt_dma_2d>
1c00ab44:	4525                	li	a0,9
1c00ab46:	d31fe0ef          	jal	ra,1c009876 <rt_irq_set_handler>
1c00ab4a:	1c0005b7          	lui	a1,0x1c000
1c00ab4e:	17458593          	addi	a1,a1,372 # 1c000174 <__rt_remote_enqueue_event>
1c00ab52:	4505                	li	a0,1
1c00ab54:	d23fe0ef          	jal	ra,1c009876 <rt_irq_set_handler>
1c00ab58:	4789                	li	a5,2
1c00ab5a:	00204737          	lui	a4,0x204
1c00ab5e:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00ab62:	00f72423          	sw	a5,8(a4)
1c00ab66:	1c0005b7          	lui	a1,0x1c000
1c00ab6a:	13c58593          	addi	a1,a1,316 # 1c00013c <__rt_bridge_enqueue_event>
1c00ab6e:	4511                	li	a0,4
1c00ab70:	d07fe0ef          	jal	ra,1c009876 <rt_irq_set_handler>
1c00ab74:	47c1                	li	a5,16
1c00ab76:	00204737          	lui	a4,0x204
1c00ab7a:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00ab7e:	00f72423          	sw	a5,8(a4)
1c00ab82:	40b2                	lw	ra,12(sp)
1c00ab84:	4501                	li	a0,0
1c00ab86:	0141                	addi	sp,sp,16
1c00ab88:	8082                	ret

1c00ab8a <__rt_cluster_mount_step>:
{
1c00ab8a:	7179                	addi	sp,sp,-48
1c00ab8c:	ce4e                	sw	s3,28(sp)
1c00ab8e:	cc52                	sw	s4,24(sp)
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00ab90:	1c000a37          	lui	s4,0x1c000
  return (void *)(ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ((int)data & 0xFFF));
1c00ab94:	00400993          	li	s3,4
1c00ab98:	080a0a13          	addi	s4,s4,128 # 1c000080 <_start>
{
1c00ab9c:	d422                	sw	s0,40(sp)
1c00ab9e:	d606                	sw	ra,44(sp)
1c00aba0:	d226                	sw	s1,36(sp)
1c00aba2:	d04a                	sw	s2,32(sp)
1c00aba4:	ca56                	sw	s5,20(sp)
1c00aba6:	842a                	mv	s0,a0
1c00aba8:	e6c9b9b3          	p.bclr	s3,s3,19,12
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00abac:	ce0a3a33          	p.bclr	s4,s4,7,0
    switch (cluster->state)
1c00abb0:	4c5c                	lw	a5,28(s0)
1c00abb2:	0217ad63          	p.beqimm	a5,1,1c00abec <__rt_cluster_mount_step+0x62>
1c00abb6:	0c27a663          	p.beqimm	a5,2,1c00ac82 <__rt_cluster_mount_step+0xf8>
1c00abba:	e3e1                	bnez	a5,1c00ac7a <__rt_cluster_mount_step+0xf0>
  int cid = cluster->cid;
1c00abbc:	5018                	lw	a4,32(s0)
  cluster->powered_up = 0;
1c00abbe:	00042c23          	sw	zero,24(s0)
  if (cid == 0)
1c00abc2:	eb01                	bnez	a4,1c00abd2 <__rt_cluster_mount_step+0x48>
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00abc4:	5048                	lw	a0,36(s0)
1c00abc6:	006c                	addi	a1,sp,12
    int pending = 0;
1c00abc8:	c602                	sw	zero,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00abca:	d15ff0ef          	jal	ra,1c00a8de <__rt_pmu_cluster_power_up>
    return pending;
1c00abce:	47b2                	lw	a5,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00abd0:	cc08                	sw	a0,24(s0)
    cluster->state++;
1c00abd2:	4c58                	lw	a4,28(s0)
1c00abd4:	0705                	addi	a4,a4,1
1c00abd6:	cc58                	sw	a4,28(s0)
  while(!end)
1c00abd8:	dfe1                	beqz	a5,1c00abb0 <__rt_cluster_mount_step+0x26>
}
1c00abda:	50b2                	lw	ra,44(sp)
1c00abdc:	5422                	lw	s0,40(sp)
1c00abde:	5492                	lw	s1,36(sp)
1c00abe0:	5902                	lw	s2,32(sp)
1c00abe2:	49f2                	lw	s3,28(sp)
1c00abe4:	4a62                	lw	s4,24(sp)
1c00abe6:	4ad2                	lw	s5,20(sp)
1c00abe8:	6145                	addi	sp,sp,48
1c00abea:	8082                	ret
1c00abec:	02042a83          	lw	s5,32(s0)
1c00abf0:	040a8493          	addi	s1,s5,64
1c00abf4:	04da                	slli	s1,s1,0x16
1c00abf6:	009987b3          	add	a5,s3,s1
  pool->first_call_fc_for_cl = NULL;
1c00abfa:	0007a023          	sw	zero,0(a5)
  pool->first_call_fc = NULL;
1c00abfe:	0007a223          	sw	zero,4(a5)
  pool->last_call_fc = NULL;
1c00ac02:	0007a423          	sw	zero,8(a5)
  __rt_cluster_fc_task_lock = 0;
1c00ac06:	100007b7          	lui	a5,0x10000
1c00ac0a:	0407a023          	sw	zero,64(a5) # 10000040 <__rt_cluster_fc_task_lock>
  return __rt_platform;
1c00ac0e:	1c00e7b7          	lui	a5,0x1c00e
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00ac12:	e987a783          	lw	a5,-360(a5) # 1c00de98 <__rt_platform>
1c00ac16:	0017af63          	p.beqimm	a5,1,1c00ac34 <__rt_cluster_mount_step+0xaa>
      int init_freq = __rt_fll_init(__RT_FLL_CL);
1c00ac1a:	4505                	li	a0,1
1c00ac1c:	e8dff0ef          	jal	ra,1c00aaa8 <__rt_fll_init>

  #if defined(FLL_VERSION)

  static inline int rt_freq_get(rt_freq_domain_e domain)
  {
    return __rt_freq_domains[domain];
1c00ac20:	1c00e7b7          	lui	a5,0x1c00e
1c00ac24:	25c78793          	addi	a5,a5,604 # 1c00e25c <__rt_freq_domains>
1c00ac28:	43cc                	lw	a1,4(a5)
      if (freq)
1c00ac2a:	c9b1                	beqz	a1,1c00ac7e <__rt_cluster_mount_step+0xf4>
    return rt_freq_set_and_get(domain, freq, NULL);
1c00ac2c:	4601                	li	a2,0
1c00ac2e:	4505                	li	a0,1
1c00ac30:	9c1ff0ef          	jal	ra,1c00a5f0 <rt_freq_set_and_get>
    IP_WRITE(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid), ARCHI_CLUSTER_CTRL_CLUSTER_CLK_GATE, 1);
1c00ac34:	00200937          	lui	s2,0x200
1c00ac38:	01248733          	add	a4,s1,s2
1c00ac3c:	4785                	li	a5,1
1c00ac3e:	02f72023          	sw	a5,32(a4)
    __rt_init_cluster_data(cid);
1c00ac42:	8556                	mv	a0,s5
1c00ac44:	e81ff0ef          	jal	ra,1c00aac4 <__rt_init_cluster_data>
    __rt_alloc_init_l1(cid);
1c00ac48:	8556                	mv	a0,s5
1c00ac4a:	c82ff0ef          	jal	ra,1c00a0cc <__rt_alloc_init_l1>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
1c00ac4e:	002017b7          	lui	a5,0x201
1c00ac52:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00ac56:	577d                	li	a4,-1
1c00ac58:	04090913          	addi	s2,s2,64 # 200040 <__L2+0x180040>
1c00ac5c:	00e4e7a3          	p.sw	a4,a5(s1)
1c00ac60:	9926                	add	s2,s2,s1
1c00ac62:	008250fb          	lp.setupi	x1,8,1c00ac6a <__rt_cluster_mount_step+0xe0>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00ac66:	0149222b          	p.sw	s4,4(s2!)
1c00ac6a:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00ac6c:	002007b7          	lui	a5,0x200
1c00ac70:	07a1                	addi	a5,a5,8
1c00ac72:	0ff00713          	li	a4,255
1c00ac76:	00e4e7a3          	p.sw	a4,a5(s1)
    switch (cluster->state)
1c00ac7a:	4781                	li	a5,0
1c00ac7c:	bf99                	j	1c00abd2 <__rt_cluster_mount_step+0x48>
    __rt_freq_domains[domain] = freq;
1c00ac7e:	c3c8                	sw	a0,4(a5)
1c00ac80:	bf55                	j	1c00ac34 <__rt_cluster_mount_step+0xaa>
        __rt_event_restore(cluster->mount_event);
1c00ac82:	505c                	lw	a5,36(s0)
  event->implem.pending = event->implem.saved_pending;
1c00ac84:	5bd8                	lw	a4,52(a5)
1c00ac86:	d3d8                	sw	a4,36(a5)
  event->arg[0] = (uintptr_t)event->implem.saved_callback;
1c00ac88:	57d8                	lw	a4,44(a5)
1c00ac8a:	c3d8                	sw	a4,4(a5)
  event->arg[1] = (uintptr_t)event->implem.saved_arg;
1c00ac8c:	5b98                	lw	a4,48(a5)
1c00ac8e:	c798                	sw	a4,8(a5)
  event->implem.saved_pending = 0;
1c00ac90:	0207aa23          	sw	zero,52(a5) # 200034 <__L2+0x180034>
        __rt_event_enqueue(cluster->mount_event);
1c00ac94:	505c                	lw	a5,36(s0)
  if (sched->first) {
1c00ac96:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00ac9a:	01c00693          	li	a3,28
  event->next = NULL;
1c00ac9e:	0007a023          	sw	zero,0(a5)
  if (sched->first) {
1c00aca2:	c611                	beqz	a2,1c00acae <__rt_cluster_mount_step+0x124>
    sched->last->next = event;
1c00aca4:	42d8                	lw	a4,4(a3)
1c00aca6:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c00aca8:	c2dc                	sw	a5,4(a3)
        end = 1;
1c00acaa:	4785                	li	a5,1
1c00acac:	b71d                	j	1c00abd2 <__rt_cluster_mount_step+0x48>
    sched->first = event;
1c00acae:	00f02e23          	sw	a5,28(zero) # 1c <__rt_sched>
1c00acb2:	bfdd                	j	1c00aca8 <__rt_cluster_mount_step+0x11e>

1c00acb4 <pi_cluster_conf_init>:
  conf->id = 0;
1c00acb4:	00052223          	sw	zero,4(a0)
}
1c00acb8:	8082                	ret

1c00acba <pi_cluster_open>:
{
1c00acba:	1101                	addi	sp,sp,-32
1c00acbc:	ce06                	sw	ra,28(sp)
1c00acbe:	cc22                	sw	s0,24(sp)
1c00acc0:	ca26                	sw	s1,20(sp)
1c00acc2:	c84a                	sw	s2,16(sp)
1c00acc4:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00acc6:	30047973          	csrrci	s2,mstatus,8
  struct pi_cluster_conf *conf = (struct pi_cluster_conf *)cluster_dev->config;
1c00acca:	00452983          	lw	s3,4(a0)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00acce:	1c00e4b7          	lui	s1,0x1c00e
1c00acd2:	02800793          	li	a5,40
  int cid = conf->id;
1c00acd6:	0049a703          	lw	a4,4(s3)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00acda:	26c48493          	addi	s1,s1,620 # 1c00e26c <__rt_fc_cluster_data>
1c00acde:	42f704b3          	p.mac	s1,a4,a5
1c00ace2:	c504                	sw	s1,8(a0)
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00ace4:	920ff0ef          	jal	ra,1c009e04 <__rt_wait_event_prepare_blocking>
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00ace8:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00acec:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00acf0:	ca5797b3          	p.extractu	a5,a5,5,5
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00acf4:	842a                	mv	s0,a0
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00acf6:	04e79563          	bne	a5,a4,1c00ad40 <pi_cluster_open+0x86>
  event->implem.saved_pending = event->implem.pending;
1c00acfa:	515c                	lw	a5,36(a0)
    cluster->state = RT_CLUSTER_MOUNT_START;
1c00acfc:	0004ae23          	sw	zero,28(s1)
    cluster->mount_event = event;
1c00ad00:	d0c8                	sw	a0,36(s1)
1c00ad02:	d95c                	sw	a5,52(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00ad04:	415c                	lw	a5,4(a0)
  event->implem.keep = 0;
1c00ad06:	02052423          	sw	zero,40(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00ad0a:	d55c                	sw	a5,44(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00ad0c:	451c                	lw	a5,8(a0)
  event->arg[1] = (uintptr_t)arg;
1c00ad0e:	c504                	sw	s1,8(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00ad10:	d91c                	sw	a5,48(a0)
  event->arg[0] = (uintptr_t)callback;
1c00ad12:	1c00b7b7          	lui	a5,0x1c00b
1c00ad16:	b8a78793          	addi	a5,a5,-1142 # 1c00ab8a <__rt_cluster_mount_step>
1c00ad1a:	c15c                	sw	a5,4(a0)
  event->implem.pending = 1;  
1c00ad1c:	4785                	li	a5,1
1c00ad1e:	d15c                	sw	a5,36(a0)
    __rt_cluster_mount_step((void *)cluster);
1c00ad20:	8526                	mv	a0,s1
1c00ad22:	e69ff0ef          	jal	ra,1c00ab8a <__rt_cluster_mount_step>
  __rt_wait_event(event);
1c00ad26:	8522                	mv	a0,s0
1c00ad28:	a2eff0ef          	jal	ra,1c009f56 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00ad2c:	30091073          	csrw	mstatus,s2
}
1c00ad30:	40f2                	lw	ra,28(sp)
1c00ad32:	4462                	lw	s0,24(sp)
1c00ad34:	44d2                	lw	s1,20(sp)
1c00ad36:	4942                	lw	s2,16(sp)
1c00ad38:	49b2                	lw	s3,12(sp)
1c00ad3a:	4501                	li	a0,0
1c00ad3c:	6105                	addi	sp,sp,32
1c00ad3e:	8082                	ret
  if (__rt_cluster_mount(&__rt_fc_cluster_data[cid], conf->id, 0, event))
1c00ad40:	0049a483          	lw	s1,4(s3)
    __rt_init_cluster_data(cid);
1c00ad44:	8526                	mv	a0,s1
1c00ad46:	d7fff0ef          	jal	ra,1c00aac4 <__rt_init_cluster_data>
1c00ad4a:	04048513          	addi	a0,s1,64
1c00ad4e:	002017b7          	lui	a5,0x201
1c00ad52:	055a                	slli	a0,a0,0x16
1c00ad54:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00ad58:	577d                	li	a4,-1
1c00ad5a:	00e567a3          	p.sw	a4,a5(a0)
1c00ad5e:	002007b7          	lui	a5,0x200
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00ad62:	1c000737          	lui	a4,0x1c000
1c00ad66:	04478793          	addi	a5,a5,68 # 200044 <__L2+0x180044>
1c00ad6a:	08070713          	addi	a4,a4,128 # 1c000080 <_start>
1c00ad6e:	97aa                	add	a5,a5,a0
1c00ad70:	ce073733          	p.bclr	a4,a4,7,0
1c00ad74:	007250fb          	lp.setupi	x1,7,1c00ad7c <pi_cluster_open+0xc2>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00ad78:	00e7a22b          	p.sw	a4,4(a5!)
1c00ad7c:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00ad7e:	002007b7          	lui	a5,0x200
1c00ad82:	07a1                	addi	a5,a5,8
1c00ad84:	577d                	li	a4,-1
1c00ad86:	00e567a3          	p.sw	a4,a5(a0)
    rt_event_push(event);
1c00ad8a:	8522                	mv	a0,s0
1c00ad8c:	942ff0ef          	jal	ra,1c009ece <rt_event_push>
1c00ad90:	bf59                	j	1c00ad26 <pi_cluster_open+0x6c>

1c00ad92 <pi_cluster_close>:
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00ad92:	451c                	lw	a5,8(a0)
{
1c00ad94:	1101                	addi	sp,sp,-32
1c00ad96:	cc22                	sw	s0,24(sp)
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00ad98:	5380                	lw	s0,32(a5)
1c00ad9a:	1c00e7b7          	lui	a5,0x1c00e
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00ad9e:	e987a783          	lw	a5,-360(a5) # 1c00de98 <__rt_platform>
{
1c00ada2:	ce06                	sw	ra,28(sp)
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00ada4:	0017a563          	p.beqimm	a5,1,1c00adae <pi_cluster_close+0x1c>
      __rt_fll_deinit(__RT_FLL_CL);
1c00ada8:	4505                	li	a0,1
1c00adaa:	d11ff0ef          	jal	ra,1c00aaba <__rt_fll_deinit>
    int pending = 0;
1c00adae:	c602                	sw	zero,12(sp)
  if (cid == 0) __rt_pmu_cluster_power_down(event, &pending);
1c00adb0:	e409                	bnez	s0,1c00adba <pi_cluster_close+0x28>
1c00adb2:	006c                	addi	a1,sp,12
1c00adb4:	4501                	li	a0,0
1c00adb6:	915ff0ef          	jal	ra,1c00a6ca <__rt_pmu_cluster_power_down>
}
1c00adba:	40f2                	lw	ra,28(sp)
1c00adbc:	4462                	lw	s0,24(sp)
1c00adbe:	4501                	li	a0,0
1c00adc0:	6105                	addi	sp,sp,32
1c00adc2:	8082                	ret

1c00adc4 <__rt_cluster_push_fc_event>:
  while (rt_tas_lock_32((int)&__rt_cluster_fc_task_lock) == -1)
1c00adc4:	100006b7          	lui	a3,0x10000
1c00adc8:	04068693          	addi	a3,a3,64 # 10000040 <__rt_cluster_fc_task_lock>
  return addr | (1<<ARCHI_L1_TAS_BIT);
1c00adcc:	c146c5b3          	p.bset	a1,a3,0,20
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00add0:	4709                	li	a4,2
1c00add2:	002047b7          	lui	a5,0x204
  signed int result = *(volatile signed int *)__rt_tas_addr(addr);
1c00add6:	4190                	lw	a2,0(a1)
1c00add8:	05f62063          	p.beqimm	a2,-1,1c00ae18 <__rt_cluster_push_fc_event+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00addc:	01402773          	csrr	a4,uhartid
  while(data->events != NULL)
1c00ade0:	1c00e7b7          	lui	a5,0x1c00e
  return (hart_id >> 5) & 0x3f;
1c00ade4:	8715                	srai	a4,a4,0x5
1c00ade6:	f2673733          	p.bclr	a4,a4,25,6
1c00adea:	02800613          	li	a2,40
1c00adee:	26c78793          	addi	a5,a5,620 # 1c00e26c <__rt_fc_cluster_data>
1c00adf2:	42c707b3          	p.mac	a5,a4,a2
1c00adf6:	4609                	li	a2,2
1c00adf8:	00204737          	lui	a4,0x204
1c00adfc:	43cc                	lw	a1,4(a5)
1c00adfe:	e585                	bnez	a1,1c00ae26 <__rt_cluster_push_fc_event+0x62>
  data->events = event;
1c00ae00:	c3c8                	sw	a0,4(a5)
  pulp_write32(evtAddr, coreSet);
1c00ae02:	1b2017b7          	lui	a5,0x1b201
1c00ae06:	e007a223          	sw	zero,-508(a5) # 1b200e04 <__fc_tcdm_end+0x1ffa34>
  *(volatile signed int *)addr = value;
1c00ae0a:	0006a023          	sw	zero,0(a3)
1c00ae0e:	002047b7          	lui	a5,0x204
1c00ae12:	1007a223          	sw	zero,260(a5) # 204104 <__L2+0x184104>
}
1c00ae16:	8082                	ret
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ae18:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ae1c:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00ae20:	00e7a223          	sw	a4,4(a5)
1c00ae24:	bf4d                	j	1c00add6 <__rt_cluster_push_fc_event+0x12>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ae26:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ae2a:	03c76583          	p.elw	a1,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00ae2e:	00c72223          	sw	a2,4(a4)
1c00ae32:	b7e9                	j	1c00adfc <__rt_cluster_push_fc_event+0x38>

1c00ae34 <__rt_cluster_new>:
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00ae34:	1c00b5b7          	lui	a1,0x1c00b
{
1c00ae38:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00ae3a:	4601                	li	a2,0
1c00ae3c:	b2658593          	addi	a1,a1,-1242 # 1c00ab26 <__rt_cluster_init>
1c00ae40:	4501                	li	a0,0
{
1c00ae42:	c606                	sw	ra,12(sp)
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00ae44:	b9ffe0ef          	jal	ra,1c0099e2 <__rt_cbsys_add>
  if (err) rt_fatal("Unable to initialize time driver\n");
1c00ae48:	c10d                	beqz	a0,1c00ae6a <__rt_cluster_new+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00ae4a:	01402673          	csrr	a2,uhartid
1c00ae4e:	1c00e537          	lui	a0,0x1c00e
  return (hart_id >> 5) & 0x3f;
1c00ae52:	40565593          	srai	a1,a2,0x5
1c00ae56:	f265b5b3          	p.bclr	a1,a1,25,6
1c00ae5a:	f4563633          	p.bclr	a2,a2,26,5
1c00ae5e:	ac850513          	addi	a0,a0,-1336 # 1c00dac8 <IntegerExpLUT+0xcc>
1c00ae62:	47a010ef          	jal	ra,1c00c2dc <printf>
1c00ae66:	3fa010ef          	jal	ra,1c00c260 <abort>
}
1c00ae6a:	40b2                	lw	ra,12(sp)
1c00ae6c:	0141                	addi	sp,sp,16
1c00ae6e:	8082                	ret

1c00ae70 <__rt_cluster_pulpos_emu_init>:
static struct pi_device *__rt_fc_cluster_device;
static struct pi_cluster_task __rt_pulpos_emu_global_cluster_task;


static void __attribute__((constructor)) __rt_cluster_pulpos_emu_init()
{
1c00ae70:	1141                	addi	sp,sp,-16
  int nb_cluster = rt_nb_cluster();

  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00ae72:	45b1                	li	a1,12
1c00ae74:	4505                	li	a0,1
{
1c00ae76:	c606                	sw	ra,12(sp)
  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00ae78:	9f6ff0ef          	jal	ra,1c00a06e <rt_alloc>
1c00ae7c:	1c00e7b7          	lui	a5,0x1c00e
1c00ae80:	20a7a623          	sw	a0,524(a5) # 1c00e20c <__rt_fc_cluster_device>
  if (__rt_fc_cluster_device == NULL) {
1c00ae84:	e10d                	bnez	a0,1c00aea6 <__rt_cluster_pulpos_emu_init+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00ae86:	01402673          	csrr	a2,uhartid
    rt_fatal("Unable to allocate cluster control structure\n");
1c00ae8a:	1c00e537          	lui	a0,0x1c00e
  return (hart_id >> 5) & 0x3f;
1c00ae8e:	40565593          	srai	a1,a2,0x5
1c00ae92:	f265b5b3          	p.bclr	a1,a1,25,6
1c00ae96:	f4563633          	p.bclr	a2,a2,26,5
1c00ae9a:	b1050513          	addi	a0,a0,-1264 # 1c00db10 <IntegerExpLUT+0x114>
1c00ae9e:	43e010ef          	jal	ra,1c00c2dc <printf>
1c00aea2:	3be010ef          	jal	ra,1c00c260 <abort>
    return;
  }
}
1c00aea6:	40b2                	lw	ra,12(sp)
1c00aea8:	0141                	addi	sp,sp,16
1c00aeaa:	8082                	ret

1c00aeac <rt_cluster_call>:

int rt_cluster_call(rt_cluster_call_t *_call, int cid, void (*entry)(void *arg), void *arg, void *stacks, int master_stack_size, int slave_stack_size, int nb_pe, rt_event_t *event)
{
1c00aeac:	7139                	addi	sp,sp,-64
1c00aeae:	d84a                	sw	s2,48(sp)
1c00aeb0:	4906                	lw	s2,64(sp)
1c00aeb2:	dc22                	sw	s0,56(sp)
1c00aeb4:	842e                	mv	s0,a1
1c00aeb6:	de06                	sw	ra,60(sp)
1c00aeb8:	da26                	sw	s1,52(sp)
1c00aeba:	d64e                	sw	s3,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aebc:	300479f3          	csrrci	s3,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00aec0:	84ca                	mv	s1,s2
  if (likely(event != NULL)) return event;
1c00aec2:	02091163          	bnez	s2,1c00aee4 <rt_cluster_call+0x38>
  return __rt_wait_event_prepare_blocking();
1c00aec6:	ce32                	sw	a2,28(sp)
1c00aec8:	cc36                	sw	a3,24(sp)
1c00aeca:	ca3a                	sw	a4,20(sp)
1c00aecc:	c83e                	sw	a5,16(sp)
1c00aece:	c642                	sw	a6,12(sp)
1c00aed0:	c446                	sw	a7,8(sp)
1c00aed2:	f33fe0ef          	jal	ra,1c009e04 <__rt_wait_event_prepare_blocking>
1c00aed6:	48a2                	lw	a7,8(sp)
1c00aed8:	4832                	lw	a6,12(sp)
1c00aeda:	47c2                	lw	a5,16(sp)
1c00aedc:	4752                	lw	a4,20(sp)
1c00aede:	46e2                	lw	a3,24(sp)
1c00aee0:	4672                	lw	a2,28(sp)
1c00aee2:	84aa                	mv	s1,a0
static inline struct pi_cluster_task *pi_cluster_task(struct pi_cluster_task *task, void (*entry)(void*), void *arg)
{
    #if defined(PMSIS_DRIVERS)
    memset(task, 0, sizeof(struct pi_cluster_task));
    #endif  /* PMSIS_DRIVERS */
    task->entry = entry;
1c00aee4:	1c00e5b7          	lui	a1,0x1c00e
1c00aee8:	02858513          	addi	a0,a1,40 # 1c00e028 <__rt_pulpos_emu_global_cluster_task>
  struct pi_cluster_task *task = &__rt_pulpos_emu_global_cluster_task;

  pi_cluster_task(task, entry, arg);

  task->stacks = stacks;
  task->stack_size = master_stack_size;
1c00aeec:	c55c                	sw	a5,12(a0)
  task->slave_stack_size = slave_stack_size;
  task->nb_cores = nb_pe;

  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00aeee:	1c00e7b7          	lui	a5,0x1c00e
1c00aef2:	c110                	sw	a2,0(a0)
    task->arg = arg;
1c00aef4:	c154                	sw	a3,4(a0)
  task->stacks = stacks;
1c00aef6:	c518                	sw	a4,8(a0)
  task->slave_stack_size = slave_stack_size;
1c00aef8:	01052823          	sw	a6,16(a0)
  task->nb_cores = nb_pe;
1c00aefc:	01152a23          	sw	a7,20(a0)
  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00af00:	20c7a503          	lw	a0,524(a5) # 1c00e20c <__rt_fc_cluster_device>
1c00af04:	47b1                	li	a5,12
1c00af06:	8626                	mv	a2,s1
1c00af08:	42f40533          	p.mac	a0,s0,a5
1c00af0c:	02858593          	addi	a1,a1,40
1c00af10:	2061                	jal	1c00af98 <pi_cluster_send_task_to_cl_async>
1c00af12:	842a                	mv	s0,a0
1c00af14:	cd01                	beqz	a0,1c00af2c <rt_cluster_call+0x80>
  __builtin_pulp_spr_write(reg, val);
1c00af16:	30099073          	csrw	mstatus,s3
  {
  	rt_irq_restore(irq);
  	return -1;
1c00af1a:	547d                	li	s0,-1
  __rt_wait_event_check(event, call_event);

  rt_irq_restore(irq);

  return 0;
}
1c00af1c:	8522                	mv	a0,s0
1c00af1e:	50f2                	lw	ra,60(sp)
1c00af20:	5462                	lw	s0,56(sp)
1c00af22:	54d2                	lw	s1,52(sp)
1c00af24:	5942                	lw	s2,48(sp)
1c00af26:	59b2                	lw	s3,44(sp)
1c00af28:	6121                	addi	sp,sp,64
1c00af2a:	8082                	ret
  if (event == NULL) __rt_wait_event(call_event);
1c00af2c:	00091563          	bnez	s2,1c00af36 <rt_cluster_call+0x8a>
1c00af30:	8526                	mv	a0,s1
1c00af32:	824ff0ef          	jal	ra,1c009f56 <__rt_wait_event>
1c00af36:	30099073          	csrw	mstatus,s3
  return 0;
1c00af3a:	b7cd                	j	1c00af1c <rt_cluster_call+0x70>

1c00af3c <rt_cluster_mount>:

void rt_cluster_mount(int mount, int cid, int flags, rt_event_t *event)
{
1c00af3c:	7139                	addi	sp,sp,-64
1c00af3e:	dc22                	sw	s0,56(sp)
1c00af40:	da26                	sw	s1,52(sp)
1c00af42:	d84a                	sw	s2,48(sp)
1c00af44:	4431                	li	s0,12
1c00af46:	1c00e4b7          	lui	s1,0x1c00e
1c00af4a:	de06                	sw	ra,60(sp)
1c00af4c:	d64e                	sw	s3,44(sp)
1c00af4e:	8936                	mv	s2,a3
1c00af50:	02858433          	mul	s0,a1,s0
1c00af54:	20c48493          	addi	s1,s1,524 # 1c00e20c <__rt_fc_cluster_device>
  if (mount)
1c00af58:	c91d                	beqz	a0,1c00af8e <rt_cluster_mount+0x52>
  {
    struct pi_cluster_conf conf;
    pi_cluster_conf_init(&conf);
1c00af5a:	0028                	addi	a0,sp,8
1c00af5c:	89ae                	mv	s3,a1
1c00af5e:	d57ff0ef          	jal	ra,1c00acb4 <pi_cluster_conf_init>
    pi_open_from_conf(&__rt_fc_cluster_device[cid], &conf);
1c00af62:	4088                	lw	a0,0(s1)
1c00af64:	002c                	addi	a1,sp,8
1c00af66:	9522                	add	a0,a0,s0
1c00af68:	90bfe0ef          	jal	ra,1c009872 <pi_open_from_conf>
    conf.id = cid;
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00af6c:	4088                	lw	a0,0(s1)
    conf.id = cid;
1c00af6e:	c64e                	sw	s3,12(sp)
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00af70:	9522                	add	a0,a0,s0
1c00af72:	d49ff0ef          	jal	ra,1c00acba <pi_cluster_open>
  else
  {
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
  }

  if (event)
1c00af76:	00090563          	beqz	s2,1c00af80 <rt_cluster_mount+0x44>
    rt_event_push(event);
1c00af7a:	854a                	mv	a0,s2
1c00af7c:	f53fe0ef          	jal	ra,1c009ece <rt_event_push>
}
1c00af80:	50f2                	lw	ra,60(sp)
1c00af82:	5462                	lw	s0,56(sp)
1c00af84:	54d2                	lw	s1,52(sp)
1c00af86:	5942                	lw	s2,48(sp)
1c00af88:	59b2                	lw	s3,44(sp)
1c00af8a:	6121                	addi	sp,sp,64
1c00af8c:	8082                	ret
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
1c00af8e:	4088                	lw	a0,0(s1)
1c00af90:	9522                	add	a0,a0,s0
1c00af92:	e01ff0ef          	jal	ra,1c00ad92 <pi_cluster_close>
1c00af96:	b7c5                	j	1c00af76 <rt_cluster_mount+0x3a>

1c00af98 <pi_cluster_send_task_to_cl_async>:
  }
}
#endif

int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *task, pi_task_t *async_task)
{
1c00af98:	1101                	addi	sp,sp,-32
1c00af9a:	ca26                	sw	s1,20(sp)
  rt_fc_cluster_data_t *data = (rt_fc_cluster_data_t *)device->data;
1c00af9c:	4504                	lw	s1,8(a0)
{
1c00af9e:	cc22                	sw	s0,24(sp)
1c00afa0:	c256                	sw	s5,4(sp)
1c00afa2:	842e                	mv	s0,a1
1c00afa4:	8ab2                	mv	s5,a2
1c00afa6:	ce06                	sw	ra,28(sp)
1c00afa8:	c84a                	sw	s2,16(sp)
1c00afaa:	c64e                	sw	s3,12(sp)
1c00afac:	c452                	sw	s4,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00afae:	30047a73          	csrrci	s4,mstatus,8

  int lock = __rt_cluster_lock(data);

  __rt_task_init(async_task);
  
  task->implem.pending = 1;
1c00afb2:	4785                	li	a5,1
  task->done = 0;
1c00afb4:	00060a23          	sb	zero,20(a2)
1c00afb8:	d1dc                	sw	a5,36(a1)

  rt_cluster_call_pool_t *cl_data = data->pool;

  if (task->nb_cores == 0)
1c00afba:	49dc                	lw	a5,20(a1)
  rt_cluster_call_pool_t *cl_data = data->pool;
1c00afbc:	0144a983          	lw	s3,20(s1)
  if (task->nb_cores == 0)
1c00afc0:	e399                	bnez	a5,1c00afc6 <pi_cluster_send_task_to_cl_async+0x2e>
    task->nb_cores = pi_cl_cluster_nb_cores();
1c00afc2:	47a1                	li	a5,8
1c00afc4:	c9dc                	sw	a5,20(a1)

  if (task->stacks == NULL)
1c00afc6:	441c                	lw	a5,8(s0)
1c00afc8:	ef85                	bnez	a5,1c00b000 <pi_cluster_send_task_to_cl_async+0x68>
  {
    if (task->stack_size == 0)
1c00afca:	445c                	lw	a5,12(s0)
1c00afcc:	eb81                	bnez	a5,1c00afdc <pi_cluster_send_task_to_cl_async+0x44>
    {
      task->stack_size = 0x800;
1c00afce:	6785                	lui	a5,0x1
1c00afd0:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00afd4:	c45c                	sw	a5,12(s0)
      task->slave_stack_size = 0x400;
1c00afd6:	40000793          	li	a5,1024
1c00afda:	c81c                	sw	a5,16(s0)
    }

    if (task->slave_stack_size == 0)
1c00afdc:	481c                	lw	a5,16(s0)
1c00afde:	00c42903          	lw	s2,12(s0)
1c00afe2:	e399                	bnez	a5,1c00afe8 <pi_cluster_send_task_to_cl_async+0x50>
      task->slave_stack_size = task->stack_size;
1c00afe4:	01242823          	sw	s2,16(s0)

    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00afe8:	485c                	lw	a5,20(s0)
1c00afea:	4818                	lw	a4,16(s0)

    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00afec:	448c                	lw	a1,8(s1)
    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00afee:	17fd                	addi	a5,a5,-1
1c00aff0:	42e78933          	p.mac	s2,a5,a4
    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00aff4:	c9b5                	beqz	a1,1c00b068 <pi_cluster_send_task_to_cl_async+0xd0>
1c00aff6:	44d0                	lw	a2,12(s1)
1c00aff8:	05261f63          	bne	a2,s2,1c00b056 <pi_cluster_send_task_to_cl_async+0xbe>

      if (data->stacks == NULL)
        goto error;
    }

    task->stacks = data->stacks;
1c00affc:	449c                	lw	a5,8(s1)
1c00affe:	c41c                	sw	a5,8(s0)

  task->completion_callback = async_task;
#ifdef ARCHI_HAS_CC
  task->implem.core_mask = (1<<(task->nb_cores-1)) - 1;
#else
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00b000:	4858                	lw	a4,20(s0)
1c00b002:	4785                	li	a5,1
  task->completion_callback = async_task;
1c00b004:	01542c23          	sw	s5,24(s0)
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00b008:	00e797b3          	sll	a5,a5,a4
1c00b00c:	17fd                	addi	a5,a5,-1
1c00b00e:	d41c                	sw	a5,40(s0)
#endif

  task->next = NULL;
1c00b010:	02042023          	sw	zero,32(s0)

  rt_compiler_barrier();

  if (cl_data->last_call_fc)
1c00b014:	0089a783          	lw	a5,8(s3)
1c00b018:	cbb5                	beqz	a5,1c00b08c <pi_cluster_send_task_to_cl_async+0xf4>
  {
    cl_data->last_call_fc->next = task;
1c00b01a:	d380                	sw	s0,32(a5)
  else
  {
    cl_data->first_call_fc = task;
  }

  cl_data->last_call_fc = task;
1c00b01c:	0089a423          	sw	s0,8(s3)

  rt_compiler_barrier();
  
  if (cl_data->first_call_fc_for_cl == NULL)
1c00b020:	0009a783          	lw	a5,0(s3)
1c00b024:	e399                	bnez	a5,1c00b02a <pi_cluster_send_task_to_cl_async+0x92>
    cl_data->first_call_fc_for_cl = task;
1c00b026:	0089a023          	sw	s0,0(s3)
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00b02a:	509c                	lw	a5,32(s1)
  pulp_write32(evtAddr, coreSet);
1c00b02c:	00201737          	lui	a4,0x201
1c00b030:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00b034:	04078793          	addi	a5,a5,64
1c00b038:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c00b03a:	0007e723          	p.sw	zero,a4(a5)
  __builtin_pulp_spr_write(reg, val);
1c00b03e:	300a1073          	csrw	mstatus,s4
  rt_compiler_barrier();
  eu_evt_trig(eu_evt_trig_cluster_addr(data->cid, RT_CLUSTER_CALL_EVT), 0);

  __rt_cluster_unlock(data, lock);

  return 0;
1c00b042:	4501                	li	a0,0

error:
  __rt_cluster_unlock(data, lock);
  return -1;
}
1c00b044:	40f2                	lw	ra,28(sp)
1c00b046:	4462                	lw	s0,24(sp)
1c00b048:	44d2                	lw	s1,20(sp)
1c00b04a:	4942                	lw	s2,16(sp)
1c00b04c:	49b2                	lw	s3,12(sp)
1c00b04e:	4a22                	lw	s4,8(sp)
1c00b050:	4a92                	lw	s5,4(sp)
1c00b052:	6105                	addi	sp,sp,32
1c00b054:	8082                	ret

#if defined(ARCHI_HAS_L1)

extern rt_alloc_t *__rt_alloc_l1;

static inline rt_alloc_t *rt_alloc_l1(int cid) { return &__rt_alloc_l1[cid]; }
1c00b056:	509c                	lw	a5,32(s1)
1c00b058:	1c00e737          	lui	a4,0x1c00e
1c00b05c:	24c72503          	lw	a0,588(a4) # 1c00e24c <__rt_alloc_l1>
1c00b060:	078a                	slli	a5,a5,0x2
        rt_user_free(rt_alloc_l1(data->cid), data->stacks, data->stacks_size);
1c00b062:	953e                	add	a0,a0,a5
1c00b064:	fbffe0ef          	jal	ra,1c00a022 <rt_user_free>
1c00b068:	509c                	lw	a5,32(s1)
1c00b06a:	1c00e737          	lui	a4,0x1c00e
1c00b06e:	24c72503          	lw	a0,588(a4) # 1c00e24c <__rt_alloc_l1>
1c00b072:	078a                	slli	a5,a5,0x2
      data->stacks_size = stacks_size;
1c00b074:	0124a623          	sw	s2,12(s1)
      data->stacks = rt_user_alloc(rt_alloc_l1(data->cid), stacks_size);
1c00b078:	85ca                	mv	a1,s2
1c00b07a:	953e                	add	a0,a0,a5
1c00b07c:	f5ffe0ef          	jal	ra,1c009fda <rt_user_alloc>
1c00b080:	c488                	sw	a0,8(s1)
      if (data->stacks == NULL)
1c00b082:	fd2d                	bnez	a0,1c00affc <pi_cluster_send_task_to_cl_async+0x64>
1c00b084:	300a1073          	csrw	mstatus,s4
  return -1;
1c00b088:	557d                	li	a0,-1
1c00b08a:	bf6d                	j	1c00b044 <pi_cluster_send_task_to_cl_async+0xac>
    cl_data->first_call_fc = task;
1c00b08c:	0089a223          	sw	s0,4(s3)
1c00b090:	b771                	j	1c00b01c <pi_cluster_send_task_to_cl_async+0x84>

1c00b092 <pi_cluster_send_task_to_cl>:



int pi_cluster_send_task_to_cl(struct pi_device *device, struct pi_cluster_task *task)
{
1c00b092:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00b094:	4785                	li	a5,1
  pi_task_t fc_task;

  pi_task_block(&fc_task);

  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00b096:	860a                	mv	a2,sp
{
1c00b098:	c522                	sw	s0,136(sp)
1c00b09a:	c706                	sw	ra,140(sp)
1c00b09c:	c326                	sw	s1,132(sp)
1c00b09e:	c14a                	sw	s2,128(sp)
1c00b0a0:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
1c00b0a2:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c00b0a4:	d43e                	sw	a5,40(sp)
1c00b0a6:	00010a23          	sb	zero,20(sp)
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00b0aa:	eefff0ef          	jal	ra,1c00af98 <pi_cluster_send_task_to_cl_async>
  {
    return -1;
1c00b0ae:	547d                	li	s0,-1
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00b0b0:	e509                	bnez	a0,1c00b0ba <pi_cluster_send_task_to_cl+0x28>
1c00b0b2:	842a                	mv	s0,a0
  while(!task->done)
1c00b0b4:	01410783          	lb	a5,20(sp)
1c00b0b8:	cb81                	beqz	a5,1c00b0c8 <pi_cluster_send_task_to_cl+0x36>
  }

  pi_task_wait_on(&fc_task);

  return 0;
}
1c00b0ba:	8522                	mv	a0,s0
1c00b0bc:	40ba                	lw	ra,140(sp)
1c00b0be:	442a                	lw	s0,136(sp)
1c00b0c0:	449a                	lw	s1,132(sp)
1c00b0c2:	490a                	lw	s2,128(sp)
1c00b0c4:	6149                	addi	sp,sp,144
1c00b0c6:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b0c8:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00b0cc:	4585                	li	a1,1
1c00b0ce:	01c00513          	li	a0,28
1c00b0d2:	e21fe0ef          	jal	ra,1c009ef2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00b0d6:	30091073          	csrw	mstatus,s2
1c00b0da:	bfe9                	j	1c00b0b4 <pi_cluster_send_task_to_cl+0x22>

1c00b0dc <pi_pad_set_function>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b0dc:	300476f3          	csrrci	a3,mstatus,8
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00b0e0:	068417b7          	lui	a5,0x6841
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00b0e4:	00151713          	slli	a4,a0,0x1
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00b0e8:	05078793          	addi	a5,a5,80 # 6841050 <__L2+0x67c1050>
  unsigned int padfunId = APB_SOC_PADFUN_NO(pad);
1c00b0ec:	8111                	srli	a0,a0,0x4
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00b0ee:	953e                	add	a0,a0,a5
1c00b0f0:	050a                	slli	a0,a0,0x2
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00b0f2:	8b79                	andi	a4,a4,30
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00b0f4:	4110                	lw	a2,0(a0)
  unsigned int oldval = hal_apb_soc_padfun_get(padfunId) & ~(((1<<APB_SOC_PADFUN_SIZE)-1) << padBit);
1c00b0f6:	478d                	li	a5,3
1c00b0f8:	00e797b3          	sll	a5,a5,a4
1c00b0fc:	fff7c793          	not	a5,a5
1c00b100:	8ff1                	and	a5,a5,a2
  unsigned int newVal = oldval | (func << padBit);
1c00b102:	00e595b3          	sll	a1,a1,a4
1c00b106:	8ddd                	or	a1,a1,a5
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id), value);
1c00b108:	c10c                	sw	a1,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c00b10a:	30069073          	csrw	mstatus,a3
void pi_pad_set_function(pi_pad_e pad, pi_pad_func_e function)
{
  int irq = rt_irq_disable();
  hal_apb_soc_pad_set_function(pad, function);
  rt_irq_restore(irq);
}
1c00b10e:	8082                	ret

1c00b110 <pi_pad_init>:

void pi_pad_init(uint32_t pad_values[])
{
  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, pad_values[i]);
1c00b110:	4114                	lw	a3,0(a0)
1c00b112:	1a1047b7          	lui	a5,0x1a104
1c00b116:	14078713          	addi	a4,a5,320 # 1a104140 <__l1_end+0xa1040fc>
1c00b11a:	c314                	sw	a3,0(a4)
1c00b11c:	4154                	lw	a3,4(a0)
1c00b11e:	14478713          	addi	a4,a5,324
1c00b122:	14878793          	addi	a5,a5,328
1c00b126:	c314                	sw	a3,0(a4)
1c00b128:	4518                	lw	a4,8(a0)
1c00b12a:	c398                	sw	a4,0(a5)
  }  
}
1c00b12c:	8082                	ret

1c00b12e <l2_memcpy>:
  req = __pi_hyper_cluster_reqs_first;
  if (req)
  {
    __pi_hyper_cluster_req_exec(req);
  }
}
1c00b12e:	87aa                	mv	a5,a0
1c00b130:	962e                	add	a2,a2,a1
1c00b132:	00c59363          	bne	a1,a2,1c00b138 <l2_memcpy+0xa>
1c00b136:	8082                	ret
1c00b138:	0015c70b          	p.lbu	a4,1(a1!)
1c00b13c:	00e780ab          	p.sb	a4,1(a5!)
1c00b140:	bfcd                	j	1c00b132 <l2_memcpy+0x4>

1c00b142 <rt_event_enqueue>:
1c00b142:	300476f3          	csrrci	a3,mstatus,8
1c00b146:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00b14a:	00052023          	sw	zero,0(a0)
1c00b14e:	01c00713          	li	a4,28
1c00b152:	c619                	beqz	a2,1c00b160 <rt_event_enqueue+0x1e>
1c00b154:	435c                	lw	a5,4(a4)
1c00b156:	c388                	sw	a0,0(a5)
1c00b158:	c348                	sw	a0,4(a4)
1c00b15a:	30069073          	csrw	mstatus,a3
1c00b15e:	8082                	ret
1c00b160:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00b164:	bfd5                	j	1c00b158 <rt_event_enqueue+0x16>

1c00b166 <pi_task_wait_on.isra.4>:
1c00b166:	1141                	addi	sp,sp,-16
1c00b168:	c422                	sw	s0,8(sp)
1c00b16a:	c226                	sw	s1,4(sp)
1c00b16c:	c606                	sw	ra,12(sp)
1c00b16e:	c04a                	sw	s2,0(sp)
1c00b170:	842a                	mv	s0,a0
1c00b172:	00040783          	lb	a5,0(s0)
1c00b176:	c799                	beqz	a5,1c00b184 <pi_task_wait_on.isra.4+0x1e>
1c00b178:	40b2                	lw	ra,12(sp)
1c00b17a:	4422                	lw	s0,8(sp)
1c00b17c:	4492                	lw	s1,4(sp)
1c00b17e:	4902                	lw	s2,0(sp)
1c00b180:	0141                	addi	sp,sp,16
1c00b182:	8082                	ret
1c00b184:	30047973          	csrrci	s2,mstatus,8
1c00b188:	4585                	li	a1,1
1c00b18a:	01c00513          	li	a0,28
1c00b18e:	d65fe0ef          	jal	ra,1c009ef2 <__rt_event_execute>
1c00b192:	30091073          	csrw	mstatus,s2
1c00b196:	bff1                	j	1c00b172 <pi_task_wait_on.isra.4+0xc>

1c00b198 <__pi_hyper_pin_settings>:
1c00b198:	1141                	addi	sp,sp,-16
1c00b19a:	c422                	sw	s0,8(sp)
1c00b19c:	1c00e437          	lui	s0,0x1c00e
1c00b1a0:	b6440413          	addi	s0,s0,-1180 # 1c00db64 <__hyper_pad>
1c00b1a4:	c226                	sw	s1,4(sp)
1c00b1a6:	c606                	sw	ra,12(sp)
1c00b1a8:	03440493          	addi	s1,s0,52
1c00b1ac:	0044250b          	p.lw	a0,4(s0!)
1c00b1b0:	458d                	li	a1,3
1c00b1b2:	f2bff0ef          	jal	ra,1c00b0dc <pi_pad_set_function>
1c00b1b6:	fe941be3          	bne	s0,s1,1c00b1ac <__pi_hyper_pin_settings+0x14>
1c00b1ba:	40b2                	lw	ra,12(sp)
1c00b1bc:	4422                	lw	s0,8(sp)
1c00b1be:	4492                	lw	s1,4(sp)
1c00b1c0:	0141                	addi	sp,sp,16
1c00b1c2:	8082                	ret

1c00b1c4 <__pi_hyper_pin_reset_settings>:
1c00b1c4:	1141                	addi	sp,sp,-16
1c00b1c6:	c422                	sw	s0,8(sp)
1c00b1c8:	1c00e437          	lui	s0,0x1c00e
1c00b1cc:	b6440413          	addi	s0,s0,-1180 # 1c00db64 <__hyper_pad>
1c00b1d0:	c226                	sw	s1,4(sp)
1c00b1d2:	c606                	sw	ra,12(sp)
1c00b1d4:	03440493          	addi	s1,s0,52
1c00b1d8:	0044250b          	p.lw	a0,4(s0!)
1c00b1dc:	4581                	li	a1,0
1c00b1de:	effff0ef          	jal	ra,1c00b0dc <pi_pad_set_function>
1c00b1e2:	fe941be3          	bne	s0,s1,1c00b1d8 <__pi_hyper_pin_reset_settings+0x14>
1c00b1e6:	40b2                	lw	ra,12(sp)
1c00b1e8:	4422                	lw	s0,8(sp)
1c00b1ea:	4492                	lw	s1,4(sp)
1c00b1ec:	0141                	addi	sp,sp,16
1c00b1ee:	8082                	ret

1c00b1f0 <pi_hyper_conf_init>:
1c00b1f0:	57fd                	li	a5,-1
1c00b1f2:	00f50223          	sb	a5,4(a0)
1c00b1f6:	4785                	li	a5,1
1c00b1f8:	c55c                	sw	a5,12(a0)
1c00b1fa:	00052423          	sw	zero,8(a0)
1c00b1fe:	8082                	ret

1c00b200 <pi_hyper_open>:
1c00b200:	1141                	addi	sp,sp,-16
1c00b202:	c422                	sw	s0,8(sp)
1c00b204:	c04a                	sw	s2,0(sp)
1c00b206:	842a                	mv	s0,a0
1c00b208:	00452903          	lw	s2,4(a0)
1c00b20c:	4541                	li	a0,16
1c00b20e:	c606                	sw	ra,12(sp)
1c00b210:	c226                	sw	s1,4(sp)
1c00b212:	f8dfe0ef          	jal	ra,1c00a19e <pi_l2_malloc>
1c00b216:	c115                	beqz	a0,1c00b23a <pi_hyper_open+0x3a>
1c00b218:	00c92783          	lw	a5,12(s2)
1c00b21c:	84aa                	mv	s1,a0
1c00b21e:	0217b063          	p.bneimm	a5,1,1c00b23e <pi_hyper_open+0x3e>
1c00b222:	000f4637          	lui	a2,0xf4
1c00b226:	24060613          	addi	a2,a2,576 # f4240 <__L2+0x74240>
1c00b22a:	4581                	li	a1,0
1c00b22c:	762000ef          	jal	ra,1c00b98e <rt_extern_alloc_init>
1c00b230:	c519                	beqz	a0,1c00b23e <pi_hyper_open+0x3e>
1c00b232:	45c1                	li	a1,16
1c00b234:	8526                	mv	a0,s1
1c00b236:	f77fe0ef          	jal	ra,1c00a1ac <pi_l2_free>
1c00b23a:	557d                	li	a0,-1
1c00b23c:	a0f1                	j	1c00b308 <pi_hyper_open+0x108>
1c00b23e:	478d                	li	a5,3
1c00b240:	c0dc                	sw	a5,4(s1)
1c00b242:	00892783          	lw	a5,8(s2)
1c00b246:	c49c                	sw	a5,8(s1)
1c00b248:	00c92783          	lw	a5,12(s2)
1c00b24c:	c4dc                	sw	a5,12(s1)
1c00b24e:	1c00e7b7          	lui	a5,0x1c00e
1c00b252:	21478793          	addi	a5,a5,532 # 1c00e214 <__rt_hyper_open_count>
1c00b256:	4398                	lw	a4,0(a5)
1c00b258:	00170693          	addi	a3,a4,1
1c00b25c:	c394                	sw	a3,0(a5)
1c00b25e:	e739                	bnez	a4,1c00b2ac <pi_hyper_open+0xac>
1c00b260:	1a1067b7          	lui	a5,0x1a106
1c00b264:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fc4>
1c00b268:	c0673733          	p.bclr	a4,a4,0,6
1c00b26c:	00e7a423          	sw	a4,8(a5)
1c00b270:	0087a703          	lw	a4,8(a5)
1c00b274:	c0773733          	p.bclr	a4,a4,0,7
1c00b278:	00e7a423          	sw	a4,8(a5)
1c00b27c:	1a1027b7          	lui	a5,0x1a102
1c00b280:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa10273c>
1c00b284:	4398                	lw	a4,0(a5)
1c00b286:	c0374733          	p.bset	a4,a4,0,3
1c00b28a:	c398                	sw	a4,0(a5)
1c00b28c:	1c0007b7          	lui	a5,0x1c000
1c00b290:	4c878793          	addi	a5,a5,1224 # 1c0004c8 <__rt_hyper_handle_copy>
1c00b294:	10f02623          	sw	a5,268(zero) # 10c <_l1_preload_size+0xcc>
1c00b298:	0e002823          	sw	zero,240(zero) # f0 <_l1_preload_size+0xb0>
1c00b29c:	12f02623          	sw	a5,300(zero) # 12c <_l1_preload_size+0xec>
1c00b2a0:	10002823          	sw	zero,272(zero) # 110 <_l1_preload_size+0xd0>
1c00b2a4:	30f02423          	sw	a5,776(zero) # 308 <__rt_hyper_udma_handle>
1c00b2a8:	ef1ff0ef          	jal	ra,1c00b198 <__pi_hyper_pin_settings>
1c00b2ac:	00c92783          	lw	a5,12(s2)
1c00b2b0:	00892703          	lw	a4,8(s2)
1c00b2b4:	17fd                	addi	a5,a5,-1
1c00b2b6:	0017b793          	seqz	a5,a5
1c00b2ba:	078a                	slli	a5,a5,0x2
1c00b2bc:	ef21                	bnez	a4,1c00b314 <pi_hyper_open+0x114>
1c00b2be:	1a102737          	lui	a4,0x1a102
1c00b2c2:	1b470613          	addi	a2,a4,436 # 1a1021b4 <__l1_end+0xa102170>
1c00b2c6:	4214                	lw	a3,0(a2)
1c00b2c8:	6591                	lui	a1,0x4
1c00b2ca:	fff58513          	addi	a0,a1,-1 # 3fff <__rt_stack_size+0x37ff>
1c00b2ce:	73b6f693          	andi	a3,a3,1851
1c00b2d2:	8fd5                	or	a5,a5,a3
1c00b2d4:	c21c                	sw	a5,0(a2)
1c00b2d6:	1a870793          	addi	a5,a4,424
1c00b2da:	4394                	lw	a3,0(a5)
1c00b2dc:	f0058593          	addi	a1,a1,-256
1c00b2e0:	8ee9                	and	a3,a3,a0
1c00b2e2:	8eed                	and	a3,a3,a1
1c00b2e4:	1006c6b3          	p.exths	a3,a3
1c00b2e8:	c394                	sw	a3,0(a5)
1c00b2ea:	4214                	lw	a3,0(a2)
1c00b2ec:	7376f693          	andi	a3,a3,1847
1c00b2f0:	c214                	sw	a3,0(a2)
1c00b2f2:	4398                	lw	a4,0(a5)
1c00b2f4:	668d                	lui	a3,0x3
1c00b2f6:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00b2fa:	8f69                	and	a4,a4,a0
1c00b2fc:	8f75                	and	a4,a4,a3
1c00b2fe:	c4874733          	p.bset	a4,a4,2,8
1c00b302:	c398                	sw	a4,0(a5)
1c00b304:	c404                	sw	s1,8(s0)
1c00b306:	4501                	li	a0,0
1c00b308:	40b2                	lw	ra,12(sp)
1c00b30a:	4422                	lw	s0,8(sp)
1c00b30c:	4492                	lw	s1,4(sp)
1c00b30e:	4902                	lw	s2,0(sp)
1c00b310:	0141                	addi	sp,sp,16
1c00b312:	8082                	ret
1c00b314:	1a102737          	lui	a4,0x1a102
1c00b318:	1c470613          	addi	a2,a4,452 # 1a1021c4 <__l1_end+0xa102180>
1c00b31c:	4214                	lw	a3,0(a2)
1c00b31e:	1b870713          	addi	a4,a4,440
1c00b322:	03b6f693          	andi	a3,a3,59
1c00b326:	8fd5                	or	a5,a5,a3
1c00b328:	c21c                	sw	a5,0(a2)
1c00b32a:	431c                	lw	a5,0(a4)
1c00b32c:	6691                	lui	a3,0x4
1c00b32e:	fff68593          	addi	a1,a3,-1 # 3fff <__rt_stack_size+0x37ff>
1c00b332:	8fed                	and	a5,a5,a1
1c00b334:	f0068693          	addi	a3,a3,-256
1c00b338:	8ff5                	and	a5,a5,a3
1c00b33a:	c007c7b3          	p.bset	a5,a5,0,0
1c00b33e:	1007c7b3          	p.exths	a5,a5
1c00b342:	c31c                	sw	a5,0(a4)
1c00b344:	4214                	lw	a3,0(a2)
1c00b346:	0376f693          	andi	a3,a3,55
1c00b34a:	c214                	sw	a3,0(a2)
1c00b34c:	431c                	lw	a5,0(a4)
1c00b34e:	668d                	lui	a3,0x3
1c00b350:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00b354:	8fed                	and	a5,a5,a1
1c00b356:	8ff5                	and	a5,a5,a3
1c00b358:	c487c7b3          	p.bset	a5,a5,2,8
1c00b35c:	c31c                	sw	a5,0(a4)
1c00b35e:	b75d                	j	1c00b304 <pi_hyper_open+0x104>

1c00b360 <pi_hyper_close>:
1c00b360:	1c00e737          	lui	a4,0x1c00e
1c00b364:	21470713          	addi	a4,a4,532 # 1c00e214 <__rt_hyper_open_count>
1c00b368:	431c                	lw	a5,0(a4)
1c00b36a:	1141                	addi	sp,sp,-16
1c00b36c:	c422                	sw	s0,8(sp)
1c00b36e:	c606                	sw	ra,12(sp)
1c00b370:	17fd                	addi	a5,a5,-1
1c00b372:	c31c                	sw	a5,0(a4)
1c00b374:	4500                	lw	s0,8(a0)
1c00b376:	e7ad                	bnez	a5,1c00b3e0 <pi_hyper_close+0x80>
1c00b378:	404c                	lw	a1,4(s0)
1c00b37a:	47fd                	li	a5,31
1c00b37c:	00159693          	slli	a3,a1,0x1
1c00b380:	06d7dc63          	ble	a3,a5,1c00b3f8 <pi_hyper_close+0x98>
1c00b384:	fe068513          	addi	a0,a3,-32
1c00b388:	4611                	li	a2,4
1c00b38a:	1a1067b7          	lui	a5,0x1a106
1c00b38e:	20c7f803          	p.lw	a6,a2(a5)
1c00b392:	4705                	li	a4,1
1c00b394:	00a71733          	sll	a4,a4,a0
1c00b398:	01076733          	or	a4,a4,a6
1c00b39c:	00e7e623          	p.sw	a4,a2(a5)
1c00b3a0:	00168713          	addi	a4,a3,1
1c00b3a4:	47fd                	li	a5,31
1c00b3a6:	4621                	li	a2,8
1c00b3a8:	00e7d563          	ble	a4,a5,1c00b3b2 <pi_hyper_close+0x52>
1c00b3ac:	fe168713          	addi	a4,a3,-31
1c00b3b0:	4611                	li	a2,4
1c00b3b2:	1a1066b7          	lui	a3,0x1a106
1c00b3b6:	20c6f503          	p.lw	a0,a2(a3)
1c00b3ba:	4785                	li	a5,1
1c00b3bc:	00e79733          	sll	a4,a5,a4
1c00b3c0:	8f49                	or	a4,a4,a0
1c00b3c2:	00e6e623          	p.sw	a4,a2(a3)
1c00b3c6:	1a102737          	lui	a4,0x1a102
1c00b3ca:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00b3ce:	4314                	lw	a3,0(a4)
1c00b3d0:	00b797b3          	sll	a5,a5,a1
1c00b3d4:	fff7c793          	not	a5,a5
1c00b3d8:	8ff5                	and	a5,a5,a3
1c00b3da:	c31c                	sw	a5,0(a4)
1c00b3dc:	de9ff0ef          	jal	ra,1c00b1c4 <__pi_hyper_pin_reset_settings>
1c00b3e0:	445c                	lw	a5,12(s0)
1c00b3e2:	0017b463          	p.bneimm	a5,1,1c00b3ea <pi_hyper_close+0x8a>
1c00b3e6:	8522                	mv	a0,s0
1c00b3e8:	2bfd                	jal	1c00b9e6 <rt_extern_alloc_deinit>
1c00b3ea:	8522                	mv	a0,s0
1c00b3ec:	4422                	lw	s0,8(sp)
1c00b3ee:	40b2                	lw	ra,12(sp)
1c00b3f0:	45c1                	li	a1,16
1c00b3f2:	0141                	addi	sp,sp,16
1c00b3f4:	db9fe06f          	j	1c00a1ac <pi_l2_free>
1c00b3f8:	8536                	mv	a0,a3
1c00b3fa:	4621                	li	a2,8
1c00b3fc:	b779                	j	1c00b38a <pi_hyper_close+0x2a>

1c00b3fe <__pi_hyper_copy_aligned>:
1c00b3fe:	40155793          	srai	a5,a0,0x1
1c00b402:	1a102837          	lui	a6,0x1a102
1c00b406:	079e                	slli	a5,a5,0x7
1c00b408:	0512                	slli	a0,a0,0x4
1c00b40a:	97c2                	add	a5,a5,a6
1c00b40c:	8941                	andi	a0,a0,16
1c00b40e:	953e                	add	a0,a0,a5
1c00b410:	20000813          	li	a6,512
1c00b414:	30800793          	li	a5,776
1c00b418:	02d87c63          	bleu	a3,a6,1c00b450 <__pi_hyper_copy_aligned+0x52>
1c00b41c:	cbd4                	sw	a3,20(a5)
1c00b41e:	1c0006b7          	lui	a3,0x1c000
1c00b422:	56068693          	addi	a3,a3,1376 # 1c000560 <__rt_hyper_handle_burst>
1c00b426:	c394                	sw	a3,0(a5)
1c00b428:	c3c8                	sw	a0,4(a5)
1c00b42a:	c790                	sw	a2,8(a5)
1c00b42c:	c7cc                	sw	a1,12(a5)
1c00b42e:	0107a823          	sw	a6,16(a5) # 1a106010 <__l1_end+0xa105fcc>
1c00b432:	20000693          	li	a3,512
1c00b436:	cf98                	sw	a4,24(a5)
1c00b438:	1a1027b7          	lui	a5,0x1a102
1c00b43c:	1ac7a023          	sw	a2,416(a5) # 1a1021a0 <__l1_end+0xa10215c>
1c00b440:	00b52023          	sw	a1,0(a0)
1c00b444:	00d52223          	sw	a3,4(a0)
1c00b448:	47c1                	li	a5,16
1c00b44a:	00f52423          	sw	a5,8(a0)
1c00b44e:	8082                	ret
1c00b450:	0007a823          	sw	zero,16(a5)
1c00b454:	b7cd                	j	1c00b436 <__pi_hyper_copy_aligned+0x38>

1c00b456 <__pi_hyper_copy_exec>:
1c00b456:	30800813          	li	a6,776
1c00b45a:	00e82e23          	sw	a4,28(a6) # 1a10201c <__l1_end+0xa101fd8>
1c00b45e:	fa25b833          	p.bclr	a6,a1,29,2
1c00b462:	30800793          	li	a5,776
1c00b466:	02081463          	bnez	a6,1c00b48e <__pi_hyper_copy_exec+0x38>
1c00b46a:	fc163833          	p.bclr	a6,a2,30,1
1c00b46e:	02081063          	bnez	a6,1c00b48e <__pi_hyper_copy_exec+0x38>
1c00b472:	fa26b833          	p.bclr	a6,a3,29,2
1c00b476:	00080a63          	beqz	a6,1c00b48a <__pi_hyper_copy_exec+0x34>
1c00b47a:	fc153833          	p.bclr	a6,a0,30,1
1c00b47e:	00080863          	beqz	a6,1c00b48e <__pi_hyper_copy_exec+0x38>
1c00b482:	fc16b833          	p.bclr	a6,a3,30,1
1c00b486:	00081463          	bnez	a6,1c00b48e <__pi_hyper_copy_exec+0x38>
1c00b48a:	f75ff06f          	j	1c00b3fe <__pi_hyper_copy_aligned>
1c00b48e:	d388                	sw	a0,32(a5)
1c00b490:	853a                	mv	a0,a4
1c00b492:	d3d0                	sw	a2,36(a5)
1c00b494:	d78c                	sw	a1,40(a5)
1c00b496:	d7d4                	sw	a3,44(a5)
1c00b498:	02078823          	sb	zero,48(a5)
1c00b49c:	dbd8                	sw	a4,52(a5)
1c00b49e:	aa31                	j	1c00b5ba <__pi_hyper_copy_misaligned>

1c00b4a0 <__pi_hyper_copy>:
1c00b4a0:	1141                	addi	sp,sp,-16
1c00b4a2:	c606                	sw	ra,12(sp)
1c00b4a4:	c422                	sw	s0,8(sp)
1c00b4a6:	30047473          	csrrci	s0,mstatus,8
1c00b4aa:	c781                	beqz	a5,1c00b4b2 <__pi_hyper_copy+0x12>
1c00b4ac:	010007b7          	lui	a5,0x1000
1c00b4b0:	963e                	add	a2,a2,a5
1c00b4b2:	30800813          	li	a6,776
1c00b4b6:	01c82803          	lw	a6,28(a6)
1c00b4ba:	30800793          	li	a5,776
1c00b4be:	02080963          	beqz	a6,1c00b4f0 <__pi_hyper_copy+0x50>
1c00b4c2:	0387a803          	lw	a6,56(a5) # 1000038 <__L2+0xf80038>
1c00b4c6:	02080363          	beqz	a6,1c00b4ec <__pi_hyper_copy+0x4c>
1c00b4ca:	03c7a803          	lw	a6,60(a5)
1c00b4ce:	00e82e23          	sw	a4,28(a6)
1c00b4d2:	dfd8                	sw	a4,60(a5)
1c00b4d4:	00072e23          	sw	zero,28(a4)
1c00b4d8:	df08                	sw	a0,56(a4)
1c00b4da:	df4c                	sw	a1,60(a4)
1c00b4dc:	c330                	sw	a2,64(a4)
1c00b4de:	c374                	sw	a3,68(a4)
1c00b4e0:	30041073          	csrw	mstatus,s0
1c00b4e4:	40b2                	lw	ra,12(sp)
1c00b4e6:	4422                	lw	s0,8(sp)
1c00b4e8:	0141                	addi	sp,sp,16
1c00b4ea:	8082                	ret
1c00b4ec:	df98                	sw	a4,56(a5)
1c00b4ee:	b7d5                	j	1c00b4d2 <__pi_hyper_copy+0x32>
1c00b4f0:	f67ff0ef          	jal	ra,1c00b456 <__pi_hyper_copy_exec>
1c00b4f4:	b7f5                	j	1c00b4e0 <__pi_hyper_copy+0x40>

1c00b4f6 <pi_hyper_read_async>:
1c00b4f6:	451c                	lw	a5,8(a0)
1c00b4f8:	00070a23          	sb	zero,20(a4)
1c00b4fc:	8832                	mv	a6,a2
1c00b4fe:	43c8                	lw	a0,4(a5)
1c00b500:	479c                	lw	a5,8(a5)
1c00b502:	862e                	mv	a2,a1
1c00b504:	0506                	slli	a0,a0,0x1
1c00b506:	85c2                	mv	a1,a6
1c00b508:	f99ff06f          	j	1c00b4a0 <__pi_hyper_copy>

1c00b50c <pi_hyper_read>:
1c00b50c:	7175                	addi	sp,sp,-144
1c00b50e:	4785                	li	a5,1
1c00b510:	870a                	mv	a4,sp
1c00b512:	c706                	sw	ra,140(sp)
1c00b514:	cc3e                	sw	a5,24(sp)
1c00b516:	d43e                	sw	a5,40(sp)
1c00b518:	c202                	sw	zero,4(sp)
1c00b51a:	00010a23          	sb	zero,20(sp)
1c00b51e:	fd9ff0ef          	jal	ra,1c00b4f6 <pi_hyper_read_async>
1c00b522:	0848                	addi	a0,sp,20
1c00b524:	c43ff0ef          	jal	ra,1c00b166 <pi_task_wait_on.isra.4>
1c00b528:	40ba                	lw	ra,140(sp)
1c00b52a:	6149                	addi	sp,sp,144
1c00b52c:	8082                	ret

1c00b52e <pi_hyper_write_async>:
1c00b52e:	451c                	lw	a5,8(a0)
1c00b530:	00070a23          	sb	zero,20(a4)
1c00b534:	8832                	mv	a6,a2
1c00b536:	43c8                	lw	a0,4(a5)
1c00b538:	479c                	lw	a5,8(a5)
1c00b53a:	862e                	mv	a2,a1
1c00b53c:	0506                	slli	a0,a0,0x1
1c00b53e:	85c2                	mv	a1,a6
1c00b540:	0505                	addi	a0,a0,1
1c00b542:	f5fff06f          	j	1c00b4a0 <__pi_hyper_copy>

1c00b546 <pi_hyper_write>:
1c00b546:	7175                	addi	sp,sp,-144
1c00b548:	4785                	li	a5,1
1c00b54a:	870a                	mv	a4,sp
1c00b54c:	c706                	sw	ra,140(sp)
1c00b54e:	cc3e                	sw	a5,24(sp)
1c00b550:	d43e                	sw	a5,40(sp)
1c00b552:	c202                	sw	zero,4(sp)
1c00b554:	00010a23          	sb	zero,20(sp)
1c00b558:	fd7ff0ef          	jal	ra,1c00b52e <pi_hyper_write_async>
1c00b55c:	0848                	addi	a0,sp,20
1c00b55e:	c09ff0ef          	jal	ra,1c00b166 <pi_task_wait_on.isra.4>
1c00b562:	40ba                	lw	ra,140(sp)
1c00b564:	6149                	addi	sp,sp,144
1c00b566:	8082                	ret

1c00b568 <exec_pending_task>:
1c00b568:	30800793          	li	a5,776
1c00b56c:	5f98                	lw	a4,56(a5)
1c00b56e:	c729                	beqz	a4,1c00b5b8 <exec_pending_task+0x50>
1c00b570:	4f54                	lw	a3,28(a4)
1c00b572:	03872803          	lw	a6,56(a4)
1c00b576:	5f4c                	lw	a1,60(a4)
1c00b578:	df94                	sw	a3,56(a5)
1c00b57a:	ee883533          	p.bclr	a0,a6,23,8
1c00b57e:	ce881833          	p.extractu	a6,a6,7,8
1c00b582:	4330                	lw	a2,64(a4)
1c00b584:	4374                	lw	a3,68(a4)
1c00b586:	00081463          	bnez	a6,1c00b58e <exec_pending_task+0x26>
1c00b58a:	ecdff06f          	j	1c00b456 <__pi_hyper_copy_exec>
1c00b58e:	04c72803          	lw	a6,76(a4)
1c00b592:	04872883          	lw	a7,72(a4)
1c00b596:	d388                	sw	a0,32(a5)
1c00b598:	d3d0                	sw	a2,36(a5)
1c00b59a:	853a                	mv	a0,a4
1c00b59c:	0506d633          	p.minu	a2,a3,a6
1c00b5a0:	cfd8                	sw	a4,28(a5)
1c00b5a2:	d78c                	sw	a1,40(a5)
1c00b5a4:	d7d0                	sw	a2,44(a5)
1c00b5a6:	02078823          	sb	zero,48(a5)
1c00b5aa:	dbd8                	sw	a4,52(a5)
1c00b5ac:	c3b4                	sw	a3,64(a5)
1c00b5ae:	0507a223          	sw	a6,68(a5)
1c00b5b2:	0517a423          	sw	a7,72(a5)
1c00b5b6:	a011                	j	1c00b5ba <__pi_hyper_copy_misaligned>
1c00b5b8:	8082                	ret

1c00b5ba <__pi_hyper_copy_misaligned>:
1c00b5ba:	7179                	addi	sp,sp,-48
1c00b5bc:	d422                	sw	s0,40(sp)
1c00b5be:	30800793          	li	a5,776
1c00b5c2:	ce4e                	sw	s3,28(sp)
1c00b5c4:	89aa                	mv	s3,a0
1c00b5c6:	5388                	lw	a0,32(a5)
1c00b5c8:	d606                	sw	ra,44(sp)
1c00b5ca:	d226                	sw	s1,36(sp)
1c00b5cc:	d04a                	sw	s2,32(sp)
1c00b5ce:	cc52                	sw	s4,24(sp)
1c00b5d0:	ca56                	sw	s5,20(sp)
1c00b5d2:	c85a                	sw	s6,16(sp)
1c00b5d4:	c65e                	sw	s7,12(sp)
1c00b5d6:	c462                	sw	s8,8(sp)
1c00b5d8:	fc1537b3          	p.bclr	a5,a0,30,1
1c00b5dc:	30800413          	li	s0,776
1c00b5e0:	e7a1                	bnez	a5,1c00b628 <__pi_hyper_copy_misaligned+0x6e>
1c00b5e2:	1c00ec37          	lui	s8,0x1c00e
1c00b5e6:	054c0913          	addi	s2,s8,84 # 1c00e054 <__pi_hyper_temp_buffer>
1c00b5ea:	4a0d                	li	s4,3
1c00b5ec:	07c00a93          	li	s5,124
1c00b5f0:	00190b13          	addi	s6,s2,1
1c00b5f4:	5408                	lw	a0,40(s0)
1c00b5f6:	5444                	lw	s1,44(s0)
1c00b5f8:	5050                	lw	a2,36(s0)
1c00b5fa:	00350793          	addi	a5,a0,3
1c00b5fe:	c207b7b3          	p.bclr	a5,a5,1,0
1c00b602:	8f89                	sub	a5,a5,a0
1c00b604:	8bbe                	mv	s7,a5
1c00b606:	009a6363          	bltu	s4,s1,1c00b60c <__pi_hyper_copy_misaligned+0x52>
1c00b60a:	8ba6                	mv	s7,s1
1c00b60c:	1c0b8663          	beqz	s7,1c00b7d8 <__pi_hyper_copy_misaligned+0x21e>
1c00b610:	03044783          	lbu	a5,48(s0)
1c00b614:	16079f63          	bnez	a5,1c00b792 <__pi_hyper_copy_misaligned+0x1d8>
1c00b618:	4701                	li	a4,0
1c00b61a:	4691                	li	a3,4
1c00b61c:	c0063633          	p.bclr	a2,a2,0,0
1c00b620:	054c0593          	addi	a1,s8,84
1c00b624:	5008                	lw	a0,32(s0)
1c00b626:	a889                	j	1c00b678 <__pi_hyper_copy_misaligned+0xbe>
1c00b628:	540c                	lw	a1,40(s0)
1c00b62a:	04442883          	lw	a7,68(s0)
1c00b62e:	04842303          	lw	t1,72(s0)
1c00b632:	00358793          	addi	a5,a1,3
1c00b636:	5050                	lw	a2,36(s0)
1c00b638:	5454                	lw	a3,44(s0)
1c00b63a:	4038                	lw	a4,64(s0)
1c00b63c:	c207b7b3          	p.bclr	a5,a5,1,0
1c00b640:	8f8d                	sub	a5,a5,a1
1c00b642:	41130333          	sub	t1,t1,a7
1c00b646:	4801                	li	a6,0
1c00b648:	4e0d                	li	t3,3
1c00b64a:	84be                	mv	s1,a5
1c00b64c:	00de6363          	bltu	t3,a3,1c00b652 <__pi_hyper_copy_misaligned+0x98>
1c00b650:	84b6                	mv	s1,a3
1c00b652:	c4b5                	beqz	s1,1c00b6be <__pi_hyper_copy_misaligned+0x104>
1c00b654:	00080563          	beqz	a6,1c00b65e <__pi_hyper_copy_misaligned+0xa4>
1c00b658:	d050                	sw	a2,36(s0)
1c00b65a:	d454                	sw	a3,44(s0)
1c00b65c:	c038                	sw	a4,64(s0)
1c00b65e:	03044703          	lbu	a4,48(s0)
1c00b662:	1c00e937          	lui	s2,0x1c00e
1c00b666:	05490793          	addi	a5,s2,84 # 1c00e054 <__pi_hyper_temp_buffer>
1c00b66a:	ef09                	bnez	a4,1c00b684 <__pi_hyper_copy_misaligned+0xca>
1c00b66c:	4691                	li	a3,4
1c00b66e:	c0063633          	p.bclr	a2,a2,0,0
1c00b672:	05490593          	addi	a1,s2,84
1c00b676:	157d                	addi	a0,a0,-1
1c00b678:	d87ff0ef          	jal	ra,1c00b3fe <__pi_hyper_copy_aligned>
1c00b67c:	4785                	li	a5,1
1c00b67e:	02f40823          	sb	a5,48(s0)
1c00b682:	aa3d                	j	1c00b7c0 <__pi_hyper_copy_misaligned+0x206>
1c00b684:	fc163533          	p.bclr	a0,a2,30,1
1c00b688:	953e                	add	a0,a0,a5
1c00b68a:	8626                	mv	a2,s1
1c00b68c:	02040823          	sb	zero,48(s0)
1c00b690:	a9fff0ef          	jal	ra,1c00b12e <l2_memcpy>
1c00b694:	5050                	lw	a2,36(s0)
1c00b696:	5008                	lw	a0,32(s0)
1c00b698:	4701                	li	a4,0
1c00b69a:	4691                	li	a3,4
1c00b69c:	c0063633          	p.bclr	a2,a2,0,0
1c00b6a0:	05490593          	addi	a1,s2,84
1c00b6a4:	d5bff0ef          	jal	ra,1c00b3fe <__pi_hyper_copy_aligned>
1c00b6a8:	505c                	lw	a5,36(s0)
1c00b6aa:	97a6                	add	a5,a5,s1
1c00b6ac:	d05c                	sw	a5,36(s0)
1c00b6ae:	541c                	lw	a5,40(s0)
1c00b6b0:	97a6                	add	a5,a5,s1
1c00b6b2:	d41c                	sw	a5,40(s0)
1c00b6b4:	545c                	lw	a5,44(s0)
1c00b6b6:	409784b3          	sub	s1,a5,s1
1c00b6ba:	d444                	sw	s1,44(s0)
1c00b6bc:	a211                	j	1c00b7c0 <__pi_hyper_copy_misaligned+0x206>
1c00b6be:	c2d1                	beqz	a3,1c00b742 <__pi_hyper_copy_misaligned+0x188>
1c00b6c0:	00080563          	beqz	a6,1c00b6ca <__pi_hyper_copy_misaligned+0x110>
1c00b6c4:	d050                	sw	a2,36(s0)
1c00b6c6:	d454                	sw	a3,44(s0)
1c00b6c8:	c038                	sw	a4,64(s0)
1c00b6ca:	97b2                	add	a5,a5,a2
1c00b6cc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b6d0:	c206b4b3          	p.bclr	s1,a3,1,0
1c00b6d4:	ef89                	bnez	a5,1c00b6ee <__pi_hyper_copy_misaligned+0x134>
1c00b6d6:	4701                	li	a4,0
1c00b6d8:	86a6                	mv	a3,s1
1c00b6da:	d25ff0ef          	jal	ra,1c00b3fe <__pi_hyper_copy_aligned>
1c00b6de:	505c                	lw	a5,36(s0)
1c00b6e0:	5454                	lw	a3,44(s0)
1c00b6e2:	97a6                	add	a5,a5,s1
1c00b6e4:	d05c                	sw	a5,36(s0)
1c00b6e6:	541c                	lw	a5,40(s0)
1c00b6e8:	97a6                	add	a5,a5,s1
1c00b6ea:	d41c                	sw	a5,40(s0)
1c00b6ec:	a881                	j	1c00b73c <__pi_hyper_copy_misaligned+0x182>
1c00b6ee:	03044703          	lbu	a4,48(s0)
1c00b6f2:	1c00e937          	lui	s2,0x1c00e
1c00b6f6:	05490793          	addi	a5,s2,84 # 1c00e054 <__pi_hyper_temp_buffer>
1c00b6fa:	db2d                	beqz	a4,1c00b66c <__pi_hyper_copy_misaligned+0xb2>
1c00b6fc:	07c00693          	li	a3,124
1c00b700:	04d4d4b3          	p.minu	s1,s1,a3
1c00b704:	00178513          	addi	a0,a5,1
1c00b708:	fff48613          	addi	a2,s1,-1
1c00b70c:	02040823          	sb	zero,48(s0)
1c00b710:	a1fff0ef          	jal	ra,1c00b12e <l2_memcpy>
1c00b714:	5050                	lw	a2,36(s0)
1c00b716:	5008                	lw	a0,32(s0)
1c00b718:	86a6                	mv	a3,s1
1c00b71a:	4701                	li	a4,0
1c00b71c:	c0063633          	p.bclr	a2,a2,0,0
1c00b720:	05490593          	addi	a1,s2,84
1c00b724:	cdbff0ef          	jal	ra,1c00b3fe <__pi_hyper_copy_aligned>
1c00b728:	505c                	lw	a5,36(s0)
1c00b72a:	5454                	lw	a3,44(s0)
1c00b72c:	17fd                	addi	a5,a5,-1
1c00b72e:	97a6                	add	a5,a5,s1
1c00b730:	d05c                	sw	a5,36(s0)
1c00b732:	541c                	lw	a5,40(s0)
1c00b734:	0685                	addi	a3,a3,1
1c00b736:	17fd                	addi	a5,a5,-1
1c00b738:	97a6                	add	a5,a5,s1
1c00b73a:	d41c                	sw	a5,40(s0)
1c00b73c:	409684b3          	sub	s1,a3,s1
1c00b740:	bfad                	j	1c00b6ba <__pi_hyper_copy_misaligned+0x100>
1c00b742:	e719                	bnez	a4,1c00b750 <__pi_hyper_copy_misaligned+0x196>
1c00b744:	00080c63          	beqz	a6,1c00b75c <__pi_hyper_copy_misaligned+0x1a2>
1c00b748:	d050                	sw	a2,36(s0)
1c00b74a:	02042623          	sw	zero,44(s0)
1c00b74e:	a029                	j	1c00b758 <__pi_hyper_copy_misaligned+0x19e>
1c00b750:	02e8ea63          	bltu	a7,a4,1c00b784 <__pi_hyper_copy_misaligned+0x1ca>
1c00b754:	fe081ae3          	bnez	a6,1c00b748 <__pi_hyper_copy_misaligned+0x18e>
1c00b758:	04042023          	sw	zero,64(s0)
1c00b75c:	854e                	mv	a0,s3
1c00b75e:	02042a23          	sw	zero,52(s0)
1c00b762:	00042e23          	sw	zero,28(s0)
1c00b766:	9ddff0ef          	jal	ra,1c00b142 <rt_event_enqueue>
1c00b76a:	5422                	lw	s0,40(sp)
1c00b76c:	50b2                	lw	ra,44(sp)
1c00b76e:	5492                	lw	s1,36(sp)
1c00b770:	5902                	lw	s2,32(sp)
1c00b772:	49f2                	lw	s3,28(sp)
1c00b774:	4a62                	lw	s4,24(sp)
1c00b776:	4ad2                	lw	s5,20(sp)
1c00b778:	4b42                	lw	s6,16(sp)
1c00b77a:	4bb2                	lw	s7,12(sp)
1c00b77c:	4c22                	lw	s8,8(sp)
1c00b77e:	6145                	addi	sp,sp,48
1c00b780:	de9ff06f          	j	1c00b568 <exec_pending_task>
1c00b784:	41170733          	sub	a4,a4,a7
1c00b788:	961a                	add	a2,a2,t1
1c00b78a:	4805                	li	a6,1
1c00b78c:	04e8d6b3          	p.minu	a3,a7,a4
1c00b790:	bd6d                	j	1c00b64a <__pi_hyper_copy_misaligned+0x90>
1c00b792:	fc1635b3          	p.bclr	a1,a2,30,1
1c00b796:	95ca                	add	a1,a1,s2
1c00b798:	865e                	mv	a2,s7
1c00b79a:	02040823          	sb	zero,48(s0)
1c00b79e:	991ff0ef          	jal	ra,1c00b12e <l2_memcpy>
1c00b7a2:	505c                	lw	a5,36(s0)
1c00b7a4:	97de                	add	a5,a5,s7
1c00b7a6:	d05c                	sw	a5,36(s0)
1c00b7a8:	541c                	lw	a5,40(s0)
1c00b7aa:	97de                	add	a5,a5,s7
1c00b7ac:	d41c                	sw	a5,40(s0)
1c00b7ae:	545c                	lw	a5,44(s0)
1c00b7b0:	41778bb3          	sub	s7,a5,s7
1c00b7b4:	03742623          	sw	s7,44(s0)
1c00b7b8:	e20b9ee3          	bnez	s7,1c00b5f4 <__pi_hyper_copy_misaligned+0x3a>
1c00b7bc:	545c                	lw	a5,44(s0)
1c00b7be:	c7a5                	beqz	a5,1c00b826 <__pi_hyper_copy_misaligned+0x26c>
1c00b7c0:	50b2                	lw	ra,44(sp)
1c00b7c2:	5422                	lw	s0,40(sp)
1c00b7c4:	5492                	lw	s1,36(sp)
1c00b7c6:	5902                	lw	s2,32(sp)
1c00b7c8:	49f2                	lw	s3,28(sp)
1c00b7ca:	4a62                	lw	s4,24(sp)
1c00b7cc:	4ad2                	lw	s5,20(sp)
1c00b7ce:	4b42                	lw	s6,16(sp)
1c00b7d0:	4bb2                	lw	s7,12(sp)
1c00b7d2:	4c22                	lw	s8,8(sp)
1c00b7d4:	6145                	addi	sp,sp,48
1c00b7d6:	8082                	ret
1c00b7d8:	d0f5                	beqz	s1,1c00b7bc <__pi_hyper_copy_misaligned+0x202>
1c00b7da:	97b2                	add	a5,a5,a2
1c00b7dc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b7e0:	c204b4b3          	p.bclr	s1,s1,1,0
1c00b7e4:	e791                	bnez	a5,1c00b7f0 <__pi_hyper_copy_misaligned+0x236>
1c00b7e6:	85aa                	mv	a1,a0
1c00b7e8:	4701                	li	a4,0
1c00b7ea:	86a6                	mv	a3,s1
1c00b7ec:	5008                	lw	a0,32(s0)
1c00b7ee:	b5f5                	j	1c00b6da <__pi_hyper_copy_misaligned+0x120>
1c00b7f0:	03044783          	lbu	a5,48(s0)
1c00b7f4:	0554d4b3          	p.minu	s1,s1,s5
1c00b7f8:	e789                	bnez	a5,1c00b802 <__pi_hyper_copy_misaligned+0x248>
1c00b7fa:	4701                	li	a4,0
1c00b7fc:	00448693          	addi	a3,s1,4
1c00b800:	bd31                	j	1c00b61c <__pi_hyper_copy_misaligned+0x62>
1c00b802:	8626                	mv	a2,s1
1c00b804:	85da                	mv	a1,s6
1c00b806:	02040823          	sb	zero,48(s0)
1c00b80a:	925ff0ef          	jal	ra,1c00b12e <l2_memcpy>
1c00b80e:	505c                	lw	a5,36(s0)
1c00b810:	5454                	lw	a3,44(s0)
1c00b812:	97a6                	add	a5,a5,s1
1c00b814:	d05c                	sw	a5,36(s0)
1c00b816:	541c                	lw	a5,40(s0)
1c00b818:	97a6                	add	a5,a5,s1
1c00b81a:	409684b3          	sub	s1,a3,s1
1c00b81e:	d41c                	sw	a5,40(s0)
1c00b820:	d444                	sw	s1,44(s0)
1c00b822:	dcc9                	beqz	s1,1c00b7bc <__pi_hyper_copy_misaligned+0x202>
1c00b824:	bbc1                	j	1c00b5f4 <__pi_hyper_copy_misaligned+0x3a>
1c00b826:	4038                	lw	a4,64(s0)
1c00b828:	db15                	beqz	a4,1c00b75c <__pi_hyper_copy_misaligned+0x1a2>
1c00b82a:	407c                	lw	a5,68(s0)
1c00b82c:	00e7ff63          	bleu	a4,a5,1c00b84a <__pi_hyper_copy_misaligned+0x290>
1c00b830:	8f1d                	sub	a4,a4,a5
1c00b832:	c038                	sw	a4,64(s0)
1c00b834:	4034                	lw	a3,64(s0)
1c00b836:	d29d                	beqz	a3,1c00b75c <__pi_hyper_copy_misaligned+0x1a2>
1c00b838:	5058                	lw	a4,36(s0)
1c00b83a:	4430                	lw	a2,72(s0)
1c00b83c:	9732                	add	a4,a4,a2
1c00b83e:	8f1d                	sub	a4,a4,a5
1c00b840:	04d7d7b3          	p.minu	a5,a5,a3
1c00b844:	d058                	sw	a4,36(s0)
1c00b846:	d45c                	sw	a5,44(s0)
1c00b848:	b375                	j	1c00b5f4 <__pi_hyper_copy_misaligned+0x3a>
1c00b84a:	04042023          	sw	zero,64(s0)
1c00b84e:	b7dd                	j	1c00b834 <__pi_hyper_copy_misaligned+0x27a>

1c00b850 <__pi_hyper_copy_2d>:
1c00b850:	1141                	addi	sp,sp,-16
1c00b852:	c606                	sw	ra,12(sp)
1c00b854:	c422                	sw	s0,8(sp)
1c00b856:	30047473          	csrrci	s0,mstatus,8
1c00b85a:	00088563          	beqz	a7,1c00b864 <__pi_hyper_copy_2d+0x14>
1c00b85e:	010008b7          	lui	a7,0x1000
1c00b862:	9646                	add	a2,a2,a7
1c00b864:	30800893          	li	a7,776
1c00b868:	01c8ae03          	lw	t3,28(a7) # 100001c <__L2+0xf8001c>
1c00b86c:	30800313          	li	t1,776
1c00b870:	040e0563          	beqz	t3,1c00b8ba <__pi_hyper_copy_2d+0x6a>
1c00b874:	03832883          	lw	a7,56(t1) # 80000038 <pulp__FC+0x80000039>
1c00b878:	02088e63          	beqz	a7,1c00b8b4 <__pi_hyper_copy_2d+0x64>
1c00b87c:	03c32883          	lw	a7,60(t1)
1c00b880:	0108ae23          	sw	a6,28(a7)
1c00b884:	c0854533          	p.bset	a0,a0,0,8
1c00b888:	03032e23          	sw	a6,60(t1)
1c00b88c:	00082e23          	sw	zero,28(a6)
1c00b890:	02a82c23          	sw	a0,56(a6)
1c00b894:	02b82e23          	sw	a1,60(a6)
1c00b898:	04c82023          	sw	a2,64(a6)
1c00b89c:	04d82223          	sw	a3,68(a6)
1c00b8a0:	04e82423          	sw	a4,72(a6)
1c00b8a4:	04f82623          	sw	a5,76(a6)
1c00b8a8:	30041073          	csrw	mstatus,s0
1c00b8ac:	40b2                	lw	ra,12(sp)
1c00b8ae:	4422                	lw	s0,8(sp)
1c00b8b0:	0141                	addi	sp,sp,16
1c00b8b2:	8082                	ret
1c00b8b4:	03032c23          	sw	a6,56(t1)
1c00b8b8:	b7f1                	j	1c00b884 <__pi_hyper_copy_2d+0x34>
1c00b8ba:	02a8a023          	sw	a0,32(a7)
1c00b8be:	02c8a223          	sw	a2,36(a7)
1c00b8c2:	8542                	mv	a0,a6
1c00b8c4:	04f6d633          	p.minu	a2,a3,a5
1c00b8c8:	0108ae23          	sw	a6,28(a7)
1c00b8cc:	02b8a423          	sw	a1,40(a7)
1c00b8d0:	02c8a623          	sw	a2,44(a7)
1c00b8d4:	02088823          	sb	zero,48(a7)
1c00b8d8:	0308aa23          	sw	a6,52(a7)
1c00b8dc:	04d8a023          	sw	a3,64(a7)
1c00b8e0:	04f8a223          	sw	a5,68(a7)
1c00b8e4:	04e8a423          	sw	a4,72(a7)
1c00b8e8:	cd3ff0ef          	jal	ra,1c00b5ba <__pi_hyper_copy_misaligned>
1c00b8ec:	bf75                	j	1c00b8a8 <__pi_hyper_copy_2d+0x58>

1c00b8ee <pi_hyper_read_2d_async>:
1c00b8ee:	8332                	mv	t1,a2
1c00b8f0:	4510                	lw	a2,8(a0)
1c00b8f2:	00080a23          	sb	zero,20(a6)
1c00b8f6:	4248                	lw	a0,4(a2)
1c00b8f8:	00862883          	lw	a7,8(a2)
1c00b8fc:	862e                	mv	a2,a1
1c00b8fe:	0506                	slli	a0,a0,0x1
1c00b900:	859a                	mv	a1,t1
1c00b902:	f4fff06f          	j	1c00b850 <__pi_hyper_copy_2d>

1c00b906 <pi_hyper_write_2d_async>:
1c00b906:	8332                	mv	t1,a2
1c00b908:	4510                	lw	a2,8(a0)
1c00b90a:	00080a23          	sb	zero,20(a6)
1c00b90e:	4248                	lw	a0,4(a2)
1c00b910:	00862883          	lw	a7,8(a2)
1c00b914:	862e                	mv	a2,a1
1c00b916:	0506                	slli	a0,a0,0x1
1c00b918:	859a                	mv	a1,t1
1c00b91a:	0505                	addi	a0,a0,1
1c00b91c:	f35ff06f          	j	1c00b850 <__pi_hyper_copy_2d>

1c00b920 <__rt_hyper_resume_emu_task>:
  __pi_hyper_copy_misaligned(__rt_hyper_pending_emu_task);
1c00b920:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
1c00b924:	c97ff06f          	j	1c00b5ba <__pi_hyper_copy_misaligned>

1c00b928 <__rt_hyper_resume_copy>:
  exec_pending_task();
1c00b928:	c41ff06f          	j	1c00b568 <exec_pending_task>

1c00b92c <__rt_hyper_init>:
  __pi_hyper_cluster_reqs_first = NULL;
1c00b92c:	1c00e737          	lui	a4,0x1c00e
  __rt_hyper_end_task = NULL;
1c00b930:	30800793          	li	a5,776
  __pi_hyper_cluster_reqs_first = NULL;
1c00b934:	20072823          	sw	zero,528(a4) # 1c00e210 <__pi_hyper_cluster_reqs_first>
  __rt_hyper_pending_emu_channel = -1;
1c00b938:	577d                	li	a4,-1
1c00b93a:	d398                	sw	a4,32(a5)
  __rt_hyper_open_count = 0;
1c00b93c:	1c00e737          	lui	a4,0x1c00e
  __rt_hyper_end_task = NULL;
1c00b940:	0007ac23          	sw	zero,24(a5)
  __rt_hyper_current_task = NULL;
1c00b944:	0007ae23          	sw	zero,28(a5)
  __rt_hyper_pending_tasks = NULL;
1c00b948:	0207ac23          	sw	zero,56(a5)
  __rt_hyper_open_count = 0;
1c00b94c:	20072a23          	sw	zero,532(a4) # 1c00e214 <__rt_hyper_open_count>
  __rt_hyper_pending_emu_size = 0;
1c00b950:	0207a623          	sw	zero,44(a5)
  __rt_hyper_pending_emu_size_2d = 0;
1c00b954:	0407a023          	sw	zero,64(a5)
}
1c00b958:	8082                	ret

1c00b95a <rt_padframe_set>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b95a:	300476f3          	csrrci	a3,mstatus,8

void rt_padframe_set(rt_padframe_profile_t *profile)
{
  int irq = rt_irq_disable();

  unsigned int *config = profile->config;
1c00b95e:	4158                	lw	a4,4(a0)
1c00b960:	1a1047b7          	lui	a5,0x1a104
1c00b964:	14078613          	addi	a2,a5,320 # 1a104140 <__l1_end+0xa1040fc>

  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, config[i]);
1c00b968:	430c                	lw	a1,0(a4)
1c00b96a:	c20c                	sw	a1,0(a2)
1c00b96c:	434c                	lw	a1,4(a4)
1c00b96e:	14478613          	addi	a2,a5,324
1c00b972:	14878793          	addi	a5,a5,328
1c00b976:	c20c                	sw	a1,0(a2)
1c00b978:	4718                	lw	a4,8(a4)
1c00b97a:	c398                	sw	a4,0(a5)
  __builtin_pulp_spr_write(reg, val);
1c00b97c:	30069073          	csrw	mstatus,a3
  }

  rt_irq_restore(irq);
}
1c00b980:	8082                	ret

1c00b982 <__rt_padframe_init>:
  rt_padframe_set(&__rt_padframe_profiles[0]);
1c00b982:	1c00e537          	lui	a0,0x1c00e
1c00b986:	db450513          	addi	a0,a0,-588 # 1c00ddb4 <__rt_padframe_profiles>
1c00b98a:	fd1ff06f          	j	1c00b95a <rt_padframe_set>

1c00b98e <rt_extern_alloc_init>:
  }
  printf("=============================================\n");
}

int rt_extern_alloc_init(rt_extern_alloc_t *a, void *addr, int size)
{
1c00b98e:	1101                	addi	sp,sp,-32
1c00b990:	c84a                	sw	s2,16(sp)
1c00b992:	ce06                	sw	ra,28(sp)
1c00b994:	cc22                	sw	s0,24(sp)
1c00b996:	ca26                	sw	s1,20(sp)
1c00b998:	892a                	mv	s2,a0
  if (size)
1c00b99a:	c229                	beqz	a2,1c00b9dc <rt_extern_alloc_init+0x4e>
  {
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00b99c:	00758493          	addi	s1,a1,7
1c00b9a0:	842e                	mv	s0,a1
  return (rt_alloc_chunk_extern_t *)rt_alloc(RT_ALLOC_FC_DATA, sizeof(rt_alloc_chunk_extern_t));
1c00b9a2:	4505                	li	a0,1
1c00b9a4:	45b1                	li	a1,12
1c00b9a6:	c632                	sw	a2,12(sp)
1c00b9a8:	ec6fe0ef          	jal	ra,1c00a06e <rt_alloc>
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00b9ac:	c404b4b3          	p.bclr	s1,s1,2,0
    rt_alloc_chunk_extern_t *chunk = __rt_alloc_chunk();
    if (chunk == NULL) return -1;
1c00b9b0:	4632                	lw	a2,12(sp)
1c00b9b2:	c905                	beqz	a0,1c00b9e2 <rt_extern_alloc_init+0x54>
    size = size - (start_addr - (unsigned int)addr);
1c00b9b4:	9432                	add	s0,s0,a2
1c00b9b6:	8c05                	sub	s0,s0,s1
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c00b9b8:	4601                	li	a2,0
    if (size > 0) {
1c00b9ba:	00805a63          	blez	s0,1c00b9ce <rt_extern_alloc_init+0x40>
      a->first_free = chunk;
1c00b9be:	00a92023          	sw	a0,0(s2)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c00b9c2:	c4043433          	p.bclr	s0,s0,2,0
1c00b9c6:	c100                	sw	s0,0(a0)
      chunk->next = NULL;
1c00b9c8:	00052223          	sw	zero,4(a0)
      chunk->addr = start_addr;
1c00b9cc:	c504                	sw	s1,8(a0)
}
1c00b9ce:	40f2                	lw	ra,28(sp)
1c00b9d0:	4462                	lw	s0,24(sp)
1c00b9d2:	44d2                	lw	s1,20(sp)
1c00b9d4:	4942                	lw	s2,16(sp)
1c00b9d6:	8532                	mv	a0,a2
1c00b9d8:	6105                	addi	sp,sp,32
1c00b9da:	8082                	ret
    a->first_free = NULL;
1c00b9dc:	00052023          	sw	zero,0(a0)
1c00b9e0:	b7fd                	j	1c00b9ce <rt_extern_alloc_init+0x40>
    if (chunk == NULL) return -1;
1c00b9e2:	567d                	li	a2,-1
1c00b9e4:	b7ed                	j	1c00b9ce <rt_extern_alloc_init+0x40>

1c00b9e6 <rt_extern_alloc_deinit>:
  rt_free(RT_ALLOC_FC_DATA, (void *)pt, sizeof(rt_alloc_chunk_extern_t));
1c00b9e6:	410c                	lw	a1,0(a0)
1c00b9e8:	4631                	li	a2,12
1c00b9ea:	4505                	li	a0,1
1c00b9ec:	eb2fe06f          	j	1c00a09e <rt_free>

1c00b9f0 <__pi_gpio_handler>:
  }
}


void __pi_gpio_handler(void *arg)
{
1c00b9f0:	1141                	addi	sp,sp,-16
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTTYPE(id));
}

static inline unsigned int hal_gpio_intstatus_get()
{
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTSTATUS);
1c00b9f2:	1a1017b7          	lui	a5,0x1a101
  (void) arg;

  /* Retrieve IRQ status from GPIO. Handle task if needed. */
  pi_gpio_t *gpio = &__rt_gpio[0];
  gpio->irq_status = hal_gpio_intstatus_get();
1c00b9f6:	1c00e6b7          	lui	a3,0x1c00e
{
1c00b9fa:	c422                	sw	s0,8(sp)
1c00b9fc:	4f80                	lw	s0,24(a5)
  gpio->irq_status = hal_gpio_intstatus_get();
1c00b9fe:	0d468793          	addi	a5,a3,212 # 1c00e0d4 <__rt_gpio>
{
1c00ba02:	c226                	sw	s1,4(sp)

  if (gpio->cb != NULL)
1c00ba04:	4bc4                	lw	s1,20(a5)
{
1c00ba06:	c606                	sw	ra,12(sp)
  gpio->irq_status = hal_gpio_intstatus_get();
1c00ba08:	c780                	sw	s0,8(a5)
  if (gpio->cb != NULL)
1c00ba0a:	cc91                	beqz	s1,1c00ba26 <__pi_gpio_handler+0x36>
    if (irq_mask & tmp_cb->pin_mask)
1c00ba0c:	409c                	lw	a5,0(s1)
1c00ba0e:	8fe1                	and	a5,a5,s0
1c00ba10:	c781                	beqz	a5,1c00ba18 <__pi_gpio_handler+0x28>
      tmp_cb->handler(tmp_cb->args);
1c00ba12:	40dc                	lw	a5,4(s1)
1c00ba14:	4488                	lw	a0,8(s1)
1c00ba16:	9782                	jalr	a5
    tmp_cb = tmp_cb->next;
1c00ba18:	44c4                	lw	s1,12(s1)
  while (tmp_cb != NULL)
1c00ba1a:	f8ed                	bnez	s1,1c00ba0c <__pi_gpio_handler+0x1c>
      }
      irq_mask = irq_mask >> 1;
      pin++;
    }
  }
}
1c00ba1c:	40b2                	lw	ra,12(sp)
1c00ba1e:	4422                	lw	s0,8(sp)
1c00ba20:	4492                	lw	s1,4(sp)
1c00ba22:	0141                	addi	sp,sp,16
1c00ba24:	8082                	ret
1c00ba26:	0d468693          	addi	a3,a3,212
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c00ba2a:	46dc                	lw	a5,12(a3)
    uint8_t pin = 0;
1c00ba2c:	4701                	li	a4,0
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c00ba2e:	8fe1                	and	a5,a5,s0
1c00ba30:	01c00513          	li	a0,28
    while (irq_mask)
1c00ba34:	d7e5                	beqz	a5,1c00ba1c <__pi_gpio_handler+0x2c>
      if (irq_mask & 0x1)
1c00ba36:	fc17b633          	p.bclr	a2,a5,30,1
1c00ba3a:	c615                	beqz	a2,1c00ba66 <__pi_gpio_handler+0x76>
        task = gpio->event_task[pin];
1c00ba3c:	00470613          	addi	a2,a4,4
1c00ba40:	060a                	slli	a2,a2,0x2
1c00ba42:	9636                	add	a2,a2,a3
1c00ba44:	4610                	lw	a2,8(a2)
        if (task != NULL)
1c00ba46:	c205                	beqz	a2,1c00ba66 <__pi_gpio_handler+0x76>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ba48:	30047873          	csrrci	a6,mstatus,8
  if (sched->first) {
1c00ba4c:	01c02883          	lw	a7,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00ba50:	00062023          	sw	zero,0(a2)
  if (sched->first) {
1c00ba54:	00088e63          	beqz	a7,1c00ba70 <__pi_gpio_handler+0x80>
    sched->last->next = event;
1c00ba58:	00452883          	lw	a7,4(a0)
1c00ba5c:	00c8a023          	sw	a2,0(a7)
  sched->last = event;
1c00ba60:	c150                	sw	a2,4(a0)
  __builtin_pulp_spr_write(reg, val);
1c00ba62:	30081073          	csrw	mstatus,a6
      pin++;
1c00ba66:	0705                	addi	a4,a4,1
      irq_mask = irq_mask >> 1;
1c00ba68:	8385                	srli	a5,a5,0x1
      pin++;
1c00ba6a:	0ff77713          	andi	a4,a4,255
1c00ba6e:	b7d9                	j	1c00ba34 <__pi_gpio_handler+0x44>
    sched->first = event;
1c00ba70:	00c02e23          	sw	a2,28(zero) # 1c <__rt_sched>
1c00ba74:	b7f5                	j	1c00ba60 <__pi_gpio_handler+0x70>

1c00ba76 <__rt_i2s_resume>:
  conf->pdm = 1;
  conf->dual = 0;
  conf->width = 16;
  conf->id = -1;
  conf->flags = 0;
}
1c00ba76:	1c00e7b7          	lui	a5,0x1c00e
1c00ba7a:	4d18                	lw	a4,24(a0)
1c00ba7c:	25c7a783          	lw	a5,604(a5) # 1c00e25c <__rt_freq_domains>
1c00ba80:	068416b7          	lui	a3,0x6841
1c00ba84:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00ba88:	02e7c7b3          	div	a5,a5,a4
1c00ba8c:	02954703          	lbu	a4,41(a0)
1c00ba90:	177d                	addi	a4,a4,-1
1c00ba92:	c0874733          	p.bset	a4,a4,0,8
1c00ba96:	17fd                	addi	a5,a5,-1
1c00ba98:	8785                	srai	a5,a5,0x1
1c00ba9a:	07c2                	slli	a5,a5,0x10
1c00ba9c:	8fd9                	or	a5,a5,a4
1c00ba9e:	02554703          	lbu	a4,37(a0)
1c00baa2:	9736                	add	a4,a4,a3
1c00baa4:	070a                	slli	a4,a4,0x2
1c00baa6:	c31c                	sw	a5,0(a4)
1c00baa8:	8082                	ret

1c00baaa <__rt_i2s_setfreq_after>:
1c00baaa:	1141                	addi	sp,sp,-16
1c00baac:	1c00e7b7          	lui	a5,0x1c00e
1c00bab0:	c422                	sw	s0,8(sp)
1c00bab2:	2187a403          	lw	s0,536(a5) # 1c00e218 <__rt_i2s_first>
1c00bab6:	c606                	sw	ra,12(sp)
1c00bab8:	e411                	bnez	s0,1c00bac4 <__rt_i2s_setfreq_after+0x1a>
1c00baba:	40b2                	lw	ra,12(sp)
1c00babc:	4422                	lw	s0,8(sp)
1c00babe:	4501                	li	a0,0
1c00bac0:	0141                	addi	sp,sp,16
1c00bac2:	8082                	ret
1c00bac4:	02844783          	lbu	a5,40(s0)
1c00bac8:	c781                	beqz	a5,1c00bad0 <__rt_i2s_setfreq_after+0x26>
1c00baca:	8522                	mv	a0,s0
1c00bacc:	fabff0ef          	jal	ra,1c00ba76 <__rt_i2s_resume>
1c00bad0:	4c40                	lw	s0,28(s0)
1c00bad2:	b7dd                	j	1c00bab8 <__rt_i2s_setfreq_after+0xe>

1c00bad4 <__rt_i2s_setfreq_before>:
1c00bad4:	1c00e7b7          	lui	a5,0x1c00e
1c00bad8:	2187a783          	lw	a5,536(a5) # 1c00e218 <__rt_i2s_first>
1c00badc:	068416b7          	lui	a3,0x6841
1c00bae0:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00bae4:	e399                	bnez	a5,1c00baea <__rt_i2s_setfreq_before+0x16>
1c00bae6:	4501                	li	a0,0
1c00bae8:	8082                	ret
1c00baea:	0287c703          	lbu	a4,40(a5)
1c00baee:	c719                	beqz	a4,1c00bafc <__rt_i2s_setfreq_before+0x28>
1c00baf0:	0257c703          	lbu	a4,37(a5)
1c00baf4:	9736                	add	a4,a4,a3
1c00baf6:	070a                	slli	a4,a4,0x2
1c00baf8:	00072023          	sw	zero,0(a4)
1c00bafc:	4fdc                	lw	a5,28(a5)
1c00bafe:	b7dd                	j	1c00bae4 <__rt_i2s_setfreq_before+0x10>

1c00bb00 <__rt_i2s_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that the I2S channels are stopped and resumed
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00bb00:	1c00c5b7          	lui	a1,0x1c00c
{
1c00bb04:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00bb06:	4601                	li	a2,0
1c00bb08:	ad458593          	addi	a1,a1,-1324 # 1c00bad4 <__rt_i2s_setfreq_before>
1c00bb0c:	4511                	li	a0,4
{
1c00bb0e:	c606                	sw	ra,12(sp)
1c00bb10:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00bb12:	ed1fd0ef          	jal	ra,1c0099e2 <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00bb16:	1c00c5b7          	lui	a1,0x1c00c
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00bb1a:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00bb1c:	4601                	li	a2,0
1c00bb1e:	aaa58593          	addi	a1,a1,-1366 # 1c00baaa <__rt_i2s_setfreq_after>
1c00bb22:	4515                	li	a0,5
1c00bb24:	ebffd0ef          	jal	ra,1c0099e2 <__rt_cbsys_add>
1c00bb28:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize i2s driver\n");
1c00bb2a:	c10d                	beqz	a0,1c00bb4c <__rt_i2s_init+0x4c>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bb2c:	01402673          	csrr	a2,uhartid
1c00bb30:	1c00e537          	lui	a0,0x1c00e
  return (hart_id >> 5) & 0x3f;
1c00bb34:	40565593          	srai	a1,a2,0x5
1c00bb38:	f265b5b3          	p.bclr	a1,a1,25,6
1c00bb3c:	f4563633          	p.bclr	a2,a2,26,5
1c00bb40:	bb450513          	addi	a0,a0,-1100 # 1c00dbb4 <__hyper_pad+0x50>
1c00bb44:	798000ef          	jal	ra,1c00c2dc <printf>
1c00bb48:	718000ef          	jal	ra,1c00c260 <abort>
}
1c00bb4c:	40b2                	lw	ra,12(sp)
1c00bb4e:	4422                	lw	s0,8(sp)
1c00bb50:	0141                	addi	sp,sp,16
1c00bb52:	8082                	ret

1c00bb54 <__rt_himax_init>:
    .capture   = &__rt_himax_capture
};

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_himax_init()
{
  camera_isAwaked = 0;
1c00bb54:	1b0017b7          	lui	a5,0x1b001
1c00bb58:	ba078c23          	sb	zero,-1096(a5) # 1b000bb8 <camera_isAwaked>
}
1c00bb5c:	8082                	ret

1c00bb5e <__rt_i2c_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_i2c_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_I2C; i++)
  {
    __rt_i2c[i].open_count = 0;
1c00bb5e:	1c00e7b7          	lui	a5,0x1c00e
1c00bb62:	ed478793          	addi	a5,a5,-300 # 1c00ded4 <__rt_i2c>
1c00bb66:	00078223          	sb	zero,4(a5)
1c00bb6a:	00078a23          	sb	zero,20(a5)
  }
}
1c00bb6e:	8082                	ret

1c00bb70 <__rt_rtc_init>:
}


RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_rtc_init()
{
  __rtc_handler = NULL;
1c00bb70:	35800793          	li	a5,856
1c00bb74:	0207ac23          	sw	zero,56(a5)
  dev_rtc.open_count = 0;
1c00bb78:	02078823          	sb	zero,48(a5)
  __rt_rtc_init_done = 0;
1c00bb7c:	0207aa23          	sw	zero,52(a5)
}
1c00bb80:	8082                	ret

1c00bb82 <__rt_spim_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_spim_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim_open_count[i] = 0;
1c00bb82:	1c00e7b7          	lui	a5,0x1c00e
1c00bb86:	21c78793          	addi	a5,a5,540 # 1c00e21c <__rt_spim_open_count>
1c00bb8a:	0007a023          	sw	zero,0(a5)
1c00bb8e:	0007a223          	sw	zero,4(a5)
  }
}
1c00bb92:	8082                	ret

1c00bb94 <__rt_io_end_of_flush>:
  if (rt_iodev() == RT_IODEV_UART)
  {
    __rt_io_start(NULL);
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
1c00bb94:	1c00e7b7          	lui	a5,0x1c00e
1c00bb98:	2207a423          	sw	zero,552(a5) # 1c00e228 <__rt_io_pending_flush>
1c00bb9c:	00052c23          	sw	zero,24(a0)
1c00bba0:	8082                	ret

1c00bba2 <__rt_io_uart_wait_req>:
1c00bba2:	1141                	addi	sp,sp,-16
1c00bba4:	c226                	sw	s1,4(sp)
1c00bba6:	84aa                	mv	s1,a0
1c00bba8:	c606                	sw	ra,12(sp)
1c00bbaa:	c422                	sw	s0,8(sp)
1c00bbac:	c04a                	sw	s2,0(sp)
1c00bbae:	30047973          	csrrci	s2,mstatus,8
1c00bbb2:	1c00e437          	lui	s0,0x1c00e
1c00bbb6:	22440413          	addi	s0,s0,548 # 1c00e224 <__rt_io_event_current>
1c00bbba:	4008                	lw	a0,0(s0)
1c00bbbc:	c509                	beqz	a0,1c00bbc6 <__rt_io_uart_wait_req+0x24>
1c00bbbe:	bc4fe0ef          	jal	ra,1c009f82 <rt_event_wait>
1c00bbc2:	00042023          	sw	zero,0(s0)
1c00bbc6:	4785                	li	a5,1
1c00bbc8:	08f48023          	sb	a5,128(s1)
1c00bbcc:	0814c783          	lbu	a5,129(s1)
1c00bbd0:	00201737          	lui	a4,0x201
1c00bbd4:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00bbd8:	04078793          	addi	a5,a5,64
1c00bbdc:	07da                	slli	a5,a5,0x16
1c00bbde:	0007e723          	p.sw	zero,a4(a5)
1c00bbe2:	30091073          	csrw	mstatus,s2
1c00bbe6:	40b2                	lw	ra,12(sp)
1c00bbe8:	4422                	lw	s0,8(sp)
1c00bbea:	4492                	lw	s1,4(sp)
1c00bbec:	4902                	lw	s2,0(sp)
1c00bbee:	0141                	addi	sp,sp,16
1c00bbf0:	8082                	ret

1c00bbf2 <__rt_do_putc_host>:
1c00bbf2:	1c00e737          	lui	a4,0x1c00e
1c00bbf6:	22c70793          	addi	a5,a4,556 # 1c00e22c <__rt_putc_host_buffer_index>
1c00bbfa:	4390                	lw	a2,0(a5)
1c00bbfc:	22c70713          	addi	a4,a4,556
1c00bc00:	00160693          	addi	a3,a2,1
1c00bc04:	c394                	sw	a3,0(a5)
1c00bc06:	1c00e7b7          	lui	a5,0x1c00e
1c00bc0a:	ef478593          	addi	a1,a5,-268 # 1c00def4 <__rt_putc_host_buffer>
1c00bc0e:	00a5c623          	p.sb	a0,a2(a1)
1c00bc12:	07f00593          	li	a1,127
1c00bc16:	ef478613          	addi	a2,a5,-268
1c00bc1a:	00b68463          	beq	a3,a1,1c00bc22 <__rt_do_putc_host+0x30>
1c00bc1e:	00a53a63          	p.bneimm	a0,10,1c00bc32 <__rt_do_putc_host+0x40>
1c00bc22:	ef478513          	addi	a0,a5,-268
1c00bc26:	000646a3          	p.sb	zero,a3(a2)
1c00bc2a:	00072023          	sw	zero,0(a4)
1c00bc2e:	97ffd06f          	j	1c0095ac <semihost_write0>
1c00bc32:	8082                	ret

1c00bc34 <__rt_io_start>:
1c00bc34:	1101                	addi	sp,sp,-32
1c00bc36:	0028                	addi	a0,sp,8
1c00bc38:	ce06                	sw	ra,28(sp)
1c00bc3a:	cc22                	sw	s0,24(sp)
1c00bc3c:	3ee010ef          	jal	ra,1c00d02a <rt_uart_conf_init>
1c00bc40:	4585                	li	a1,1
1c00bc42:	4501                	li	a0,0
1c00bc44:	9d8fe0ef          	jal	ra,1c009e1c <rt_event_alloc>
1c00bc48:	547d                	li	s0,-1
1c00bc4a:	ed0d                	bnez	a0,1c00bc84 <__rt_io_start+0x50>
1c00bc4c:	1c00e7b7          	lui	a5,0x1c00e
1c00bc50:	e947a783          	lw	a5,-364(a5) # 1c00de94 <__rt_iodev_uart_baudrate>
1c00bc54:	842a                	mv	s0,a0
1c00bc56:	1c00e537          	lui	a0,0x1c00e
1c00bc5a:	01c00593          	li	a1,28
1c00bc5e:	16c50513          	addi	a0,a0,364 # 1c00e16c <__rt_io_event>
1c00bc62:	c43e                	sw	a5,8(sp)
1c00bc64:	978fe0ef          	jal	ra,1c009ddc <__rt_event_init>
1c00bc68:	1c00e7b7          	lui	a5,0x1c00e
1c00bc6c:	2007a503          	lw	a0,512(a5) # 1c00e200 <__rt_iodev_uart_channel>
1c00bc70:	4681                	li	a3,0
1c00bc72:	4601                	li	a2,0
1c00bc74:	002c                	addi	a1,sp,8
1c00bc76:	0511                	addi	a0,a0,4
1c00bc78:	3c2010ef          	jal	ra,1c00d03a <__rt_uart_open>
1c00bc7c:	1c00e7b7          	lui	a5,0x1c00e
1c00bc80:	22a7a823          	sw	a0,560(a5) # 1c00e230 <_rt_io_uart>
1c00bc84:	8522                	mv	a0,s0
1c00bc86:	40f2                	lw	ra,28(sp)
1c00bc88:	4462                	lw	s0,24(sp)
1c00bc8a:	6105                	addi	sp,sp,32
1c00bc8c:	8082                	ret

1c00bc8e <rt_event_execute.isra.4.constprop.12>:
1c00bc8e:	1141                	addi	sp,sp,-16
1c00bc90:	c606                	sw	ra,12(sp)
1c00bc92:	c422                	sw	s0,8(sp)
1c00bc94:	30047473          	csrrci	s0,mstatus,8
1c00bc98:	4585                	li	a1,1
1c00bc9a:	01c00513          	li	a0,28
1c00bc9e:	a54fe0ef          	jal	ra,1c009ef2 <__rt_event_execute>
1c00bca2:	30041073          	csrw	mstatus,s0
1c00bca6:	40b2                	lw	ra,12(sp)
1c00bca8:	4422                	lw	s0,8(sp)
1c00bcaa:	0141                	addi	sp,sp,16
1c00bcac:	8082                	ret

1c00bcae <__rt_io_lock>:
1c00bcae:	1c00e7b7          	lui	a5,0x1c00e
1c00bcb2:	ddc7a783          	lw	a5,-548(a5) # 1c00dddc <__hal_debug_struct+0x10>
1c00bcb6:	cf81                	beqz	a5,1c00bcce <__rt_io_lock+0x20>
1c00bcb8:	1c00e7b7          	lui	a5,0x1c00e
1c00bcbc:	2307a783          	lw	a5,560(a5) # 1c00e230 <_rt_io_uart>
1c00bcc0:	e799                	bnez	a5,1c00bcce <__rt_io_lock+0x20>
1c00bcc2:	1c00e7b7          	lui	a5,0x1c00e
1c00bcc6:	e907a783          	lw	a5,-368(a5) # 1c00de90 <__rt_iodev>
1c00bcca:	0427b963          	p.bneimm	a5,2,1c00bd1c <__rt_io_lock+0x6e>
1c00bcce:	7135                	addi	sp,sp,-160
1c00bcd0:	014027f3          	csrr	a5,uhartid
1c00bcd4:	cf06                	sw	ra,156(sp)
1c00bcd6:	ca5797b3          	p.extractu	a5,a5,5,5
1c00bcda:	02000713          	li	a4,32
1c00bcde:	1b001537          	lui	a0,0x1b001
1c00bce2:	00e79963          	bne	a5,a4,1c00bcf4 <__rt_io_lock+0x46>
1c00bce6:	bbc50513          	addi	a0,a0,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00bcea:	d89fd0ef          	jal	ra,1c009a72 <__rt_fc_lock>
1c00bcee:	40fa                	lw	ra,156(sp)
1c00bcf0:	610d                	addi	sp,sp,160
1c00bcf2:	8082                	ret
1c00bcf4:	004c                	addi	a1,sp,4
1c00bcf6:	bbc50513          	addi	a0,a0,-1092
1c00bcfa:	ddffd0ef          	jal	ra,1c009ad8 <__rt_fc_cluster_lock>
1c00bcfe:	4689                	li	a3,2
1c00bd00:	00204737          	lui	a4,0x204
1c00bd04:	08c14783          	lbu	a5,140(sp)
1c00bd08:	0ff7f793          	andi	a5,a5,255
1c00bd0c:	f3ed                	bnez	a5,1c00bcee <__rt_io_lock+0x40>
1c00bd0e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00bd12:	03c76783          	p.elw	a5,60(a4)
1c00bd16:	00d72223          	sw	a3,4(a4)
1c00bd1a:	b7ed                	j	1c00bd04 <__rt_io_lock+0x56>
1c00bd1c:	8082                	ret

1c00bd1e <__rt_putc_host_cluster_req>:
1c00bd1e:	1141                	addi	sp,sp,-16
1c00bd20:	c422                	sw	s0,8(sp)
1c00bd22:	c606                	sw	ra,12(sp)
1c00bd24:	842a                	mv	s0,a0
1c00bd26:	08954503          	lbu	a0,137(a0)
1c00bd2a:	ec9ff0ef          	jal	ra,1c00bbf2 <__rt_do_putc_host>
1c00bd2e:	08844783          	lbu	a5,136(s0)
1c00bd32:	4705                	li	a4,1
1c00bd34:	08e42223          	sw	a4,132(s0)
1c00bd38:	00201737          	lui	a4,0x201
1c00bd3c:	40b2                	lw	ra,12(sp)
1c00bd3e:	4422                	lw	s0,8(sp)
1c00bd40:	04078793          	addi	a5,a5,64
1c00bd44:	07da                	slli	a5,a5,0x16
1c00bd46:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00bd4a:	0007e723          	p.sw	zero,a4(a5)
1c00bd4e:	0141                	addi	sp,sp,16
1c00bd50:	8082                	ret

1c00bd52 <__rt_io_unlock>:
1c00bd52:	1c00e7b7          	lui	a5,0x1c00e
1c00bd56:	ddc7a783          	lw	a5,-548(a5) # 1c00dddc <__hal_debug_struct+0x10>
1c00bd5a:	cf81                	beqz	a5,1c00bd72 <__rt_io_unlock+0x20>
1c00bd5c:	1c00e7b7          	lui	a5,0x1c00e
1c00bd60:	2307a783          	lw	a5,560(a5) # 1c00e230 <_rt_io_uart>
1c00bd64:	e799                	bnez	a5,1c00bd72 <__rt_io_unlock+0x20>
1c00bd66:	1c00e7b7          	lui	a5,0x1c00e
1c00bd6a:	e907a783          	lw	a5,-368(a5) # 1c00de90 <__rt_iodev>
1c00bd6e:	0427b963          	p.bneimm	a5,2,1c00bdc0 <__rt_io_unlock+0x6e>
1c00bd72:	7135                	addi	sp,sp,-160
1c00bd74:	014027f3          	csrr	a5,uhartid
1c00bd78:	cf06                	sw	ra,156(sp)
1c00bd7a:	ca5797b3          	p.extractu	a5,a5,5,5
1c00bd7e:	02000713          	li	a4,32
1c00bd82:	1b001537          	lui	a0,0x1b001
1c00bd86:	00e79963          	bne	a5,a4,1c00bd98 <__rt_io_unlock+0x46>
1c00bd8a:	bbc50513          	addi	a0,a0,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00bd8e:	d17fd0ef          	jal	ra,1c009aa4 <__rt_fc_unlock>
1c00bd92:	40fa                	lw	ra,156(sp)
1c00bd94:	610d                	addi	sp,sp,160
1c00bd96:	8082                	ret
1c00bd98:	004c                	addi	a1,sp,4
1c00bd9a:	bbc50513          	addi	a0,a0,-1092
1c00bd9e:	d73fd0ef          	jal	ra,1c009b10 <__rt_fc_cluster_unlock>
1c00bda2:	4689                	li	a3,2
1c00bda4:	00204737          	lui	a4,0x204
1c00bda8:	08c14783          	lbu	a5,140(sp)
1c00bdac:	0ff7f793          	andi	a5,a5,255
1c00bdb0:	f3ed                	bnez	a5,1c00bd92 <__rt_io_unlock+0x40>
1c00bdb2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00bdb6:	03c76783          	p.elw	a5,60(a4)
1c00bdba:	00d72223          	sw	a3,4(a4)
1c00bdbe:	b7ed                	j	1c00bda8 <__rt_io_unlock+0x56>
1c00bdc0:	8082                	ret

1c00bdc2 <__rt_io_uart_flush.constprop.11>:
1c00bdc2:	7171                	addi	sp,sp,-176
1c00bdc4:	d522                	sw	s0,168(sp)
1c00bdc6:	d706                	sw	ra,172(sp)
1c00bdc8:	d326                	sw	s1,164(sp)
1c00bdca:	d14a                	sw	s2,160(sp)
1c00bdcc:	cf4e                	sw	s3,156(sp)
1c00bdce:	cd52                	sw	s4,152(sp)
1c00bdd0:	1c00e437          	lui	s0,0x1c00e
1c00bdd4:	22842783          	lw	a5,552(s0) # 1c00e228 <__rt_io_pending_flush>
1c00bdd8:	22840993          	addi	s3,s0,552
1c00bddc:	efad                	bnez	a5,1c00be56 <__rt_io_uart_flush.constprop.11+0x94>
1c00bdde:	1c00e637          	lui	a2,0x1c00e
1c00bde2:	dcc60793          	addi	a5,a2,-564 # 1c00ddcc <__hal_debug_struct>
1c00bde6:	4f80                	lw	s0,24(a5)
1c00bde8:	dcc60a13          	addi	s4,a2,-564
1c00bdec:	cc29                	beqz	s0,1c00be46 <__rt_io_uart_flush.constprop.11+0x84>
1c00bdee:	1c00e737          	lui	a4,0x1c00e
1c00bdf2:	014027f3          	csrr	a5,uhartid
1c00bdf6:	23072483          	lw	s1,560(a4) # 1c00e230 <_rt_io_uart>
1c00bdfa:	ca5797b3          	p.extractu	a5,a5,5,5
1c00bdfe:	02000713          	li	a4,32
1c00be02:	1c00e937          	lui	s2,0x1c00e
1c00be06:	06e79263          	bne	a5,a4,1c00be6a <__rt_io_uart_flush.constprop.11+0xa8>
1c00be0a:	1c00c5b7          	lui	a1,0x1c00c
1c00be0e:	4785                	li	a5,1
1c00be10:	dcc60613          	addi	a2,a2,-564
1c00be14:	b9458593          	addi	a1,a1,-1132 # 1c00bb94 <__rt_io_end_of_flush>
1c00be18:	4501                	li	a0,0
1c00be1a:	00f9a023          	sw	a5,0(s3)
1c00be1e:	874fe0ef          	jal	ra,1c009e92 <rt_event_get>
1c00be22:	40cc                	lw	a1,4(s1)
1c00be24:	87aa                	mv	a5,a0
1c00be26:	4701                	li	a4,0
1c00be28:	0586                	slli	a1,a1,0x1
1c00be2a:	86a2                	mv	a3,s0
1c00be2c:	de890613          	addi	a2,s2,-536 # 1c00dde8 <__hal_debug_struct+0x1c>
1c00be30:	0585                	addi	a1,a1,1
1c00be32:	4501                	li	a0,0
1c00be34:	dd4fe0ef          	jal	ra,1c00a408 <rt_periph_copy>
1c00be38:	f1bff0ef          	jal	ra,1c00bd52 <__rt_io_unlock>
1c00be3c:	0009a783          	lw	a5,0(s3)
1c00be40:	e395                	bnez	a5,1c00be64 <__rt_io_uart_flush.constprop.11+0xa2>
1c00be42:	e6dff0ef          	jal	ra,1c00bcae <__rt_io_lock>
1c00be46:	50ba                	lw	ra,172(sp)
1c00be48:	542a                	lw	s0,168(sp)
1c00be4a:	549a                	lw	s1,164(sp)
1c00be4c:	590a                	lw	s2,160(sp)
1c00be4e:	49fa                	lw	s3,156(sp)
1c00be50:	4a6a                	lw	s4,152(sp)
1c00be52:	614d                	addi	sp,sp,176
1c00be54:	8082                	ret
1c00be56:	efdff0ef          	jal	ra,1c00bd52 <__rt_io_unlock>
1c00be5a:	e35ff0ef          	jal	ra,1c00bc8e <rt_event_execute.isra.4.constprop.12>
1c00be5e:	e51ff0ef          	jal	ra,1c00bcae <__rt_io_lock>
1c00be62:	bf8d                	j	1c00bdd4 <__rt_io_uart_flush.constprop.11+0x12>
1c00be64:	e2bff0ef          	jal	ra,1c00bc8e <rt_event_execute.isra.4.constprop.12>
1c00be68:	bfd1                	j	1c00be3c <__rt_io_uart_flush.constprop.11+0x7a>
1c00be6a:	868a                	mv	a3,sp
1c00be6c:	8622                	mv	a2,s0
1c00be6e:	de890593          	addi	a1,s2,-536
1c00be72:	8526                	mv	a0,s1
1c00be74:	2a2010ef          	jal	ra,1c00d116 <rt_uart_cluster_write>
1c00be78:	4689                	li	a3,2
1c00be7a:	00204737          	lui	a4,0x204
1c00be7e:	08c14783          	lbu	a5,140(sp)
1c00be82:	0ff7f793          	andi	a5,a5,255
1c00be86:	c781                	beqz	a5,1c00be8e <__rt_io_uart_flush.constprop.11+0xcc>
1c00be88:	000a2c23          	sw	zero,24(s4)
1c00be8c:	bf6d                	j	1c00be46 <__rt_io_uart_flush.constprop.11+0x84>
1c00be8e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00be92:	03c76783          	p.elw	a5,60(a4)
1c00be96:	00d72223          	sw	a3,4(a4)
1c00be9a:	b7d5                	j	1c00be7e <__rt_io_uart_flush.constprop.11+0xbc>

1c00be9c <__rt_io_uart_wait_pending>:
1c00be9c:	7135                	addi	sp,sp,-160
1c00be9e:	cd22                	sw	s0,152(sp)
1c00bea0:	cf06                	sw	ra,156(sp)
1c00bea2:	1c00e437          	lui	s0,0x1c00e
1c00bea6:	22842783          	lw	a5,552(s0) # 1c00e228 <__rt_io_pending_flush>
1c00beaa:	eb85                	bnez	a5,1c00beda <__rt_io_uart_wait_pending+0x3e>
1c00beac:	1c00e437          	lui	s0,0x1c00e
1c00beb0:	22440413          	addi	s0,s0,548 # 1c00e224 <__rt_io_event_current>
1c00beb4:	4008                	lw	a0,0(s0)
1c00beb6:	cd11                	beqz	a0,1c00bed2 <__rt_io_uart_wait_pending+0x36>
1c00beb8:	014027f3          	csrr	a5,uhartid
1c00bebc:	8795                	srai	a5,a5,0x5
1c00bebe:	f267b7b3          	p.bclr	a5,a5,25,6
1c00bec2:	02000713          	li	a4,32
1c00bec6:	02e79163          	bne	a5,a4,1c00bee8 <__rt_io_uart_wait_pending+0x4c>
1c00beca:	8b8fe0ef          	jal	ra,1c009f82 <rt_event_wait>
1c00bece:	00042023          	sw	zero,0(s0)
1c00bed2:	40fa                	lw	ra,156(sp)
1c00bed4:	446a                	lw	s0,152(sp)
1c00bed6:	610d                	addi	sp,sp,160
1c00bed8:	8082                	ret
1c00beda:	e79ff0ef          	jal	ra,1c00bd52 <__rt_io_unlock>
1c00bede:	db1ff0ef          	jal	ra,1c00bc8e <rt_event_execute.isra.4.constprop.12>
1c00bee2:	dcdff0ef          	jal	ra,1c00bcae <__rt_io_lock>
1c00bee6:	b7c1                	j	1c00bea6 <__rt_io_uart_wait_pending+0xa>
1c00bee8:	08f106a3          	sb	a5,141(sp)
1c00beec:	1c00c7b7          	lui	a5,0x1c00c
1c00bef0:	ba278793          	addi	a5,a5,-1118 # 1c00bba2 <__rt_io_uart_wait_req>
1c00bef4:	4705                	li	a4,1
1c00bef6:	c83e                	sw	a5,16(sp)
1c00bef8:	0068                	addi	a0,sp,12
1c00befa:	1c00e7b7          	lui	a5,0x1c00e
1c00befe:	18e7a823          	sw	a4,400(a5) # 1c00e190 <__rt_io_event+0x24>
1c00bf02:	08010623          	sb	zero,140(sp)
1c00bf06:	d802                	sw	zero,48(sp)
1c00bf08:	da02                	sw	zero,52(sp)
1c00bf0a:	ca2a                	sw	a0,20(sp)
1c00bf0c:	eb9fe0ef          	jal	ra,1c00adc4 <__rt_cluster_push_fc_event>
1c00bf10:	4689                	li	a3,2
1c00bf12:	00204737          	lui	a4,0x204
1c00bf16:	08c14783          	lbu	a5,140(sp)
1c00bf1a:	0ff7f793          	andi	a5,a5,255
1c00bf1e:	fbd5                	bnez	a5,1c00bed2 <__rt_io_uart_wait_pending+0x36>
1c00bf20:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00bf24:	03c76783          	p.elw	a5,60(a4)
1c00bf28:	00d72223          	sw	a3,4(a4)
1c00bf2c:	b7ed                	j	1c00bf16 <__rt_io_uart_wait_pending+0x7a>

1c00bf2e <__rt_io_stop>:
1c00bf2e:	1141                	addi	sp,sp,-16
1c00bf30:	c422                	sw	s0,8(sp)
1c00bf32:	1c00e437          	lui	s0,0x1c00e
1c00bf36:	c606                	sw	ra,12(sp)
1c00bf38:	23040413          	addi	s0,s0,560 # 1c00e230 <_rt_io_uart>
1c00bf3c:	f61ff0ef          	jal	ra,1c00be9c <__rt_io_uart_wait_pending>
1c00bf40:	4008                	lw	a0,0(s0)
1c00bf42:	4581                	li	a1,0
1c00bf44:	184010ef          	jal	ra,1c00d0c8 <rt_uart_close>
1c00bf48:	40b2                	lw	ra,12(sp)
1c00bf4a:	00042023          	sw	zero,0(s0)
1c00bf4e:	4422                	lw	s0,8(sp)
1c00bf50:	4501                	li	a0,0
1c00bf52:	0141                	addi	sp,sp,16
1c00bf54:	8082                	ret

1c00bf56 <strcmp>:
1c00bf56:	0015478b          	p.lbu	a5,1(a0!)
1c00bf5a:	0015c70b          	p.lbu	a4,1(a1!)
1c00bf5e:	c399                	beqz	a5,1c00bf64 <strcmp+0xe>
1c00bf60:	fee78be3          	beq	a5,a4,1c00bf56 <strcmp>
1c00bf64:	40e78533          	sub	a0,a5,a4
1c00bf68:	8082                	ret

1c00bf6a <strncmp>:
1c00bf6a:	ce11                	beqz	a2,1c00bf86 <strncmp+0x1c>
1c00bf6c:	962a                	add	a2,a2,a0
1c00bf6e:	0015478b          	p.lbu	a5,1(a0!)
1c00bf72:	0015c70b          	p.lbu	a4,1(a1!)
1c00bf76:	00e79563          	bne	a5,a4,1c00bf80 <strncmp+0x16>
1c00bf7a:	00c50363          	beq	a0,a2,1c00bf80 <strncmp+0x16>
1c00bf7e:	fbe5                	bnez	a5,1c00bf6e <strncmp+0x4>
1c00bf80:	40e78533          	sub	a0,a5,a4
1c00bf84:	8082                	ret
1c00bf86:	4501                	li	a0,0
1c00bf88:	8082                	ret

1c00bf8a <strlen>:
1c00bf8a:	87aa                	mv	a5,a0
1c00bf8c:	0007c703          	lbu	a4,0(a5)
1c00bf90:	00178693          	addi	a3,a5,1
1c00bf94:	e701                	bnez	a4,1c00bf9c <strlen+0x12>
1c00bf96:	40a78533          	sub	a0,a5,a0
1c00bf9a:	8082                	ret
1c00bf9c:	87b6                	mv	a5,a3
1c00bf9e:	b7fd                	j	1c00bf8c <strlen+0x2>

1c00bfa0 <memset>:
1c00bfa0:	962a                	add	a2,a2,a0
1c00bfa2:	87aa                	mv	a5,a0
1c00bfa4:	00c79363          	bne	a5,a2,1c00bfaa <memset+0xa>
1c00bfa8:	8082                	ret
1c00bfaa:	00b780ab          	p.sb	a1,1(a5!)
1c00bfae:	bfdd                	j	1c00bfa4 <memset+0x4>

1c00bfb0 <memcpy>:
1c00bfb0:	00a5e733          	or	a4,a1,a0
1c00bfb4:	fa273733          	p.bclr	a4,a4,29,2
1c00bfb8:	87aa                	mv	a5,a0
1c00bfba:	c709                	beqz	a4,1c00bfc4 <memcpy+0x14>
1c00bfbc:	962e                	add	a2,a2,a1
1c00bfbe:	00c59f63          	bne	a1,a2,1c00bfdc <memcpy+0x2c>
1c00bfc2:	8082                	ret
1c00bfc4:	fa263733          	p.bclr	a4,a2,29,2
1c00bfc8:	fb75                	bnez	a4,1c00bfbc <memcpy+0xc>
1c00bfca:	962e                	add	a2,a2,a1
1c00bfcc:	00c59363          	bne	a1,a2,1c00bfd2 <memcpy+0x22>
1c00bfd0:	8082                	ret
1c00bfd2:	0045a70b          	p.lw	a4,4(a1!)
1c00bfd6:	00e7a22b          	p.sw	a4,4(a5!)
1c00bfda:	bfcd                	j	1c00bfcc <memcpy+0x1c>
1c00bfdc:	0015c70b          	p.lbu	a4,1(a1!)
1c00bfe0:	00e780ab          	p.sb	a4,1(a5!)
1c00bfe4:	bfe9                	j	1c00bfbe <memcpy+0xe>

1c00bfe6 <strchr>:
1c00bfe6:	0ff5f593          	andi	a1,a1,255
1c00bfea:	00054703          	lbu	a4,0(a0)
1c00bfee:	87aa                	mv	a5,a0
1c00bff0:	0505                	addi	a0,a0,1
1c00bff2:	00b70563          	beq	a4,a1,1c00bffc <strchr+0x16>
1c00bff6:	fb75                	bnez	a4,1c00bfea <strchr+0x4>
1c00bff8:	c191                	beqz	a1,1c00bffc <strchr+0x16>
1c00bffa:	4781                	li	a5,0
1c00bffc:	853e                	mv	a0,a5
1c00bffe:	8082                	ret

1c00c000 <__rt_putc_debug_bridge>:
1c00c000:	1141                	addi	sp,sp,-16
1c00c002:	c422                	sw	s0,8(sp)
1c00c004:	1c00e437          	lui	s0,0x1c00e
1c00c008:	c226                	sw	s1,4(sp)
1c00c00a:	c606                	sw	ra,12(sp)
1c00c00c:	84aa                	mv	s1,a0
1c00c00e:	dcc40413          	addi	s0,s0,-564 # 1c00ddcc <__hal_debug_struct>
1c00c012:	485c                	lw	a5,20(s0)
1c00c014:	c791                	beqz	a5,1c00c020 <__rt_putc_debug_bridge+0x20>
1c00c016:	06400513          	li	a0,100
1c00c01a:	a4cfe0ef          	jal	ra,1c00a266 <rt_time_wait_us>
1c00c01e:	bfd5                	j	1c00c012 <__rt_putc_debug_bridge+0x12>
1c00c020:	4c1c                	lw	a5,24(s0)
1c00c022:	00178713          	addi	a4,a5,1
1c00c026:	97a2                	add	a5,a5,s0
1c00c028:	00978e23          	sb	s1,28(a5)
1c00c02c:	cc18                	sw	a4,24(s0)
1c00c02e:	4c14                	lw	a3,24(s0)
1c00c030:	08000793          	li	a5,128
1c00c034:	00f68463          	beq	a3,a5,1c00c03c <__rt_putc_debug_bridge+0x3c>
1c00c038:	00a4b663          	p.bneimm	s1,10,1c00c044 <__rt_putc_debug_bridge+0x44>
1c00c03c:	c701                	beqz	a4,1c00c044 <__rt_putc_debug_bridge+0x44>
1c00c03e:	c858                	sw	a4,20(s0)
1c00c040:	00042c23          	sw	zero,24(s0)
1c00c044:	4c1c                	lw	a5,24(s0)
1c00c046:	e799                	bnez	a5,1c00c054 <__rt_putc_debug_bridge+0x54>
1c00c048:	4422                	lw	s0,8(sp)
1c00c04a:	40b2                	lw	ra,12(sp)
1c00c04c:	4492                	lw	s1,4(sp)
1c00c04e:	0141                	addi	sp,sp,16
1c00c050:	c9ffd06f          	j	1c009cee <__rt_bridge_printf_flush>
1c00c054:	40b2                	lw	ra,12(sp)
1c00c056:	4422                	lw	s0,8(sp)
1c00c058:	4492                	lw	s1,4(sp)
1c00c05a:	0141                	addi	sp,sp,16
1c00c05c:	8082                	ret

1c00c05e <__rt_putc_uart>:
1c00c05e:	1101                	addi	sp,sp,-32
1c00c060:	c62a                	sw	a0,12(sp)
1c00c062:	ce06                	sw	ra,28(sp)
1c00c064:	e39ff0ef          	jal	ra,1c00be9c <__rt_io_uart_wait_pending>
1c00c068:	1c00e7b7          	lui	a5,0x1c00e
1c00c06c:	dcc78793          	addi	a5,a5,-564 # 1c00ddcc <__hal_debug_struct>
1c00c070:	4f94                	lw	a3,24(a5)
1c00c072:	4532                	lw	a0,12(sp)
1c00c074:	00168713          	addi	a4,a3,1
1c00c078:	cf98                	sw	a4,24(a5)
1c00c07a:	97b6                	add	a5,a5,a3
1c00c07c:	00a78e23          	sb	a0,28(a5)
1c00c080:	08000793          	li	a5,128
1c00c084:	00f70463          	beq	a4,a5,1c00c08c <__rt_putc_uart+0x2e>
1c00c088:	00a53663          	p.bneimm	a0,10,1c00c094 <__rt_putc_uart+0x36>
1c00c08c:	40f2                	lw	ra,28(sp)
1c00c08e:	6105                	addi	sp,sp,32
1c00c090:	d33ff06f          	j	1c00bdc2 <__rt_io_uart_flush.constprop.11>
1c00c094:	40f2                	lw	ra,28(sp)
1c00c096:	6105                	addi	sp,sp,32
1c00c098:	8082                	ret

1c00c09a <tfp_putc.isra.9>:
1c00c09a:	1c00e7b7          	lui	a5,0x1c00e
1c00c09e:	e907a783          	lw	a5,-368(a5) # 1c00de90 <__rt_iodev>
1c00c0a2:	7135                	addi	sp,sp,-160
1c00c0a4:	cf06                	sw	ra,156(sp)
1c00c0a6:	0427bf63          	p.bneimm	a5,2,1c00c104 <tfp_putc.isra.9+0x6a>
1c00c0aa:	014027f3          	csrr	a5,uhartid
1c00c0ae:	8795                	srai	a5,a5,0x5
1c00c0b0:	f267b7b3          	p.bclr	a5,a5,25,6
1c00c0b4:	02000713          	li	a4,32
1c00c0b8:	00e79763          	bne	a5,a4,1c00c0c6 <tfp_putc.isra.9+0x2c>
1c00c0bc:	b37ff0ef          	jal	ra,1c00bbf2 <__rt_do_putc_host>
1c00c0c0:	40fa                	lw	ra,156(sp)
1c00c0c2:	610d                	addi	sp,sp,160
1c00c0c4:	8082                	ret
1c00c0c6:	08f10623          	sb	a5,140(sp)
1c00c0ca:	1c00c7b7          	lui	a5,0x1c00c
1c00c0ce:	4705                	li	a4,1
1c00c0d0:	d1e78793          	addi	a5,a5,-738 # 1c00bd1e <__rt_putc_host_cluster_req>
1c00c0d4:	08a106a3          	sb	a0,141(sp)
1c00c0d8:	0048                	addi	a0,sp,4
1c00c0da:	d63a                	sw	a4,44(sp)
1c00c0dc:	c43e                	sw	a5,8(sp)
1c00c0de:	c502                	sw	zero,136(sp)
1c00c0e0:	ce02                	sw	zero,28(sp)
1c00c0e2:	c62a                	sw	a0,12(sp)
1c00c0e4:	00010c23          	sb	zero,24(sp)
1c00c0e8:	cddfe0ef          	jal	ra,1c00adc4 <__rt_cluster_push_fc_event>
1c00c0ec:	4709                	li	a4,2
1c00c0ee:	002047b7          	lui	a5,0x204
1c00c0f2:	46aa                	lw	a3,136(sp)
1c00c0f4:	f6f1                	bnez	a3,1c00c0c0 <tfp_putc.isra.9+0x26>
1c00c0f6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00c0fa:	03c7e683          	p.elw	a3,60(a5)
1c00c0fe:	00e7a223          	sw	a4,4(a5)
1c00c102:	bfc5                	j	1c00c0f2 <tfp_putc.isra.9+0x58>
1c00c104:	1c00e7b7          	lui	a5,0x1c00e
1c00c108:	2307a783          	lw	a5,560(a5) # 1c00e230 <_rt_io_uart>
1c00c10c:	c781                	beqz	a5,1c00c114 <tfp_putc.isra.9+0x7a>
1c00c10e:	f51ff0ef          	jal	ra,1c00c05e <__rt_putc_uart>
1c00c112:	b77d                	j	1c00c0c0 <tfp_putc.isra.9+0x26>
1c00c114:	1c00e7b7          	lui	a5,0x1c00e
1c00c118:	ddc7a783          	lw	a5,-548(a5) # 1c00dddc <__hal_debug_struct+0x10>
1c00c11c:	c395                	beqz	a5,1c00c140 <tfp_putc.isra.9+0xa6>
1c00c11e:	014027f3          	csrr	a5,uhartid
1c00c122:	00379713          	slli	a4,a5,0x3
1c00c126:	1a1106b7          	lui	a3,0x1a110
1c00c12a:	ee873733          	p.bclr	a4,a4,23,8
1c00c12e:	9736                	add	a4,a4,a3
1c00c130:	6689                	lui	a3,0x2
1c00c132:	078a                	slli	a5,a5,0x2
1c00c134:	f8068693          	addi	a3,a3,-128 # 1f80 <__rt_stack_size+0x1780>
1c00c138:	8ff5                	and	a5,a5,a3
1c00c13a:	00a767a3          	p.sw	a0,a5(a4)
1c00c13e:	b749                	j	1c00c0c0 <tfp_putc.isra.9+0x26>
1c00c140:	ec1ff0ef          	jal	ra,1c00c000 <__rt_putc_debug_bridge>
1c00c144:	bfb5                	j	1c00c0c0 <tfp_putc.isra.9+0x26>

1c00c146 <puts>:
1c00c146:	1141                	addi	sp,sp,-16
1c00c148:	c422                	sw	s0,8(sp)
1c00c14a:	c606                	sw	ra,12(sp)
1c00c14c:	842a                	mv	s0,a0
1c00c14e:	b61ff0ef          	jal	ra,1c00bcae <__rt_io_lock>
1c00c152:	0014450b          	p.lbu	a0,1(s0!)
1c00c156:	c501                	beqz	a0,1c00c15e <puts+0x18>
1c00c158:	f43ff0ef          	jal	ra,1c00c09a <tfp_putc.isra.9>
1c00c15c:	bfdd                	j	1c00c152 <puts+0xc>
1c00c15e:	4529                	li	a0,10
1c00c160:	f3bff0ef          	jal	ra,1c00c09a <tfp_putc.isra.9>
1c00c164:	befff0ef          	jal	ra,1c00bd52 <__rt_io_unlock>
1c00c168:	40b2                	lw	ra,12(sp)
1c00c16a:	4422                	lw	s0,8(sp)
1c00c16c:	4501                	li	a0,0
1c00c16e:	0141                	addi	sp,sp,16
1c00c170:	8082                	ret

1c00c172 <fputc_locked>:
1c00c172:	1141                	addi	sp,sp,-16
1c00c174:	c422                	sw	s0,8(sp)
1c00c176:	842a                	mv	s0,a0
1c00c178:	0ff57513          	andi	a0,a0,255
1c00c17c:	c606                	sw	ra,12(sp)
1c00c17e:	f1dff0ef          	jal	ra,1c00c09a <tfp_putc.isra.9>
1c00c182:	8522                	mv	a0,s0
1c00c184:	40b2                	lw	ra,12(sp)
1c00c186:	4422                	lw	s0,8(sp)
1c00c188:	0141                	addi	sp,sp,16
1c00c18a:	8082                	ret

1c00c18c <fputc>:
1c00c18c:	1141                	addi	sp,sp,-16
1c00c18e:	c606                	sw	ra,12(sp)
1c00c190:	c422                	sw	s0,8(sp)
1c00c192:	842a                	mv	s0,a0
1c00c194:	b1bff0ef          	jal	ra,1c00bcae <__rt_io_lock>
1c00c198:	0ff47513          	andi	a0,s0,255
1c00c19c:	effff0ef          	jal	ra,1c00c09a <tfp_putc.isra.9>
1c00c1a0:	1c00e7b7          	lui	a5,0x1c00e
1c00c1a4:	ddc7a783          	lw	a5,-548(a5) # 1c00dddc <__hal_debug_struct+0x10>
1c00c1a8:	e399                	bnez	a5,1c00c1ae <fputc+0x22>
1c00c1aa:	b45fd0ef          	jal	ra,1c009cee <__rt_bridge_printf_flush>
1c00c1ae:	ba5ff0ef          	jal	ra,1c00bd52 <__rt_io_unlock>
1c00c1b2:	8522                	mv	a0,s0
1c00c1b4:	40b2                	lw	ra,12(sp)
1c00c1b6:	4422                	lw	s0,8(sp)
1c00c1b8:	0141                	addi	sp,sp,16
1c00c1ba:	8082                	ret

1c00c1bc <putchar>:
1c00c1bc:	4589                	li	a1,2
1c00c1be:	fcfff06f          	j	1c00c18c <fputc>

1c00c1c2 <_prf_locked>:
1c00c1c2:	1101                	addi	sp,sp,-32
1c00c1c4:	ce06                	sw	ra,28(sp)
1c00c1c6:	c02a                	sw	a0,0(sp)
1c00c1c8:	c62e                	sw	a1,12(sp)
1c00c1ca:	c432                	sw	a2,8(sp)
1c00c1cc:	c236                	sw	a3,4(sp)
1c00c1ce:	ae1ff0ef          	jal	ra,1c00bcae <__rt_io_lock>
1c00c1d2:	4692                	lw	a3,4(sp)
1c00c1d4:	4622                	lw	a2,8(sp)
1c00c1d6:	45b2                	lw	a1,12(sp)
1c00c1d8:	4502                	lw	a0,0(sp)
1c00c1da:	2ca1                	jal	1c00c432 <_prf>
1c00c1dc:	c02a                	sw	a0,0(sp)
1c00c1de:	b75ff0ef          	jal	ra,1c00bd52 <__rt_io_unlock>
1c00c1e2:	40f2                	lw	ra,28(sp)
1c00c1e4:	4502                	lw	a0,0(sp)
1c00c1e6:	6105                	addi	sp,sp,32
1c00c1e8:	8082                	ret

1c00c1ea <exit>:
1c00c1ea:	1101                	addi	sp,sp,-32
1c00c1ec:	cc22                	sw	s0,24(sp)
1c00c1ee:	c84a                	sw	s2,16(sp)
1c00c1f0:	c62a                	sw	a0,12(sp)
1c00c1f2:	ce06                	sw	ra,28(sp)
1c00c1f4:	ca26                	sw	s1,20(sp)
1c00c1f6:	e54fd0ef          	jal	ra,1c00984a <__rt_deinit>
1c00c1fa:	4532                	lw	a0,12(sp)
1c00c1fc:	1a104437          	lui	s0,0x1a104
1c00c200:	0a040793          	addi	a5,s0,160 # 1a1040a0 <__l1_end+0xa10405c>
1c00c204:	c1f54933          	p.bset	s2,a0,0,31
1c00c208:	0127a023          	sw	s2,0(a5)
1c00c20c:	1c00e7b7          	lui	a5,0x1c00e
1c00c210:	e907a783          	lw	a5,-368(a5) # 1c00de90 <__rt_iodev>
1c00c214:	0027bf63          	p.bneimm	a5,2,1c00c232 <exit+0x48>
1c00c218:	c901                	beqz	a0,1c00c228 <exit+0x3e>
1c00c21a:	00020537          	lui	a0,0x20
1c00c21e:	02350513          	addi	a0,a0,35 # 20023 <__L1Cl+0x10023>
1c00c222:	c14fd0ef          	jal	ra,1c009636 <semihost_exit>
1c00c226:	a001                	j	1c00c226 <exit+0x3c>
1c00c228:	00020537          	lui	a0,0x20
1c00c22c:	02650513          	addi	a0,a0,38 # 20026 <__L1Cl+0x10026>
1c00c230:	bfcd                	j	1c00c222 <exit+0x38>
1c00c232:	1c00e4b7          	lui	s1,0x1c00e
1c00c236:	dcc48493          	addi	s1,s1,-564 # 1c00ddcc <__hal_debug_struct>
1c00c23a:	ab5fd0ef          	jal	ra,1c009cee <__rt_bridge_printf_flush>
1c00c23e:	0124a623          	sw	s2,12(s1)
1c00c242:	a69fd0ef          	jal	ra,1c009caa <__rt_bridge_send_notif>
1c00c246:	449c                	lw	a5,8(s1)
1c00c248:	dff9                	beqz	a5,1c00c226 <exit+0x3c>
1c00c24a:	07440413          	addi	s0,s0,116
1c00c24e:	401c                	lw	a5,0(s0)
1c00c250:	83a5                	srli	a5,a5,0x9
1c00c252:	f837b7b3          	p.bclr	a5,a5,28,3
1c00c256:	fe77bce3          	p.bneimm	a5,7,1c00c24e <exit+0x64>
1c00c25a:	a73fd0ef          	jal	ra,1c009ccc <__rt_bridge_clear_notif>
1c00c25e:	b7e1                	j	1c00c226 <exit+0x3c>

1c00c260 <abort>:
1c00c260:	1141                	addi	sp,sp,-16
1c00c262:	557d                	li	a0,-1
1c00c264:	c606                	sw	ra,12(sp)
1c00c266:	f85ff0ef          	jal	ra,1c00c1ea <exit>

1c00c26a <__rt_io_init>:
#endif
}

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_io_init()
{
  __rt_putc_host_buffer_index = 0;
1c00c26a:	1c00e7b7          	lui	a5,0x1c00e
1c00c26e:	2207a623          	sw	zero,556(a5) # 1c00e22c <__rt_putc_host_buffer_index>
void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req);

static inline void __rt_fc_lock_init(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_FC)
  lock->waiting = NULL;
1c00c272:	1b0017b7          	lui	a5,0x1b001
1c00c276:	bbc78793          	addi	a5,a5,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00c27a:	0007a223          	sw	zero,4(a5)
  lock->locked = 0;
1c00c27e:	0007a023          	sw	zero,0(a5)
  lock->fc_wait = NULL;
1c00c282:	0007a623          	sw	zero,12(a5)
  __rt_fc_lock_init(&__rt_io_fc_lock);

#if defined(__RT_USE_UART)
  _rt_io_uart = NULL;
1c00c286:	1c00e7b7          	lui	a5,0x1c00e
1c00c28a:	2207a823          	sw	zero,560(a5) # 1c00e230 <_rt_io_uart>
  __rt_io_event_current = NULL;
1c00c28e:	1c00e7b7          	lui	a5,0x1c00e
1c00c292:	2207a223          	sw	zero,548(a5) # 1c00e224 <__rt_io_event_current>
  return __rt_iodev;
1c00c296:	1c00e7b7          	lui	a5,0x1c00e

  if (rt_iodev() == RT_IODEV_UART)
1c00c29a:	e907a783          	lw	a5,-368(a5) # 1c00de90 <__rt_iodev>
1c00c29e:	0217be63          	p.bneimm	a5,1,1c00c2da <__rt_io_init+0x70>
  {
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00c2a2:	1c00c5b7          	lui	a1,0x1c00c
{
1c00c2a6:	1141                	addi	sp,sp,-16
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00c2a8:	4601                	li	a2,0
1c00c2aa:	c3458593          	addi	a1,a1,-972 # 1c00bc34 <__rt_io_start>
1c00c2ae:	4501                	li	a0,0
{
1c00c2b0:	c606                	sw	ra,12(sp)
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00c2b2:	f30fd0ef          	jal	ra,1c0099e2 <__rt_cbsys_add>
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
1c00c2b6:	1c00c5b7          	lui	a1,0x1c00c
1c00c2ba:	f2e58593          	addi	a1,a1,-210 # 1c00bf2e <__rt_io_stop>
1c00c2be:	4601                	li	a2,0
1c00c2c0:	4505                	li	a0,1
1c00c2c2:	f20fd0ef          	jal	ra,1c0099e2 <__rt_cbsys_add>
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
  }
#endif

}
1c00c2c6:	40b2                	lw	ra,12(sp)
    __rt_io_pending_flush = 0;
1c00c2c8:	1c00e7b7          	lui	a5,0x1c00e
1c00c2cc:	2207a423          	sw	zero,552(a5) # 1c00e228 <__rt_io_pending_flush>
    rt_event_alloc(NULL, 1);
1c00c2d0:	4585                	li	a1,1
1c00c2d2:	4501                	li	a0,0
}
1c00c2d4:	0141                	addi	sp,sp,16
    rt_event_alloc(NULL, 1);
1c00c2d6:	b47fd06f          	j	1c009e1c <rt_event_alloc>
1c00c2da:	8082                	ret

1c00c2dc <printf>:

	return r;
}

int printf(const char *format, ...)
{
1c00c2dc:	7139                	addi	sp,sp,-64
1c00c2de:	d432                	sw	a2,40(sp)
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00c2e0:	862a                	mv	a2,a0
1c00c2e2:	1c00c537          	lui	a0,0x1c00c
{
1c00c2e6:	d22e                	sw	a1,36(sp)
1c00c2e8:	d636                	sw	a3,44(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00c2ea:	4589                	li	a1,2
	va_start(vargs, format);
1c00c2ec:	1054                	addi	a3,sp,36
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00c2ee:	17250513          	addi	a0,a0,370 # 1c00c172 <fputc_locked>
{
1c00c2f2:	ce06                	sw	ra,28(sp)
1c00c2f4:	d83a                	sw	a4,48(sp)
1c00c2f6:	da3e                	sw	a5,52(sp)
1c00c2f8:	dc42                	sw	a6,56(sp)
1c00c2fa:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c00c2fc:	c636                	sw	a3,12(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00c2fe:	ec5ff0ef          	jal	ra,1c00c1c2 <_prf_locked>
	va_end(vargs);

	return r;
}
1c00c302:	40f2                	lw	ra,28(sp)
1c00c304:	6121                	addi	sp,sp,64
1c00c306:	8082                	ret

1c00c308 <_to_x>:
 * Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes).
 */
static int _to_x(char *buf, unsigned VALTYPE n, unsigned int base)
{
1c00c308:	7179                	addi	sp,sp,-48
1c00c30a:	d422                	sw	s0,40(sp)
1c00c30c:	d226                	sw	s1,36(sp)
1c00c30e:	ce4e                	sw	s3,28(sp)
1c00c310:	cc52                	sw	s4,24(sp)
1c00c312:	ca56                	sw	s5,20(sp)
1c00c314:	c85a                	sw	s6,16(sp)
1c00c316:	d606                	sw	ra,44(sp)
1c00c318:	d04a                	sw	s2,32(sp)
1c00c31a:	c65e                	sw	s7,12(sp)
1c00c31c:	84aa                	mv	s1,a0
1c00c31e:	89ae                	mv	s3,a1
1c00c320:	8a32                	mv	s4,a2
1c00c322:	8ab6                	mv	s5,a3
1c00c324:	842a                	mv	s0,a0

	do {
		unsigned int d = n % base;

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00c326:	4b25                	li	s6,9
		unsigned int d = n % base;
1c00c328:	8656                	mv	a2,s5
1c00c32a:	4681                	li	a3,0
1c00c32c:	854e                	mv	a0,s3
1c00c32e:	85d2                	mv	a1,s4
1c00c330:	e00f40ef          	jal	ra,1c000930 <__umoddi3>
		n /= base;
1c00c334:	85d2                	mv	a1,s4
		unsigned int d = n % base;
1c00c336:	892a                	mv	s2,a0
		n /= base;
1c00c338:	8656                	mv	a2,s5
1c00c33a:	854e                	mv	a0,s3
1c00c33c:	4681                	li	a3,0
1c00c33e:	ab6f40ef          	jal	ra,1c0005f4 <__udivdi3>
1c00c342:	89aa                	mv	s3,a0
1c00c344:	8a2e                	mv	s4,a1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00c346:	02700713          	li	a4,39
1c00c34a:	012b6363          	bltu	s6,s2,1c00c350 <_to_x+0x48>
1c00c34e:	4701                	li	a4,0
1c00c350:	03090913          	addi	s2,s2,48
1c00c354:	974a                	add	a4,a4,s2
1c00c356:	00e40023          	sb	a4,0(s0)
	} while (n);
1c00c35a:	8dc9                	or	a1,a1,a0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00c35c:	00140793          	addi	a5,s0,1
	} while (n);
1c00c360:	e195                	bnez	a1,1c00c384 <_to_x+0x7c>

	*buf = 0;
1c00c362:	00078023          	sb	zero,0(a5)
	len = buf - start;
1c00c366:	40978533          	sub	a0,a5,s1

	for (buf--; buf > start; buf--, start++) {
1c00c36a:	0084ef63          	bltu	s1,s0,1c00c388 <_to_x+0x80>
		*buf = *start;
		*start = tmp;
	}

	return len;
}
1c00c36e:	50b2                	lw	ra,44(sp)
1c00c370:	5422                	lw	s0,40(sp)
1c00c372:	5492                	lw	s1,36(sp)
1c00c374:	5902                	lw	s2,32(sp)
1c00c376:	49f2                	lw	s3,28(sp)
1c00c378:	4a62                	lw	s4,24(sp)
1c00c37a:	4ad2                	lw	s5,20(sp)
1c00c37c:	4b42                	lw	s6,16(sp)
1c00c37e:	4bb2                	lw	s7,12(sp)
1c00c380:	6145                	addi	sp,sp,48
1c00c382:	8082                	ret
1c00c384:	843e                	mv	s0,a5
1c00c386:	b74d                	j	1c00c328 <_to_x+0x20>
		*buf = *start;
1c00c388:	0004c703          	lbu	a4,0(s1)
		char tmp = *buf;
1c00c38c:	00044783          	lbu	a5,0(s0)
		*buf = *start;
1c00c390:	fee40fab          	p.sb	a4,-1(s0!)
		*start = tmp;
1c00c394:	00f480ab          	p.sb	a5,1(s1!)
1c00c398:	bfc9                	j	1c00c36a <_to_x+0x62>

1c00c39a <_rlrshift>:
	return (buf + _to_udec(buf, value)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
1c00c39a:	411c                	lw	a5,0(a0)
1c00c39c:	4154                	lw	a3,4(a0)
1c00c39e:	fc17b733          	p.bclr	a4,a5,30,1
1c00c3a2:	01f69613          	slli	a2,a3,0x1f
1c00c3a6:	8385                	srli	a5,a5,0x1
1c00c3a8:	8fd1                	or	a5,a5,a2
1c00c3aa:	97ba                	add	a5,a5,a4
1c00c3ac:	8285                	srli	a3,a3,0x1
1c00c3ae:	00e7b733          	sltu	a4,a5,a4
1c00c3b2:	9736                	add	a4,a4,a3
1c00c3b4:	c11c                	sw	a5,0(a0)
1c00c3b6:	c158                	sw	a4,4(a0)
}
1c00c3b8:	8082                	ret

1c00c3ba <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
1c00c3ba:	4118                	lw	a4,0(a0)
1c00c3bc:	4154                	lw	a3,4(a0)
	 */
	rem += 2U;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00c3be:	4615                	li	a2,5
	rem += 2U;
1c00c3c0:	00270793          	addi	a5,a4,2
1c00c3c4:	00e7b733          	sltu	a4,a5,a4
1c00c3c8:	9736                	add	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00c3ca:	02c755b3          	divu	a1,a4,a2
		rem -= q * 5U;
1c00c3ce:	42b61733          	p.msu	a4,a2,a1
		hi = rem >> shifts[i];
1c00c3d2:	01d71693          	slli	a3,a4,0x1d
1c00c3d6:	0037d713          	srli	a4,a5,0x3
1c00c3da:	8f55                	or	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00c3dc:	02c75733          	divu	a4,a4,a2
1c00c3e0:	01d75693          	srli	a3,a4,0x1d
1c00c3e4:	070e                	slli	a4,a4,0x3
		rem -= q * 5U;
1c00c3e6:	42e617b3          	p.msu	a5,a2,a4
		quot += q;
1c00c3ea:	95b6                	add	a1,a1,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00c3ec:	02c7d7b3          	divu	a5,a5,a2
		quot += q;
1c00c3f0:	973e                	add	a4,a4,a5
1c00c3f2:	00f737b3          	sltu	a5,a4,a5
1c00c3f6:	97ae                	add	a5,a5,a1
	}

	*v = quot;
1c00c3f8:	c118                	sw	a4,0(a0)
1c00c3fa:	c15c                	sw	a5,4(a0)
}
1c00c3fc:	8082                	ret

1c00c3fe <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	char rval;

	if (*digit_count > 0) {
1c00c3fe:	419c                	lw	a5,0(a1)
		*digit_count -= 1;
		*fr = *fr * 10U;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else {
		rval = '0';
1c00c400:	03000713          	li	a4,48
	if (*digit_count > 0) {
1c00c404:	02f05563          	blez	a5,1c00c42e <_get_digit+0x30>
		*digit_count -= 1;
1c00c408:	17fd                	addi	a5,a5,-1
1c00c40a:	c19c                	sw	a5,0(a1)
		*fr = *fr * 10U;
1c00c40c:	411c                	lw	a5,0(a0)
1c00c40e:	4729                	li	a4,10
1c00c410:	4150                	lw	a2,4(a0)
1c00c412:	02f706b3          	mul	a3,a4,a5
1c00c416:	02f737b3          	mulhu	a5,a4,a5
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00c41a:	c114                	sw	a3,0(a0)
		*fr = *fr * 10U;
1c00c41c:	42c707b3          	p.mac	a5,a4,a2
		rval = ((*fr >> 60) & 0xF) + '0';
1c00c420:	01c7d713          	srli	a4,a5,0x1c
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00c424:	c7c7b7b3          	p.bclr	a5,a5,3,28
		rval = ((*fr >> 60) & 0xF) + '0';
1c00c428:	03070713          	addi	a4,a4,48
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00c42c:	c15c                	sw	a5,4(a0)
	}

	return rval;
}
1c00c42e:	853a                	mv	a0,a4
1c00c430:	8082                	ret

1c00c432 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
1c00c432:	7135                	addi	sp,sp,-160
1c00c434:	c94a                	sw	s2,144(sp)
1c00c436:	c74e                	sw	s3,140(sp)
1c00c438:	c15a                	sw	s6,128(sp)
1c00c43a:	dede                	sw	s7,124(sp)
1c00c43c:	cf06                	sw	ra,156(sp)
1c00c43e:	cd22                	sw	s0,152(sp)
1c00c440:	cb26                	sw	s1,148(sp)
1c00c442:	c552                	sw	s4,136(sp)
1c00c444:	c356                	sw	s5,132(sp)
1c00c446:	dce2                	sw	s8,120(sp)
1c00c448:	dae6                	sw	s9,116(sp)
1c00c44a:	d8ea                	sw	s10,112(sp)
1c00c44c:	d6ee                	sw	s11,108(sp)
1c00c44e:	8b2a                	mv	s6,a0
1c00c450:	8bae                	mv	s7,a1
1c00c452:	8936                	mv	s2,a3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
1c00c454:	4981                	li	s3,0

	while ((c = *format++)) {
1c00c456:	00064503          	lbu	a0,0(a2)
1c00c45a:	00160c13          	addi	s8,a2,1
1c00c45e:	c911                	beqz	a0,1c00c472 <_prf+0x40>
		if (c != '%') {
1c00c460:	02500793          	li	a5,37
1c00c464:	14f50563          	beq	a0,a5,1c00c5ae <_prf+0x17c>
			PUTC(c);
1c00c468:	85de                	mv	a1,s7
1c00c46a:	9b02                	jalr	s6
1c00c46c:	13f53fe3          	p.bneimm	a0,-1,1c00cdaa <_prf+0x978>
1c00c470:	59fd                	li	s3,-1
		}
	}
	return count;

#undef PUTC
}
1c00c472:	40fa                	lw	ra,156(sp)
1c00c474:	446a                	lw	s0,152(sp)
1c00c476:	854e                	mv	a0,s3
1c00c478:	44da                	lw	s1,148(sp)
1c00c47a:	494a                	lw	s2,144(sp)
1c00c47c:	49ba                	lw	s3,140(sp)
1c00c47e:	4a2a                	lw	s4,136(sp)
1c00c480:	4a9a                	lw	s5,132(sp)
1c00c482:	4b0a                	lw	s6,128(sp)
1c00c484:	5bf6                	lw	s7,124(sp)
1c00c486:	5c66                	lw	s8,120(sp)
1c00c488:	5cd6                	lw	s9,116(sp)
1c00c48a:	5d46                	lw	s10,112(sp)
1c00c48c:	5db6                	lw	s11,108(sp)
1c00c48e:	610d                	addi	sp,sp,160
1c00c490:	8082                	ret
				switch (c) {
1c00c492:	108d8663          	beq	s11,s0,1c00c59e <_prf+0x16c>
1c00c496:	0fb46863          	bltu	s0,s11,1c00c586 <_prf+0x154>
1c00c49a:	fc0d8ce3          	beqz	s11,1c00c472 <_prf+0x40>
1c00c49e:	0ecd8d63          	beq	s11,a2,1c00c598 <_prf+0x166>
					fplus = true;
1c00c4a2:	8c52                	mv	s8,s4
			while (strchr("-+ #0", (c = *format++)) != NULL) {
1c00c4a4:	000c4d83          	lbu	s11,0(s8)
1c00c4a8:	1c00e737          	lui	a4,0x1c00e
1c00c4ac:	bfc70513          	addi	a0,a4,-1028 # 1c00dbfc <__hyper_pad+0x98>
1c00c4b0:	85ee                	mv	a1,s11
1c00c4b2:	c232                	sw	a2,4(sp)
1c00c4b4:	b33ff0ef          	jal	ra,1c00bfe6 <strchr>
1c00c4b8:	001c0a13          	addi	s4,s8,1
1c00c4bc:	4612                	lw	a2,4(sp)
1c00c4be:	f971                	bnez	a0,1c00c492 <_prf+0x60>
			if (c == '*') {
1c00c4c0:	02a00713          	li	a4,42
1c00c4c4:	10ed9563          	bne	s11,a4,1c00c5ce <_prf+0x19c>
				width = va_arg(vargs, int);
1c00c4c8:	00092c83          	lw	s9,0(s2)
1c00c4cc:	00490713          	addi	a4,s2,4
				if (width < 0) {
1c00c4d0:	000cd663          	bgez	s9,1c00c4dc <_prf+0xaa>
					fminus = true;
1c00c4d4:	4785                	li	a5,1
					width = -width;
1c00c4d6:	41900cb3          	neg	s9,s9
					fminus = true;
1c00c4da:	cc3e                	sw	a5,24(sp)
				c = *format++;
1c00c4dc:	000a4d83          	lbu	s11,0(s4)
				width = va_arg(vargs, int);
1c00c4e0:	893a                	mv	s2,a4
				c = *format++;
1c00c4e2:	002c0a13          	addi	s4,s8,2
			if (c == '.') {
1c00c4e6:	02e00713          	li	a4,46
			precision = -1;
1c00c4ea:	547d                	li	s0,-1
			if (c == '.') {
1c00c4ec:	00ed9f63          	bne	s11,a4,1c00c50a <_prf+0xd8>
				if (c == '*') {
1c00c4f0:	000a4703          	lbu	a4,0(s4)
1c00c4f4:	02a00793          	li	a5,42
1c00c4f8:	10f71e63          	bne	a4,a5,1c00c614 <_prf+0x1e2>
					precision = va_arg(vargs, int);
1c00c4fc:	00092403          	lw	s0,0(s2)
				c = *format++;
1c00c500:	0a05                	addi	s4,s4,1
					precision = va_arg(vargs, int);
1c00c502:	0911                	addi	s2,s2,4
				c = *format++;
1c00c504:	000a4d83          	lbu	s11,0(s4)
1c00c508:	0a05                	addi	s4,s4,1
			if (strchr("hlz", c) != NULL) {
1c00c50a:	1c00e737          	lui	a4,0x1c00e
1c00c50e:	85ee                	mv	a1,s11
1c00c510:	c0470513          	addi	a0,a4,-1020 # 1c00dc04 <__hyper_pad+0xa0>
1c00c514:	84ee                	mv	s1,s11
1c00c516:	ad1ff0ef          	jal	ra,1c00bfe6 <strchr>
1c00c51a:	10050e63          	beqz	a0,1c00c636 <_prf+0x204>
				if (i == 'l' && c == 'l') {
1c00c51e:	06c00693          	li	a3,108
				c = *format++;
1c00c522:	001a0c13          	addi	s8,s4,1
1c00c526:	000a4d83          	lbu	s11,0(s4)
				if (i == 'l' && c == 'l') {
1c00c52a:	0ed49963          	bne	s1,a3,1c00c61c <_prf+0x1ea>
1c00c52e:	009d9863          	bne	s11,s1,1c00c53e <_prf+0x10c>
					c = *format++;
1c00c532:	001a4d83          	lbu	s11,1(s4)
1c00c536:	002a0c13          	addi	s8,s4,2
					i = 'L';
1c00c53a:	04c00493          	li	s1,76
			switch (c) {
1c00c53e:	06700693          	li	a3,103
1c00c542:	17b6e263          	bltu	a3,s11,1c00c6a6 <_prf+0x274>
1c00c546:	06500693          	li	a3,101
1c00c54a:	32ddfc63          	bleu	a3,s11,1c00c882 <_prf+0x450>
1c00c54e:	04700693          	li	a3,71
1c00c552:	0fb6e563          	bltu	a3,s11,1c00c63c <_prf+0x20a>
1c00c556:	04500713          	li	a4,69
1c00c55a:	32edf463          	bleu	a4,s11,1c00c882 <_prf+0x450>
1c00c55e:	f00d8ae3          	beqz	s11,1c00c472 <_prf+0x40>
1c00c562:	02500713          	li	a4,37
1c00c566:	02ed8de3          	beq	s11,a4,1c00cda0 <_prf+0x96e>
				PUTC('%');
1c00c56a:	85de                	mv	a1,s7
1c00c56c:	02500513          	li	a0,37
1c00c570:	9b02                	jalr	s6
1c00c572:	eff52fe3          	p.beqimm	a0,-1,1c00c470 <_prf+0x3e>
				PUTC(c);
1c00c576:	85de                	mv	a1,s7
1c00c578:	856e                	mv	a0,s11
1c00c57a:	9b02                	jalr	s6
1c00c57c:	eff52ae3          	p.beqimm	a0,-1,1c00c470 <_prf+0x3e>
				count += 2;
1c00c580:	0989                	addi	s3,s3,2
1c00c582:	02b0006f          	j	1c00cdac <_prf+0x97a>
				switch (c) {
1c00c586:	039d8163          	beq	s11,s9,1c00c5a8 <_prf+0x176>
1c00c58a:	009d8c63          	beq	s11,s1,1c00c5a2 <_prf+0x170>
1c00c58e:	f1ad9ae3          	bne	s11,s10,1c00c4a2 <_prf+0x70>
					fplus = true;
1c00c592:	4705                	li	a4,1
1c00c594:	c63a                	sw	a4,12(sp)
					break;
1c00c596:	b731                	j	1c00c4a2 <_prf+0x70>
					fspace = true;
1c00c598:	4785                	li	a5,1
1c00c59a:	c83e                	sw	a5,16(sp)
					break;
1c00c59c:	b719                	j	1c00c4a2 <_prf+0x70>
					falt = true;
1c00c59e:	4a85                	li	s5,1
					break;
1c00c5a0:	b709                	j	1c00c4a2 <_prf+0x70>
					fzero = true;
1c00c5a2:	4705                	li	a4,1
1c00c5a4:	ce3a                	sw	a4,28(sp)
					break;
1c00c5a6:	bdf5                	j	1c00c4a2 <_prf+0x70>
					fminus = true;
1c00c5a8:	4785                	li	a5,1
1c00c5aa:	cc3e                	sw	a5,24(sp)
1c00c5ac:	bddd                	j	1c00c4a2 <_prf+0x70>
			fminus = fplus = fspace = falt = fzero = false;
1c00c5ae:	ce02                	sw	zero,28(sp)
1c00c5b0:	c802                	sw	zero,16(sp)
1c00c5b2:	c602                	sw	zero,12(sp)
1c00c5b4:	cc02                	sw	zero,24(sp)
1c00c5b6:	4a81                	li	s5,0
				switch (c) {
1c00c5b8:	02300413          	li	s0,35
1c00c5bc:	02d00c93          	li	s9,45
1c00c5c0:	03000493          	li	s1,48
1c00c5c4:	02b00d13          	li	s10,43
1c00c5c8:	02000613          	li	a2,32
1c00c5cc:	bde1                	j	1c00c4a4 <_prf+0x72>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
1c00c5ce:	fd0d8713          	addi	a4,s11,-48
			} else if (!isdigit(c)) {
1c00c5d2:	46a5                	li	a3,9
				width = 0;
1c00c5d4:	4c81                	li	s9,0
			} else if (!isdigit(c)) {
1c00c5d6:	f0e6e8e3          	bltu	a3,a4,1c00c4e6 <_prf+0xb4>
	while (isdigit(*p)) {
1c00c5da:	4725                	li	a4,9
		i = 10 * i + *p++ - '0';
1c00c5dc:	4629                	li	a2,10
	while (isdigit(*p)) {
1c00c5de:	8a62                	mv	s4,s8
1c00c5e0:	001a4d8b          	p.lbu	s11,1(s4!)
1c00c5e4:	fd0d8693          	addi	a3,s11,-48
1c00c5e8:	eed76fe3          	bltu	a4,a3,1c00c4e6 <_prf+0xb4>
		i = 10 * i + *p++ - '0';
1c00c5ec:	87ee                	mv	a5,s11
1c00c5ee:	42cc87b3          	p.mac	a5,s9,a2
1c00c5f2:	8c52                	mv	s8,s4
1c00c5f4:	fd078c93          	addi	s9,a5,-48
1c00c5f8:	b7dd                	j	1c00c5de <_prf+0x1ac>
1c00c5fa:	42b407b3          	p.mac	a5,s0,a1
1c00c5fe:	8a3a                	mv	s4,a4
1c00c600:	fd078413          	addi	s0,a5,-48
	while (isdigit(*p)) {
1c00c604:	8752                	mv	a4,s4
1c00c606:	0017478b          	p.lbu	a5,1(a4!)
1c00c60a:	fd078613          	addi	a2,a5,-48
1c00c60e:	fec6f6e3          	bleu	a2,a3,1c00c5fa <_prf+0x1c8>
1c00c612:	bdcd                	j	1c00c504 <_prf+0xd2>
	int i = 0;
1c00c614:	4401                	li	s0,0
	while (isdigit(*p)) {
1c00c616:	46a5                	li	a3,9
		i = 10 * i + *p++ - '0';
1c00c618:	45a9                	li	a1,10
1c00c61a:	b7ed                	j	1c00c604 <_prf+0x1d2>
				} else if (i == 'h' && c == 'h') {
1c00c61c:	06800693          	li	a3,104
1c00c620:	f0d49fe3          	bne	s1,a3,1c00c53e <_prf+0x10c>
1c00c624:	f09d9de3          	bne	s11,s1,1c00c53e <_prf+0x10c>
					c = *format++;
1c00c628:	002a0c13          	addi	s8,s4,2
1c00c62c:	001a4d83          	lbu	s11,1(s4)
					i = 'H';
1c00c630:	04800493          	li	s1,72
1c00c634:	b729                	j	1c00c53e <_prf+0x10c>
1c00c636:	8c52                	mv	s8,s4
			i = 0;
1c00c638:	4481                	li	s1,0
1c00c63a:	b711                	j	1c00c53e <_prf+0x10c>
			switch (c) {
1c00c63c:	06300693          	li	a3,99
1c00c640:	12dd8a63          	beq	s11,a3,1c00c774 <_prf+0x342>
1c00c644:	09b6e163          	bltu	a3,s11,1c00c6c6 <_prf+0x294>
1c00c648:	05800693          	li	a3,88
1c00c64c:	f0dd9fe3          	bne	s11,a3,1c00c56a <_prf+0x138>
				switch (i) {
1c00c650:	06c00693          	li	a3,108
1c00c654:	6cd48363          	beq	s1,a3,1c00cd1a <_prf+0x8e8>
1c00c658:	07a00693          	li	a3,122
1c00c65c:	6ad48f63          	beq	s1,a3,1c00cd1a <_prf+0x8e8>
1c00c660:	04c00693          	li	a3,76
1c00c664:	6ad49b63          	bne	s1,a3,1c00cd1a <_prf+0x8e8>
					val = va_arg(vargs, unsigned long long);
1c00c668:	091d                	addi	s2,s2,7
1c00c66a:	c4093933          	p.bclr	s2,s2,2,0
1c00c66e:	00092583          	lw	a1,0(s2)
1c00c672:	00492603          	lw	a2,4(s2)
1c00c676:	00890a13          	addi	s4,s2,8
				if (c == 'o') {
1c00c67a:	06f00713          	li	a4,111
1c00c67e:	00c4                	addi	s1,sp,68
1c00c680:	6aed9d63          	bne	s11,a4,1c00cd3a <_prf+0x908>
	if (alt_form) {
1c00c684:	6a0a8163          	beqz	s5,1c00cd26 <_prf+0x8f4>
		*buf++ = '0';
1c00c688:	03000793          	li	a5,48
1c00c68c:	04f10223          	sb	a5,68(sp)
		if (!value) {
1c00c690:	00c5e7b3          	or	a5,a1,a2
		*buf++ = '0';
1c00c694:	04510513          	addi	a0,sp,69
		if (!value) {
1c00c698:	68079863          	bnez	a5,1c00cd28 <_prf+0x8f6>
			*buf++ = 0;
1c00c69c:	040102a3          	sb	zero,69(sp)
			prefix = 0;
1c00c6a0:	4901                	li	s2,0
			return 1;
1c00c6a2:	4d85                	li	s11,1
1c00c6a4:	a069                	j	1c00c72e <_prf+0x2fc>
			switch (c) {
1c00c6a6:	07000693          	li	a3,112
1c00c6aa:	62dd8f63          	beq	s11,a3,1c00cce8 <_prf+0x8b6>
1c00c6ae:	09b6e663          	bltu	a3,s11,1c00c73a <_prf+0x308>
1c00c6b2:	06e00693          	li	a3,110
1c00c6b6:	5edd8463          	beq	s11,a3,1c00cc9e <_prf+0x86c>
1c00c6ba:	f9b6ebe3          	bltu	a3,s11,1c00c650 <_prf+0x21e>
1c00c6be:	06900693          	li	a3,105
1c00c6c2:	eadd94e3          	bne	s11,a3,1c00c56a <_prf+0x138>
				switch (i) {
1c00c6c6:	06c00793          	li	a5,108
1c00c6ca:	18f48563          	beq	s1,a5,1c00c854 <_prf+0x422>
1c00c6ce:	07a00793          	li	a5,122
1c00c6d2:	18f48163          	beq	s1,a5,1c00c854 <_prf+0x422>
1c00c6d6:	04c00793          	li	a5,76
1c00c6da:	16f49d63          	bne	s1,a5,1c00c854 <_prf+0x422>
					val = va_arg(vargs, long long);
1c00c6de:	091d                	addi	s2,s2,7
1c00c6e0:	c4093933          	p.bclr	s2,s2,2,0
1c00c6e4:	00092583          	lw	a1,0(s2)
1c00c6e8:	00492a83          	lw	s5,4(s2)
1c00c6ec:	00890a13          	addi	s4,s2,8
1c00c6f0:	04410d93          	addi	s11,sp,68
	if (value < 0) {
1c00c6f4:	160ad763          	bgez	s5,1c00c862 <_prf+0x430>
		*buf++ = '-';
1c00c6f8:	02d00793          	li	a5,45
		value = -value;
1c00c6fc:	40b005b3          	neg	a1,a1
		*buf++ = '-';
1c00c700:	04f10223          	sb	a5,68(sp)
		value = -value;
1c00c704:	41500633          	neg	a2,s5
1c00c708:	00b037b3          	snez	a5,a1
1c00c70c:	8e1d                	sub	a2,a2,a5
		*buf++ = ' ';
1c00c70e:	04510913          	addi	s2,sp,69
	return _to_x(buf, value, 10);
1c00c712:	854a                	mv	a0,s2
1c00c714:	46a9                	li	a3,10
1c00c716:	bf3ff0ef          	jal	ra,1c00c308 <_to_x>
				if (fplus || fspace || val < 0) {
1c00c71a:	47b2                	lw	a5,12(sp)
	return (buf + _to_udec(buf, value)) - start;
1c00c71c:	954a                	add	a0,a0,s2
1c00c71e:	41b50db3          	sub	s11,a0,s11
					prefix = 1;
1c00c722:	4905                	li	s2,1
				if (fplus || fspace || val < 0) {
1c00c724:	e789                	bnez	a5,1c00c72e <_prf+0x2fc>
1c00c726:	4742                	lw	a4,16(sp)
1c00c728:	e319                	bnez	a4,1c00c72e <_prf+0x2fc>
1c00c72a:	01fad913          	srli	s2,s5,0x1f
			if (precision >= 0) {
1c00c72e:	04045c63          	bgez	s0,1c00c786 <_prf+0x354>
			zero.predot = zero.postdot = zero.trail = 0;
1c00c732:	4401                	li	s0,0
1c00c734:	4a81                	li	s5,0
1c00c736:	4681                	li	a3,0
1c00c738:	a401                	j	1c00c938 <_prf+0x506>
			switch (c) {
1c00c73a:	07500693          	li	a3,117
1c00c73e:	f0dd89e3          	beq	s11,a3,1c00c650 <_prf+0x21e>
1c00c742:	07800693          	li	a3,120
1c00c746:	f0dd85e3          	beq	s11,a3,1c00c650 <_prf+0x21e>
1c00c74a:	07300713          	li	a4,115
1c00c74e:	e0ed9ee3          	bne	s11,a4,1c00c56a <_prf+0x138>
				cptr = va_arg(vargs, char *);
1c00c752:	00490a13          	addi	s4,s2,4
1c00c756:	00092783          	lw	a5,0(s2)
				if (precision < 0) {
1c00c75a:	00045663          	bgez	s0,1c00c766 <_prf+0x334>
					precision = INT_MAX;
1c00c75e:	80000737          	lui	a4,0x80000
1c00c762:	fff74413          	not	s0,a4
1c00c766:	86be                	mv	a3,a5
				for (clen = 0; clen < precision; clen++) {
1c00c768:	4d81                	li	s11,0
1c00c76a:	5bb41263          	bne	s0,s11,1c00cd0e <_prf+0x8dc>
1c00c76e:	4901                	li	s2,0
1c00c770:	4401                	li	s0,0
1c00c772:	a819                	j	1c00c788 <_prf+0x356>
				buf[0] = va_arg(vargs, int);
1c00c774:	00092783          	lw	a5,0(s2)
1c00c778:	00490a13          	addi	s4,s2,4
				clen = 1;
1c00c77c:	4d85                	li	s11,1
				buf[0] = va_arg(vargs, int);
1c00c77e:	04f10223          	sb	a5,68(sp)
				break;
1c00c782:	4901                	li	s2,0
1c00c784:	4401                	li	s0,0
1c00c786:	00dc                	addi	a5,sp,68
				zero_head = precision - clen + prefix;
1c00c788:	41b40d33          	sub	s10,s0,s11
1c00c78c:	9d4a                	add	s10,s10,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00c78e:	4401                	li	s0,0
1c00c790:	4a81                	li	s5,0
1c00c792:	4681                	li	a3,0
1c00c794:	040d6d33          	p.max	s10,s10,zero
			if (!fminus && width > 0) {
1c00c798:	4762                	lw	a4,24(sp)
			width -= clen + zero_head;
1c00c79a:	01bd0633          	add	a2,s10,s11
1c00c79e:	40cc8cb3          	sub	s9,s9,a2
			if (!fminus && width > 0) {
1c00c7a2:	e701                	bnez	a4,1c00c7aa <_prf+0x378>
1c00c7a4:	84e6                	mv	s1,s9
1c00c7a6:	63904263          	bgtz	s9,1c00cdca <_prf+0x998>
1c00c7aa:	012784b3          	add	s1,a5,s2
			while (prefix-- > 0) {
1c00c7ae:	62979463          	bne	a5,s1,1c00cdd6 <_prf+0x9a4>
1c00c7b2:	84ea                	mv	s1,s10
			while (zero_head-- > 0) {
1c00c7b4:	14fd                	addi	s1,s1,-1
1c00c7b6:	63f4bc63          	p.bneimm	s1,-1,1c00cdee <_prf+0x9bc>
			clen -= prefix;
1c00c7ba:	412d84b3          	sub	s1,s11,s2
1c00c7be:	8726                	mv	a4,s1
			if (zero.predot) {
1c00c7c0:	c295                	beqz	a3,1c00c7e4 <_prf+0x3b2>
				c = *cptr;
1c00c7c2:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c)) {
1c00c7c6:	8dbe                	mv	s11,a5
1c00c7c8:	00978833          	add	a6,a5,s1
1c00c7cc:	4625                	li	a2,9
1c00c7ce:	fd050593          	addi	a1,a0,-48
1c00c7d2:	41b80733          	sub	a4,a6,s11
1c00c7d6:	62b67863          	bleu	a1,a2,1c00ce06 <_prf+0x9d4>
1c00c7da:	8636                	mv	a2,a3
				while (zero.predot-- > 0) {
1c00c7dc:	64061363          	bnez	a2,1c00ce22 <_prf+0x9f0>
				clen -= zero.predot;
1c00c7e0:	8f15                	sub	a4,a4,a3
1c00c7e2:	87ee                	mv	a5,s11
			if (zero.postdot) {
1c00c7e4:	020a8e63          	beqz	s5,1c00c820 <_prf+0x3ee>
1c00c7e8:	8dbe                	mv	s11,a5
1c00c7ea:	00e78833          	add	a6,a5,a4
				} while (c != '.');
1c00c7ee:	02e00613          	li	a2,46
					c = *cptr++;
1c00c7f2:	001dc68b          	p.lbu	a3,1(s11!)
					PUTC(c);
1c00c7f6:	85de                	mv	a1,s7
1c00c7f8:	c232                	sw	a2,4(sp)
1c00c7fa:	8536                	mv	a0,a3
1c00c7fc:	c036                	sw	a3,0(sp)
1c00c7fe:	c442                	sw	a6,8(sp)
1c00c800:	9b02                	jalr	s6
1c00c802:	4612                	lw	a2,4(sp)
1c00c804:	4682                	lw	a3,0(sp)
1c00c806:	4822                	lw	a6,8(sp)
1c00c808:	c7f524e3          	p.beqimm	a0,-1,1c00c470 <_prf+0x3e>
1c00c80c:	41b80733          	sub	a4,a6,s11
				} while (c != '.');
1c00c810:	fec691e3          	bne	a3,a2,1c00c7f2 <_prf+0x3c0>
1c00c814:	86d6                	mv	a3,s5
				while (zero.postdot-- > 0) {
1c00c816:	62d04563          	bgtz	a3,1c00ce40 <_prf+0xa0e>
				clen -= zero.postdot;
1c00c81a:	41570733          	sub	a4,a4,s5
					c = *cptr++;
1c00c81e:	87ee                	mv	a5,s11
			if (zero.trail) {
1c00c820:	c415                	beqz	s0,1c00c84c <_prf+0x41a>
				c = *cptr;
1c00c822:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c) || c == '.') {
1c00c826:	8dbe                	mv	s11,a5
1c00c828:	973e                	add	a4,a4,a5
1c00c82a:	4625                	li	a2,9
1c00c82c:	02e00693          	li	a3,46
1c00c830:	fd050593          	addi	a1,a0,-48
1c00c834:	41b70ab3          	sub	s5,a4,s11
1c00c838:	62b67163          	bleu	a1,a2,1c00ce5a <_prf+0xa28>
1c00c83c:	60d50f63          	beq	a0,a3,1c00ce5a <_prf+0xa28>
1c00c840:	8722                	mv	a4,s0
				while (zero.trail-- > 0) {
1c00c842:	62e04a63          	bgtz	a4,1c00ce76 <_prf+0xa44>
				clen -= zero.trail;
1c00c846:	408a8733          	sub	a4,s5,s0
1c00c84a:	87ee                	mv	a5,s11
1c00c84c:	843e                	mv	s0,a5
1c00c84e:	00e78ab3          	add	s5,a5,a4
1c00c852:	a599                	j	1c00ce98 <_prf+0xa66>
					val = va_arg(vargs, int);
1c00c854:	00092583          	lw	a1,0(s2)
1c00c858:	00490a13          	addi	s4,s2,4
1c00c85c:	41f5da93          	srai	s5,a1,0x1f
					break;
1c00c860:	bd41                	j	1c00c6f0 <_prf+0x2be>
	} else if (fplus) {
1c00c862:	47b2                	lw	a5,12(sp)
1c00c864:	c799                	beqz	a5,1c00c872 <_prf+0x440>
		*buf++ = '+';
1c00c866:	02b00793          	li	a5,43
		*buf++ = ' ';
1c00c86a:	04f10223          	sb	a5,68(sp)
1c00c86e:	8656                	mv	a2,s5
1c00c870:	bd79                	j	1c00c70e <_prf+0x2dc>
	} else if (fspace) {
1c00c872:	4742                	lw	a4,16(sp)
1c00c874:	c701                	beqz	a4,1c00c87c <_prf+0x44a>
		*buf++ = ' ';
1c00c876:	02000793          	li	a5,32
1c00c87a:	bfc5                	j	1c00c86a <_prf+0x438>
	} else if (fspace) {
1c00c87c:	8656                	mv	a2,s5
1c00c87e:	896e                	mv	s2,s11
1c00c880:	bd49                	j	1c00c712 <_prf+0x2e0>
				u.d = va_arg(vargs, double);
1c00c882:	091d                	addi	s2,s2,7
1c00c884:	c4093933          	p.bclr	s2,s2,2,0
				double_val = u.i;
1c00c888:	00092583          	lw	a1,0(s2)
1c00c88c:	00492683          	lw	a3,4(s2)
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00c890:	800007b7          	lui	a5,0x80000
1c00c894:	0155d613          	srli	a2,a1,0x15
1c00c898:	00b69713          	slli	a4,a3,0xb
1c00c89c:	8f51                	or	a4,a4,a2
1c00c89e:	fff7c793          	not	a5,a5
1c00c8a2:	05ae                	slli	a1,a1,0xb
1c00c8a4:	8f7d                	and	a4,a4,a5
				u.d = va_arg(vargs, double);
1c00c8a6:	00890a13          	addi	s4,s2,8
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00c8aa:	d82e                	sw	a1,48(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00c8ac:	0146d913          	srli	s2,a3,0x14
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00c8b0:	da3a                	sw	a4,52(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00c8b2:	e8b93933          	p.bclr	s2,s2,20,11
	if (sign) {
1c00c8b6:	0806d863          	bgez	a3,1c00c946 <_prf+0x514>
		*buf++ = '-';
1c00c8ba:	02d00693          	li	a3,45
		*buf++ = ' ';
1c00c8be:	04d10223          	sb	a3,68(sp)
1c00c8c2:	04510493          	addi	s1,sp,69
	if (exp == 0x7ff) {
1c00c8c6:	7ff00693          	li	a3,2047
1c00c8ca:	0cd91363          	bne	s2,a3,1c00c990 <_prf+0x55e>
		if (!fract) {
1c00c8ce:	8f4d                	or	a4,a4,a1
1c00c8d0:	fbfd8793          	addi	a5,s11,-65
1c00c8d4:	00348513          	addi	a0,s1,3
1c00c8d8:	eb49                	bnez	a4,1c00c96a <_prf+0x538>
			if (isupper(c)) {
1c00c8da:	4765                	li	a4,25
1c00c8dc:	06f76f63          	bltu	a4,a5,1c00c95a <_prf+0x528>
				*buf++ = 'I';
1c00c8e0:	6795                	lui	a5,0x5
1c00c8e2:	e4978793          	addi	a5,a5,-439 # 4e49 <__rt_stack_size+0x4649>
1c00c8e6:	00f49023          	sh	a5,0(s1)
				*buf++ = 'N';
1c00c8ea:	04600793          	li	a5,70
		return buf - start;
1c00c8ee:	04410913          	addi	s2,sp,68
				*buf++ = 'a';
1c00c8f2:	00f48123          	sb	a5,2(s1)
		*buf = 0;
1c00c8f6:	000481a3          	sb	zero,3(s1)
		return buf - start;
1c00c8fa:	41250533          	sub	a0,a0,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00c8fe:	4401                	li	s0,0
1c00c900:	4a81                	li	s5,0
1c00c902:	4681                	li	a3,0
				if (fplus || fspace || (buf[0] == '-')) {
1c00c904:	4732                	lw	a4,12(sp)
					prefix = 1;
1c00c906:	4905                	li	s2,1
				if (fplus || fspace || (buf[0] == '-')) {
1c00c908:	eb09                	bnez	a4,1c00c91a <_prf+0x4e8>
1c00c90a:	47c2                	lw	a5,16(sp)
1c00c90c:	e799                	bnez	a5,1c00c91a <_prf+0x4e8>
1c00c90e:	04414903          	lbu	s2,68(sp)
1c00c912:	fd390913          	addi	s2,s2,-45
1c00c916:	00193913          	seqz	s2,s2
				if (!isdigit(buf[prefix])) {
1c00c91a:	1098                	addi	a4,sp,96
1c00c91c:	012707b3          	add	a5,a4,s2
1c00c920:	fe47c783          	lbu	a5,-28(a5)
				clen += zero.predot + zero.postdot + zero.trail;
1c00c924:	015684b3          	add	s1,a3,s5
1c00c928:	94a2                	add	s1,s1,s0
1c00c92a:	fd078793          	addi	a5,a5,-48
				if (!isdigit(buf[prefix])) {
1c00c92e:	4625                	li	a2,9
				clen += zero.predot + zero.postdot + zero.trail;
1c00c930:	00a48db3          	add	s11,s1,a0
				if (!isdigit(buf[prefix])) {
1c00c934:	46f66e63          	bltu	a2,a5,1c00cdb0 <_prf+0x97e>
			} else if (fzero) {
1c00c938:	47f2                	lw	a5,28(sp)
1c00c93a:	46078b63          	beqz	a5,1c00cdb0 <_prf+0x97e>
				zero_head = width - clen;
1c00c93e:	41bc8d33          	sub	s10,s9,s11
1c00c942:	00dc                	addi	a5,sp,68
1c00c944:	bd81                	j	1c00c794 <_prf+0x362>
	} else if (fplus) {
1c00c946:	47b2                	lw	a5,12(sp)
		*buf++ = '+';
1c00c948:	02b00693          	li	a3,43
	} else if (fplus) {
1c00c94c:	fbad                	bnez	a5,1c00c8be <_prf+0x48c>
	} else if (fspace) {
1c00c94e:	47c2                	lw	a5,16(sp)
1c00c950:	00c4                	addi	s1,sp,68
1c00c952:	dbb5                	beqz	a5,1c00c8c6 <_prf+0x494>
		*buf++ = ' ';
1c00c954:	02000693          	li	a3,32
1c00c958:	b79d                	j	1c00c8be <_prf+0x48c>
				*buf++ = 'i';
1c00c95a:	679d                	lui	a5,0x7
1c00c95c:	e6978793          	addi	a5,a5,-407 # 6e69 <__rt_stack_size+0x6669>
1c00c960:	00f49023          	sh	a5,0(s1)
				*buf++ = 'n';
1c00c964:	06600793          	li	a5,102
1c00c968:	b759                	j	1c00c8ee <_prf+0x4bc>
			if (isupper(c)) {
1c00c96a:	4765                	li	a4,25
1c00c96c:	00f76a63          	bltu	a4,a5,1c00c980 <_prf+0x54e>
				*buf++ = 'N';
1c00c970:	6791                	lui	a5,0x4
1c00c972:	14e78793          	addi	a5,a5,334 # 414e <__rt_stack_size+0x394e>
1c00c976:	00f49023          	sh	a5,0(s1)
				*buf++ = 'A';
1c00c97a:	04e00793          	li	a5,78
1c00c97e:	bf85                	j	1c00c8ee <_prf+0x4bc>
				*buf++ = 'n';
1c00c980:	6799                	lui	a5,0x6
1c00c982:	16e78793          	addi	a5,a5,366 # 616e <__rt_stack_size+0x596e>
1c00c986:	00f49023          	sh	a5,0(s1)
				*buf++ = 'a';
1c00c98a:	06e00793          	li	a5,110
1c00c98e:	b785                	j	1c00c8ee <_prf+0x4bc>
	if (c == 'F') {
1c00c990:	04600693          	li	a3,70
1c00c994:	00dd9463          	bne	s11,a3,1c00c99c <_prf+0x56a>
		c = 'f';
1c00c998:	06600d93          	li	s11,102
	if ((exp | fract) != 0) {
1c00c99c:	41f95613          	srai	a2,s2,0x1f
1c00c9a0:	00b966b3          	or	a3,s2,a1
1c00c9a4:	8e59                	or	a2,a2,a4
1c00c9a6:	8ed1                	or	a3,a3,a2
1c00c9a8:	1c068263          	beqz	a3,1c00cb6c <_prf+0x73a>
		if (exp == 0) {
1c00c9ac:	10090d63          	beqz	s2,1c00cac6 <_prf+0x694>
		fract |= HIGHBIT64;
1c00c9b0:	5752                	lw	a4,52(sp)
1c00c9b2:	800007b7          	lui	a5,0x80000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
1c00c9b6:	c0290913          	addi	s2,s2,-1022
		fract |= HIGHBIT64;
1c00c9ba:	8f5d                	or	a4,a4,a5
1c00c9bc:	da3a                	sw	a4,52(sp)
1c00c9be:	4d01                	li	s10,0
	while (exp <= -3) {
1c00c9c0:	5779                	li	a4,-2
1c00c9c2:	10e94f63          	blt	s2,a4,1c00cae0 <_prf+0x6ae>
	while (exp > 0) {
1c00c9c6:	17204663          	bgtz	s2,1c00cb32 <_prf+0x700>
		_rlrshift(&fract);
1c00c9ca:	1808                	addi	a0,sp,48
		exp++;
1c00c9cc:	0905                	addi	s2,s2,1
		_rlrshift(&fract);
1c00c9ce:	9cdff0ef          	jal	ra,1c00c39a <_rlrshift>
	while (exp < (0 + 4)) {
1c00c9d2:	fe493ce3          	p.bneimm	s2,4,1c00c9ca <_prf+0x598>
	if (precision < 0) {
1c00c9d6:	00045363          	bgez	s0,1c00c9dc <_prf+0x5aa>
		precision = 6;		/* Default precision if none given */
1c00c9da:	4419                	li	s0,6
	if ((c == 'g') || (c == 'G')) {
1c00c9dc:	0dfdf713          	andi	a4,s11,223
1c00c9e0:	04700693          	li	a3,71
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00c9e4:	ca02                	sw	zero,20(sp)
	if ((c == 'g') || (c == 'G')) {
1c00c9e6:	02d71563          	bne	a4,a3,1c00ca10 <_prf+0x5de>
		if (decexp < (-4 + 1) || decexp > precision) {
1c00c9ea:	5775                	li	a4,-3
1c00c9ec:	00ed4463          	blt	s10,a4,1c00c9f4 <_prf+0x5c2>
1c00c9f0:	19a45163          	ble	s10,s0,1c00cb72 <_prf+0x740>
			c += 'e' - 'g';
1c00c9f4:	ffed8793          	addi	a5,s11,-2
1c00c9f8:	0ff7fd93          	andi	s11,a5,255
			if (precision > 0) {
1c00c9fc:	4c040e63          	beqz	s0,1c00ced8 <_prf+0xaa6>
				precision--;
1c00ca00:	147d                	addi	s0,s0,-1
		if (!falt && (precision > 0)) {
1c00ca02:	4c0a9b63          	bnez	s5,1c00ced8 <_prf+0xaa6>
1c00ca06:	00802933          	sgtz	s2,s0
1c00ca0a:	0ff97913          	andi	s2,s2,255
1c00ca0e:	ca4a                	sw	s2,20(sp)
	if (c == 'f') {
1c00ca10:	06600713          	li	a4,102
1c00ca14:	4ced9363          	bne	s11,a4,1c00ceda <_prf+0xaa8>
		exp = precision + decexp;
1c00ca18:	008d0733          	add	a4,s10,s0
		if (exp < 0) {
1c00ca1c:	06600d93          	li	s11,102
1c00ca20:	4a075f63          	bgez	a4,1c00cede <_prf+0xaac>
	digit_count = 16;
1c00ca24:	4741                	li	a4,16
1c00ca26:	d63a                	sw	a4,44(sp)
			exp = 0;
1c00ca28:	4901                	li	s2,0
	ltemp = 0x0800000000000000;
1c00ca2a:	4601                	li	a2,0
1c00ca2c:	080006b7          	lui	a3,0x8000
1c00ca30:	dc32                	sw	a2,56(sp)
1c00ca32:	de36                	sw	a3,60(sp)
	while (exp--) {
1c00ca34:	197d                	addi	s2,s2,-1
1c00ca36:	15f93563          	p.bneimm	s2,-1,1c00cb80 <_prf+0x74e>
	fract += ltemp;
1c00ca3a:	5742                	lw	a4,48(sp)
1c00ca3c:	56e2                	lw	a3,56(sp)
1c00ca3e:	5652                	lw	a2,52(sp)
1c00ca40:	55f2                	lw	a1,60(sp)
1c00ca42:	96ba                	add	a3,a3,a4
1c00ca44:	00e6b733          	sltu	a4,a3,a4
1c00ca48:	962e                	add	a2,a2,a1
1c00ca4a:	9732                	add	a4,a4,a2
1c00ca4c:	da3a                	sw	a4,52(sp)
1c00ca4e:	d836                	sw	a3,48(sp)
	if ((fract >> 32) & 0xF0000000) {
1c00ca50:	f6073733          	p.bclr	a4,a4,27,0
1c00ca54:	cb01                	beqz	a4,1c00ca64 <_prf+0x632>
		_ldiv5(&fract);
1c00ca56:	1808                	addi	a0,sp,48
1c00ca58:	963ff0ef          	jal	ra,1c00c3ba <_ldiv5>
		_rlrshift(&fract);
1c00ca5c:	1808                	addi	a0,sp,48
1c00ca5e:	93dff0ef          	jal	ra,1c00c39a <_rlrshift>
		decexp++;
1c00ca62:	0d05                	addi	s10,s10,1
	if (c == 'f') {
1c00ca64:	06600713          	li	a4,102
1c00ca68:	16ed9163          	bne	s11,a4,1c00cbca <_prf+0x798>
		if (decexp > 0) {
1c00ca6c:	8926                	mv	s2,s1
1c00ca6e:	13a04963          	bgtz	s10,1c00cba0 <_prf+0x76e>
			*buf++ = '0';
1c00ca72:	03000713          	li	a4,48
1c00ca76:	00e48023          	sb	a4,0(s1)
1c00ca7a:	00148913          	addi	s2,s1,1
			zero.predot = zero.postdot = zero.trail = 0;
1c00ca7e:	4681                	li	a3,0
		if (falt || (precision > 0)) {
1c00ca80:	120a8763          	beqz	s5,1c00cbae <_prf+0x77c>
			*buf++ = '.';
1c00ca84:	02e00593          	li	a1,46
1c00ca88:	00b90023          	sb	a1,0(s2)
1c00ca8c:	00190713          	addi	a4,s2,1
		if (decexp < 0 && precision > 0) {
1c00ca90:	440d0263          	beqz	s10,1c00ced4 <_prf+0xaa2>
1c00ca94:	12805863          	blez	s0,1c00cbc4 <_prf+0x792>
			zp->postdot = -decexp;
1c00ca98:	41a00ab3          	neg	s5,s10
1c00ca9c:	048acab3          	p.min	s5,s5,s0
			precision -= zp->postdot;
1c00caa0:	41540433          	sub	s0,s0,s5
			zero.predot = zero.postdot = zero.trail = 0;
1c00caa4:	893a                	mv	s2,a4
		while (precision > 0 && digit_count > 0) {
1c00caa6:	10805763          	blez	s0,1c00cbb4 <_prf+0x782>
1c00caaa:	5732                	lw	a4,44(sp)
1c00caac:	10e05463          	blez	a4,1c00cbb4 <_prf+0x782>
			*buf++ = _get_digit(&fract, &digit_count);
1c00cab0:	106c                	addi	a1,sp,44
1c00cab2:	1808                	addi	a0,sp,48
1c00cab4:	c036                	sw	a3,0(sp)
1c00cab6:	949ff0ef          	jal	ra,1c00c3fe <_get_digit>
1c00caba:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00cabe:	147d                	addi	s0,s0,-1
1c00cac0:	4682                	lw	a3,0(sp)
1c00cac2:	b7d5                	j	1c00caa6 <_prf+0x674>
				exp--;
1c00cac4:	197d                	addi	s2,s2,-1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
1c00cac6:	01f5d693          	srli	a3,a1,0x1f
1c00caca:	0706                	slli	a4,a4,0x1
1c00cacc:	8f55                	or	a4,a4,a3
1c00cace:	0586                	slli	a1,a1,0x1
1c00cad0:	fe075ae3          	bgez	a4,1c00cac4 <_prf+0x692>
1c00cad4:	d82e                	sw	a1,48(sp)
1c00cad6:	da3a                	sw	a4,52(sp)
1c00cad8:	bde1                	j	1c00c9b0 <_prf+0x57e>
			_rlrshift(&fract);
1c00cada:	1808                	addi	a0,sp,48
1c00cadc:	8bfff0ef          	jal	ra,1c00c39a <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
1c00cae0:	55d2                	lw	a1,52(sp)
1c00cae2:	33333737          	lui	a4,0x33333
1c00cae6:	33270713          	addi	a4,a4,818 # 33333332 <__l2_end+0x1732505e>
1c00caea:	5642                	lw	a2,48(sp)
1c00caec:	0905                	addi	s2,s2,1
1c00caee:	feb766e3          	bltu	a4,a1,1c00cada <_prf+0x6a8>
		fract *= 5U;
1c00caf2:	4695                	li	a3,5
1c00caf4:	02c6b733          	mulhu	a4,a3,a2
		decexp--;
1c00caf8:	1d7d                	addi	s10,s10,-1
		fract *= 5U;
1c00cafa:	02c68633          	mul	a2,a3,a2
1c00cafe:	42b68733          	p.mac	a4,a3,a1
1c00cb02:	d832                	sw	a2,48(sp)
		decexp--;
1c00cb04:	4681                	li	a3,0
		fract *= 5U;
1c00cb06:	da3a                	sw	a4,52(sp)
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00cb08:	800007b7          	lui	a5,0x80000
1c00cb0c:	fff7c793          	not	a5,a5
1c00cb10:	00e7f763          	bleu	a4,a5,1c00cb1e <_prf+0x6ec>
1c00cb14:	ea0686e3          	beqz	a3,1c00c9c0 <_prf+0x58e>
1c00cb18:	d832                	sw	a2,48(sp)
1c00cb1a:	da3a                	sw	a4,52(sp)
1c00cb1c:	b555                	j	1c00c9c0 <_prf+0x58e>
			fract <<= 1;
1c00cb1e:	01f65593          	srli	a1,a2,0x1f
1c00cb22:	00171693          	slli	a3,a4,0x1
1c00cb26:	00d5e733          	or	a4,a1,a3
1c00cb2a:	0606                	slli	a2,a2,0x1
			exp--;
1c00cb2c:	197d                	addi	s2,s2,-1
1c00cb2e:	4685                	li	a3,1
1c00cb30:	bfe1                	j	1c00cb08 <_prf+0x6d6>
		_ldiv5(&fract);
1c00cb32:	1808                	addi	a0,sp,48
1c00cb34:	887ff0ef          	jal	ra,1c00c3ba <_ldiv5>
1c00cb38:	5642                	lw	a2,48(sp)
1c00cb3a:	5752                	lw	a4,52(sp)
		exp--;
1c00cb3c:	197d                	addi	s2,s2,-1
		decexp++;
1c00cb3e:	0d05                	addi	s10,s10,1
1c00cb40:	4681                	li	a3,0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00cb42:	800007b7          	lui	a5,0x80000
1c00cb46:	fff7c793          	not	a5,a5
1c00cb4a:	00e7f763          	bleu	a4,a5,1c00cb58 <_prf+0x726>
1c00cb4e:	e6068ce3          	beqz	a3,1c00c9c6 <_prf+0x594>
1c00cb52:	d832                	sw	a2,48(sp)
1c00cb54:	da3a                	sw	a4,52(sp)
1c00cb56:	bd85                	j	1c00c9c6 <_prf+0x594>
			fract <<= 1;
1c00cb58:	01f65593          	srli	a1,a2,0x1f
1c00cb5c:	00171693          	slli	a3,a4,0x1
1c00cb60:	00d5e733          	or	a4,a1,a3
1c00cb64:	0606                	slli	a2,a2,0x1
			exp--;
1c00cb66:	197d                	addi	s2,s2,-1
1c00cb68:	4685                	li	a3,1
1c00cb6a:	bfe1                	j	1c00cb42 <_prf+0x710>
	if ((exp | fract) != 0) {
1c00cb6c:	4d01                	li	s10,0
1c00cb6e:	4901                	li	s2,0
1c00cb70:	bda9                	j	1c00c9ca <_prf+0x598>
			precision -= decexp;
1c00cb72:	41a40433          	sub	s0,s0,s10
		if (!falt && (precision > 0)) {
1c00cb76:	ea0a91e3          	bnez	s5,1c00ca18 <_prf+0x5e6>
			c = 'f';
1c00cb7a:	06600d93          	li	s11,102
1c00cb7e:	b561                	j	1c00ca06 <_prf+0x5d4>
		_ldiv5(&ltemp);
1c00cb80:	1828                	addi	a0,sp,56
1c00cb82:	839ff0ef          	jal	ra,1c00c3ba <_ldiv5>
		_rlrshift(&ltemp);
1c00cb86:	1828                	addi	a0,sp,56
1c00cb88:	813ff0ef          	jal	ra,1c00c39a <_rlrshift>
1c00cb8c:	b565                	j	1c00ca34 <_prf+0x602>
				*buf++ = _get_digit(&fract, &digit_count);
1c00cb8e:	106c                	addi	a1,sp,44
1c00cb90:	1808                	addi	a0,sp,48
1c00cb92:	86dff0ef          	jal	ra,1c00c3fe <_get_digit>
1c00cb96:	00a900ab          	p.sb	a0,1(s2!)
				decexp--;
1c00cb9a:	1d7d                	addi	s10,s10,-1
			while (decexp > 0 && digit_count > 0) {
1c00cb9c:	000d0563          	beqz	s10,1c00cba6 <_prf+0x774>
1c00cba0:	5732                	lw	a4,44(sp)
1c00cba2:	fee046e3          	bgtz	a4,1c00cb8e <_prf+0x75c>
		if (falt || (precision > 0)) {
1c00cba6:	300a9f63          	bnez	s5,1c00cec4 <_prf+0xa92>
			zp->predot = decexp;
1c00cbaa:	86ea                	mv	a3,s10
			decexp = 0;
1c00cbac:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00cbae:	4a81                	li	s5,0
		if (falt || (precision > 0)) {
1c00cbb0:	ec804ae3          	bgtz	s0,1c00ca84 <_prf+0x652>
	if (prune_zero) {
1c00cbb4:	4752                	lw	a4,20(sp)
1c00cbb6:	eb31                	bnez	a4,1c00cc0a <_prf+0x7d8>
	return buf - start;
1c00cbb8:	00c8                	addi	a0,sp,68
	*buf = 0;
1c00cbba:	00090023          	sb	zero,0(s2)
	return buf - start;
1c00cbbe:	40a90533          	sub	a0,s2,a0
1c00cbc2:	b389                	j	1c00c904 <_prf+0x4d2>
			*buf++ = '.';
1c00cbc4:	893a                	mv	s2,a4
			zero.predot = zero.postdot = zero.trail = 0;
1c00cbc6:	4a81                	li	s5,0
1c00cbc8:	b7f5                	j	1c00cbb4 <_prf+0x782>
		*buf = _get_digit(&fract, &digit_count);
1c00cbca:	106c                	addi	a1,sp,44
1c00cbcc:	1808                	addi	a0,sp,48
1c00cbce:	831ff0ef          	jal	ra,1c00c3fe <_get_digit>
1c00cbd2:	00a48023          	sb	a0,0(s1)
		if (*buf++ != '0') {
1c00cbd6:	03000713          	li	a4,48
1c00cbda:	00e50363          	beq	a0,a4,1c00cbe0 <_prf+0x7ae>
			decexp--;
1c00cbde:	1d7d                	addi	s10,s10,-1
		if (falt || (precision > 0)) {
1c00cbe0:	000a9663          	bnez	s5,1c00cbec <_prf+0x7ba>
		if (*buf++ != '0') {
1c00cbe4:	00148913          	addi	s2,s1,1
		if (falt || (precision > 0)) {
1c00cbe8:	00805d63          	blez	s0,1c00cc02 <_prf+0x7d0>
			*buf++ = '.';
1c00cbec:	02e00713          	li	a4,46
1c00cbf0:	00248913          	addi	s2,s1,2
1c00cbf4:	00e480a3          	sb	a4,1(s1)
		while (precision > 0 && digit_count > 0) {
1c00cbf8:	00805563          	blez	s0,1c00cc02 <_prf+0x7d0>
1c00cbfc:	5732                	lw	a4,44(sp)
1c00cbfe:	08e04663          	bgtz	a4,1c00cc8a <_prf+0x858>
	if (prune_zero) {
1c00cc02:	47d2                	lw	a5,20(sp)
			zero.predot = zero.postdot = zero.trail = 0;
1c00cc04:	4a81                	li	s5,0
1c00cc06:	4681                	li	a3,0
	if (prune_zero) {
1c00cc08:	cf99                	beqz	a5,1c00cc26 <_prf+0x7f4>
		while (*--buf == '0')
1c00cc0a:	03000513          	li	a0,48
1c00cc0e:	fff90713          	addi	a4,s2,-1
1c00cc12:	00074583          	lbu	a1,0(a4)
1c00cc16:	08a58263          	beq	a1,a0,1c00cc9a <_prf+0x868>
		if (*buf != '.') {
1c00cc1a:	02e00513          	li	a0,46
		zp->trail = 0;
1c00cc1e:	4401                	li	s0,0
		if (*buf != '.') {
1c00cc20:	00a59363          	bne	a1,a0,1c00cc26 <_prf+0x7f4>
		while (*--buf == '0')
1c00cc24:	893a                	mv	s2,a4
	if ((c == 'e') || (c == 'E')) {
1c00cc26:	0dfdf713          	andi	a4,s11,223
1c00cc2a:	04500593          	li	a1,69
1c00cc2e:	f8b715e3          	bne	a4,a1,1c00cbb8 <_prf+0x786>
		*buf++ = c;
1c00cc32:	85ca                	mv	a1,s2
1c00cc34:	01b5812b          	p.sb	s11,2(a1!)
			*buf++ = '+';
1c00cc38:	02b00793          	li	a5,43
		if (decexp < 0) {
1c00cc3c:	000d5663          	bgez	s10,1c00cc48 <_prf+0x816>
			decexp = -decexp;
1c00cc40:	41a00d33          	neg	s10,s10
			*buf++ = '-';
1c00cc44:	02d00793          	li	a5,45
			*buf++ = '+';
1c00cc48:	00f900a3          	sb	a5,1(s2)
		if (decexp >= 100) {
1c00cc4c:	06300793          	li	a5,99
1c00cc50:	01a7de63          	ble	s10,a5,1c00cc6c <_prf+0x83a>
			*buf++ = (decexp / 100) + '0';
1c00cc54:	06400713          	li	a4,100
1c00cc58:	02ed47b3          	div	a5,s10,a4
1c00cc5c:	00390593          	addi	a1,s2,3
			decexp %= 100;
1c00cc60:	02ed6d33          	rem	s10,s10,a4
			*buf++ = (decexp / 100) + '0';
1c00cc64:	03078793          	addi	a5,a5,48 # 80000030 <pulp__FC+0x80000031>
1c00cc68:	00f90123          	sb	a5,2(s2)
		*buf++ = (decexp / 10) + '0';
1c00cc6c:	47a9                	li	a5,10
1c00cc6e:	892e                	mv	s2,a1
1c00cc70:	02fd4733          	div	a4,s10,a5
		decexp %= 10;
1c00cc74:	02fd68b3          	rem	a7,s10,a5
		*buf++ = (decexp / 10) + '0';
1c00cc78:	03070713          	addi	a4,a4,48
1c00cc7c:	00e9012b          	p.sb	a4,2(s2!)
		*buf++ = decexp + '0';
1c00cc80:	03088893          	addi	a7,a7,48
1c00cc84:	011580a3          	sb	a7,1(a1)
1c00cc88:	bf05                	j	1c00cbb8 <_prf+0x786>
			*buf++ = _get_digit(&fract, &digit_count);
1c00cc8a:	106c                	addi	a1,sp,44
1c00cc8c:	1808                	addi	a0,sp,48
1c00cc8e:	f70ff0ef          	jal	ra,1c00c3fe <_get_digit>
1c00cc92:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00cc96:	147d                	addi	s0,s0,-1
1c00cc98:	b785                	j	1c00cbf8 <_prf+0x7c6>
		while (*--buf == '0')
1c00cc9a:	893a                	mv	s2,a4
1c00cc9c:	bf8d                	j	1c00cc0e <_prf+0x7dc>
1c00cc9e:	8a4a                	mv	s4,s2
				switch (i) {
1c00cca0:	04c00693          	li	a3,76
1c00cca4:	004a278b          	p.lw	a5,4(s4!)
1c00cca8:	02d48a63          	beq	s1,a3,1c00ccdc <_prf+0x8aa>
1c00ccac:	0096c963          	blt	a3,s1,1c00ccbe <_prf+0x88c>
1c00ccb0:	04800693          	li	a3,72
1c00ccb4:	02d48063          	beq	s1,a3,1c00ccd4 <_prf+0x8a2>
					*va_arg(vargs, int *) = count;
1c00ccb8:	0137a023          	sw	s3,0(a5)
					break;
1c00ccbc:	a801                	j	1c00cccc <_prf+0x89a>
				switch (i) {
1c00ccbe:	06800693          	li	a3,104
1c00ccc2:	fed49be3          	bne	s1,a3,1c00ccb8 <_prf+0x886>
					*va_arg(vargs, short *) = count;
1c00ccc6:	874e                	mv	a4,s3
1c00ccc8:	00e79023          	sh	a4,0(a5)
				continue;
1c00cccc:	8952                	mv	s2,s4
1c00ccce:	8662                	mv	a2,s8
1c00ccd0:	f86ff06f          	j	1c00c456 <_prf+0x24>
					*va_arg(vargs, char *) = count;
1c00ccd4:	874e                	mv	a4,s3
1c00ccd6:	00e78023          	sb	a4,0(a5)
					break;
1c00ccda:	bfcd                	j	1c00cccc <_prf+0x89a>
					*va_arg(vargs, long long *) = count;
1c00ccdc:	41f9d713          	srai	a4,s3,0x1f
1c00cce0:	0137a023          	sw	s3,0(a5)
1c00cce4:	c3d8                	sw	a4,4(a5)
					break;
1c00cce6:	b7dd                	j	1c00cccc <_prf+0x89a>
				clen = _to_hex(buf, val, true, 'x');
1c00cce8:	00092583          	lw	a1,0(s2)
		*buf++ = '0';
1c00ccec:	77e1                	lui	a5,0xffff8
1c00ccee:	8307c793          	xori	a5,a5,-2000
	len = _to_x(buf, value, 16);
1c00ccf2:	46c1                	li	a3,16
1c00ccf4:	4601                	li	a2,0
1c00ccf6:	04610513          	addi	a0,sp,70
		*buf++ = '0';
1c00ccfa:	04f11223          	sh	a5,68(sp)
	len = _to_x(buf, value, 16);
1c00ccfe:	e0aff0ef          	jal	ra,1c00c308 <_to_x>
				val = (uintptr_t) va_arg(vargs, void *);
1c00cd02:	00490a13          	addi	s4,s2,4
	return len + (buf - buf0);
1c00cd06:	00250d93          	addi	s11,a0,2
				prefix = 2;
1c00cd0a:	4909                	li	s2,2
				break;
1c00cd0c:	b40d                	j	1c00c72e <_prf+0x2fc>
					if (cptr[clen] == '\0') {
1c00cd0e:	0016c60b          	p.lbu	a2,1(a3!) # 8000001 <__L2+0x7f80001>
1c00cd12:	a4060ee3          	beqz	a2,1c00c76e <_prf+0x33c>
				for (clen = 0; clen < precision; clen++) {
1c00cd16:	0d85                	addi	s11,s11,1
1c00cd18:	bc89                	j	1c00c76a <_prf+0x338>
					val = va_arg(vargs, unsigned int);
1c00cd1a:	00490a13          	addi	s4,s2,4
1c00cd1e:	00092583          	lw	a1,0(s2)
1c00cd22:	4601                	li	a2,0
					break;
1c00cd24:	ba99                	j	1c00c67a <_prf+0x248>
	if (alt_form) {
1c00cd26:	8526                	mv	a0,s1
	return (buf - buf0) + _to_x(buf, value, 8);
1c00cd28:	46a1                	li	a3,8
1c00cd2a:	409504b3          	sub	s1,a0,s1
1c00cd2e:	ddaff0ef          	jal	ra,1c00c308 <_to_x>
1c00cd32:	00a48db3          	add	s11,s1,a0
			prefix = 0;
1c00cd36:	4901                	li	s2,0
1c00cd38:	badd                	j	1c00c72e <_prf+0x2fc>
				} else if (c == 'u') {
1c00cd3a:	07500713          	li	a4,117
1c00cd3e:	00ed9863          	bne	s11,a4,1c00cd4e <_prf+0x91c>
	return _to_x(buf, value, 10);
1c00cd42:	46a9                	li	a3,10
1c00cd44:	8526                	mv	a0,s1
1c00cd46:	dc2ff0ef          	jal	ra,1c00c308 <_to_x>
1c00cd4a:	8daa                	mv	s11,a0
1c00cd4c:	b7ed                	j	1c00cd36 <_prf+0x904>
	if (alt_form) {
1c00cd4e:	8d26                	mv	s10,s1
1c00cd50:	000a8963          	beqz	s5,1c00cd62 <_prf+0x930>
		*buf++ = '0';
1c00cd54:	7761                	lui	a4,0xffff8
1c00cd56:	83074713          	xori	a4,a4,-2000
1c00cd5a:	04e11223          	sh	a4,68(sp)
		*buf++ = 'x';
1c00cd5e:	04610d13          	addi	s10,sp,70
	len = _to_x(buf, value, 16);
1c00cd62:	46c1                	li	a3,16
1c00cd64:	856a                	mv	a0,s10
1c00cd66:	da2ff0ef          	jal	ra,1c00c308 <_to_x>
	if (prefix == 'X') {
1c00cd6a:	05800713          	li	a4,88
1c00cd6e:	02ed9263          	bne	s11,a4,1c00cd92 <_prf+0x960>
1c00cd72:	87a6                	mv	a5,s1
		if (*buf >= 'a' && *buf <= 'z') {
1c00cd74:	45e5                	li	a1,25
1c00cd76:	0017c68b          	p.lbu	a3,1(a5!) # ffff8001 <pulp__FC+0xffff8002>
1c00cd7a:	f9f68613          	addi	a2,a3,-97
1c00cd7e:	0ff67613          	andi	a2,a2,255
1c00cd82:	00c5e563          	bltu	a1,a2,1c00cd8c <_prf+0x95a>
			*buf += 'A' - 'a';
1c00cd86:	1681                	addi	a3,a3,-32
1c00cd88:	fed78fa3          	sb	a3,-1(a5)
	} while (*buf++);
1c00cd8c:	fff7c703          	lbu	a4,-1(a5)
1c00cd90:	f37d                	bnez	a4,1c00cd76 <_prf+0x944>
	return len + (buf - buf0);
1c00cd92:	409d0733          	sub	a4,s10,s1
1c00cd96:	00a70db3          	add	s11,a4,a0
			prefix = 0;
1c00cd9a:	001a9913          	slli	s2,s5,0x1
1c00cd9e:	ba41                	j	1c00c72e <_prf+0x2fc>
				PUTC('%');
1c00cda0:	85de                	mv	a1,s7
1c00cda2:	02500513          	li	a0,37
1c00cda6:	ec4ff06f          	j	1c00c46a <_prf+0x38>
				count++;
1c00cdaa:	0985                	addi	s3,s3,1
				continue;
1c00cdac:	8a4a                	mv	s4,s2
1c00cdae:	bf39                	j	1c00cccc <_prf+0x89a>
1c00cdb0:	00dc                	addi	a5,sp,68
				zero_head = 0;
1c00cdb2:	4d01                	li	s10,0
1c00cdb4:	b2d5                	j	1c00c798 <_prf+0x366>
					PUTC(' ');
1c00cdb6:	85de                	mv	a1,s7
1c00cdb8:	02000513          	li	a0,32
1c00cdbc:	c036                	sw	a3,0(sp)
1c00cdbe:	c43e                	sw	a5,8(sp)
1c00cdc0:	9b02                	jalr	s6
1c00cdc2:	4682                	lw	a3,0(sp)
1c00cdc4:	47a2                	lw	a5,8(sp)
1c00cdc6:	ebf52563          	p.beqimm	a0,-1,1c00c470 <_prf+0x3e>
				while (width-- > 0) {
1c00cdca:	14fd                	addi	s1,s1,-1
1c00cdcc:	fff4b5e3          	p.bneimm	s1,-1,1c00cdb6 <_prf+0x984>
				count += width;
1c00cdd0:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00cdd2:	5cfd                	li	s9,-1
1c00cdd4:	bad9                	j	1c00c7aa <_prf+0x378>
				PUTC(*cptr++);
1c00cdd6:	0017c50b          	p.lbu	a0,1(a5!)
1c00cdda:	85de                	mv	a1,s7
1c00cddc:	c036                	sw	a3,0(sp)
1c00cdde:	c43e                	sw	a5,8(sp)
1c00cde0:	9b02                	jalr	s6
1c00cde2:	4682                	lw	a3,0(sp)
1c00cde4:	47a2                	lw	a5,8(sp)
1c00cde6:	9df534e3          	p.bneimm	a0,-1,1c00c7ae <_prf+0x37c>
1c00cdea:	e86ff06f          	j	1c00c470 <_prf+0x3e>
				PUTC('0');
1c00cdee:	85de                	mv	a1,s7
1c00cdf0:	03000513          	li	a0,48
1c00cdf4:	c036                	sw	a3,0(sp)
1c00cdf6:	c43e                	sw	a5,8(sp)
1c00cdf8:	9b02                	jalr	s6
1c00cdfa:	4682                	lw	a3,0(sp)
1c00cdfc:	47a2                	lw	a5,8(sp)
1c00cdfe:	9bf53be3          	p.bneimm	a0,-1,1c00c7b4 <_prf+0x382>
1c00ce02:	e6eff06f          	j	1c00c470 <_prf+0x3e>
					PUTC(c);
1c00ce06:	85de                	mv	a1,s7
1c00ce08:	c232                	sw	a2,4(sp)
1c00ce0a:	c036                	sw	a3,0(sp)
1c00ce0c:	c442                	sw	a6,8(sp)
1c00ce0e:	9b02                	jalr	s6
1c00ce10:	4612                	lw	a2,4(sp)
1c00ce12:	4682                	lw	a3,0(sp)
1c00ce14:	4822                	lw	a6,8(sp)
1c00ce16:	e5f52d63          	p.beqimm	a0,-1,1c00c470 <_prf+0x3e>
					c = *++cptr;
1c00ce1a:	0d85                	addi	s11,s11,1
1c00ce1c:	000dc503          	lbu	a0,0(s11)
1c00ce20:	b27d                	j	1c00c7ce <_prf+0x39c>
					PUTC('0');
1c00ce22:	85de                	mv	a1,s7
1c00ce24:	03000513          	li	a0,48
1c00ce28:	c232                	sw	a2,4(sp)
1c00ce2a:	c036                	sw	a3,0(sp)
1c00ce2c:	c43a                	sw	a4,8(sp)
1c00ce2e:	9b02                	jalr	s6
1c00ce30:	4612                	lw	a2,4(sp)
1c00ce32:	4682                	lw	a3,0(sp)
1c00ce34:	4722                	lw	a4,8(sp)
1c00ce36:	167d                	addi	a2,a2,-1
1c00ce38:	9bf532e3          	p.bneimm	a0,-1,1c00c7dc <_prf+0x3aa>
1c00ce3c:	e34ff06f          	j	1c00c470 <_prf+0x3e>
					PUTC('0');
1c00ce40:	85de                	mv	a1,s7
1c00ce42:	03000513          	li	a0,48
1c00ce46:	c036                	sw	a3,0(sp)
1c00ce48:	c43a                	sw	a4,8(sp)
1c00ce4a:	9b02                	jalr	s6
1c00ce4c:	4682                	lw	a3,0(sp)
1c00ce4e:	4722                	lw	a4,8(sp)
1c00ce50:	16fd                	addi	a3,a3,-1
1c00ce52:	9df532e3          	p.bneimm	a0,-1,1c00c816 <_prf+0x3e4>
1c00ce56:	e1aff06f          	j	1c00c470 <_prf+0x3e>
					PUTC(c);
1c00ce5a:	85de                	mv	a1,s7
1c00ce5c:	c232                	sw	a2,4(sp)
1c00ce5e:	c036                	sw	a3,0(sp)
1c00ce60:	c43a                	sw	a4,8(sp)
1c00ce62:	9b02                	jalr	s6
1c00ce64:	4612                	lw	a2,4(sp)
1c00ce66:	4682                	lw	a3,0(sp)
1c00ce68:	4722                	lw	a4,8(sp)
1c00ce6a:	e1f52363          	p.beqimm	a0,-1,1c00c470 <_prf+0x3e>
					c = *++cptr;
1c00ce6e:	0d85                	addi	s11,s11,1
1c00ce70:	000dc503          	lbu	a0,0(s11)
1c00ce74:	ba75                	j	1c00c830 <_prf+0x3fe>
					PUTC('0');
1c00ce76:	85de                	mv	a1,s7
1c00ce78:	03000513          	li	a0,48
1c00ce7c:	c43a                	sw	a4,8(sp)
1c00ce7e:	9b02                	jalr	s6
1c00ce80:	4722                	lw	a4,8(sp)
1c00ce82:	177d                	addi	a4,a4,-1
1c00ce84:	9bf53fe3          	p.bneimm	a0,-1,1c00c842 <_prf+0x410>
1c00ce88:	de8ff06f          	j	1c00c470 <_prf+0x3e>
				PUTC(*cptr++);
1c00ce8c:	0014450b          	p.lbu	a0,1(s0!)
1c00ce90:	85de                	mv	a1,s7
1c00ce92:	9b02                	jalr	s6
1c00ce94:	ddf52e63          	p.beqimm	a0,-1,1c00c470 <_prf+0x3e>
1c00ce98:	408a87b3          	sub	a5,s5,s0
			while (clen-- > 0) {
1c00ce9c:	fef048e3          	bgtz	a5,1c00ce8c <_prf+0xa5a>
			count += prefix;
1c00cea0:	994e                	add	s2,s2,s3
			count += zero_head;
1c00cea2:	012d09b3          	add	s3,s10,s2
			count += clen;
1c00cea6:	99a6                	add	s3,s3,s1
			if (width > 0) {
1c00cea8:	e39052e3          	blez	s9,1c00cccc <_prf+0x89a>
				count += width;
1c00ceac:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00ceae:	1cfd                	addi	s9,s9,-1
1c00ceb0:	e1fcaee3          	p.beqimm	s9,-1,1c00cccc <_prf+0x89a>
					PUTC(' ');
1c00ceb4:	85de                	mv	a1,s7
1c00ceb6:	02000513          	li	a0,32
1c00ceba:	9b02                	jalr	s6
1c00cebc:	fff539e3          	p.bneimm	a0,-1,1c00ceae <_prf+0xa7c>
1c00cec0:	db0ff06f          	j	1c00c470 <_prf+0x3e>
			*buf++ = '.';
1c00cec4:	02e00693          	li	a3,46
1c00cec8:	00d90023          	sb	a3,0(s2)
1c00cecc:	00190713          	addi	a4,s2,1
			zp->predot = decexp;
1c00ced0:	86ea                	mv	a3,s10
			decexp = 0;
1c00ced2:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00ced4:	4a81                	li	s5,0
1c00ced6:	b6f9                	j	1c00caa4 <_prf+0x672>
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00ced8:	ca02                	sw	zero,20(sp)
		exp = precision + 1;
1c00ceda:	00140713          	addi	a4,s0,1
	digit_count = 16;
1c00cede:	46c1                	li	a3,16
1c00cee0:	d636                	sw	a3,44(sp)
1c00cee2:	04d74933          	p.min	s2,a4,a3
1c00cee6:	b691                	j	1c00ca2a <_prf+0x5f8>

1c00cee8 <__rt_uart_cluster_req_done>:
  }

  return __rt_uart_open(channel, conf, event, dev_name);
  
error:
  rt_warning("[UART] Failed to open uart device\n");
1c00cee8:	300476f3          	csrrci	a3,mstatus,8
1c00ceec:	4785                	li	a5,1
1c00ceee:	08f50623          	sb	a5,140(a0)
1c00cef2:	08d54783          	lbu	a5,141(a0)
1c00cef6:	00201737          	lui	a4,0x201
1c00cefa:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00cefe:	04078793          	addi	a5,a5,64
1c00cf02:	07da                	slli	a5,a5,0x16
1c00cf04:	0007e723          	p.sw	zero,a4(a5)
1c00cf08:	30069073          	csrw	mstatus,a3
1c00cf0c:	8082                	ret

1c00cf0e <__rt_uart_setup.isra.5>:
1c00cf0e:	1c00e737          	lui	a4,0x1c00e
1c00cf12:	25c72703          	lw	a4,604(a4) # 1c00e25c <__rt_freq_domains>
1c00cf16:	00155793          	srli	a5,a0,0x1
1c00cf1a:	97ba                	add	a5,a5,a4
1c00cf1c:	02a7d7b3          	divu	a5,a5,a0
1c00cf20:	1a102737          	lui	a4,0x1a102
1c00cf24:	17fd                	addi	a5,a5,-1
1c00cf26:	07c2                	slli	a5,a5,0x10
1c00cf28:	3067e793          	ori	a5,a5,774
1c00cf2c:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00cf30:	8082                	ret

1c00cf32 <__rt_uart_setfreq_after>:
1c00cf32:	1c00e7b7          	lui	a5,0x1c00e
1c00cf36:	1ec78793          	addi	a5,a5,492 # 1c00e1ec <__rt_uart>
1c00cf3a:	4398                	lw	a4,0(a5)
1c00cf3c:	cb11                	beqz	a4,1c00cf50 <__rt_uart_setfreq_after+0x1e>
1c00cf3e:	4788                	lw	a0,8(a5)
1c00cf40:	1141                	addi	sp,sp,-16
1c00cf42:	c606                	sw	ra,12(sp)
1c00cf44:	fcbff0ef          	jal	ra,1c00cf0e <__rt_uart_setup.isra.5>
1c00cf48:	40b2                	lw	ra,12(sp)
1c00cf4a:	4501                	li	a0,0
1c00cf4c:	0141                	addi	sp,sp,16
1c00cf4e:	8082                	ret
1c00cf50:	4501                	li	a0,0
1c00cf52:	8082                	ret

1c00cf54 <__rt_uart_wait_tx_done.isra.6>:
1c00cf54:	1a102737          	lui	a4,0x1a102
1c00cf58:	1141                	addi	sp,sp,-16
1c00cf5a:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021d4>
1c00cf5e:	002046b7          	lui	a3,0x204
1c00cf62:	431c                	lw	a5,0(a4)
1c00cf64:	8bc1                	andi	a5,a5,16
1c00cf66:	e38d                	bnez	a5,1c00cf88 <__rt_uart_wait_tx_done.isra.6+0x34>
1c00cf68:	1a102737          	lui	a4,0x1a102
1c00cf6c:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021dc>
1c00cf70:	431c                	lw	a5,0(a4)
1c00cf72:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00cf76:	ffed                	bnez	a5,1c00cf70 <__rt_uart_wait_tx_done.isra.6+0x1c>
1c00cf78:	c602                	sw	zero,12(sp)
1c00cf7a:	7cf00713          	li	a4,1999
1c00cf7e:	47b2                	lw	a5,12(sp)
1c00cf80:	00f75763          	ble	a5,a4,1c00cf8e <__rt_uart_wait_tx_done.isra.6+0x3a>
1c00cf84:	0141                	addi	sp,sp,16
1c00cf86:	8082                	ret
1c00cf88:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c00cf8c:	bfd9                	j	1c00cf62 <__rt_uart_wait_tx_done.isra.6+0xe>
1c00cf8e:	47b2                	lw	a5,12(sp)
1c00cf90:	0785                	addi	a5,a5,1
1c00cf92:	c63e                	sw	a5,12(sp)
1c00cf94:	b7ed                	j	1c00cf7e <__rt_uart_wait_tx_done.isra.6+0x2a>

1c00cf96 <__rt_uart_setfreq_before>:
1c00cf96:	1c00e7b7          	lui	a5,0x1c00e
1c00cf9a:	1ec7a783          	lw	a5,492(a5) # 1c00e1ec <__rt_uart>
1c00cf9e:	c385                	beqz	a5,1c00cfbe <__rt_uart_setfreq_before+0x28>
1c00cfa0:	1141                	addi	sp,sp,-16
1c00cfa2:	c606                	sw	ra,12(sp)
1c00cfa4:	fb1ff0ef          	jal	ra,1c00cf54 <__rt_uart_wait_tx_done.isra.6>
1c00cfa8:	40b2                	lw	ra,12(sp)
1c00cfaa:	005007b7          	lui	a5,0x500
1c00cfae:	1a102737          	lui	a4,0x1a102
1c00cfb2:	0799                	addi	a5,a5,6
1c00cfb4:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00cfb8:	4501                	li	a0,0
1c00cfba:	0141                	addi	sp,sp,16
1c00cfbc:	8082                	ret
1c00cfbe:	4501                	li	a0,0
1c00cfc0:	8082                	ret

1c00cfc2 <__rt_uart_cluster_req>:
1c00cfc2:	1141                	addi	sp,sp,-16
1c00cfc4:	c606                	sw	ra,12(sp)
1c00cfc6:	c422                	sw	s0,8(sp)
1c00cfc8:	30047473          	csrrci	s0,mstatus,8
1c00cfcc:	1c00d7b7          	lui	a5,0x1c00d
1c00cfd0:	ee878793          	addi	a5,a5,-280 # 1c00cee8 <__rt_uart_cluster_req_done>
1c00cfd4:	c91c                	sw	a5,16(a0)
1c00cfd6:	4785                	li	a5,1
1c00cfd8:	d91c                	sw	a5,48(a0)
1c00cfda:	411c                	lw	a5,0(a0)
1c00cfdc:	02052a23          	sw	zero,52(a0)
1c00cfe0:	c948                	sw	a0,20(a0)
1c00cfe2:	43cc                	lw	a1,4(a5)
1c00cfe4:	4514                	lw	a3,8(a0)
1c00cfe6:	4150                	lw	a2,4(a0)
1c00cfe8:	0586                	slli	a1,a1,0x1
1c00cfea:	00c50793          	addi	a5,a0,12
1c00cfee:	4701                	li	a4,0
1c00cff0:	0585                	addi	a1,a1,1
1c00cff2:	4501                	li	a0,0
1c00cff4:	c14fd0ef          	jal	ra,1c00a408 <rt_periph_copy>
1c00cff8:	30041073          	csrw	mstatus,s0
1c00cffc:	40b2                	lw	ra,12(sp)
1c00cffe:	4422                	lw	s0,8(sp)
1c00d000:	0141                	addi	sp,sp,16
1c00d002:	8082                	ret

1c00d004 <soc_eu_fcEventMask_setEvent>:
1c00d004:	47fd                	li	a5,31
1c00d006:	4721                	li	a4,8
1c00d008:	00a7d463          	ble	a0,a5,1c00d010 <soc_eu_fcEventMask_setEvent+0xc>
1c00d00c:	1501                	addi	a0,a0,-32
1c00d00e:	4711                	li	a4,4
1c00d010:	1a1066b7          	lui	a3,0x1a106
1c00d014:	20e6f603          	p.lw	a2,a4(a3)
1c00d018:	4785                	li	a5,1
1c00d01a:	00a79533          	sll	a0,a5,a0
1c00d01e:	fff54513          	not	a0,a0
1c00d022:	8d71                	and	a0,a0,a2
1c00d024:	00a6e723          	p.sw	a0,a4(a3)
1c00d028:	8082                	ret

1c00d02a <rt_uart_conf_init>:
1c00d02a:	000997b7          	lui	a5,0x99
1c00d02e:	96878793          	addi	a5,a5,-1688 # 98968 <__L2+0x18968>
1c00d032:	c11c                	sw	a5,0(a0)
1c00d034:	57fd                	li	a5,-1
1c00d036:	c15c                	sw	a5,4(a0)
1c00d038:	8082                	ret

1c00d03a <__rt_uart_open>:
1c00d03a:	1141                	addi	sp,sp,-16
1c00d03c:	c606                	sw	ra,12(sp)
1c00d03e:	c422                	sw	s0,8(sp)
1c00d040:	c226                	sw	s1,4(sp)
1c00d042:	c04a                	sw	s2,0(sp)
1c00d044:	30047973          	csrrci	s2,mstatus,8
1c00d048:	cd8d                	beqz	a1,1c00d082 <__rt_uart_open+0x48>
1c00d04a:	4198                	lw	a4,0(a1)
1c00d04c:	1c00e6b7          	lui	a3,0x1c00e
1c00d050:	ffc50793          	addi	a5,a0,-4
1c00d054:	1ec68413          	addi	s0,a3,492 # 1c00e1ec <__rt_uart>
1c00d058:	0792                	slli	a5,a5,0x4
1c00d05a:	943e                	add	s0,s0,a5
1c00d05c:	4010                	lw	a2,0(s0)
1c00d05e:	1ec68693          	addi	a3,a3,492
1c00d062:	c60d                	beqz	a2,1c00d08c <__rt_uart_open+0x52>
1c00d064:	c589                	beqz	a1,1c00d06e <__rt_uart_open+0x34>
1c00d066:	418c                	lw	a1,0(a1)
1c00d068:	4418                	lw	a4,8(s0)
1c00d06a:	04e59d63          	bne	a1,a4,1c00d0c4 <__rt_uart_open+0x8a>
1c00d06e:	0605                	addi	a2,a2,1
1c00d070:	00c6e7a3          	p.sw	a2,a5(a3)
1c00d074:	8522                	mv	a0,s0
1c00d076:	40b2                	lw	ra,12(sp)
1c00d078:	4422                	lw	s0,8(sp)
1c00d07a:	4492                	lw	s1,4(sp)
1c00d07c:	4902                	lw	s2,0(sp)
1c00d07e:	0141                	addi	sp,sp,16
1c00d080:	8082                	ret
1c00d082:	00099737          	lui	a4,0x99
1c00d086:	96870713          	addi	a4,a4,-1688 # 98968 <__L2+0x18968>
1c00d08a:	b7c9                	j	1c00d04c <__rt_uart_open+0x12>
1c00d08c:	c418                	sw	a4,8(s0)
1c00d08e:	4785                	li	a5,1
1c00d090:	1a102737          	lui	a4,0x1a102
1c00d094:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00d098:	c01c                	sw	a5,0(s0)
1c00d09a:	c048                	sw	a0,4(s0)
1c00d09c:	4314                	lw	a3,0(a4)
1c00d09e:	00a797b3          	sll	a5,a5,a0
1c00d0a2:	00151493          	slli	s1,a0,0x1
1c00d0a6:	8fd5                	or	a5,a5,a3
1c00d0a8:	c31c                	sw	a5,0(a4)
1c00d0aa:	8526                	mv	a0,s1
1c00d0ac:	f59ff0ef          	jal	ra,1c00d004 <soc_eu_fcEventMask_setEvent>
1c00d0b0:	00148513          	addi	a0,s1,1
1c00d0b4:	f51ff0ef          	jal	ra,1c00d004 <soc_eu_fcEventMask_setEvent>
1c00d0b8:	4408                	lw	a0,8(s0)
1c00d0ba:	e55ff0ef          	jal	ra,1c00cf0e <__rt_uart_setup.isra.5>
1c00d0be:	30091073          	csrw	mstatus,s2
1c00d0c2:	bf4d                	j	1c00d074 <__rt_uart_open+0x3a>
1c00d0c4:	4401                	li	s0,0
1c00d0c6:	b77d                	j	1c00d074 <__rt_uart_open+0x3a>

1c00d0c8 <rt_uart_close>:
}



void rt_uart_close(rt_uart_t *uart, rt_event_t *event)
{
1c00d0c8:	1141                	addi	sp,sp,-16
1c00d0ca:	c606                	sw	ra,12(sp)
1c00d0cc:	c422                	sw	s0,8(sp)
1c00d0ce:	c226                	sw	s1,4(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00d0d0:	300474f3          	csrrci	s1,mstatus,8
  int irq = rt_irq_disable();

  rt_trace(RT_TRACE_DEV_CTRL, "[UART] Closing uart device (handle: %p)\n", uart);

  uart->open_count--;
1c00d0d4:	411c                	lw	a5,0(a0)
1c00d0d6:	17fd                	addi	a5,a5,-1
1c00d0d8:	c11c                	sw	a5,0(a0)

  if (uart->open_count == 0)
1c00d0da:	e79d                	bnez	a5,1c00d108 <rt_uart_close+0x40>
1c00d0dc:	842a                	mv	s0,a0
  {
      // First wait for pending transfers to finish before stoppping uart in case
      // some printf are still pending
      __rt_uart_wait_tx_done(uart);
1c00d0de:	e77ff0ef          	jal	ra,1c00cf54 <__rt_uart_wait_tx_done.isra.6>

  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, val);
}

static inline void plp_uart_disable(int channel) {
  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, 0x00500006);
1c00d0e2:	1a102737          	lui	a4,0x1a102
1c00d0e6:	005007b7          	lui	a5,0x500
1c00d0ea:	22470693          	addi	a3,a4,548 # 1a102224 <__l1_end+0xa1021e0>
1c00d0ee:	0799                	addi	a5,a5,6
1c00d0f0:	c29c                	sw	a5,0(a3)
      // Set enable bits for uart channel back to 0 
      // This is needed to be able to propagate new configs when re-opening
      plp_uart_disable(uart->channel - ARCHI_UDMA_UART_ID(0));      

      // Then stop the uart
      plp_udma_cg_set(plp_udma_cg_get() & ~(1<<uart->channel));
1c00d0f2:	4050                	lw	a2,4(s0)
  return pulp_read32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET);
1c00d0f4:	78070713          	addi	a4,a4,1920
1c00d0f8:	4314                	lw	a3,0(a4)
1c00d0fa:	4785                	li	a5,1
1c00d0fc:	00c797b3          	sll	a5,a5,a2
1c00d100:	fff7c793          	not	a5,a5
1c00d104:	8ff5                	and	a5,a5,a3
  pulp_write32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET, value);
1c00d106:	c31c                	sw	a5,0(a4)
  __builtin_pulp_spr_write(reg, val);
1c00d108:	30049073          	csrw	mstatus,s1
  }

  rt_irq_restore(irq);
}
1c00d10c:	40b2                	lw	ra,12(sp)
1c00d10e:	4422                	lw	s0,8(sp)
1c00d110:	4492                	lw	s1,4(sp)
1c00d112:	0141                	addi	sp,sp,16
1c00d114:	8082                	ret

1c00d116 <rt_uart_cluster_write>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00d116:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00d11a:	8795                	srai	a5,a5,0x5
1c00d11c:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_uart_cluster_write(rt_uart_t *handle, void *buffer, size_t size, rt_uart_req_t *req)
{
  req->uart = handle;
  req->buffer = buffer;
  req->size = size;
  req->cid = rt_cluster_id();
1c00d120:	08f686a3          	sb	a5,141(a3)
  event->arg[0] = (uintptr_t)callback;
1c00d124:	1c00d7b7          	lui	a5,0x1c00d
1c00d128:	fc278793          	addi	a5,a5,-62 # 1c00cfc2 <__rt_uart_cluster_req>
1c00d12c:	ca9c                	sw	a5,16(a3)
  event->implem.pending = 1;  
1c00d12e:	4785                	li	a5,1
  req->uart = handle;
1c00d130:	c288                	sw	a0,0(a3)
  req->buffer = buffer;
1c00d132:	c2cc                	sw	a1,4(a3)
  req->size = size;
1c00d134:	c690                	sw	a2,8(a3)
  req->done = 0;
1c00d136:	08068623          	sb	zero,140(a3)
  event->implem.keep = 0;
1c00d13a:	0206aa23          	sw	zero,52(a3)
  event->arg[1] = (uintptr_t)arg;
1c00d13e:	cad4                	sw	a3,20(a3)
  event->implem.pending = 1;  
1c00d140:	da9c                	sw	a5,48(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_uart_cluster_req, (void *)req);
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c00d142:	00c68513          	addi	a0,a3,12
1c00d146:	c7ffd06f          	j	1c00adc4 <__rt_cluster_push_fc_event>

1c00d14a <__rt_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00d14a:	1c00d5b7          	lui	a1,0x1c00d
{
1c00d14e:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00d150:	4601                	li	a2,0
1c00d152:	f9658593          	addi	a1,a1,-106 # 1c00cf96 <__rt_uart_setfreq_before>
1c00d156:	4511                	li	a0,4
{
1c00d158:	c606                	sw	ra,12(sp)
1c00d15a:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00d15c:	887fc0ef          	jal	ra,1c0099e2 <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00d160:	1c00d5b7          	lui	a1,0x1c00d
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00d164:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00d166:	4601                	li	a2,0
1c00d168:	f3258593          	addi	a1,a1,-206 # 1c00cf32 <__rt_uart_setfreq_after>
1c00d16c:	4515                	li	a0,5
1c00d16e:	875fc0ef          	jal	ra,1c0099e2 <__rt_cbsys_add>


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c00d172:	1c00e7b7          	lui	a5,0x1c00e
1c00d176:	1e07a623          	sw	zero,492(a5) # 1c00e1ec <__rt_uart>
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00d17a:	8d41                	or	a0,a0,s0
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c00d17c:	c10d                	beqz	a0,1c00d19e <__rt_uart_init+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00d17e:	01402673          	csrr	a2,uhartid
1c00d182:	1c00e537          	lui	a0,0x1c00e
  return (hart_id >> 5) & 0x3f;
1c00d186:	40565593          	srai	a1,a2,0x5
1c00d18a:	f265b5b3          	p.bclr	a1,a1,25,6
1c00d18e:	f4563633          	p.bclr	a2,a2,26,5
1c00d192:	c0850513          	addi	a0,a0,-1016 # 1c00dc08 <__hyper_pad+0xa4>
1c00d196:	946ff0ef          	jal	ra,1c00c2dc <printf>
1c00d19a:	8c6ff0ef          	jal	ra,1c00c260 <abort>
}
1c00d19e:	40b2                	lw	ra,12(sp)
1c00d1a0:	4422                	lw	s0,8(sp)
1c00d1a2:	0141                	addi	sp,sp,16
1c00d1a4:	8082                	ret
	...

1c00d1a8 <__cluster_text_start>:
  .global __rt_pe_start
__rt_pe_start:

#endif

    csrr    a0, 0xF14
1c00d1a8:	f1402573          	csrr	a0,mhartid
    andi    a1, a0, 0x1f
1c00d1ac:	01f57593          	andi	a1,a0,31
    srli    a0, a0, 5
1c00d1b0:	8115                	srli	a0,a0,0x5
    
    // Activate a few events
    li      t0, (1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT)
1c00d1b2:	000702b7          	lui	t0,0x70
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00d1b6:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK(t1)
1c00d1ba:	00532023          	sw	t0,0(t1) # 204000 <__L2+0x184000>

#ifndef ARCHI_NO_L1_TINY
    sw      x0, %tiny(__rt_dma_first_pending)(x0)
1c00d1be:	00002a23          	sw	zero,20(zero) # 14 <__rt_bridge_eeprom_handle>

#ifdef ARCHI_HAS_CC
    li      t2, ARCHI_CC_CORE_ID
    bne     a1, t2, __rt_slave_start
#else
    bne     a1, x0, __rt_slave_start
1c00d1c2:	10059063          	bnez	a1,1c00d2c2 <__rt_slave_start>
#endif

    li      t0, (1<<ARCHI_CL_EVT_DMA1)
1c00d1c6:	20000293          	li	t0,512
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00d1ca:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK_IRQ_OR(t1)
1c00d1ce:	00532a23          	sw	t0,20(t1) # 204014 <__L2+0x184014>



    // Prepare few values that will be kept in saved registers to optimize the loop
    la      s0, __rt_cluster_pool
1c00d1d2:	e3ff3417          	auipc	s0,0xe3ff3
1c00d1d6:	e3240413          	addi	s0,s0,-462 # 4 <__rt_bridge_flash_handle>
    li      s3, ARCHI_EU_DEMUX_ADDR
1c00d1da:	002049b7          	lui	s3,0x204
    li      s4, 1<<RT_CLUSTER_CALL_EVT
1c00d1de:	4a09                	li	s4,2
    la      s5, __rt_master_event
1c00d1e0:	00000a97          	auipc	s5,0x0
1c00d1e4:	038a8a93          	addi	s5,s5,56 # 1c00d218 <__rt_master_event>
    la      s7, __rt_fc_cluster_data
1c00d1e8:	00001b97          	auipc	s7,0x1
1c00d1ec:	084b8b93          	addi	s7,s7,132 # 1c00e26c <__rt_fc_cluster_data>
    li      t2, RT_FC_CLUSTER_DATA_T_SIZEOF
1c00d1f0:	02800393          	li	t2,40
    mul     t2, t2, a0
1c00d1f4:	02a383b3          	mul	t2,t2,a0
    add     s7, s7, t2
1c00d1f8:	9b9e                	add	s7,s7,t2
    addi    s7, s7, RT_FC_CLUSTER_DATA_T_EVENTS
1c00d1fa:	0b91                	addi	s7,s7,4
#if defined(ARCHI_HAS_FC)
#if defined(ITC_VERSION)
    li      s9, ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET
    li      s8, 1<<RT_FC_ENQUEUE_EVENT
#else
    li      s9, ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
1c00d1fc:	1b201cb7          	lui	s9,0x1b201
1c00d200:	e04c8c93          	addi	s9,s9,-508 # 1b200e04 <__fc_tcdm_end+0x1ffa34>
    li      s8, 1
1c00d204:	4c05                	li	s8,1
    // In case there is no FC, the event must be sent to cluster 0 event unit
    li      s9, ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(0) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
    li      s8, 1    
#endif
#ifndef ARCHI_HAS_NO_DISPATCH
    la      s10, __rt_set_slave_stack
1c00d206:	00000d17          	auipc	s10,0x0
1c00d20a:	0fad0d13          	addi	s10,s10,250 # 1c00d300 <__rt_set_slave_stack>
    ori     s10, s10, 1
1c00d20e:	001d6d13          	ori	s10,s10,1
#endif

    csrwi   0x300, 0x8
1c00d212:	30045073          	csrwi	mstatus,8

    j       __rt_master_loop
1c00d216:	a819                	j	1c00d22c <__rt_master_loop>

1c00d218 <__rt_master_event>:



__rt_master_event:
    beq     s6, x0, __rt_master_loop
1c00d218:	000b0a63          	beqz	s6,1c00d22c <__rt_master_loop>

1c00d21c <__rt_push_event_to_fc_retry>:

__rt_push_event_to_fc_retry:
    // Now we have to push the termination event to FC side
    // First wait until the slot for posting events is free
    lw      t0, 0(s7)
1c00d21c:	000ba283          	lw	t0,0(s7)
    bne     t0, x0, __rt_push_event_to_fc_wait
1c00d220:	08029a63          	bnez	t0,1c00d2b4 <__rt_push_event_to_fc_wait>

    // Push it
    sw      s6, 0(s7)
1c00d224:	016ba023          	sw	s6,0(s7)

    // And notify the FC side with a HW event in case it is sleeping
    sw      s8, 0(s9)
1c00d228:	018ca023          	sw	s8,0(s9)

1c00d22c <__rt_master_loop>:


__rt_master_loop:
    // Check if a task is ready in the pool
    lw      t3, 0(s0)
1c00d22c:	00042e03          	lw	t3,0(s0)
    // Check if a call is ready, e.g. if nb_pe is not zero
    // otherwise go to sleep
    beq     t3, x0, __rt_master_sleep
1c00d230:	060e0b63          	beqz	t3,1c00d2a6 <__rt_master_sleep>

1c00d234 <__rt_master_loop_update_next>:

__rt_master_loop_update_next:
    lw      t4, RT_CLUSTER_TASK_NEXT(t3)
1c00d234:	020e2e83          	lw	t4,32(t3)
    sw      x0, RT_CLUSTER_TASK_PENDING(t3)
1c00d238:	020e2223          	sw	zero,36(t3)
    sw      t4, 0(s0)
1c00d23c:	01d42023          	sw	t4,0(s0)

    // Check again next pointer in case it was updated by the FC.
    // If so, do it it again as this will ensure that either we see the new
    // value or the FC sees our write
    lw      t5, RT_CLUSTER_TASK_NEXT(t3)
1c00d240:	020e2f03          	lw	t5,32(t3)
    bne     t4, t5, __rt_master_loop_update_next
1c00d244:	ffee98e3          	bne	t4,t5,1c00d234 <__rt_master_loop_update_next>
    li      a4, 0
    ebreak
#endif

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00d248:	7d005073          	csrwi	0x7d0,0
#endif

    // Reads entry point information
    lw      a0, RT_CLUSTER_TASK_ARG(t3)
1c00d24c:	004e2503          	lw	a0,4(t3)
    lw      t0, RT_CLUSTER_TASK_ENTRY(t3)
1c00d250:	000e2283          	lw	t0,0(t3)
    lw      sp, RT_CLUSTER_TASK_STACKS(t3)
1c00d254:	008e2103          	lw	sp,8(t3)
    lw      t1, RT_CLUSTER_TASK_STACK_SIZE(t3)
1c00d258:	00ce2303          	lw	t1,12(t3)
    lw      t2, RT_CLUSTER_TASK_SLAVE_STACK_SIZE(t3)
1c00d25c:	010e2383          	lw	t2,16(t3)
    lw      t5, RT_CLUSTER_TASK_CORE_MASK(t3)
1c00d260:	028e2f03          	lw	t5,40(t3)
    lw      s6, RT_CLUSTER_TASK_COMPLETION_CALLBACK(t3)
1c00d264:	018e2b03          	lw	s6,24(t3)
    lw      t6, RT_CLUSTER_TASK_NB_CORES(t3)
1c00d268:	014e2f83          	lw	t6,20(t3)
    mv      ra, s5
1c00d26c:	80d6                	mv	ra,s5

    add     sp, sp, t1
1c00d26e:	911a                	add	sp,sp,t1

#ifdef ARCHI_NO_L1_TINY
    la      t4, __rt_cluster_nb_active_pe
    sw      t6, 0(t4)
#else
    sw      t6, %tiny(__rt_cluster_nb_active_pe)(x0)
1c00d270:	01f02c23          	sw	t6,24(zero) # 18 <__rt_first_free>
#endif

#ifdef __RT_USE_ASSERT
    // Update stack checking information
    beqz    t1, __rt_no_stack_check
1c00d274:	00030a63          	beqz	t1,1c00d288 <__rt_no_stack_check>
    sub     t4, sp, t1
1c00d278:	40610eb3          	sub	t4,sp,t1
    csrw    0x7D1, t4
1c00d27c:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00d280:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00d284:	7d00d073          	csrwi	0x7d0,1

1c00d288 <__rt_no_stack_check>:
#endif

__rt_no_stack_check:
    // Whatever the number of cores, we need to setup the barrier as the master code is compiled to use it
    sw      t5, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG(s3)
1c00d288:	09e9a223          	sw	t5,132(s3) # 204084 <__L2+0x184084>
#ifdef ARCHI_HAS_CC
    // When we have a cluster controller, don't configure the slave barrier
    // if we don't have have any slave
    beqz    t5, __rt_master_no_slave_barrier
#endif
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_MASK(s3)
1c00d28c:	21e9a023          	sw	t5,512(s3)
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK(s3)
1c00d290:	21e9a623          	sw	t5,524(s3)

1c00d294 <__rt_master_no_slave_barrier>:
    sw      t6, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK + EU_BARRIER_SIZE(s3)
#endif

    // Set stack on slaves
    // For that we push first the function for setting stack, then the stack size and the base
    p.beqimm t5, 0, __rt_master_loop_no_slave
1c00d294:	000f2863          	p.beqimm	t5,0,1c00d2a4 <__rt_master_loop_no_slave>
    sw      s10, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00d298:	09a9a023          	sw	s10,128(s3)
    sw      t2, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00d29c:	0879a023          	sw	t2,128(s3)
    sw      sp, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00d2a0:	0829a023          	sw	sp,128(s3)

1c00d2a4 <__rt_master_loop_no_slave>:

__rt_master_loop_no_slave:

    // Call the entry point, this will directly come back to the master loop
    jr      t0
1c00d2a4:	8282                	jr	t0

1c00d2a6 <__rt_master_sleep>:
    lw      a1, %tiny(__rt_pe_trace)(x0)
    li      a2, 1
    ebreak
#endif

    sw      s4, EU_CORE_MASK_OR(s3)
1c00d2a6:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00d2aa:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00d2ae:	0149a223          	sw	s4,4(s3)
    j       __rt_master_loop
1c00d2b2:	bfad                	j	1c00d22c <__rt_master_loop>

1c00d2b4 <__rt_push_event_to_fc_wait>:




__rt_push_event_to_fc_wait:
    sw      s4, EU_CORE_MASK_OR(s3)
1c00d2b4:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00d2b8:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00d2bc:	0149a223          	sw	s4,4(s3)
    j       __rt_push_event_to_fc_retry
1c00d2c0:	bfb1                	j	1c00d21c <__rt_push_event_to_fc_retry>

1c00d2c2 <__rt_slave_start>:
__rt_slave_start:


#ifndef ARCHI_HAS_NO_DISPATCH

    li      s2, ARCHI_EU_DEMUX_ADDR
1c00d2c2:	00204937          	lui	s2,0x204
    csrr    s3, 0xF14
1c00d2c6:	f14029f3          	csrr	s3,mhartid
    and     s3, s3, 0x1f
1c00d2ca:	01f9f993          	andi	s3,s3,31
    la      s4, __rt_fork_return
1c00d2ce:	00000a17          	auipc	s4,0x0
1c00d2d2:	012a0a13          	addi	s4,s4,18 # 1c00d2e0 <__rt_fork_return>
    la      s5, __rt_wait_for_dispatch
1c00d2d6:	00000a97          	auipc	s5,0x0
1c00d2da:	00ea8a93          	addi	s5,s5,14 # 1c00d2e4 <__rt_wait_for_dispatch>
    j       __rt_wait_for_dispatch
1c00d2de:	a019                	j	1c00d2e4 <__rt_wait_for_dispatch>

1c00d2e0 <__rt_fork_return>:
    // When the cluster has a controller barrier 0 is used for normal team barrier
    // and barrier 1 is used for end of offload
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR + EU_BARRIER_SIZE(s2)
#else
#ifndef ARCHI_HAS_NO_BARRIER
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR(s2)
1c00d2e0:	21c96283          	p.elw	t0,540(s2) # 20421c <__L2+0x18421c>

1c00d2e4 <__rt_wait_for_dispatch>:
    li      a2, 1
    ebreak
#endif

    // Wait for PC + arg information from dispatcher
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00d2e4:	08096283          	p.elw	t0,128(s2)
    p.elw   a0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00d2e8:	08096503          	p.elw	a0,128(s2)
    ebreak
    mv      a0, t1
#endif

    // Check if this is an entry with a barrier at the end (fork entry)
    andi    t1, t0, 1
1c00d2ec:	0012f313          	andi	t1,t0,1
    bne     t1, zero, __rt_other_entry
1c00d2f0:	00031563          	bnez	t1,1c00d2fa <__rt_other_entry>

1c00d2f4 <__rt_fork_entry>:

__rt_fork_entry:

    // Jump to the handler and prepare r9 to jump back just before the main loop
    add     ra, s4, x0
1c00d2f4:	000a00b3          	add	ra,s4,zero
    jr      t0
1c00d2f8:	8282                	jr	t0

1c00d2fa <__rt_other_entry>:

__rt_other_entry:

  // Jump to the handler and prepare r9 to jump back directly to the main loop
    add     ra, s5, x0
1c00d2fa:	000a80b3          	add	ra,s5,zero
    jr      t0
1c00d2fe:	8282                	jr	t0

1c00d300 <__rt_set_slave_stack>:

  .global __rt_set_slave_stack
__rt_set_slave_stack:

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00d300:	7d005073          	csrwi	0x7d0,0
#endif

    // Multiply the stack size by the core ID and add the stack base to get our stack
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00d304:	08096283          	p.elw	t0,128(s2)
    // If the cluster has a cluster controller, the first slave has core ID 0
    // and thus we need to take the next stack
    addi     t5, s3, 1
    p.mul   t4, t5, a0
#else
    p.mul   t4, s3, a0
1c00d308:	02a98eb3          	mul	t4,s3,a0
#endif
    add     sp, t4, t0
1c00d30c:	005e8133          	add	sp,t4,t0

#ifdef __RT_USE_ASSERT
    beqz    a0, __rt_no_stack_check_end
1c00d310:	c909                	beqz	a0,1c00d322 <__rt_no_stack_check_end>
    sub     t4, sp, a0
1c00d312:	40a10eb3          	sub	t4,sp,a0
    csrw    0x7D1, t4
1c00d316:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00d31a:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00d31e:	7d00d073          	csrwi	0x7d0,1

1c00d322 <__rt_no_stack_check_end>:
#endif
__rt_no_stack_check_end:
    ret
1c00d322:	8082                	ret

1c00d324 <__rt_dma_2d>:
#if defined(ARCHI_HAS_CLUSTER)
#ifndef ARCHI_NO_L1_TINY
    .global __rt_dma_2d
__rt_dma_2d:

    sw  x8, -4(sp)
1c00d324:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c00d328:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00d32c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c00d330:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00d334:	fec12623          	sw	a2,-20(sp)

    li  a2, ARCHI_MCHAN_DEMUX_ADDR
1c00d338:	00204637          	lui	a2,0x204
1c00d33c:	40060613          	addi	a2,a2,1024 # 204400 <__L2+0x184400>

    lw  x8, %tiny(__rt_dma_first_pending)(x0)
1c00d340:	01402403          	lw	s0,20(zero) # 14 <__rt_bridge_eeprom_handle>

    lw  a1, CL_DMA_CMD_T_ID(x8)
1c00d344:	400c                	lw	a1,0(s0)
    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00d346:	4408                	lw	a0,8(s0)
    p.bsetr a1, x0, a1
1c00d348:	80b045b3          	p.bsetr	a1,zero,a1
    sw  a1, MCHAN_STATUS_OFFSET(a2)
1c00d34c:	c24c                	sw	a1,4(a2)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00d34e:	480c                	lw	a1,16(s0)

    beqz a0, __rt_dma_2d_done
1c00d350:	c131                	beqz	a0,1c00d394 <__rt_dma_2d_done>

1c00d352 <__rt_dma_2d_redo>:

__rt_dma_2d_redo:
    lw  x9, CL_DMA_CMD_T_CMD(x8)
1c00d352:	4044                	lw	s1,4(s0)
    
    bgt a0, a1, __rt_dma_2d_not_last
1c00d354:	00a5c363          	blt	a1,a0,1c00d35a <__rt_dma_2d_not_last>
    mv  a1, a0
1c00d358:	85aa                	mv	a1,a0

1c00d35a <__rt_dma_2d_not_last>:

__rt_dma_2d_not_last:
    lw  a0, MCHAN_CMD_OFFSET(a2)
1c00d35a:	4208                	lw	a0,0(a2)
    sw  a0, CL_DMA_CMD_T_ID(x8)
1c00d35c:	c008                	sw	a0,0(s0)

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00d35e:	4408                	lw	a0,8(s0)

    p.inserti x9, a1, MCHAN_CMD_CMD_LEN_WIDTH-1, MCHAN_CMD_CMD_LEN_BIT
1c00d360:	de05a4b3          	p.insert	s1,a1,15,0

    sw  x9, MCHAN_CMD_OFFSET(a2)   // cmd
1c00d364:	c204                	sw	s1,0(a2)

    sub a0, a0, a1
1c00d366:	8d0d                	sub	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00d368:	c408                	sw	a0,8(s0)

    lw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00d36a:	4848                	lw	a0,20(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // local address
1c00d36c:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00d36e:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00d370:	c848                	sw	a0,20(s0)


    lw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00d372:	4c08                	lw	a0,24(s0)
    lw  a1, CL_DMA_CMD_T_STRIDE(x8)
1c00d374:	444c                	lw	a1,12(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // external address
1c00d376:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00d378:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00d37a:	cc08                	sw	a0,24(s0)

1c00d37c <__rt_dma_2d_exit>:

__rt_dma_2d_exit:
    lw  x8, -4(sp)
1c00d37c:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c00d380:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c00d384:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c00d388:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00d38c:	fec12603          	lw	a2,-20(sp)

    mret
1c00d390:	30200073          	mret

1c00d394 <__rt_dma_2d_done>:

__rt_dma_2d_done:
    sw  x0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00d394:	00042c23          	sw	zero,24(s0)

    lw  x9, CL_DMA_CMD_T_NEXT(x8)
1c00d398:	4c44                	lw	s1,28(s0)
    sw  x9, %tiny(__rt_dma_first_pending)(x0)
1c00d39a:	00902a23          	sw	s1,20(zero) # 14 <__rt_bridge_eeprom_handle>

    li  x8, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + (RT_DMA_EVENT<<2)
1c00d39e:	00204437          	lui	s0,0x204
1c00d3a2:	11440413          	addi	s0,s0,276 # 204114 <__L2+0x184114>
    sw  x0, EU_CORE_TRIGG_SW_EVENT(x8)
1c00d3a6:	00042023          	sw	zero,0(s0)

    beqz x9, __rt_dma_2d_exit
1c00d3aa:	d8e9                	beqz	s1,1c00d37c <__rt_dma_2d_exit>

    mv  x8, x9
1c00d3ac:	8426                	mv	s0,s1

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00d3ae:	4408                	lw	a0,8(s0)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00d3b0:	480c                	lw	a1,16(s0)

    j   __rt_dma_2d_redo
1c00d3b2:	b745                	j	1c00d352 <__rt_dma_2d_redo>
